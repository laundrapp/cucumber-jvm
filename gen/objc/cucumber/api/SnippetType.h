//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/api/SnippetType.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CucumberApiSnippetType")
#ifdef RESTRICT_CucumberApiSnippetType
#define INCLUDE_ALL_CucumberApiSnippetType 0
#else
#define INCLUDE_ALL_CucumberApiSnippetType 1
#endif
#undef RESTRICT_CucumberApiSnippetType

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (CCBSnippetType_) && (INCLUDE_ALL_CucumberApiSnippetType || defined(INCLUDE_CCBSnippetType))
#define CCBSnippetType_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class CCBRFunctionNameGenerator;
@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, CCBSnippetType_Enum) {
  CCBSnippetType_Enum_UNDERSCORE = 0,
  CCBSnippetType_Enum_CAMELCASE = 1,
};

@interface CCBSnippetType : JavaLangEnum

#pragma mark Public

+ (CCBSnippetType *)fromStringWithNSString:(NSString *)name;

- (CCBRFunctionNameGenerator *)getFunctionNameGenerator;

+ (CCBSnippetType *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

@end

J2OBJC_STATIC_INIT(CCBSnippetType)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT CCBSnippetType *CCBSnippetType_values_[];

inline CCBSnippetType *CCBSnippetType_get_UNDERSCORE(void);
J2OBJC_ENUM_CONSTANT(CCBSnippetType, UNDERSCORE)

inline CCBSnippetType *CCBSnippetType_get_CAMELCASE(void);
J2OBJC_ENUM_CONSTANT(CCBSnippetType, CAMELCASE)

FOUNDATION_EXPORT CCBSnippetType *CCBSnippetType_fromStringWithNSString_(NSString *name);

FOUNDATION_EXPORT IOSObjectArray *CCBSnippetType_values(void);

FOUNDATION_EXPORT CCBSnippetType *CCBSnippetType_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT CCBSnippetType *CCBSnippetType_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(CCBSnippetType)

@compatibility_alias CucumberApiSnippetType CCBSnippetType;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_CucumberApiSnippetType")
