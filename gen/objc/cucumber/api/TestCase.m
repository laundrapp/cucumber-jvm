//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/api/TestCase.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/api/Result.h"
#include "cucumber/api/TestCase.h"
#include "cucumber/api/TestStep.h"
#include "cucumber/api/event/TestCaseFinished.h"
#include "cucumber/api/event/TestCaseStarted.h"
#include "cucumber/runner/EventBus.h"
#include "cucumber/runtime/ScenarioImpl.h"
#include "gherkin/events/PickleEvent.h"
#include "gherkin/pickles/Pickle.h"
#include "gherkin/pickles/PickleLocation.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/List.h"

@interface CCBTestCase () {
 @public
  GherkinEventsPickleEvent *pickleEvent_;
  id<JavaUtilList> testSteps_;
  jboolean dryRun_;
}

- (NSString *)fileColonLineWithGherkinPicklesPickleLocation:(GherkinPicklesPickleLocation *)location;

@end

J2OBJC_FIELD_SETTER(CCBTestCase, pickleEvent_, GherkinEventsPickleEvent *)
J2OBJC_FIELD_SETTER(CCBTestCase, testSteps_, id<JavaUtilList>)

__attribute__((unused)) static NSString *CCBTestCase_fileColonLineWithGherkinPicklesPickleLocation_(CCBTestCase *self, GherkinPicklesPickleLocation *location);

__attribute__((unused)) static IOSObjectArray *CCBTestCase__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *CCBTestCase__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *CCBTestCase__Annotations$2(void);

@implementation CCBTestCase

- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)testSteps
                  withGherkinEventsPickleEvent:(GherkinEventsPickleEvent *)pickleEvent {
  CCBTestCase_initWithJavaUtilList_withGherkinEventsPickleEvent_(self, testSteps, pickleEvent);
  return self;
}

- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)testSteps
                  withGherkinEventsPickleEvent:(GherkinEventsPickleEvent *)pickleEvent
                                   withBoolean:(jboolean)dryRun {
  CCBTestCase_initWithJavaUtilList_withGherkinEventsPickleEvent_withBoolean_(self, testSteps, pickleEvent, dryRun);
  return self;
}

- (void)runWithCucumberRunnerEventBus:(CucumberRunnerEventBus *)bus {
  jboolean skipNextStep = self->dryRun_;
  JavaLangLong *startTime = [((CucumberRunnerEventBus *) nil_chk(bus)) getTime];
  [bus sendWithCCBEvent:create_CCBTestCaseStarted_initWithJavaLangLong_withCCBTestCase_(startTime, self)];
  CCBRScenarioImpl *scenarioResult = create_CCBRScenarioImpl_initWithCucumberRunnerEventBus_withGherkinEventsPickleEvent_(bus, pickleEvent_);
  for (CCBTestStep * __strong step in nil_chk(testSteps_)) {
    CCBResult *stepResult = [((CCBTestStep *) nil_chk(step)) runWithCucumberRunnerEventBus:bus withNSString:[((GherkinPicklesPickle *) nil_chk(((GherkinEventsPickleEvent *) nil_chk(pickleEvent_))->pickle_)) getLanguage] withCCBScenario:scenarioResult withBoolean:skipNextStep];
    if (![((CCBResult *) nil_chk(stepResult)) isWithCCBResult_Type:JreLoadEnum(CCBResult_Type, PASSED)]) {
      skipNextStep = true;
    }
    [scenarioResult addWithCCBResult:stepResult];
  }
  JavaLangLong *stopTime = [bus getTime];
  [bus sendWithCCBEvent:create_CCBTestCaseFinished_initWithJavaLangLong_withCCBTestCase_withCCBResult_(stopTime, self, create_CCBResult_initWithCCBResult_Type_withJavaLangLong_withJavaLangThrowable_([scenarioResult getStatus], JavaLangLong_valueOfWithLong_([((JavaLangLong *) nil_chk(stopTime)) longLongValue] - [((JavaLangLong *) nil_chk(startTime)) longLongValue]), [scenarioResult getError]))];
}

- (id<JavaUtilList>)getTestSteps {
  return testSteps_;
}

- (NSString *)getName {
  return [((GherkinPicklesPickle *) nil_chk(((GherkinEventsPickleEvent *) nil_chk(pickleEvent_))->pickle_)) getName];
}

- (NSString *)getScenarioDesignation {
  return JreStrcat("$$$", CCBTestCase_fileColonLineWithGherkinPicklesPickleLocation_(self, [((id<JavaUtilList>) nil_chk([((GherkinPicklesPickle *) nil_chk(((GherkinEventsPickleEvent *) nil_chk(pickleEvent_))->pickle_)) getLocations])) getWithInt:0]), @" # ", [self getName]);
}

- (NSString *)getUri {
  return ((GherkinEventsPickleEvent *) nil_chk(pickleEvent_))->uri_;
}

- (jint)getLine {
  return [((GherkinPicklesPickleLocation *) nil_chk([((id<JavaUtilList>) nil_chk([((GherkinPicklesPickle *) nil_chk(((GherkinEventsPickleEvent *) nil_chk(pickleEvent_))->pickle_)) getLocations])) getWithInt:0])) getLine];
}

- (NSString *)fileColonLineWithGherkinPicklesPickleLocation:(GherkinPicklesPickleLocation *)location {
  return CCBTestCase_fileColonLineWithGherkinPicklesPickleLocation_(self, location);
}

- (id<JavaUtilList>)getTags {
  return [((GherkinPicklesPickle *) nil_chk(((GherkinEventsPickleEvent *) nil_chk(pickleEvent_))->pickle_)) getTags];
}

- (void)dealloc {
  RELEASE_(pickleEvent_);
  RELEASE_(testSteps_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, 2, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, 4, 5, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, 8, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 9, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 12, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilList:withGherkinEventsPickleEvent:);
  methods[1].selector = @selector(initWithJavaUtilList:withGherkinEventsPickleEvent:withBoolean:);
  methods[2].selector = @selector(runWithCucumberRunnerEventBus:);
  methods[3].selector = @selector(getTestSteps);
  methods[4].selector = @selector(getName);
  methods[5].selector = @selector(getScenarioDesignation);
  methods[6].selector = @selector(getUri);
  methods[7].selector = @selector(getLine);
  methods[8].selector = @selector(fileColonLineWithGherkinPicklesPickleLocation:);
  methods[9].selector = @selector(getTags);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pickleEvent_", "LGherkinEventsPickleEvent;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "testSteps_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 13, -1 },
    { "dryRun_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;LGherkinEventsPickleEvent;", "(Ljava/util/List<Lcucumber/api/TestStep;>;Lgherkin/events/PickleEvent;)V", (void *)&CCBTestCase__Annotations$0, "LJavaUtilList;LGherkinEventsPickleEvent;Z", "(Ljava/util/List<Lcucumber/api/TestStep;>;Lgherkin/events/PickleEvent;Z)V", (void *)&CCBTestCase__Annotations$1, "run", "LCucumberRunnerEventBus;", (void *)&CCBTestCase__Annotations$2, "()Ljava/util/List<Lcucumber/api/TestStep;>;", "fileColonLine", "LGherkinPicklesPickleLocation;", "()Ljava/util/List<Lgherkin/pickles/PickleTag;>;", "Ljava/util/List<Lcucumber/api/TestStep;>;" };
  static const J2ObjcClassInfo _CCBTestCase = { "TestCase", "cucumber.api", ptrTable, methods, fields, 7, 0x1, 10, 3, -1, -1, -1, -1, -1 };
  return &_CCBTestCase;
}

@end

void CCBTestCase_initWithJavaUtilList_withGherkinEventsPickleEvent_(CCBTestCase *self, id<JavaUtilList> testSteps, GherkinEventsPickleEvent *pickleEvent) {
  CCBTestCase_initWithJavaUtilList_withGherkinEventsPickleEvent_withBoolean_(self, testSteps, pickleEvent, false);
}

CCBTestCase *new_CCBTestCase_initWithJavaUtilList_withGherkinEventsPickleEvent_(id<JavaUtilList> testSteps, GherkinEventsPickleEvent *pickleEvent) {
  J2OBJC_NEW_IMPL(CCBTestCase, initWithJavaUtilList_withGherkinEventsPickleEvent_, testSteps, pickleEvent)
}

CCBTestCase *create_CCBTestCase_initWithJavaUtilList_withGherkinEventsPickleEvent_(id<JavaUtilList> testSteps, GherkinEventsPickleEvent *pickleEvent) {
  J2OBJC_CREATE_IMPL(CCBTestCase, initWithJavaUtilList_withGherkinEventsPickleEvent_, testSteps, pickleEvent)
}

void CCBTestCase_initWithJavaUtilList_withGherkinEventsPickleEvent_withBoolean_(CCBTestCase *self, id<JavaUtilList> testSteps, GherkinEventsPickleEvent *pickleEvent, jboolean dryRun) {
  NSObject_init(self);
  JreStrongAssign(&self->testSteps_, testSteps);
  JreStrongAssign(&self->pickleEvent_, pickleEvent);
  self->dryRun_ = dryRun;
}

CCBTestCase *new_CCBTestCase_initWithJavaUtilList_withGherkinEventsPickleEvent_withBoolean_(id<JavaUtilList> testSteps, GherkinEventsPickleEvent *pickleEvent, jboolean dryRun) {
  J2OBJC_NEW_IMPL(CCBTestCase, initWithJavaUtilList_withGherkinEventsPickleEvent_withBoolean_, testSteps, pickleEvent, dryRun)
}

CCBTestCase *create_CCBTestCase_initWithJavaUtilList_withGherkinEventsPickleEvent_withBoolean_(id<JavaUtilList> testSteps, GherkinEventsPickleEvent *pickleEvent, jboolean dryRun) {
  J2OBJC_CREATE_IMPL(CCBTestCase, initWithJavaUtilList_withGherkinEventsPickleEvent_withBoolean_, testSteps, pickleEvent, dryRun)
}

NSString *CCBTestCase_fileColonLineWithGherkinPicklesPickleLocation_(CCBTestCase *self, GherkinPicklesPickleLocation *location) {
  return JreStrcat("$CI", ((GherkinEventsPickleEvent *) nil_chk(self->pickleEvent_))->uri_, ':', [((GherkinPicklesPickleLocation *) nil_chk(location)) getLine]);
}

IOSObjectArray *CCBTestCase__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CCBTestCase__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CCBTestCase__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBTestCase)
