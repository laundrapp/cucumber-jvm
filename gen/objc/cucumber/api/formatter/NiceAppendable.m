//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/laundrapp_org/cucumber-jvm/core/src/main/java/cucumber/api/formatter/NiceAppendable.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "cucumber/api/formatter/NiceAppendable.h"
#include "java/io/Closeable.h"
#include "java/io/Flushable.h"
#include "java/io/IOException.h"
#include "java/lang/Appendable.h"
#include "java/lang/CharSequence.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"

@interface CucumberApiFormatterNiceAppendable () {
 @public
  id<JavaLangAppendable> out_;
}

- (void)tryFlush;

@end

J2OBJC_FIELD_SETTER(CucumberApiFormatterNiceAppendable, out_, id<JavaLangAppendable>)

inline id<JavaLangCharSequence> CucumberApiFormatterNiceAppendable_get_NL(void);
static id<JavaLangCharSequence> CucumberApiFormatterNiceAppendable_NL = @"\n";
J2OBJC_STATIC_FIELD_OBJ_FINAL(CucumberApiFormatterNiceAppendable, NL, id<JavaLangCharSequence>)

__attribute__((unused)) static void CucumberApiFormatterNiceAppendable_tryFlush(CucumberApiFormatterNiceAppendable *self);

@implementation CucumberApiFormatterNiceAppendable

- (instancetype)initWithJavaLangAppendable:(id<JavaLangAppendable>)outArg {
  CucumberApiFormatterNiceAppendable_initWithJavaLangAppendable_(self, outArg);
  return self;
}

- (CucumberApiFormatterNiceAppendable *)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq {
  @try {
    [((id<JavaLangAppendable>) nil_chk(out_)) appendWithJavaLangCharSequence:csq];
    CucumberApiFormatterNiceAppendable_tryFlush(self);
    return self;
  }
  @catch (JavaIoIOException *e) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
}

- (CucumberApiFormatterNiceAppendable *)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq
                                                               withInt:(jint)start
                                                               withInt:(jint)end {
  @try {
    [((id<JavaLangAppendable>) nil_chk(out_)) appendWithJavaLangCharSequence:csq withInt:start withInt:end];
    CucumberApiFormatterNiceAppendable_tryFlush(self);
    return self;
  }
  @catch (JavaIoIOException *e) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
}

- (CucumberApiFormatterNiceAppendable *)appendWithChar:(jchar)c {
  @try {
    [((id<JavaLangAppendable>) nil_chk(out_)) appendWithChar:c];
    CucumberApiFormatterNiceAppendable_tryFlush(self);
    return self;
  }
  @catch (JavaIoIOException *e) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
}

- (CucumberApiFormatterNiceAppendable *)println {
  return [self appendWithJavaLangCharSequence:CucumberApiFormatterNiceAppendable_NL];
}

- (CucumberApiFormatterNiceAppendable *)printlnWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq {
  @try {
    JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_init();
    [buffer appendWithJavaLangCharSequence:csq];
    [buffer appendWithJavaLangCharSequence:CucumberApiFormatterNiceAppendable_NL];
    [((id<JavaLangAppendable>) nil_chk(out_)) appendWithJavaLangCharSequence:[buffer description]];
    CucumberApiFormatterNiceAppendable_tryFlush(self);
    return self;
  }
  @catch (JavaIoIOException *e) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
}

- (void)close {
  @try {
    CucumberApiFormatterNiceAppendable_tryFlush(self);
    if ([JavaIoCloseable_class_() isInstance:out_]) {
      [((id<JavaIoCloseable>) nil_chk(((id<JavaIoCloseable>) cast_check(out_, JavaIoCloseable_class_())))) close];
    }
  }
  @catch (JavaIoIOException *e) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
}

- (void)tryFlush {
  CucumberApiFormatterNiceAppendable_tryFlush(self);
}

- (void)dealloc {
  RELEASE_(out_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LCucumberApiFormatterNiceAppendable;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LCucumberApiFormatterNiceAppendable;", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "LCucumberApiFormatterNiceAppendable;", 0x1, 1, 4, -1, -1, -1, -1 },
    { NULL, "LCucumberApiFormatterNiceAppendable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LCucumberApiFormatterNiceAppendable;", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangAppendable:);
  methods[1].selector = @selector(appendWithJavaLangCharSequence:);
  methods[2].selector = @selector(appendWithJavaLangCharSequence:withInt:withInt:);
  methods[3].selector = @selector(appendWithChar:);
  methods[4].selector = @selector(println);
  methods[5].selector = @selector(printlnWithJavaLangCharSequence:);
  methods[6].selector = @selector(close);
  methods[7].selector = @selector(tryFlush);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NL", "LJavaLangCharSequence;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "out_", "LJavaLangAppendable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangAppendable;", "append", "LJavaLangCharSequence;", "LJavaLangCharSequence;II", "C", "println", &CucumberApiFormatterNiceAppendable_NL };
  static const J2ObjcClassInfo _CucumberApiFormatterNiceAppendable = { "NiceAppendable", "cucumber.api.formatter", ptrTable, methods, fields, 7, 0x1, 8, 2, -1, -1, -1, -1, -1 };
  return &_CucumberApiFormatterNiceAppendable;
}

@end

void CucumberApiFormatterNiceAppendable_initWithJavaLangAppendable_(CucumberApiFormatterNiceAppendable *self, id<JavaLangAppendable> outArg) {
  NSObject_init(self);
  JreStrongAssign(&self->out_, outArg);
}

CucumberApiFormatterNiceAppendable *new_CucumberApiFormatterNiceAppendable_initWithJavaLangAppendable_(id<JavaLangAppendable> outArg) {
  J2OBJC_NEW_IMPL(CucumberApiFormatterNiceAppendable, initWithJavaLangAppendable_, outArg)
}

CucumberApiFormatterNiceAppendable *create_CucumberApiFormatterNiceAppendable_initWithJavaLangAppendable_(id<JavaLangAppendable> outArg) {
  J2OBJC_CREATE_IMPL(CucumberApiFormatterNiceAppendable, initWithJavaLangAppendable_, outArg)
}

void CucumberApiFormatterNiceAppendable_tryFlush(CucumberApiFormatterNiceAppendable *self) {
  if (!([JavaIoFlushable_class_() isInstance:self->out_])) return;
  @try {
    [((id<JavaIoFlushable>) nil_chk(((id<JavaIoFlushable>) cast_check(self->out_, JavaIoFlushable_class_())))) flush];
  }
  @catch (JavaIoIOException *e) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberApiFormatterNiceAppendable)
