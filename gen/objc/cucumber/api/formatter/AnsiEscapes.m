//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/api/formatter/AnsiEscapes.java
//

#include "J2ObjC_source.h"
#include "cucumber/api/formatter/AnsiEscapes.h"
#include "cucumber/api/formatter/NiceAppendable.h"
#include "java/lang/StringBuilder.h"

@interface CCBAnsiEscapes () {
 @public
  NSString *value_;
}

+ (CCBAnsiEscapes *)colorWithInt:(jint)code;

- (instancetype __nonnull)initWithNSString:(NSString *)value;

@end

J2OBJC_FIELD_SETTER(CCBAnsiEscapes, value_, NSString *)

inline jchar CCBAnsiEscapes_get_ESC(void);
#define CCBAnsiEscapes_ESC 0x001b
J2OBJC_STATIC_FIELD_CONSTANT(CCBAnsiEscapes, ESC, jchar)

inline jchar CCBAnsiEscapes_get_BRACKET(void);
#define CCBAnsiEscapes_BRACKET '['
J2OBJC_STATIC_FIELD_CONSTANT(CCBAnsiEscapes, BRACKET, jchar)

__attribute__((unused)) static CCBAnsiEscapes *CCBAnsiEscapes_colorWithInt_(jint code);

__attribute__((unused)) static void CCBAnsiEscapes_initWithNSString_(CCBAnsiEscapes *self, NSString *value);

__attribute__((unused)) static CCBAnsiEscapes *new_CCBAnsiEscapes_initWithNSString_(NSString *value) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBAnsiEscapes *create_CCBAnsiEscapes_initWithNSString_(NSString *value);

J2OBJC_INITIALIZED_DEFN(CCBAnsiEscapes)

CCBAnsiEscapes *CCBAnsiEscapes_RESET;
CCBAnsiEscapes *CCBAnsiEscapes_BLACK;
CCBAnsiEscapes *CCBAnsiEscapes_RED;
CCBAnsiEscapes *CCBAnsiEscapes_GREEN;
CCBAnsiEscapes *CCBAnsiEscapes_YELLOW;
CCBAnsiEscapes *CCBAnsiEscapes_BLUE;
CCBAnsiEscapes *CCBAnsiEscapes_MAGENTA;
CCBAnsiEscapes *CCBAnsiEscapes_CYAN;
CCBAnsiEscapes *CCBAnsiEscapes_WHITE;
CCBAnsiEscapes *CCBAnsiEscapes_DEFAULT;
CCBAnsiEscapes *CCBAnsiEscapes_GREY;
CCBAnsiEscapes *CCBAnsiEscapes_INTENSITY_BOLD;

@implementation CCBAnsiEscapes

+ (CCBAnsiEscapes *)colorWithInt:(jint)code {
  return CCBAnsiEscapes_colorWithInt_(code);
}

+ (CCBAnsiEscapes *)upWithInt:(jint)count {
  return CCBAnsiEscapes_upWithInt_(count);
}

- (instancetype __nonnull)initWithNSString:(NSString *)value {
  CCBAnsiEscapes_initWithNSString_(self, value);
  return self;
}

- (void)appendToWithCCBNiceAppendable:(CCBNiceAppendable *)a {
  [((CCBNiceAppendable *) nil_chk([((CCBNiceAppendable *) nil_chk([((CCBNiceAppendable *) nil_chk(a)) appendWithChar:CCBAnsiEscapes_ESC])) appendWithChar:CCBAnsiEscapes_BRACKET])) appendWithJavaLangCharSequence:value_];
}

- (void)appendToWithJavaLangStringBuilder:(JavaLangStringBuilder *)a {
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(a)) appendWithChar:CCBAnsiEscapes_ESC])) appendWithChar:CCBAnsiEscapes_BRACKET])) appendWithNSString:value_];
}

- (NSString *)description {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  [self appendToWithJavaLangStringBuilder:sb];
  return [sb description];
}

- (void)dealloc {
  RELEASE_(value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LCCBAnsiEscapes;", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "LCCBAnsiEscapes;", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(colorWithInt:);
  methods[1].selector = @selector(upWithInt:);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(appendToWithCCBNiceAppendable:);
  methods[4].selector = @selector(appendToWithJavaLangStringBuilder:);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ESC", "C", .constantValue.asUnichar = CCBAnsiEscapes_ESC, 0x1a, -1, -1, -1, -1 },
    { "BRACKET", "C", .constantValue.asUnichar = CCBAnsiEscapes_BRACKET, 0x1a, -1, -1, -1, -1 },
    { "RESET", "LCCBAnsiEscapes;", .constantValue.asLong = 0, 0x9, -1, 8, -1, -1 },
    { "BLACK", "LCCBAnsiEscapes;", .constantValue.asLong = 0, 0x9, -1, 9, -1, -1 },
    { "RED", "LCCBAnsiEscapes;", .constantValue.asLong = 0, 0x9, -1, 10, -1, -1 },
    { "GREEN", "LCCBAnsiEscapes;", .constantValue.asLong = 0, 0x9, -1, 11, -1, -1 },
    { "YELLOW", "LCCBAnsiEscapes;", .constantValue.asLong = 0, 0x9, -1, 12, -1, -1 },
    { "BLUE", "LCCBAnsiEscapes;", .constantValue.asLong = 0, 0x9, -1, 13, -1, -1 },
    { "MAGENTA", "LCCBAnsiEscapes;", .constantValue.asLong = 0, 0x9, -1, 14, -1, -1 },
    { "CYAN", "LCCBAnsiEscapes;", .constantValue.asLong = 0, 0x9, -1, 15, -1, -1 },
    { "WHITE", "LCCBAnsiEscapes;", .constantValue.asLong = 0, 0x9, -1, 16, -1, -1 },
    { "DEFAULT", "LCCBAnsiEscapes;", .constantValue.asLong = 0, 0x9, -1, 17, -1, -1 },
    { "GREY", "LCCBAnsiEscapes;", .constantValue.asLong = 0, 0x9, -1, 18, -1, -1 },
    { "INTENSITY_BOLD", "LCCBAnsiEscapes;", .constantValue.asLong = 0, 0x9, -1, 19, -1, -1 },
    { "value_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "color", "I", "up", "LNSString;", "appendTo", "LCCBNiceAppendable;", "LJavaLangStringBuilder;", "toString", &CCBAnsiEscapes_RESET, &CCBAnsiEscapes_BLACK, &CCBAnsiEscapes_RED, &CCBAnsiEscapes_GREEN, &CCBAnsiEscapes_YELLOW, &CCBAnsiEscapes_BLUE, &CCBAnsiEscapes_MAGENTA, &CCBAnsiEscapes_CYAN, &CCBAnsiEscapes_WHITE, &CCBAnsiEscapes_DEFAULT, &CCBAnsiEscapes_GREY, &CCBAnsiEscapes_INTENSITY_BOLD };
  static const J2ObjcClassInfo _CCBAnsiEscapes = { "AnsiEscapes", "cucumber.api.formatter", ptrTable, methods, fields, 7, 0x1, 6, 15, -1, -1, -1, -1, -1 };
  return &_CCBAnsiEscapes;
}

+ (void)initialize {
  if (self == [CCBAnsiEscapes class]) {
    JreStrongAssign(&CCBAnsiEscapes_RESET, CCBAnsiEscapes_colorWithInt_(0));
    JreStrongAssign(&CCBAnsiEscapes_BLACK, CCBAnsiEscapes_colorWithInt_(30));
    JreStrongAssign(&CCBAnsiEscapes_RED, CCBAnsiEscapes_colorWithInt_(31));
    JreStrongAssign(&CCBAnsiEscapes_GREEN, CCBAnsiEscapes_colorWithInt_(32));
    JreStrongAssign(&CCBAnsiEscapes_YELLOW, CCBAnsiEscapes_colorWithInt_(33));
    JreStrongAssign(&CCBAnsiEscapes_BLUE, CCBAnsiEscapes_colorWithInt_(34));
    JreStrongAssign(&CCBAnsiEscapes_MAGENTA, CCBAnsiEscapes_colorWithInt_(35));
    JreStrongAssign(&CCBAnsiEscapes_CYAN, CCBAnsiEscapes_colorWithInt_(36));
    JreStrongAssign(&CCBAnsiEscapes_WHITE, CCBAnsiEscapes_colorWithInt_(37));
    JreStrongAssign(&CCBAnsiEscapes_DEFAULT, CCBAnsiEscapes_colorWithInt_(9));
    JreStrongAssign(&CCBAnsiEscapes_GREY, CCBAnsiEscapes_colorWithInt_(90));
    JreStrongAssign(&CCBAnsiEscapes_INTENSITY_BOLD, CCBAnsiEscapes_colorWithInt_(1));
    J2OBJC_SET_INITIALIZED(CCBAnsiEscapes)
  }
}

@end

CCBAnsiEscapes *CCBAnsiEscapes_colorWithInt_(jint code) {
  CCBAnsiEscapes_initialize();
  return create_CCBAnsiEscapes_initWithNSString_(JreStrcat("$C", NSString_java_valueOfInt_(code), 'm'));
}

CCBAnsiEscapes *CCBAnsiEscapes_upWithInt_(jint count) {
  CCBAnsiEscapes_initialize();
  return create_CCBAnsiEscapes_initWithNSString_(JreStrcat("$C", NSString_java_valueOfInt_(count), 'A'));
}

void CCBAnsiEscapes_initWithNSString_(CCBAnsiEscapes *self, NSString *value) {
  NSObject_init(self);
  JreStrongAssign(&self->value_, value);
}

CCBAnsiEscapes *new_CCBAnsiEscapes_initWithNSString_(NSString *value) {
  J2OBJC_NEW_IMPL(CCBAnsiEscapes, initWithNSString_, value)
}

CCBAnsiEscapes *create_CCBAnsiEscapes_initWithNSString_(NSString *value) {
  J2OBJC_CREATE_IMPL(CCBAnsiEscapes, initWithNSString_, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBAnsiEscapes)
