//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/api/Result.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/api/Result.h"
#include "java/io/PrintWriter.h"
#include "java/io/StringWriter.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/Throwable.h"

@interface CCBResult () {
 @public
  CCBResult_Type *status_;
  JavaLangLong *duration_;
  JavaLangThrowable *error_;
}

- (jboolean)hasAlwaysOkStatus;

- (jboolean)hasOkWhenNotStrictStatus;

- (NSString *)getErrorMessageWithJavaLangThrowable:(JavaLangThrowable *)error;

@end

J2OBJC_FIELD_SETTER(CCBResult, status_, CCBResult_Type *)
J2OBJC_FIELD_SETTER(CCBResult, duration_, JavaLangLong *)
J2OBJC_FIELD_SETTER(CCBResult, error_, JavaLangThrowable *)

inline jlong CCBResult_get_serialVersionUID(void);
#define CCBResult_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(CCBResult, serialVersionUID, jlong)

__attribute__((unused)) static jboolean CCBResult_hasAlwaysOkStatus(CCBResult *self);

__attribute__((unused)) static jboolean CCBResult_hasOkWhenNotStrictStatus(CCBResult *self);

__attribute__((unused)) static NSString *CCBResult_getErrorMessageWithJavaLangThrowable_(CCBResult *self, JavaLangThrowable *error);

__attribute__((unused)) static void CCBResult_Type_initWithNSString_withInt_(CCBResult_Type *self, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(CCBResult)

CCBResult *CCBResult_SKIPPED;
CCBResult *CCBResult_UNDEFINED;

@implementation CCBResult

- (instancetype __nonnull)initWithCCBResult_Type:(CCBResult_Type *)status
                                withJavaLangLong:(JavaLangLong *)duration
                           withJavaLangThrowable:(JavaLangThrowable *)error {
  CCBResult_initWithCCBResult_Type_withJavaLangLong_withJavaLangThrowable_(self, status, duration, error);
  return self;
}

- (CCBResult_Type *)getStatus {
  return status_;
}

- (JavaLangLong *)getDuration {
  return duration_;
}

- (NSString *)getErrorMessage {
  return error_ != nil ? CCBResult_getErrorMessageWithJavaLangThrowable_(self, error_) : nil;
}

- (JavaLangThrowable *)getError {
  return error_;
}

- (jboolean)isWithCCBResult_Type:(CCBResult_Type *)status {
  return self->status_ == status;
}

- (jboolean)isOkWithBoolean:(jboolean)isStrict {
  return CCBResult_hasAlwaysOkStatus(self) || (!isStrict && CCBResult_hasOkWhenNotStrictStatus(self));
}

- (jboolean)hasAlwaysOkStatus {
  return CCBResult_hasAlwaysOkStatus(self);
}

- (jboolean)hasOkWhenNotStrictStatus {
  return CCBResult_hasOkWhenNotStrictStatus(self);
}

- (NSString *)getErrorMessageWithJavaLangThrowable:(JavaLangThrowable *)error {
  return CCBResult_getErrorMessageWithJavaLangThrowable_(self, error);
}

- (void)dealloc {
  RELEASE_(status_);
  RELEASE_(duration_);
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LCCBResult_Type;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBResult_Type:withJavaLangLong:withJavaLangThrowable:);
  methods[1].selector = @selector(getStatus);
  methods[2].selector = @selector(getDuration);
  methods[3].selector = @selector(getErrorMessage);
  methods[4].selector = @selector(getError);
  methods[5].selector = @selector(isWithCCBResult_Type:);
  methods[6].selector = @selector(isOkWithBoolean:);
  methods[7].selector = @selector(hasAlwaysOkStatus);
  methods[8].selector = @selector(hasOkWhenNotStrictStatus);
  methods[9].selector = @selector(getErrorMessageWithJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = CCBResult_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "status_", "LCCBResult_Type;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "duration_", "LJavaLangLong;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SKIPPED", "LCCBResult;", .constantValue.asLong = 0, 0x19, -1, 7, -1, -1 },
    { "UNDEFINED", "LCCBResult;", .constantValue.asLong = 0, 0x19, -1, 8, -1, -1 },
  };
  static const void *ptrTable[] = { "LCCBResult_Type;LJavaLangLong;LJavaLangThrowable;", "is", "LCCBResult_Type;", "isOk", "Z", "getErrorMessage", "LJavaLangThrowable;", &CCBResult_SKIPPED, &CCBResult_UNDEFINED };
  static const J2ObjcClassInfo _CCBResult = { "Result", "cucumber.api", ptrTable, methods, fields, 7, 0x1, 10, 6, -1, 2, -1, -1, -1 };
  return &_CCBResult;
}

+ (void)initialize {
  if (self == [CCBResult class]) {
    JreStrongAssignAndConsume(&CCBResult_SKIPPED, new_CCBResult_initWithCCBResult_Type_withJavaLangLong_withJavaLangThrowable_(JreLoadEnum(CCBResult_Type, SKIPPED), nil, nil));
    JreStrongAssignAndConsume(&CCBResult_UNDEFINED, new_CCBResult_initWithCCBResult_Type_withJavaLangLong_withJavaLangThrowable_(JreLoadEnum(CCBResult_Type, UNDEFINED), nil, nil));
    J2OBJC_SET_INITIALIZED(CCBResult)
  }
}

@end

void CCBResult_initWithCCBResult_Type_withJavaLangLong_withJavaLangThrowable_(CCBResult *self, CCBResult_Type *status, JavaLangLong *duration, JavaLangThrowable *error) {
  NSObject_init(self);
  JreStrongAssign(&self->status_, status);
  JreStrongAssign(&self->duration_, duration);
  JreStrongAssign(&self->error_, error);
}

CCBResult *new_CCBResult_initWithCCBResult_Type_withJavaLangLong_withJavaLangThrowable_(CCBResult_Type *status, JavaLangLong *duration, JavaLangThrowable *error) {
  J2OBJC_NEW_IMPL(CCBResult, initWithCCBResult_Type_withJavaLangLong_withJavaLangThrowable_, status, duration, error)
}

CCBResult *create_CCBResult_initWithCCBResult_Type_withJavaLangLong_withJavaLangThrowable_(CCBResult_Type *status, JavaLangLong *duration, JavaLangThrowable *error) {
  J2OBJC_CREATE_IMPL(CCBResult, initWithCCBResult_Type_withJavaLangLong_withJavaLangThrowable_, status, duration, error)
}

jboolean CCBResult_hasAlwaysOkStatus(CCBResult *self) {
  return [self isWithCCBResult_Type:JreLoadEnum(CCBResult_Type, PASSED)] || [self isWithCCBResult_Type:JreLoadEnum(CCBResult_Type, SKIPPED)];
}

jboolean CCBResult_hasOkWhenNotStrictStatus(CCBResult *self) {
  return [self isWithCCBResult_Type:JreLoadEnum(CCBResult_Type, UNDEFINED)] || [self isWithCCBResult_Type:JreLoadEnum(CCBResult_Type, PENDING)];
}

NSString *CCBResult_getErrorMessageWithJavaLangThrowable_(CCBResult *self, JavaLangThrowable *error) {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  JavaIoPrintWriter *printWriter = create_JavaIoPrintWriter_initWithJavaIoWriter_(stringWriter);
  [((JavaLangThrowable *) nil_chk(error)) printStackTraceWithJavaIoPrintWriter:printWriter];
  return [((JavaLangStringBuffer *) nil_chk([stringWriter getBuffer])) description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBResult)

J2OBJC_INITIALIZED_DEFN(CCBResult_Type)

CCBResult_Type *CCBResult_Type_values_[6];

@implementation CCBResult_Type

+ (CCBResult_Type *)fromLowerCaseNameWithNSString:(NSString *)lowerCaseName {
  return CCBResult_Type_fromLowerCaseNameWithNSString_(lowerCaseName);
}

- (NSString *)lowerCaseName {
  return [((NSString *) nil_chk([self name])) lowercaseString];
}

- (NSString *)firstLetterCapitalizedName {
  return JreStrcat("$$", [((NSString *) nil_chk([self name])) java_substring:0 endIndex:1], [((NSString *) nil_chk([((NSString *) nil_chk([self name])) java_substring:1])) lowercaseString]);
}

+ (IOSObjectArray *)values {
  return CCBResult_Type_values();
}

+ (CCBResult_Type *)valueOfWithNSString:(NSString *)name {
  return CCBResult_Type_valueOfWithNSString_(name);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LCCBResult_Type;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LCCBResult_Type;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LCCBResult_Type;", 0x9, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(fromLowerCaseNameWithNSString:);
  methods[1].selector = @selector(lowerCaseName);
  methods[2].selector = @selector(firstLetterCapitalizedName);
  methods[3].selector = @selector(values);
  methods[4].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PASSED", "LCCBResult_Type;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "SKIPPED", "LCCBResult_Type;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "PENDING", "LCCBResult_Type;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "UNDEFINED", "LCCBResult_Type;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "AMBIGUOUS", "LCCBResult_Type;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "FAILED", "LCCBResult_Type;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
  };
  static const void *ptrTable[] = { "fromLowerCaseName", "LNSString;", "valueOf", &JreEnum(CCBResult_Type, PASSED), &JreEnum(CCBResult_Type, SKIPPED), &JreEnum(CCBResult_Type, PENDING), &JreEnum(CCBResult_Type, UNDEFINED), &JreEnum(CCBResult_Type, AMBIGUOUS), &JreEnum(CCBResult_Type, FAILED), "LCCBResult;", "Ljava/lang/Enum<Lcucumber/api/Result$Type;>;" };
  static const J2ObjcClassInfo _CCBResult_Type = { "Type", "cucumber.api", ptrTable, methods, fields, 7, 0x4019, 5, 6, 9, -1, -1, 10, -1 };
  return &_CCBResult_Type;
}

+ (void)initialize {
  if (self == [CCBResult_Type class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 6 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 6; i++) {
      ((void)(CCBResult_Type_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      CCBResult_Type_initWithNSString_withInt_(e, JreEnumConstantName(CCBResult_Type_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(CCBResult_Type)
  }
}

@end

void CCBResult_Type_initWithNSString_withInt_(CCBResult_Type *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

CCBResult_Type *CCBResult_Type_fromLowerCaseNameWithNSString_(NSString *lowerCaseName) {
  CCBResult_Type_initialize();
  return CCBResult_Type_valueOfWithNSString_([((NSString *) nil_chk(lowerCaseName)) uppercaseString]);
}

IOSObjectArray *CCBResult_Type_values() {
  CCBResult_Type_initialize();
  return [IOSObjectArray arrayWithObjects:CCBResult_Type_values_ count:6 type:CCBResult_Type_class_()];
}

CCBResult_Type *CCBResult_Type_valueOfWithNSString_(NSString *name) {
  CCBResult_Type_initialize();
  for (int i = 0; i < 6; i++) {
    CCBResult_Type *e = CCBResult_Type_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

CCBResult_Type *CCBResult_Type_fromOrdinal(NSUInteger ordinal) {
  CCBResult_Type_initialize();
  if (ordinal >= 6) {
    return nil;
  }
  return CCBResult_Type_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBResult_Type)
