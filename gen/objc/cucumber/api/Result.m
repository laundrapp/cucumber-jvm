//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/api/Result.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/api/Result.h"
#include "java/io/PrintWriter.h"
#include "java/io/StringWriter.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/Throwable.h"
#include "java/util/Comparator.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface CucumberApiResult () {
 @public
  CucumberApiResult_Type *status_;
  JavaLangLong *duration_;
  JavaLangThrowable *error_;
}

- (jboolean)hasAlwaysOkStatus;

- (jboolean)hasOkWhenNotStrictStatus;

- (NSString *)getErrorMessageWithJavaLangThrowable:(JavaLangThrowable *)error;

@end

J2OBJC_FIELD_SETTER(CucumberApiResult, status_, CucumberApiResult_Type *)
J2OBJC_FIELD_SETTER(CucumberApiResult, duration_, JavaLangLong *)
J2OBJC_FIELD_SETTER(CucumberApiResult, error_, JavaLangThrowable *)

inline jlong CucumberApiResult_get_serialVersionUID(void);
#define CucumberApiResult_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(CucumberApiResult, serialVersionUID, jlong)

__attribute__((unused)) static jboolean CucumberApiResult_hasAlwaysOkStatus(CucumberApiResult *self);

__attribute__((unused)) static jboolean CucumberApiResult_hasOkWhenNotStrictStatus(CucumberApiResult *self);

__attribute__((unused)) static NSString *CucumberApiResult_getErrorMessageWithJavaLangThrowable_(CucumberApiResult *self, JavaLangThrowable *error);

@interface CucumberApiResult_1 : NSObject < JavaUtilComparator >

- (instancetype __nonnull)init;

- (jint)compareWithId:(CucumberApiResult *)a
               withId:(CucumberApiResult *)b;

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberApiResult_1)

__attribute__((unused)) static void CucumberApiResult_1_init(CucumberApiResult_1 *self);

__attribute__((unused)) static CucumberApiResult_1 *new_CucumberApiResult_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberApiResult_1 *create_CucumberApiResult_1_init(void);

__attribute__((unused)) static void CucumberApiResult_Type_initWithNSString_withInt_(CucumberApiResult_Type *self, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(CucumberApiResult)

id<JavaUtilComparator> CucumberApiResult_SEVERITY;
CucumberApiResult *CucumberApiResult_SKIPPED;
CucumberApiResult *CucumberApiResult_UNDEFINED;

@implementation CucumberApiResult

- (instancetype __nonnull)initWithCucumberApiResult_Type:(CucumberApiResult_Type *)status
                                        withJavaLangLong:(JavaLangLong *)duration
                                   withJavaLangThrowable:(JavaLangThrowable *)error {
  CucumberApiResult_initWithCucumberApiResult_Type_withJavaLangLong_withJavaLangThrowable_(self, status, duration, error);
  return self;
}

- (CucumberApiResult_Type *)getStatus {
  return status_;
}

- (JavaLangLong *)getDuration {
  return duration_;
}

- (NSString *)getErrorMessage {
  return error_ != nil ? CucumberApiResult_getErrorMessageWithJavaLangThrowable_(self, error_) : nil;
}

- (JavaLangThrowable *)getError {
  return error_;
}

- (jboolean)isWithCucumberApiResult_Type:(CucumberApiResult_Type *)status {
  return self->status_ == status;
}

- (jboolean)isOkWithBoolean:(jboolean)isStrict {
  return CucumberApiResult_hasAlwaysOkStatus(self) || (!isStrict && CucumberApiResult_hasOkWhenNotStrictStatus(self));
}

- (jboolean)hasAlwaysOkStatus {
  return CucumberApiResult_hasAlwaysOkStatus(self);
}

- (jboolean)hasOkWhenNotStrictStatus {
  return CucumberApiResult_hasOkWhenNotStrictStatus(self);
}

- (NSString *)getErrorMessageWithJavaLangThrowable:(JavaLangThrowable *)error {
  return CucumberApiResult_getErrorMessageWithJavaLangThrowable_(self, error);
}

- (NSString *)description {
  return JreStrcat("$@$@$@C", @"Result{status=", status_, @", duration=", duration_, @", error=", error_, '}');
}

- (void)dealloc {
  RELEASE_(status_);
  RELEASE_(duration_);
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LCucumberApiResult_Type;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCucumberApiResult_Type:withJavaLangLong:withJavaLangThrowable:);
  methods[1].selector = @selector(getStatus);
  methods[2].selector = @selector(getDuration);
  methods[3].selector = @selector(getErrorMessage);
  methods[4].selector = @selector(getError);
  methods[5].selector = @selector(isWithCucumberApiResult_Type:);
  methods[6].selector = @selector(isOkWithBoolean:);
  methods[7].selector = @selector(hasAlwaysOkStatus);
  methods[8].selector = @selector(hasOkWhenNotStrictStatus);
  methods[9].selector = @selector(getErrorMessageWithJavaLangThrowable:);
  methods[10].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SEVERITY", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x19, -1, 8, 9, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = CucumberApiResult_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "status_", "LCucumberApiResult_Type;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "duration_", "LJavaLangLong;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SKIPPED", "LCucumberApiResult;", .constantValue.asLong = 0, 0x19, -1, 10, -1, -1 },
    { "UNDEFINED", "LCucumberApiResult;", .constantValue.asLong = 0, 0x19, -1, 11, -1, -1 },
  };
  static const void *ptrTable[] = { "LCucumberApiResult_Type;LJavaLangLong;LJavaLangThrowable;", "is", "LCucumberApiResult_Type;", "isOk", "Z", "getErrorMessage", "LJavaLangThrowable;", "toString", &CucumberApiResult_SEVERITY, "Ljava/util/Comparator<Lcucumber/api/Result;>;", &CucumberApiResult_SKIPPED, &CucumberApiResult_UNDEFINED };
  static const J2ObjcClassInfo _CucumberApiResult = { "Result", "cucumber.api", ptrTable, methods, fields, 7, 0x1, 11, 7, -1, 2, -1, -1, -1 };
  return &_CucumberApiResult;
}

+ (void)initialize {
  if (self == [CucumberApiResult class]) {
    JreStrongAssignAndConsume(&CucumberApiResult_SEVERITY, new_CucumberApiResult_1_init());
    JreStrongAssignAndConsume(&CucumberApiResult_SKIPPED, new_CucumberApiResult_initWithCucumberApiResult_Type_withJavaLangLong_withJavaLangThrowable_(JreLoadEnum(CucumberApiResult_Type, SKIPPED), nil, nil));
    JreStrongAssignAndConsume(&CucumberApiResult_UNDEFINED, new_CucumberApiResult_initWithCucumberApiResult_Type_withJavaLangLong_withJavaLangThrowable_(JreLoadEnum(CucumberApiResult_Type, UNDEFINED), nil, nil));
    J2OBJC_SET_INITIALIZED(CucumberApiResult)
  }
}

@end

void CucumberApiResult_initWithCucumberApiResult_Type_withJavaLangLong_withJavaLangThrowable_(CucumberApiResult *self, CucumberApiResult_Type *status, JavaLangLong *duration, JavaLangThrowable *error) {
  NSObject_init(self);
  JreStrongAssign(&self->status_, status);
  JreStrongAssign(&self->duration_, duration);
  JreStrongAssign(&self->error_, error);
}

CucumberApiResult *new_CucumberApiResult_initWithCucumberApiResult_Type_withJavaLangLong_withJavaLangThrowable_(CucumberApiResult_Type *status, JavaLangLong *duration, JavaLangThrowable *error) {
  J2OBJC_NEW_IMPL(CucumberApiResult, initWithCucumberApiResult_Type_withJavaLangLong_withJavaLangThrowable_, status, duration, error)
}

CucumberApiResult *create_CucumberApiResult_initWithCucumberApiResult_Type_withJavaLangLong_withJavaLangThrowable_(CucumberApiResult_Type *status, JavaLangLong *duration, JavaLangThrowable *error) {
  J2OBJC_CREATE_IMPL(CucumberApiResult, initWithCucumberApiResult_Type_withJavaLangLong_withJavaLangThrowable_, status, duration, error)
}

jboolean CucumberApiResult_hasAlwaysOkStatus(CucumberApiResult *self) {
  return [self isWithCucumberApiResult_Type:JreLoadEnum(CucumberApiResult_Type, PASSED)] || [self isWithCucumberApiResult_Type:JreLoadEnum(CucumberApiResult_Type, SKIPPED)];
}

jboolean CucumberApiResult_hasOkWhenNotStrictStatus(CucumberApiResult *self) {
  return [self isWithCucumberApiResult_Type:JreLoadEnum(CucumberApiResult_Type, UNDEFINED)] || [self isWithCucumberApiResult_Type:JreLoadEnum(CucumberApiResult_Type, PENDING)];
}

NSString *CucumberApiResult_getErrorMessageWithJavaLangThrowable_(CucumberApiResult *self, JavaLangThrowable *error) {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  JavaIoPrintWriter *printWriter = create_JavaIoPrintWriter_initWithJavaIoWriter_(stringWriter);
  [((JavaLangThrowable *) nil_chk(error)) printStackTraceWithJavaIoPrintWriter:printWriter];
  return [((JavaLangStringBuffer *) nil_chk([stringWriter getBuffer])) description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberApiResult)

@implementation CucumberApiResult_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CucumberApiResult_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(CucumberApiResult *)a
               withId:(CucumberApiResult *)b {
  return ((CucumberApiResult *) nil_chk(a))->status_ == ((CucumberApiResult *) nil_chk(b))->status_ ? 0 : [((CucumberApiResult_Type *) nil_chk(a->status_)) ordinal] > [b->status_ ordinal] ? 1 : -1;
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LCucumberApiResult;LCucumberApiResult;", "LCucumberApiResult;", "Ljava/lang/Object;Ljava/util/Comparator<Lcucumber/api/Result;>;" };
  static const J2ObjcClassInfo _CucumberApiResult_1 = { "", "cucumber.api", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, -1, 3, -1 };
  return &_CucumberApiResult_1;
}

@end

void CucumberApiResult_1_init(CucumberApiResult_1 *self) {
  NSObject_init(self);
}

CucumberApiResult_1 *new_CucumberApiResult_1_init() {
  J2OBJC_NEW_IMPL(CucumberApiResult_1, init)
}

CucumberApiResult_1 *create_CucumberApiResult_1_init() {
  J2OBJC_CREATE_IMPL(CucumberApiResult_1, init)
}

J2OBJC_INITIALIZED_DEFN(CucumberApiResult_Type)

CucumberApiResult_Type *CucumberApiResult_Type_values_[6];

@implementation CucumberApiResult_Type

+ (CucumberApiResult_Type *)fromLowerCaseNameWithNSString:(NSString *)lowerCaseName {
  return CucumberApiResult_Type_fromLowerCaseNameWithNSString_(lowerCaseName);
}

- (NSString *)lowerCaseName {
  return [((NSString *) nil_chk([self name])) lowercaseString];
}

- (NSString *)firstLetterCapitalizedName {
  return JreStrcat("$$", [((NSString *) nil_chk([self name])) java_substring:0 endIndex:1], [((NSString *) nil_chk([((NSString *) nil_chk([self name])) java_substring:1])) lowercaseString]);
}

+ (IOSObjectArray *)values {
  return CucumberApiResult_Type_values();
}

+ (CucumberApiResult_Type *)valueOfWithNSString:(NSString *)name {
  return CucumberApiResult_Type_valueOfWithNSString_(name);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LCucumberApiResult_Type;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LCucumberApiResult_Type;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LCucumberApiResult_Type;", 0x9, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(fromLowerCaseNameWithNSString:);
  methods[1].selector = @selector(lowerCaseName);
  methods[2].selector = @selector(firstLetterCapitalizedName);
  methods[3].selector = @selector(values);
  methods[4].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PASSED", "LCucumberApiResult_Type;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "SKIPPED", "LCucumberApiResult_Type;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "PENDING", "LCucumberApiResult_Type;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "UNDEFINED", "LCucumberApiResult_Type;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "AMBIGUOUS", "LCucumberApiResult_Type;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "FAILED", "LCucumberApiResult_Type;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
  };
  static const void *ptrTable[] = { "fromLowerCaseName", "LNSString;", "valueOf", &JreEnum(CucumberApiResult_Type, PASSED), &JreEnum(CucumberApiResult_Type, SKIPPED), &JreEnum(CucumberApiResult_Type, PENDING), &JreEnum(CucumberApiResult_Type, UNDEFINED), &JreEnum(CucumberApiResult_Type, AMBIGUOUS), &JreEnum(CucumberApiResult_Type, FAILED), "LCucumberApiResult;", "Ljava/lang/Enum<Lcucumber/api/Result$Type;>;" };
  static const J2ObjcClassInfo _CucumberApiResult_Type = { "Type", "cucumber.api", ptrTable, methods, fields, 7, 0x4019, 5, 6, 9, -1, -1, 10, -1 };
  return &_CucumberApiResult_Type;
}

+ (void)initialize {
  if (self == [CucumberApiResult_Type class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 6 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 6; i++) {
      ((void)(CucumberApiResult_Type_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      CucumberApiResult_Type_initWithNSString_withInt_(e, JreEnumConstantName(CucumberApiResult_Type_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(CucumberApiResult_Type)
  }
}

@end

void CucumberApiResult_Type_initWithNSString_withInt_(CucumberApiResult_Type *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

CucumberApiResult_Type *CucumberApiResult_Type_fromLowerCaseNameWithNSString_(NSString *lowerCaseName) {
  CucumberApiResult_Type_initialize();
  return CucumberApiResult_Type_valueOfWithNSString_([((NSString *) nil_chk(lowerCaseName)) uppercaseString]);
}

IOSObjectArray *CucumberApiResult_Type_values() {
  CucumberApiResult_Type_initialize();
  return [IOSObjectArray arrayWithObjects:CucumberApiResult_Type_values_ count:6 type:CucumberApiResult_Type_class_()];
}

CucumberApiResult_Type *CucumberApiResult_Type_valueOfWithNSString_(NSString *name) {
  CucumberApiResult_Type_initialize();
  for (int i = 0; i < 6; i++) {
    CucumberApiResult_Type *e = CucumberApiResult_Type_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

CucumberApiResult_Type *CucumberApiResult_Type_fromOrdinal(NSUInteger ordinal) {
  CucumberApiResult_Type_initialize();
  if (ordinal >= 6) {
    return nil;
  }
  return CucumberApiResult_Type_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberApiResult_Type)
