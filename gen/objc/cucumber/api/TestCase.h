//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/api/TestCase.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CucumberApiTestCase")
#ifdef RESTRICT_CucumberApiTestCase
#define INCLUDE_ALL_CucumberApiTestCase 0
#else
#define INCLUDE_ALL_CucumberApiTestCase 1
#endif
#undef RESTRICT_CucumberApiTestCase

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (CucumberApiTestCase_) && (INCLUDE_ALL_CucumberApiTestCase || defined(INCLUDE_CucumberApiTestCase))
#define CucumberApiTestCase_

@class CCBEventBus;
@class GherkinEventsPickleEvent;
@protocol JavaUtilList;

@interface CucumberApiTestCase : NSObject

#pragma mark Public

/*!
 @brief Creates a new instance of a test case.
 @param testSteps of the test case
 @param pickleEvent the pickle executed by this test case
 */
- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)testSteps
                  withGherkinEventsPickleEvent:(GherkinEventsPickleEvent *)pickleEvent;

/*!
 @brief Creates a new instance of a test case.
 @param testSteps of the test case
 @param pickleEvent the pickle executed by this test case
 @param dryRun skip execution of the test steps
 */
- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)testSteps
                  withGherkinEventsPickleEvent:(GherkinEventsPickleEvent *)pickleEvent
                                   withBoolean:(jboolean)dryRun;

- (jint)getLine;

- (NSString *)getName;

- (NSString *)getScenarioDesignation;

- (id<JavaUtilList>)getTags;

- (id<JavaUtilList>)getTestSteps;

- (NSString *)getUri;

/*!
 @brief Executes the test case.
 @param bus to which events should be broadcast
 */
- (void)runWithCCBEventBus:(CCBEventBus *)bus;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberApiTestCase)

FOUNDATION_EXPORT void CucumberApiTestCase_initWithJavaUtilList_withGherkinEventsPickleEvent_(CucumberApiTestCase *self, id<JavaUtilList> testSteps, GherkinEventsPickleEvent *pickleEvent);

FOUNDATION_EXPORT CucumberApiTestCase *new_CucumberApiTestCase_initWithJavaUtilList_withGherkinEventsPickleEvent_(id<JavaUtilList> testSteps, GherkinEventsPickleEvent *pickleEvent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CucumberApiTestCase *create_CucumberApiTestCase_initWithJavaUtilList_withGherkinEventsPickleEvent_(id<JavaUtilList> testSteps, GherkinEventsPickleEvent *pickleEvent);

FOUNDATION_EXPORT void CucumberApiTestCase_initWithJavaUtilList_withGherkinEventsPickleEvent_withBoolean_(CucumberApiTestCase *self, id<JavaUtilList> testSteps, GherkinEventsPickleEvent *pickleEvent, jboolean dryRun);

FOUNDATION_EXPORT CucumberApiTestCase *new_CucumberApiTestCase_initWithJavaUtilList_withGherkinEventsPickleEvent_withBoolean_(id<JavaUtilList> testSteps, GherkinEventsPickleEvent *pickleEvent, jboolean dryRun) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CucumberApiTestCase *create_CucumberApiTestCase_initWithJavaUtilList_withGherkinEventsPickleEvent_withBoolean_(id<JavaUtilList> testSteps, GherkinEventsPickleEvent *pickleEvent, jboolean dryRun);

J2OBJC_TYPE_LITERAL_HEADER(CucumberApiTestCase)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_CucumberApiTestCase")
