//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/api/PickleStepTestStep.java
//

#include "J2ObjC_source.h"
#include "cucumber/api/PickleStepTestStep.h"

@interface CucumberApiPickleStepTestStep : NSObject

@end

@implementation CucumberApiPickleStepTestStep

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGHKPickleStep;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x401, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaUtilList;", 0x401, -1, -1, -1, 1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getPattern);
  methods[1].selector = @selector(getPickleStep);
  methods[2].selector = @selector(getDefinitionArgument);
  methods[3].selector = @selector(getStepArgument);
  methods[4].selector = @selector(getStepLine);
  methods[5].selector = @selector(getStepLocation);
  methods[6].selector = @selector(getStepText);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Ljava/util/List<Lcucumber/api/Argument;>;", "()Ljava/util/List<Lgherkin/pickles/Argument;>;" };
  static const J2ObjcClassInfo _CucumberApiPickleStepTestStep = { "PickleStepTestStep", "cucumber.api", ptrTable, methods, NULL, 7, 0x609, 7, 0, -1, -1, -1, -1, -1 };
  return &_CucumberApiPickleStepTestStep;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(CucumberApiPickleStepTestStep)
