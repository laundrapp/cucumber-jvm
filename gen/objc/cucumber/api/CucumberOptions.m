//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/api/CucumberOptions.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/api/CucumberOptions.h"
#include "cucumber/api/SnippetType.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/annotation/ElementType.h"
#include "java/lang/annotation/Retention.h"
#include "java/lang/annotation/RetentionPolicy.h"
#include "java/lang/annotation/Target.h"

__attribute__((unused)) static IOSObjectArray *CucumberApiCucumberOptions__Annotations$0(void);

@implementation CucumberApiCucumberOptions

@synthesize dryRun = dryRun_;
@synthesize strict = strict_;
@synthesize features = features_;
@synthesize glue = glue_;
@synthesize tags = tags_;
@synthesize format = format_;
@synthesize plugin = plugin_;
@synthesize monochrome = monochrome_;
@synthesize name = name_;
@synthesize snippets = snippets_;
@synthesize junit = junit_;

+ (jboolean)dryRunDefault {
  return false;
}

+ (jboolean)strictDefault {
  return false;
}

+ (IOSObjectArray *)featuresDefault {
  return [IOSObjectArray arrayWithLength:0 type:NSString_class_()];
}

+ (IOSObjectArray *)glueDefault {
  return [IOSObjectArray arrayWithLength:0 type:NSString_class_()];
}

+ (IOSObjectArray *)tagsDefault {
  return [IOSObjectArray arrayWithLength:0 type:NSString_class_()];
}

+ (IOSObjectArray *)formatDefault {
  return [IOSObjectArray arrayWithLength:0 type:NSString_class_()];
}

+ (IOSObjectArray *)pluginDefault {
  return [IOSObjectArray arrayWithLength:0 type:NSString_class_()];
}

+ (jboolean)monochromeDefault {
  return false;
}

+ (IOSObjectArray *)nameDefault {
  return [IOSObjectArray arrayWithLength:0 type:NSString_class_()];
}

+ (CucumberApiSnippetType *)snippetsDefault {
  return JreLoadEnum(CucumberApiSnippetType, UNDERSCORE);
}

+ (IOSObjectArray *)junitDefault {
  return [IOSObjectArray arrayWithLength:0 type:NSString_class_()];
}

- (IOSClass *)annotationType {
  return CucumberApiCucumberOptions_class_();
}

- (NSString *)description {
  return [NSString stringWithFormat:@"@cucumber.api.CucumberOptions(dryRun=%d, strict=%d, features=%@, glue=%@, tags=%@, format=%@, plugin=%@, monochrome=%d, name=%@, snippets=%@, junit=%@)", dryRun_, strict_, features_, glue_, tags_, format_, plugin_, monochrome_, name_, snippets_, junit_];
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

- (void)dealloc {
  RELEASE_(features_);
  RELEASE_(glue_);
  RELEASE_(tags_);
  RELEASE_(format_);
  RELEASE_(plugin_);
  RELEASE_(name_);
  RELEASE_(snippets_);
  RELEASE_(junit_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LCucumberApiSnippetType;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(dryRun);
  methods[1].selector = @selector(strict);
  methods[2].selector = @selector(features);
  methods[3].selector = @selector(glue);
  methods[4].selector = @selector(tags);
  methods[5].selector = @selector(format);
  methods[6].selector = @selector(plugin);
  methods[7].selector = @selector(monochrome);
  methods[8].selector = @selector(name);
  methods[9].selector = @selector(snippets);
  methods[10].selector = @selector(junit);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "dryRun_", "Z", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "strict_", "Z", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "features_", "[LNSString;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "glue_", "[LNSString;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "tags_", "[LNSString;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "format_", "[LNSString;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "plugin_", "[LNSString;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "monochrome_", "Z", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "name_", "[LNSString;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "snippets_", "LCucumberApiSnippetType;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "junit_", "[LNSString;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&CucumberApiCucumberOptions__Annotations$0 };
  static const J2ObjcClassInfo _CucumberApiCucumberOptions = { "CucumberOptions", "cucumber.api", ptrTable, methods, fields, 7, 0x2609, 11, 11, -1, -1, -1, -1, 0 };
  return &_CucumberApiCucumberOptions;
}

@end

id<CucumberApiCucumberOptions> create_CucumberApiCucumberOptions(jboolean dryRun, IOSObjectArray *features, IOSObjectArray *format, IOSObjectArray *glue, IOSObjectArray *junit, jboolean monochrome, IOSObjectArray *name, IOSObjectArray *plugin, CucumberApiSnippetType *snippets, jboolean strict, IOSObjectArray *tags) {
  CucumberApiCucumberOptions *self = AUTORELEASE([[CucumberApiCucumberOptions alloc] init]);
  self->dryRun_ = dryRun;
  self->features_ = RETAIN_(features);
  self->format_ = RETAIN_(format);
  self->glue_ = RETAIN_(glue);
  self->junit_ = RETAIN_(junit);
  self->monochrome_ = monochrome;
  self->name_ = RETAIN_(name);
  self->plugin_ = RETAIN_(plugin);
  self->snippets_ = RETAIN_(snippets);
  self->strict_ = strict;
  self->tags_ = RETAIN_(tags);
  return self;
}

IOSObjectArray *CucumberApiCucumberOptions__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)), create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, TYPE) } count:1 type:JavaLangAnnotationElementType_class_()]) } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(CucumberApiCucumberOptions)
