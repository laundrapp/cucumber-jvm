//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/api/SnippetType.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/api/SnippetType.h"
#include "cucumber/runtime/CucumberException.h"
#include "cucumber/runtime/snippets/CamelCaseConcatenator.h"
#include "cucumber/runtime/snippets/Concatenator.h"
#include "cucumber/runtime/snippets/FunctionNameGenerator.h"
#include "cucumber/runtime/snippets/UnderscoreConcatenator.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"

@interface CucumberApiSnippetType () {
 @public
  NSString *name_SnippetType_;
  id<CucumberRuntimeSnippetsConcatenator> concatenator_;
}

@end

J2OBJC_FIELD_SETTER(CucumberApiSnippetType, name_SnippetType_, NSString *)
J2OBJC_FIELD_SETTER(CucumberApiSnippetType, concatenator_, id<CucumberRuntimeSnippetsConcatenator>)

__attribute__((unused)) static void CucumberApiSnippetType_initWithNSString_withCucumberRuntimeSnippetsConcatenator_withNSString_withInt_(CucumberApiSnippetType *self, NSString *name, id<CucumberRuntimeSnippetsConcatenator> concatenator, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(CucumberApiSnippetType)

CucumberApiSnippetType *CucumberApiSnippetType_values_[2];

@implementation CucumberApiSnippetType

+ (CucumberApiSnippetType *)fromStringWithNSString:(NSString *)name {
  return CucumberApiSnippetType_fromStringWithNSString_(name);
}

- (CucumberRuntimeSnippetsFunctionNameGenerator *)getFunctionNameGenerator {
  return create_CucumberRuntimeSnippetsFunctionNameGenerator_initWithCucumberRuntimeSnippetsConcatenator_(concatenator_);
}

+ (IOSObjectArray *)values {
  return CucumberApiSnippetType_values();
}

+ (CucumberApiSnippetType *)valueOfWithNSString:(NSString *)name {
  return CucumberApiSnippetType_valueOfWithNSString_(name);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LCucumberApiSnippetType;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LCucumberRuntimeSnippetsFunctionNameGenerator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LCucumberApiSnippetType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LCucumberApiSnippetType;", 0x9, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(fromStringWithNSString:);
  methods[1].selector = @selector(getFunctionNameGenerator);
  methods[2].selector = @selector(values);
  methods[3].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "UNDERSCORE", "LCucumberApiSnippetType;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "CAMELCASE", "LCucumberApiSnippetType;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "name_SnippetType_", "LNSString;", .constantValue.asLong = 0, 0x12, 5, -1, -1, -1 },
    { "concatenator_", "LCucumberRuntimeSnippetsConcatenator;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "fromString", "LNSString;", "valueOf", &JreEnum(CucumberApiSnippetType, UNDERSCORE), &JreEnum(CucumberApiSnippetType, CAMELCASE), "name", "Ljava/lang/Enum<Lcucumber/api/SnippetType;>;" };
  static const J2ObjcClassInfo _CucumberApiSnippetType = { "SnippetType", "cucumber.api", ptrTable, methods, fields, 7, 0x4011, 4, 4, -1, -1, -1, 6, -1 };
  return &_CucumberApiSnippetType;
}

+ (void)initialize {
  if (self == [CucumberApiSnippetType class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 2 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    ((void) (JreEnum(CucumberApiSnippetType, UNDERSCORE) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    CucumberApiSnippetType_initWithNSString_withCucumberRuntimeSnippetsConcatenator_withNSString_withInt_(e, @"underscore", create_CucumberRuntimeSnippetsUnderscoreConcatenator_init(), @"UNDERSCORE", 0);
    ((void) (JreEnum(CucumberApiSnippetType, CAMELCASE) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    CucumberApiSnippetType_initWithNSString_withCucumberRuntimeSnippetsConcatenator_withNSString_withInt_(e, @"camelcase", create_CucumberRuntimeSnippetsCamelCaseConcatenator_init(), @"CAMELCASE", 1);
    J2OBJC_SET_INITIALIZED(CucumberApiSnippetType)
  }
}

@end

void CucumberApiSnippetType_initWithNSString_withCucumberRuntimeSnippetsConcatenator_withNSString_withInt_(CucumberApiSnippetType *self, NSString *name, id<CucumberRuntimeSnippetsConcatenator> concatenator, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  JreStrongAssign(&self->name_SnippetType_, name);
  JreStrongAssign(&self->concatenator_, concatenator);
}

CucumberApiSnippetType *CucumberApiSnippetType_fromStringWithNSString_(NSString *name) {
  CucumberApiSnippetType_initialize();
  {
    IOSObjectArray *a__ = CucumberApiSnippetType_values();
    CucumberApiSnippetType * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    CucumberApiSnippetType * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      CucumberApiSnippetType *snippetType = *b__++;
      if ([((NSString *) nil_chk(name)) java_equalsIgnoreCase:((CucumberApiSnippetType *) nil_chk(snippetType))->name_SnippetType_]) {
        return snippetType;
      }
    }
  }
  @throw create_CucumberRuntimeCucumberException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Unrecognized SnippetType %s", [IOSObjectArray arrayWithObjects:(id[]){ name } count:1 type:NSObject_class_()]));
}

IOSObjectArray *CucumberApiSnippetType_values() {
  CucumberApiSnippetType_initialize();
  return [IOSObjectArray arrayWithObjects:CucumberApiSnippetType_values_ count:2 type:CucumberApiSnippetType_class_()];
}

CucumberApiSnippetType *CucumberApiSnippetType_valueOfWithNSString_(NSString *name) {
  CucumberApiSnippetType_initialize();
  for (int i = 0; i < 2; i++) {
    CucumberApiSnippetType *e = CucumberApiSnippetType_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

CucumberApiSnippetType *CucumberApiSnippetType_fromOrdinal(NSUInteger ordinal) {
  CucumberApiSnippetType_initialize();
  if (ordinal >= 2) {
    return nil;
  }
  return CucumberApiSnippetType_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberApiSnippetType)
