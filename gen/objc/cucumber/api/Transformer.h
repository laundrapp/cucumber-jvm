//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/api/Transformer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CucumberApiTransformer")
#ifdef RESTRICT_CucumberApiTransformer
#define INCLUDE_ALL_CucumberApiTransformer 0
#else
#define INCLUDE_ALL_CucumberApiTransformer 1
#endif
#undef RESTRICT_CucumberApiTransformer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (CucumberApiTransformer_) && (INCLUDE_ALL_CucumberApiTransformer || defined(INCLUDE_CucumberApiTransformer))
#define CucumberApiTransformer_

#define RESTRICT_CucumberDepsComThoughtworksXstreamConvertersSingleValueConverter 1
#define INCLUDE_CucumberDepsComThoughtworksXstreamConvertersSingleValueConverter 1
#include "cucumber/deps/com/thoughtworks/xstream/converters/SingleValueConverter.h"

@class CCBRParameterInfo;
@class IOSClass;
@class JavaUtilLocale;

/*!
 @brief <p>
  Allows transformation of a step definition argument to a custom type, giving you full control
  over how that type is instantiated.
 </p>
  <p>
  Consider the following Gherkin step: 
 </p>
  @code
Given today's date is "10/03/1985"
@endcode
  <p>
  As an example, let's assume we want Cucumber to transform the substring "10/03/1985" into an instance of 
 <code>org.joda.time.LocalDate</code> class: 
 </p>
  @code

          &#064;Given("today's date is \"(.*)\"")
      public void todays_date_is(LocalDate d) {
      } 
  
@endcode
  <p>
  If the parameter's class has a constructor with a single <code>String</code> or <code>Object</code> argument, then
  Cucumber will instantiate it without any further ado. However, in this case that might not give you what you
  want. Depending on your Locale, the date may be Oct 3 or March 10! 
 </p>
  <p>
      This is when you can use a custom transformer. You'll also have to do that if your parameter class doesn't
      have a constructor with a single <code>String</code> or <code>Object</code> argument. For the JODA Time
      example: 
 </p>
  
 @code

          &#064;Given("today's date is \"(.*)\"")
      public void todays_date_is(&#064;Transform(JodaTimeConverter.class) LocalDate d) {
      } 
  
@endcode
  <p>
  And then a <code>JodaTimeConverter</code> class: 
 </p>
  @code
    public static class JodaTimeConverter extends Transformer<LocalDate> {
          private static DateTimeFormatter FORMATTER = DateTimeFormat.forStyle("S-");
          &#064;Override
          public LocalDate transform(String value) {
              return FORMATTER.withLocale(getLocale()).parseLocalDate(value);
          }        }    
 
@endcode
  <p>
  An alternative to annotating parameters with <code>Transform</code> is to annotate your class with 
 <code>cucumber.deps.com.thoughtworks.xstream.annotations.XStreamConverter</code>:
  </p>
  @code

          &#064;XStreamConverter(MyConverter.class)
      public class MyClass {
      } 
  
@endcode
  <p>
  This will also enable a <code>DataTable</code> to be transformed to
  a <code>List&lt;MyClass;&gt;</code>
  </p>
 - seealso: Transform
 */
@interface CucumberApiTransformer : NSObject < CucumberDepsComThoughtworksXstreamConvertersSingleValueConverter >

#pragma mark Public

- (instancetype __nonnull)init;

- (jboolean)canConvertWithIOSClass:(IOSClass *)type;

- (id)fromStringWithNSString:(NSString *)s;

- (void)setParameterInfoAndLocaleWithCCBRParameterInfo:(CCBRParameterInfo *)parameterInfo
                                    withJavaUtilLocale:(JavaUtilLocale *)locale;

- (NSString *)toStringWithId:(id)o;

- (id)transformWithNSString:(NSString *)value;

#pragma mark Protected

/*!
 @return the current locale
 */
- (JavaUtilLocale *)getLocale;

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberApiTransformer)

FOUNDATION_EXPORT void CucumberApiTransformer_init(CucumberApiTransformer *self);

J2OBJC_TYPE_LITERAL_HEADER(CucumberApiTransformer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_CucumberApiTransformer")
