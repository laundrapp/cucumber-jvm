//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/api/Delimiter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CucumberApiDelimiter")
#ifdef RESTRICT_CucumberApiDelimiter
#define INCLUDE_ALL_CucumberApiDelimiter 0
#else
#define INCLUDE_ALL_CucumberApiDelimiter 1
#endif
#undef RESTRICT_CucumberApiDelimiter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (CucumberApiDelimiter_) && (INCLUDE_ALL_CucumberApiDelimiter || defined(INCLUDE_CucumberApiDelimiter))
#define CucumberApiDelimiter_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

/*!
 @brief <p>
  This annotation can be specified on step definition method parameters to give Cucumber a hint
  about how to transform a String to a list of objects.
 For example, if you have the following Gherkin step: 
 </p>
  @code

  Given the users adam, bob, john 
  
@endcode
  <p>
  Then the following Java Step Definition would convert that into a List: 
 </p>
  @code

   &#064;Given("^the users ([a-z](?:, [a-z]+))$")
  public void the_users(&#064;Delimiter(", ") List&lt;String&gt; users) {
      this.users = users;
  } 
  
@endcode
  <p>
  This annotation also works with regular expression patterns. Step definition method parameters of type 
 <code>java.util.List</code> without the <code>Delimiter</code> annotation will default to the pattern <code>",\\s?"</code>.
  </p>
 */
@protocol CucumberApiDelimiter < JavaLangAnnotationAnnotation >

@property (readonly) NSString *value;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface CucumberApiDelimiter : NSObject < CucumberApiDelimiter > {
 @public
  NSString *value_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberApiDelimiter)

FOUNDATION_EXPORT id<CucumberApiDelimiter> create_CucumberApiDelimiter(NSString *value);

J2OBJC_TYPE_LITERAL_HEADER(CucumberApiDelimiter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_CucumberApiDelimiter")
