//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/laundrapp_org/cucumber-jvm/core/src/main/java/cucumber/api/Transpose.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CucumberApiTranspose")
#ifdef RESTRICT_CucumberApiTranspose
#define INCLUDE_ALL_CucumberApiTranspose 0
#else
#define INCLUDE_ALL_CucumberApiTranspose 1
#endif
#undef RESTRICT_CucumberApiTranspose

#if !defined (CucumberApiTranspose_) && (INCLUDE_ALL_CucumberApiTranspose || defined(INCLUDE_CucumberApiTranspose))
#define CucumberApiTranspose_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

/*!
 @brief <p>
  This annotation can be specified on step definition method parameters to give Cucumber a hint
  to transpose a DataTable into an object or list of objects.
 For example, if you have the following Gherkin step with a table 
 </p>
  @code

  Given the user is
     | firstname	| Roberto	|
     | lastname	| Lo Giacco |
     | nationality	| Italian	| 
  
@endcode
  <p>
  Then the following Java Step Definition would convert that into an User object: 
 </p>
  @code

   &#064;Given("^the user is$")
  public void the_user_is(@@Transpose User user) {
      this.user = user;
  } 
  
@endcode
  <p>
  
  This annotation also works for data tables that are transformed to a list of beans. 
 </p>
 */
@protocol CucumberApiTranspose < JavaLangAnnotationAnnotation >

@property (readonly) jboolean value;

@end

@interface CucumberApiTranspose : NSObject < CucumberApiTranspose > {
 @public
  jboolean value_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberApiTranspose)

FOUNDATION_EXPORT id<CucumberApiTranspose> create_CucumberApiTranspose(jboolean value);

J2OBJC_TYPE_LITERAL_HEADER(CucumberApiTranspose)

#endif

#pragma pop_macro("INCLUDE_ALL_CucumberApiTranspose")
