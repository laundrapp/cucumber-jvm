//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/api/DataTable.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CucumberApiDataTable")
#ifdef RESTRICT_CucumberApiDataTable
#define INCLUDE_ALL_CucumberApiDataTable 0
#else
#define INCLUDE_ALL_CucumberApiDataTable 1
#endif
#undef RESTRICT_CucumberApiDataTable

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (CCBDataTable_) && (INCLUDE_ALL_CucumberApiDataTable || defined(INCLUDE_CCBDataTable))
#define CCBDataTable_

@class CCBRTablePrinter;
@class GherkinPicklesPickleTable;
@class IOSClass;
@class IOSObjectArray;
@class JavaUtilLocale;
@protocol CCBTableConverter;
@protocol JavaUtilList;
@protocol JavaUtilMap;

/*!
 @brief Represents the data from a <a href="http://cucumber.info/gherkin.html#data-tables">Gherkin DataTable</a>.Cucumber will convert the table in Gherkin
  to a DataTable instance and pass it to a step definition.
 */
@interface CCBDataTable : NSObject

#pragma mark Public

/*!
 @brief Creates a new DataTable.This constructor should not be called by Cucumber users - it's used internally only.
 @param pickleTable the underlying table.
 @param tableConverter how to convert the rows.
 */
- (instancetype __nonnull)initWithGherkinPicklesPickleTable:(GherkinPicklesPickleTable *)pickleTable
                                      withCCBTableConverter:(id<CCBTableConverter>)tableConverter;

/*!
 @brief Converts the table to a List.
 If <code>itemType</code> is a scalar type the table is flattened.
  Otherwise, the top row is used to name the fields/properties and the remaining
  rows are turned into list items.
 @param itemType the type of the list items
 @return a List of objects
 */
- (id<JavaUtilList>)asListWithIOSClass:(IOSClass *)itemType;

/*!
 @brief Converts the table to a List of List of scalar.
 @param itemType the type of the list items
 @return a List of List of objects
 */
- (id<JavaUtilList>)asListsWithIOSClass:(IOSClass *)itemType;

/*!
 @brief Converts the table to a single Map.The left column is used as keys, the right column as values.
 @param keyType key type
 @param valueType value type
 @return a Map.
 @throw cucumber.runtime.CucumberExceptionif the table doesn't have 2 columns.
 */
- (id<JavaUtilMap>)asMapWithIOSClass:(IOSClass *)keyType
                        withIOSClass:(IOSClass *)valueType;

/*!
 @brief Converts the table to a List of Map.The top row is used as keys in the maps,
  and the rows below are used as values.
 @param keyType key type
 @param valueType value type
 @return a List of Map.
 */
- (id<JavaUtilList>)asMapsWithIOSClass:(IOSClass *)keyType
                          withIOSClass:(IOSClass *)valueType;

- (id<JavaUtilList>)cellsWithInt:(jint)firstRow;

+ (CCBDataTable *)createWithJavaUtilList:(id<JavaUtilList>)raw;

+ (CCBDataTable *)createWithJavaUtilList:(id<JavaUtilList>)raw
                      withJavaUtilLocale:(JavaUtilLocale *)locale
                       withNSStringArray:(IOSObjectArray *)columnNames;

+ (CCBDataTable *)createWithJavaUtilList:(id<JavaUtilList>)raw
                            withNSString:(NSString *)format
                       withNSStringArray:(IOSObjectArray *)columnNames;

/*!
 @brief Diffs this table with <code>other</code>.
 @param other the other table to diff with.
 @throw TableDiffExceptionif the tables are different.
 */
- (void)diffWithCCBDataTable:(CCBDataTable *)other;

/*!
 @brief Diffs this table with <code>other</code>, which can be a <code>List&lt;List&lt;String&gt;&gt;</code> or a 
 <code>List&lt;YourType&gt;</code>.
 @param other the other table to diff with.
 @throw cucumber.runtime.table.TableDiffExceptionif the tables are different.
 */
- (void)diffWithJavaUtilList:(id<JavaUtilList>)other;

- (id<JavaUtilList>)diffableRows;

- (jboolean)isEqual:(id)o;

/*!
 @brief Internal method.Do not use.
 @return a list of raw rows.
 */
- (id<JavaUtilList>)getPickleRows;

- (id<CCBTableConverter>)getTableConverter;

- (NSUInteger)hash;

/*!
 @return a List of List of String.
 */
- (id<JavaUtilList>)raw;

- (id<JavaUtilList>)topCells;

- (NSString *)description;

/*!
 @brief Creates another table using the same <code>Locale</code> and <code>Format</code> that was used to create this table.
 @param raw a list of objects
 @param columnNames optional explicit header columns
 @return a new table
 */
- (CCBDataTable *)toTableWithJavaUtilList:(id<JavaUtilList>)raw
                        withNSStringArray:(IOSObjectArray *)columnNames;

- (CCBDataTable *)transpose;

/*!
 @brief Diffs this table with <code>other</code>.
 The order is not important. A set-difference is applied.
 @param other the other table to diff with.
 @throw TableDiffExceptionif the tables are different.
 */
- (void)unorderedDiffWithCCBDataTable:(CCBDataTable *)other;

/*!
 @brief Diffs this table with <code>other</code>, which can be a <code>List&lt;List&lt;String&gt;&gt;</code> or a 
 <code>List&lt;YourType&gt;</code>.
 @param other the other table to diff with.
 @throw cucumber.runtime.table.TableDiffExceptionif the tables are different.
 */
- (void)unorderedDiffWithJavaUtilList:(id<JavaUtilList>)other;

#pragma mark Protected

- (CCBRTablePrinter *)createTablePrinter;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBDataTable)

FOUNDATION_EXPORT CCBDataTable *CCBDataTable_createWithJavaUtilList_(id<JavaUtilList> raw);

FOUNDATION_EXPORT CCBDataTable *CCBDataTable_createWithJavaUtilList_withNSString_withNSStringArray_(id<JavaUtilList> raw, NSString *format, IOSObjectArray *columnNames);

FOUNDATION_EXPORT CCBDataTable *CCBDataTable_createWithJavaUtilList_withJavaUtilLocale_withNSStringArray_(id<JavaUtilList> raw, JavaUtilLocale *locale, IOSObjectArray *columnNames);

FOUNDATION_EXPORT void CCBDataTable_initWithGherkinPicklesPickleTable_withCCBTableConverter_(CCBDataTable *self, GherkinPicklesPickleTable *pickleTable, id<CCBTableConverter> tableConverter);

FOUNDATION_EXPORT CCBDataTable *new_CCBDataTable_initWithGherkinPicklesPickleTable_withCCBTableConverter_(GherkinPicklesPickleTable *pickleTable, id<CCBTableConverter> tableConverter) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CCBDataTable *create_CCBDataTable_initWithGherkinPicklesPickleTable_withCCBTableConverter_(GherkinPicklesPickleTable *pickleTable, id<CCBTableConverter> tableConverter);

J2OBJC_TYPE_LITERAL_HEADER(CCBDataTable)

@compatibility_alias CucumberApiDataTable CCBDataTable;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_CucumberApiDataTable")
