//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/api/DataTable.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/api/DataTable.h"
#include "cucumber/api/TableConverter.h"
#include "cucumber/runtime/CucumberException.h"
#include "cucumber/runtime/ParameterInfo.h"
#include "cucumber/runtime/table/DiffableRow.h"
#include "cucumber/runtime/table/TableConverter.h"
#include "cucumber/runtime/table/TableDiffer.h"
#include "cucumber/runtime/table/TablePrinter.h"
#include "cucumber/runtime/xstream/LocalizedXStreams.h"
#include "gherkin/pickles/PickleCell.h"
#include "gherkin/pickles/PickleRow.h"
#include "gherkin/pickles/PickleTable.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Thread.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"

@interface CCBDataTable () {
 @public
  id<JavaUtilList> raw_;
  GherkinPicklesPickleTable *pickleTable_;
  id<CCBTableConverter> tableConverter_;
}

+ (CCBDataTable *)createWithJavaUtilList:(id<JavaUtilList>)raw
                      withJavaUtilLocale:(JavaUtilLocale *)locale
                            withNSString:(NSString *)format
                       withNSStringArray:(IOSObjectArray *)columnNames;

- (instancetype __nonnull)initWithGherkinPicklesPickleTable:(GherkinPicklesPickleTable *)pickleTable
                                           withJavaUtilList:(id<JavaUtilList>)raw
                                      withCCBTableConverter:(id<CCBTableConverter>)tableConverter;

@end

J2OBJC_FIELD_SETTER(CCBDataTable, raw_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CCBDataTable, pickleTable_, GherkinPicklesPickleTable *)
J2OBJC_FIELD_SETTER(CCBDataTable, tableConverter_, id<CCBTableConverter>)

__attribute__((unused)) static CCBDataTable *CCBDataTable_createWithJavaUtilList_withJavaUtilLocale_withNSString_withNSStringArray_(id<JavaUtilList> raw, JavaUtilLocale *locale, NSString *format, IOSObjectArray *columnNames);

__attribute__((unused)) static void CCBDataTable_initWithGherkinPicklesPickleTable_withJavaUtilList_withCCBTableConverter_(CCBDataTable *self, GherkinPicklesPickleTable *pickleTable, id<JavaUtilList> raw, id<CCBTableConverter> tableConverter);

__attribute__((unused)) static CCBDataTable *new_CCBDataTable_initWithGherkinPicklesPickleTable_withJavaUtilList_withCCBTableConverter_(GherkinPicklesPickleTable *pickleTable, id<JavaUtilList> raw, id<CCBTableConverter> tableConverter) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBDataTable *create_CCBDataTable_initWithGherkinPicklesPickleTable_withJavaUtilList_withCCBTableConverter_(GherkinPicklesPickleTable *pickleTable, id<JavaUtilList> raw, id<CCBTableConverter> tableConverter);

@implementation CCBDataTable

+ (CCBDataTable *)createWithJavaUtilList:(id<JavaUtilList>)raw {
  return CCBDataTable_createWithJavaUtilList_(raw);
}

+ (CCBDataTable *)createWithJavaUtilList:(id<JavaUtilList>)raw
                            withNSString:(NSString *)format
                       withNSStringArray:(IOSObjectArray *)columnNames {
  return CCBDataTable_createWithJavaUtilList_withNSString_withNSStringArray_(raw, format, columnNames);
}

+ (CCBDataTable *)createWithJavaUtilList:(id<JavaUtilList>)raw
                      withJavaUtilLocale:(JavaUtilLocale *)locale
                       withNSStringArray:(IOSObjectArray *)columnNames {
  return CCBDataTable_createWithJavaUtilList_withJavaUtilLocale_withNSStringArray_(raw, locale, columnNames);
}

+ (CCBDataTable *)createWithJavaUtilList:(id<JavaUtilList>)raw
                      withJavaUtilLocale:(JavaUtilLocale *)locale
                            withNSString:(NSString *)format
                       withNSStringArray:(IOSObjectArray *)columnNames {
  return CCBDataTable_createWithJavaUtilList_withJavaUtilLocale_withNSString_withNSStringArray_(raw, locale, format, columnNames);
}

- (instancetype __nonnull)initWithGherkinPicklesPickleTable:(GherkinPicklesPickleTable *)pickleTable
                                      withCCBTableConverter:(id<CCBTableConverter>)tableConverter {
  CCBDataTable_initWithGherkinPicklesPickleTable_withCCBTableConverter_(self, pickleTable, tableConverter);
  return self;
}

- (instancetype __nonnull)initWithGherkinPicklesPickleTable:(GherkinPicklesPickleTable *)pickleTable
                                           withJavaUtilList:(id<JavaUtilList>)raw
                                      withCCBTableConverter:(id<CCBTableConverter>)tableConverter {
  CCBDataTable_initWithGherkinPicklesPickleTable_withJavaUtilList_withCCBTableConverter_(self, pickleTable, raw, tableConverter);
  return self;
}

- (id<JavaUtilList>)raw {
  return self->raw_;
}

- (id<JavaUtilList>)asMapsWithIOSClass:(IOSClass *)keyType
                          withIOSClass:(IOSClass *)valueType {
  return [((id<CCBTableConverter>) nil_chk(tableConverter_)) toMapsWithCCBDataTable:self withJavaLangReflectType:keyType withJavaLangReflectType:valueType];
}

- (id<JavaUtilMap>)asMapWithIOSClass:(IOSClass *)keyType
                        withIOSClass:(IOSClass *)valueType {
  return [((id<CCBTableConverter>) nil_chk(tableConverter_)) toMapWithCCBDataTable:self withJavaLangReflectType:keyType withJavaLangReflectType:valueType];
}

- (id<JavaUtilList>)asListWithIOSClass:(IOSClass *)itemType {
  return [((id<CCBTableConverter>) nil_chk(tableConverter_)) toListWithCCBDataTable:self withJavaLangReflectType:itemType];
}

- (id<JavaUtilList>)asListsWithIOSClass:(IOSClass *)itemType {
  return [((id<CCBTableConverter>) nil_chk(tableConverter_)) toListsWithCCBDataTable:self withJavaLangReflectType:itemType];
}

- (id<JavaUtilList>)topCells {
  return [((id<JavaUtilList>) nil_chk(raw_)) isEmpty] ? JavaUtilCollections_emptyList() : [raw_ getWithInt:0];
}

- (id<JavaUtilList>)cellsWithInt:(jint)firstRow {
  return [((id<JavaUtilList>) nil_chk(raw_)) subListWithInt:firstRow withInt:[raw_ size]];
}

- (CCBDataTable *)toTableWithJavaUtilList:(id<JavaUtilList>)raw
                        withNSStringArray:(IOSObjectArray *)columnNames {
  return [((id<CCBTableConverter>) nil_chk(tableConverter_)) toTableWithJavaUtilList:raw withNSStringArray:columnNames];
}

- (void)diffWithJavaUtilList:(id<JavaUtilList>)other {
  id<JavaUtilList> topCells = [self topCells];
  CCBDataTable *otherTable = [self toTableWithJavaUtilList:other withNSStringArray:[((id<JavaUtilList>) nil_chk(topCells)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[topCells size] type:NSString_class_()]]];
  [self diffWithCCBDataTable:otherTable];
}

- (void)diffWithCCBDataTable:(CCBDataTable *)other {
  [create_CCBRTableDiffer_initWithCCBDataTable_withCCBDataTable_(self, other) calculateDiffs];
}

- (void)unorderedDiffWithCCBDataTable:(CCBDataTable *)other {
  [create_CCBRTableDiffer_initWithCCBDataTable_withCCBDataTable_(self, other) calculateUnorderedDiffs];
}

- (void)unorderedDiffWithJavaUtilList:(id<JavaUtilList>)other {
  id<JavaUtilList> topCells = [self topCells];
  CCBDataTable *otherTable = [self toTableWithJavaUtilList:other withNSStringArray:[((id<JavaUtilList>) nil_chk(topCells)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[topCells size] type:NSString_class_()]]];
  [self unorderedDiffWithCCBDataTable:otherTable];
}

- (id<JavaUtilList>)getPickleRows {
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_([((GherkinPicklesPickleTable *) nil_chk(pickleTable_)) getRows]);
}

- (NSString *)description {
  JavaLangStringBuilder *result = create_JavaLangStringBuilder_init();
  CCBRTablePrinter *printer = [self createTablePrinter];
  [((CCBRTablePrinter *) nil_chk(printer)) printTableWithJavaUtilList:raw_ withJavaLangStringBuilder:result];
  return [result description];
}

- (id<JavaUtilList>)diffableRows {
  id<JavaUtilList> result = create_JavaUtilArrayList_init();
  id<JavaUtilList> convertedRows = [self raw];
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(convertedRows)) size]; i++) {
    [result addWithId:create_CCBRDiffableRow_initWithGherkinPicklesPickleRow_withJavaUtilList_([((id<JavaUtilList>) nil_chk([self getPickleRows])) getWithInt:i], [convertedRows getWithInt:i])];
  }
  return result;
}

- (id<CCBTableConverter>)getTableConverter {
  return tableConverter_;
}

- (CCBDataTable *)transpose {
  id<JavaUtilList> transposed = create_JavaUtilArrayList_init();
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk([((GherkinPicklesPickleTable *) nil_chk(pickleTable_)) getRows])) size]; i++) {
    GherkinPicklesPickleRow *pickleRow = [((id<JavaUtilList>) nil_chk([pickleTable_ getRows])) getWithInt:i];
    for (jint j = 0; j < [((id<JavaUtilList>) nil_chk([((GherkinPicklesPickleRow *) nil_chk(pickleRow)) getCells])) size]; j++) {
      id<JavaUtilList> row = nil;
      if (j < [transposed size]) {
        row = [transposed getWithInt:j];
      }
      if (row == nil) {
        row = create_JavaUtilArrayList_init();
        [transposed addWithId:row];
      }
      [row addWithId:[((GherkinPicklesPickleCell *) nil_chk([((id<JavaUtilList>) nil_chk([pickleRow getCells])) getWithInt:j])) getValue]];
    }
  }
  return create_CCBDataTable_initWithGherkinPicklesPickleTable_withJavaUtilList_withCCBTableConverter_(self->pickleTable_, transposed, self->tableConverter_);
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (!([o isKindOfClass:[CCBDataTable class]])) return false;
  CCBDataTable *dataTable = (CCBDataTable *) cast_chk(o, [CCBDataTable class]);
  return [((id<JavaUtilList>) nil_chk(raw_)) isEqual:((CCBDataTable *) nil_chk(dataTable))->raw_];
}

- (NSUInteger)hash {
  return ((jint) [((id<JavaUtilList>) nil_chk(raw_)) hash]);
}

- (CCBRTablePrinter *)createTablePrinter {
  return create_CCBRTablePrinter_init();
}

- (void)dealloc {
  RELEASE_(raw_);
  RELEASE_(pickleTable_);
  RELEASE_(tableConverter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LCCBDataTable;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LCCBDataTable;", 0x89, 0, 3, -1, 4, -1, -1 },
    { NULL, "LCCBDataTable;", 0x89, 0, 5, -1, 6, -1, -1 },
    { NULL, "LCCBDataTable;", 0x8a, 0, 7, -1, 8, -1, -1 },
    { NULL, NULL, 0x1, -1, 9, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 10, -1, 11, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 13, 14, -1, 15, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 16, 14, -1, 17, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 18, 19, -1, 20, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 21, 19, -1, 22, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 23, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 24, 25, -1, 26, -1, -1 },
    { NULL, "LCCBDataTable;", 0x81, 27, 28, -1, 29, -1, -1 },
    { NULL, "V", 0x1, 30, 1, 31, 32, -1, -1 },
    { NULL, "V", 0x1, 30, 33, 31, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 33, 31, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 1, 31, 32, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 35, -1, -1 },
    { NULL, "LNSString;", 0x1, 36, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 37, -1, -1 },
    { NULL, "LCCBTableConverter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LCCBDataTable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 38, 39, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 40, -1, -1, -1, -1, -1 },
    { NULL, "LCCBRTablePrinter;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(createWithJavaUtilList:);
  methods[1].selector = @selector(createWithJavaUtilList:withNSString:withNSStringArray:);
  methods[2].selector = @selector(createWithJavaUtilList:withJavaUtilLocale:withNSStringArray:);
  methods[3].selector = @selector(createWithJavaUtilList:withJavaUtilLocale:withNSString:withNSStringArray:);
  methods[4].selector = @selector(initWithGherkinPicklesPickleTable:withCCBTableConverter:);
  methods[5].selector = @selector(initWithGherkinPicklesPickleTable:withJavaUtilList:withCCBTableConverter:);
  methods[6].selector = @selector(raw);
  methods[7].selector = @selector(asMapsWithIOSClass:withIOSClass:);
  methods[8].selector = @selector(asMapWithIOSClass:withIOSClass:);
  methods[9].selector = @selector(asListWithIOSClass:);
  methods[10].selector = @selector(asListsWithIOSClass:);
  methods[11].selector = @selector(topCells);
  methods[12].selector = @selector(cellsWithInt:);
  methods[13].selector = @selector(toTableWithJavaUtilList:withNSStringArray:);
  methods[14].selector = @selector(diffWithJavaUtilList:);
  methods[15].selector = @selector(diffWithCCBDataTable:);
  methods[16].selector = @selector(unorderedDiffWithCCBDataTable:);
  methods[17].selector = @selector(unorderedDiffWithJavaUtilList:);
  methods[18].selector = @selector(getPickleRows);
  methods[19].selector = @selector(description);
  methods[20].selector = @selector(diffableRows);
  methods[21].selector = @selector(getTableConverter);
  methods[22].selector = @selector(transpose);
  methods[23].selector = @selector(isEqual:);
  methods[24].selector = @selector(hash);
  methods[25].selector = @selector(createTablePrinter);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "raw_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 41, -1 },
    { "pickleTable_", "LGherkinPicklesPickleTable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "tableConverter_", "LCCBTableConverter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "create", "LJavaUtilList;", "(Ljava/util/List<*>;)Lcucumber/api/DataTable;", "LJavaUtilList;LNSString;[LNSString;", "(Ljava/util/List<*>;Ljava/lang/String;[Ljava/lang/String;)Lcucumber/api/DataTable;", "LJavaUtilList;LJavaUtilLocale;[LNSString;", "(Ljava/util/List<*>;Ljava/util/Locale;[Ljava/lang/String;)Lcucumber/api/DataTable;", "LJavaUtilList;LJavaUtilLocale;LNSString;[LNSString;", "(Ljava/util/List<*>;Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/String;)Lcucumber/api/DataTable;", "LGherkinPicklesPickleTable;LCCBTableConverter;", "LGherkinPicklesPickleTable;LJavaUtilList;LCCBTableConverter;", "(Lgherkin/pickles/PickleTable;Ljava/util/List<Ljava/util/List<Ljava/lang/String;>;>;Lcucumber/api/TableConverter;)V", "()Ljava/util/List<Ljava/util/List<Ljava/lang/String;>;>;", "asMaps", "LIOSClass;LIOSClass;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Ljava/lang/Class<TK;>;Ljava/lang/Class<TV;>;)Ljava/util/List<Ljava/util/Map<TK;TV;>;>;", "asMap", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Ljava/lang/Class<TK;>;Ljava/lang/Class<TV;>;)Ljava/util/Map<TK;TV;>;", "asList", "LIOSClass;", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)Ljava/util/List<TT;>;", "asLists", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)Ljava/util/List<Ljava/util/List<TT;>;>;", "()Ljava/util/List<Ljava/lang/String;>;", "cells", "I", "(I)Ljava/util/List<Ljava/util/List<Ljava/lang/String;>;>;", "toTable", "LJavaUtilList;[LNSString;", "(Ljava/util/List<*>;[Ljava/lang/String;)Lcucumber/api/DataTable;", "diff", "LCCBRTableDiffException;", "(Ljava/util/List<*>;)V", "LCCBDataTable;", "unorderedDiff", "()Ljava/util/List<Lgherkin/pickles/PickleRow;>;", "toString", "()Ljava/util/List<Lcucumber/runtime/table/DiffableRow;>;", "equals", "LNSObject;", "hashCode", "Ljava/util/List<Ljava/util/List<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _CCBDataTable = { "DataTable", "cucumber.api", ptrTable, methods, fields, 7, 0x1, 26, 3, -1, -1, -1, -1, -1 };
  return &_CCBDataTable;
}

@end

CCBDataTable *CCBDataTable_createWithJavaUtilList_(id<JavaUtilList> raw) {
  CCBDataTable_initialize();
  return CCBDataTable_createWithJavaUtilList_withJavaUtilLocale_withNSString_withNSStringArray_(raw, JavaUtilLocale_getDefault(), nil, [IOSObjectArray arrayWithLength:0 type:NSString_class_()]);
}

CCBDataTable *CCBDataTable_createWithJavaUtilList_withNSString_withNSStringArray_(id<JavaUtilList> raw, NSString *format, IOSObjectArray *columnNames) {
  CCBDataTable_initialize();
  return CCBDataTable_createWithJavaUtilList_withJavaUtilLocale_withNSString_withNSStringArray_(raw, JavaUtilLocale_getDefault(), format, columnNames);
}

CCBDataTable *CCBDataTable_createWithJavaUtilList_withJavaUtilLocale_withNSStringArray_(id<JavaUtilList> raw, JavaUtilLocale *locale, IOSObjectArray *columnNames) {
  CCBDataTable_initialize();
  return CCBDataTable_createWithJavaUtilList_withJavaUtilLocale_withNSString_withNSStringArray_(raw, locale, nil, columnNames);
}

CCBDataTable *CCBDataTable_createWithJavaUtilList_withJavaUtilLocale_withNSString_withNSStringArray_(id<JavaUtilList> raw, JavaUtilLocale *locale, NSString *format, IOSObjectArray *columnNames) {
  CCBDataTable_initialize();
  CCBRParameterInfo *parameterInfo = create_CCBRParameterInfo_initWithJavaLangReflectType_withNSString_withNSString_withCCBTransformer_(nil, format, nil, nil);
  id<CCBTableConverter> tableConverter = create_CCBRTableConverter_initWithCCBRLocalizedXStreams_LocalizedXStream_withCCBRParameterInfo_([create_CCBRLocalizedXStreams_initWithJavaLangClassLoader_([((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getContextClassLoader]) getWithJavaUtilLocale:locale], parameterInfo);
  return [tableConverter toTableWithJavaUtilList:raw withNSStringArray:columnNames];
}

void CCBDataTable_initWithGherkinPicklesPickleTable_withCCBTableConverter_(CCBDataTable *self, GherkinPicklesPickleTable *pickleTable, id<CCBTableConverter> tableConverter) {
  NSObject_init(self);
  JreStrongAssign(&self->pickleTable_, pickleTable);
  JreStrongAssign(&self->tableConverter_, tableConverter);
  jint columns = [((id<JavaUtilList>) nil_chk([((GherkinPicklesPickleTable *) nil_chk(pickleTable)) getRows])) isEmpty] ? 0 : [((id<JavaUtilList>) nil_chk([((GherkinPicklesPickleRow *) nil_chk([((id<JavaUtilList>) nil_chk([pickleTable getRows])) getWithInt:0])) getCells])) size];
  id<JavaUtilList> raw = create_JavaUtilArrayList_init();
  for (GherkinPicklesPickleRow * __strong row in nil_chk([pickleTable getRows])) {
    id<JavaUtilList> list = create_JavaUtilArrayList_init();
    for (GherkinPicklesPickleCell * __strong cell in nil_chk([((GherkinPicklesPickleRow *) nil_chk(row)) getCells])) {
      [list addWithId:[((GherkinPicklesPickleCell *) nil_chk(cell)) getValue]];
    }
    if (columns != [((id<JavaUtilList>) nil_chk([row getCells])) size]) {
      @throw create_CCBRCucumberException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Table is unbalanced: expected %s column(s) but found %s.", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(columns), JavaLangInteger_valueOfWithInt_([((id<JavaUtilList>) nil_chk([row getCells])) size]) } count:2 type:NSObject_class_()]));
    }
    [raw addWithId:JavaUtilCollections_unmodifiableListWithJavaUtilList_(list)];
  }
  JreStrongAssign(&self->raw_, JavaUtilCollections_unmodifiableListWithJavaUtilList_(raw));
}

CCBDataTable *new_CCBDataTable_initWithGherkinPicklesPickleTable_withCCBTableConverter_(GherkinPicklesPickleTable *pickleTable, id<CCBTableConverter> tableConverter) {
  J2OBJC_NEW_IMPL(CCBDataTable, initWithGherkinPicklesPickleTable_withCCBTableConverter_, pickleTable, tableConverter)
}

CCBDataTable *create_CCBDataTable_initWithGherkinPicklesPickleTable_withCCBTableConverter_(GherkinPicklesPickleTable *pickleTable, id<CCBTableConverter> tableConverter) {
  J2OBJC_CREATE_IMPL(CCBDataTable, initWithGherkinPicklesPickleTable_withCCBTableConverter_, pickleTable, tableConverter)
}

void CCBDataTable_initWithGherkinPicklesPickleTable_withJavaUtilList_withCCBTableConverter_(CCBDataTable *self, GherkinPicklesPickleTable *pickleTable, id<JavaUtilList> raw, id<CCBTableConverter> tableConverter) {
  NSObject_init(self);
  JreStrongAssign(&self->pickleTable_, pickleTable);
  JreStrongAssign(&self->tableConverter_, tableConverter);
  JreStrongAssign(&self->raw_, JavaUtilCollections_unmodifiableListWithJavaUtilList_(raw));
}

CCBDataTable *new_CCBDataTable_initWithGherkinPicklesPickleTable_withJavaUtilList_withCCBTableConverter_(GherkinPicklesPickleTable *pickleTable, id<JavaUtilList> raw, id<CCBTableConverter> tableConverter) {
  J2OBJC_NEW_IMPL(CCBDataTable, initWithGherkinPicklesPickleTable_withJavaUtilList_withCCBTableConverter_, pickleTable, raw, tableConverter)
}

CCBDataTable *create_CCBDataTable_initWithGherkinPicklesPickleTable_withJavaUtilList_withCCBTableConverter_(GherkinPicklesPickleTable *pickleTable, id<JavaUtilList> raw, id<CCBTableConverter> tableConverter) {
  J2OBJC_CREATE_IMPL(CCBDataTable, initWithGherkinPicklesPickleTable_withJavaUtilList_withCCBTableConverter_, pickleTable, raw, tableConverter)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBDataTable)
