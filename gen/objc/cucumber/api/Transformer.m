//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/api/Transformer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/api/Transformer.h"
#include "cucumber/runtime/ParameterInfo.h"
#include "java/lang/reflect/ParameterizedType.h"
#include "java/lang/reflect/Type.h"
#include "java/util/Locale.h"

@interface CucumberApiTransformer () {
 @public
  id<JavaLangReflectType> type_;
  JavaUtilLocale *locale_;
}

@end

J2OBJC_FIELD_SETTER(CucumberApiTransformer, type_, id<JavaLangReflectType>)
J2OBJC_FIELD_SETTER(CucumberApiTransformer, locale_, JavaUtilLocale *)

@implementation CucumberApiTransformer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CucumberApiTransformer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)toStringWithId:(id)o {
  return [nil_chk(o) description];
}

- (id)fromStringWithNSString:(NSString *)s {
  return [self transformWithNSString:s];
}

- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  return [((IOSClass *) nil_chk(type)) isEqual:self->type_];
}

- (id)transformWithNSString:(NSString *)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setParameterInfoAndLocaleWithCCBRParameterInfo:(CCBRParameterInfo *)parameterInfo
                                    withJavaUtilLocale:(JavaUtilLocale *)locale {
  JreStrongAssign(&self->locale_, locale);
}

- (JavaUtilLocale *)getLocale {
  return locale_;
}

- (void)dealloc {
  RELEASE_(type_);
  RELEASE_(locale_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x11, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x401, 6, 3, -1, 7, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LJavaUtilLocale;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(toStringWithId:);
  methods[2].selector = @selector(fromStringWithNSString:);
  methods[3].selector = @selector(canConvertWithIOSClass:);
  methods[4].selector = @selector(transformWithNSString:);
  methods[5].selector = @selector(setParameterInfoAndLocaleWithCCBRParameterInfo:withJavaUtilLocale:);
  methods[6].selector = @selector(getLocale);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "type_", "LJavaLangReflectType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "locale_", "LJavaUtilLocale;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "toString", "LNSObject;", "fromString", "LNSString;", "canConvert", "LIOSClass;", "transform", "(Ljava/lang/String;)TT;", "setParameterInfoAndLocale", "LCCBRParameterInfo;LJavaUtilLocale;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lcucumber/deps/com/thoughtworks/xstream/converters/SingleValueConverter;" };
  static const J2ObjcClassInfo _CucumberApiTransformer = { "Transformer", "cucumber.api", ptrTable, methods, fields, 7, 0x401, 7, 2, -1, -1, -1, 10, -1 };
  return &_CucumberApiTransformer;
}

@end

void CucumberApiTransformer_init(CucumberApiTransformer *self) {
  NSObject_init(self);
  id<JavaLangReflectParameterizedType> ptype = (id<JavaLangReflectParameterizedType>) cast_check([[self java_getClass] getGenericSuperclass], JavaLangReflectParameterizedType_class_());
  JreStrongAssign(&self->type_, IOSObjectArray_Get(nil_chk([((id<JavaLangReflectParameterizedType>) nil_chk(ptype)) getActualTypeArguments]), 0));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberApiTransformer)
