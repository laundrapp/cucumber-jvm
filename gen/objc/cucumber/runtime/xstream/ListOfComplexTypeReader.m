//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/laundrapp_org/cucumber-jvm/core/src/main/java/cucumber/runtime/xstream/ListOfComplexTypeReader.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/ErrorWriter.h"
#include "cucumber/deps/com/thoughtworks/xstream/io/AbstractReader.h"
#include "cucumber/runtime/xstream/ListOfComplexTypeReader.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@interface CucumberRuntimeXstreamListOfComplexTypeReader () {
 @public
  IOSClass *itemType_;
  id<JavaUtilList> attributeNames_;
  id<JavaUtilIterator> itemIterator_;
  jint depth_;
  id<JavaUtilIterator> attributeNameIterator_;
  NSString *attributeName_;
  id<JavaUtilIterator> attributeValueIterator_;
  NSString *attributeValue_;
}

@end

J2OBJC_FIELD_SETTER(CucumberRuntimeXstreamListOfComplexTypeReader, itemType_, IOSClass *)
J2OBJC_FIELD_SETTER(CucumberRuntimeXstreamListOfComplexTypeReader, attributeNames_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CucumberRuntimeXstreamListOfComplexTypeReader, itemIterator_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(CucumberRuntimeXstreamListOfComplexTypeReader, attributeNameIterator_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(CucumberRuntimeXstreamListOfComplexTypeReader, attributeName_, NSString *)
J2OBJC_FIELD_SETTER(CucumberRuntimeXstreamListOfComplexTypeReader, attributeValueIterator_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(CucumberRuntimeXstreamListOfComplexTypeReader, attributeValue_, NSString *)

@implementation CucumberRuntimeXstreamListOfComplexTypeReader

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)itemType
                          withJavaUtilList:(id<JavaUtilList>)attributeNames
                          withJavaUtilList:(id<JavaUtilList>)items {
  CucumberRuntimeXstreamListOfComplexTypeReader_initWithIOSClass_withJavaUtilList_withJavaUtilList_(self, itemType, attributeNames, items);
  return self;
}

- (jboolean)hasMoreChildren {
  switch (depth_) {
    case 0:
    return [((id<JavaUtilIterator>) nil_chk(itemIterator_)) hasNext];
    case 1:
    return [((id<JavaUtilIterator>) nil_chk(attributeNameIterator_)) hasNext];
    case 2:
    return false;
    default:
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"Depth is ", depth_));
  }
}

- (void)moveDown {
  depth_++;
  switch (depth_) {
    case 1:
    JreStrongAssign(&attributeNameIterator_, [((id<JavaUtilList>) nil_chk(attributeNames_)) iterator]);
    JreStrongAssign(&attributeValueIterator_, [((id<JavaUtilList>) nil_chk([((id<JavaUtilIterator>) nil_chk(itemIterator_)) next])) iterator]);
    break;
    case 2:
    JreStrongAssign(&attributeName_, [((id<JavaUtilIterator>) nil_chk(attributeNameIterator_)) next]);
    JreStrongAssign(&attributeValue_, [((id<JavaUtilIterator>) nil_chk(attributeValueIterator_)) next]);
    break;
    default:
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"Depth is ", depth_));
  }
}

- (void)moveUp {
  depth_--;
}

- (NSString *)getNodeName {
  switch (depth_) {
    case 0:
    return @"list";
    case 1:
    return [((IOSClass *) nil_chk(itemType_)) getName];
    case 2:
    return attributeName_;
    default:
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"Depth is ", depth_));
  }
}

- (NSString *)getValue {
  return attributeValue_;
}

- (NSString *)getAttributeWithNSString:(NSString *)name {
  return nil;
}

- (NSString *)getAttributeWithInt:(jint)index {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jint)getAttributeCount {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (NSString *)getAttributeNameWithInt:(jint)index {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilIterator>)getAttributeNames {
  return [((id<JavaUtilList>) nil_chk(JavaUtilCollections_emptyList())) iterator];
}

- (void)appendErrorsWithCucumberDepsComThoughtworksXstreamConvertersErrorWriter:(id<CucumberDepsComThoughtworksXstreamConvertersErrorWriter>)errorWriter {
}

- (void)close {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)dealloc {
  RELEASE_(itemType_);
  RELEASE_(attributeNames_);
  RELEASE_(itemIterator_);
  RELEASE_(attributeNameIterator_);
  RELEASE_(attributeName_);
  RELEASE_(attributeValueIterator_);
  RELEASE_(attributeValue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIOSClass:withJavaUtilList:withJavaUtilList:);
  methods[1].selector = @selector(hasMoreChildren);
  methods[2].selector = @selector(moveDown);
  methods[3].selector = @selector(moveUp);
  methods[4].selector = @selector(getNodeName);
  methods[5].selector = @selector(getValue);
  methods[6].selector = @selector(getAttributeWithNSString:);
  methods[7].selector = @selector(getAttributeWithInt:);
  methods[8].selector = @selector(getAttributeCount);
  methods[9].selector = @selector(getAttributeNameWithInt:);
  methods[10].selector = @selector(getAttributeNames);
  methods[11].selector = @selector(appendErrorsWithCucumberDepsComThoughtworksXstreamConvertersErrorWriter:);
  methods[12].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "itemType_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "attributeNames_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
    { "itemIterator_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
    { "depth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "attributeNameIterator_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x2, -1, -1, 10, -1 },
    { "attributeName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "attributeValueIterator_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x2, -1, -1, 10, -1 },
    { "attributeValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;LJavaUtilList;LJavaUtilList;", "(Ljava/lang/Class;Ljava/util/List<Ljava/lang/String;>;Ljava/util/List<Ljava/util/List<Ljava/lang/String;>;>;)V", "getAttribute", "LNSString;", "I", "getAttributeName", "appendErrors", "LCucumberDepsComThoughtworksXstreamConvertersErrorWriter;", "Ljava/util/List<Ljava/lang/String;>;", "Ljava/util/Iterator<Ljava/util/List<Ljava/lang/String;>;>;", "Ljava/util/Iterator<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeXstreamListOfComplexTypeReader = { "ListOfComplexTypeReader", "cucumber.runtime.xstream", ptrTable, methods, fields, 7, 0x1, 13, 8, -1, -1, -1, -1, -1 };
  return &_CucumberRuntimeXstreamListOfComplexTypeReader;
}

@end

void CucumberRuntimeXstreamListOfComplexTypeReader_initWithIOSClass_withJavaUtilList_withJavaUtilList_(CucumberRuntimeXstreamListOfComplexTypeReader *self, IOSClass *itemType, id<JavaUtilList> attributeNames, id<JavaUtilList> items) {
  CucumberDepsComThoughtworksXstreamIoAbstractReader_init(self);
  self->depth_ = 0;
  JreStrongAssign(&self->itemType_, itemType);
  JreStrongAssign(&self->attributeNames_, attributeNames);
  JreStrongAssign(&self->itemIterator_, [((id<JavaUtilList>) nil_chk(items)) iterator]);
}

CucumberRuntimeXstreamListOfComplexTypeReader *new_CucumberRuntimeXstreamListOfComplexTypeReader_initWithIOSClass_withJavaUtilList_withJavaUtilList_(IOSClass *itemType, id<JavaUtilList> attributeNames, id<JavaUtilList> items) {
  J2OBJC_NEW_IMPL(CucumberRuntimeXstreamListOfComplexTypeReader, initWithIOSClass_withJavaUtilList_withJavaUtilList_, itemType, attributeNames, items)
}

CucumberRuntimeXstreamListOfComplexTypeReader *create_CucumberRuntimeXstreamListOfComplexTypeReader_initWithIOSClass_withJavaUtilList_withJavaUtilList_(IOSClass *itemType, id<JavaUtilList> attributeNames, id<JavaUtilList> items) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeXstreamListOfComplexTypeReader, initWithIOSClass_withJavaUtilList_withJavaUtilList_, itemType, attributeNames, items)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeXstreamListOfComplexTypeReader)
