//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/xstream/DynamicClassWithStringAssignableConverter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/SingleValueConverterWrapper.h"
#include "cucumber/runtime/xstream/ClassWithStringAssignableConstructorConverter.h"
#include "cucumber/runtime/xstream/DynamicClassBasedSingleValueConverter.h"
#include "cucumber/runtime/xstream/DynamicClassWithStringAssignableConverter.h"
#include "cucumber/runtime/xstream/SingleValueConverterWrapperExt.h"
#include "java/lang/reflect/Constructor.h"

@interface CCBRDynamicClassWithStringAssignableConverter ()

+ (JavaLangReflectConstructor *)findAssignableConstructorWithIOSClass:(IOSClass *)type;

@end

__attribute__((unused)) static JavaLangReflectConstructor *CCBRDynamicClassWithStringAssignableConverter_findAssignableConstructorWithIOSClass_(IOSClass *type);

@implementation CCBRDynamicClassWithStringAssignableConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CCBRDynamicClassWithStringAssignableConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (CucumberDepsComThoughtworksXstreamConvertersSingleValueConverterWrapper *)converterForClassWithIOSClass:(IOSClass *)type {
  JavaLangReflectConstructor *assignableConstructor = CCBRDynamicClassWithStringAssignableConverter_findAssignableConstructorWithIOSClass_(type);
  return create_CCBRSingleValueConverterWrapperExt_initWithCucumberDepsComThoughtworksXstreamConvertersSingleValueConverter_(create_CCBRClassWithStringAssignableConstructorConverter_initWithJavaLangReflectConstructor_(assignableConstructor));
}

- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  return nil != CCBRDynamicClassWithStringAssignableConverter_findAssignableConstructorWithIOSClass_(type);
}

+ (JavaLangReflectConstructor *)findAssignableConstructorWithIOSClass:(IOSClass *)type {
  return CCBRDynamicClassWithStringAssignableConverter_findAssignableConstructorWithIOSClass_(type);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LCucumberDepsComThoughtworksXstreamConvertersSingleValueConverterWrapper;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectConstructor;", 0xa, 3, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(converterForClassWithIOSClass:);
  methods[2].selector = @selector(canConvertWithIOSClass:);
  methods[3].selector = @selector(findAssignableConstructorWithIOSClass:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "converterForClass", "LIOSClass;", "canConvert", "findAssignableConstructor" };
  static const J2ObjcClassInfo _CCBRDynamicClassWithStringAssignableConverter = { "DynamicClassWithStringAssignableConverter", "cucumber.runtime.xstream", ptrTable, methods, NULL, 7, 0x0, 4, 0, -1, -1, -1, -1, -1 };
  return &_CCBRDynamicClassWithStringAssignableConverter;
}

@end

void CCBRDynamicClassWithStringAssignableConverter_init(CCBRDynamicClassWithStringAssignableConverter *self) {
  CCBRDynamicClassBasedSingleValueConverter_init(self);
}

CCBRDynamicClassWithStringAssignableConverter *new_CCBRDynamicClassWithStringAssignableConverter_init() {
  J2OBJC_NEW_IMPL(CCBRDynamicClassWithStringAssignableConverter, init)
}

CCBRDynamicClassWithStringAssignableConverter *create_CCBRDynamicClassWithStringAssignableConverter_init() {
  J2OBJC_CREATE_IMPL(CCBRDynamicClassWithStringAssignableConverter, init)
}

JavaLangReflectConstructor *CCBRDynamicClassWithStringAssignableConverter_findAssignableConstructorWithIOSClass_(IOSClass *type) {
  CCBRDynamicClassWithStringAssignableConverter_initialize();
  {
    IOSObjectArray *a__ = [((IOSClass *) nil_chk(type)) getConstructors];
    JavaLangReflectConstructor * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaLangReflectConstructor * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaLangReflectConstructor *constructor = *b__++;
      if (((IOSObjectArray *) nil_chk([((JavaLangReflectConstructor *) nil_chk(constructor)) getParameterTypes]))->size_ == 1 && [((IOSClass *) nil_chk(IOSObjectArray_Get(nil_chk([constructor getParameterTypes]), 0))) isAssignableFrom:NSString_class_()]) {
        return constructor;
      }
    }
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRDynamicClassWithStringAssignableConverter)
