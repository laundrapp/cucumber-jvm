//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/laundrapp_org/cucumber-jvm/core/src/main/java/cucumber/runtime/xstream/ComplexTypeWriter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/deps/com/thoughtworks/xstream/annotations/XStreamConverter.h"
#include "cucumber/runtime/CucumberException.h"
#include "cucumber/runtime/table/CamelCaseStringConverter.h"
#include "cucumber/runtime/table/PascalCaseStringConverter.h"
#include "cucumber/runtime/xstream/CellWriter.h"
#include "cucumber/runtime/xstream/ComplexTypeWriter.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/NoSuchFieldException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Modifier.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/Stack.h"

@interface CucumberRuntimeXstreamComplexTypeWriter () {
 @public
  id<JavaUtilList> columnNames_;
  id<JavaUtilMap> fields_;
  JavaUtilStack *currentKey_;
}

+ (CucumberRuntimeCucumberException *)createMissingConverterExceptionWithNSString:(NSString *)clazz
                                                                     withNSString:(NSString *)field;

+ (NSString *)modifierAndTypeOfFieldWithNSString:(NSString *)clazz
                                    withNSString:(NSString *)fieldName;

@end

J2OBJC_FIELD_SETTER(CucumberRuntimeXstreamComplexTypeWriter, columnNames_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CucumberRuntimeXstreamComplexTypeWriter, fields_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(CucumberRuntimeXstreamComplexTypeWriter, currentKey_, JavaUtilStack *)

__attribute__((unused)) static CucumberRuntimeCucumberException *CucumberRuntimeXstreamComplexTypeWriter_createMissingConverterExceptionWithNSString_withNSString_(NSString *clazz, NSString *field);

__attribute__((unused)) static NSString *CucumberRuntimeXstreamComplexTypeWriter_modifierAndTypeOfFieldWithNSString_withNSString_(NSString *clazz, NSString *fieldName);

@implementation CucumberRuntimeXstreamComplexTypeWriter

- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)columnNames {
  CucumberRuntimeXstreamComplexTypeWriter_initWithJavaUtilList_(self, columnNames);
  return self;
}

- (id<JavaUtilList>)getHeader {
  return [((id<JavaUtilList>) nil_chk(columnNames_)) isEmpty] ? create_JavaUtilArrayList_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(fields_)) keySet]) : columnNames_;
}

- (id<JavaUtilList>)getValues {
  CucumberRuntimeTableCamelCaseStringConverter *converter = create_CucumberRuntimeTableCamelCaseStringConverter_init();
  if (![((id<JavaUtilList>) nil_chk(columnNames_)) isEmpty]) {
    IOSObjectArray *explicitFieldValues = [IOSObjectArray arrayWithLength:[columnNames_ size] type:NSString_class_()];
    jint n = 0;
    for (NSString * __strong columnName in columnNames_) {
      NSString *convertedColumnName = [converter mapWithNSString:columnName];
      if ([((id<JavaUtilMap>) nil_chk(fields_)) containsKeyWithId:convertedColumnName]) {
        IOSObjectArray_Set(explicitFieldValues, n, [fields_ getWithId:convertedColumnName]);
      }
      else {
        IOSObjectArray_Set(explicitFieldValues, n, @"");
      }
      n++;
    }
    return JavaUtilArrays_asListWithNSObjectArray_(explicitFieldValues);
  }
  else {
    return create_JavaUtilArrayList_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(fields_)) values]);
  }
}

- (void)startNodeWithNSString:(NSString *)name {
  [((JavaUtilStack *) nil_chk(currentKey_)) pushWithId:name];
  if ([currentKey_ size] == 2) {
    [((id<JavaUtilMap>) nil_chk(fields_)) putWithId:name withId:@""];
  }
}

- (void)addAttributeWithNSString:(NSString *)name
                    withNSString:(NSString *)value {
}

- (void)setValueWithNSString:(NSString *)value {
  if ([((JavaUtilStack *) nil_chk(currentKey_)) size] < 2) {
    return;
  }
  if ([currentKey_ size] == 2) {
    [((id<JavaUtilMap>) nil_chk(fields_)) putWithId:[currentKey_ peek] withId:value == nil ? @"" : value];
    return;
  }
  NSString *clazz = [currentKey_ getWithInt:0];
  NSString *field = [currentKey_ getWithInt:1];
  if (([((id<JavaUtilList>) nil_chk(columnNames_)) isEmpty] || [columnNames_ containsWithId:field])) {
    @throw nil_chk(CucumberRuntimeXstreamComplexTypeWriter_createMissingConverterExceptionWithNSString_withNSString_(clazz, field));
  }
}

- (void)endNode {
  [((JavaUtilStack *) nil_chk(currentKey_)) pop];
}

- (void)flush {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)close {
  @throw create_JavaLangUnsupportedOperationException_init();
}

+ (CucumberRuntimeCucumberException *)createMissingConverterExceptionWithNSString:(NSString *)clazz
                                                                     withNSString:(NSString *)field {
  return CucumberRuntimeXstreamComplexTypeWriter_createMissingConverterExceptionWithNSString_withNSString_(clazz, field);
}

+ (NSString *)modifierAndTypeOfFieldWithNSString:(NSString *)clazz
                                    withNSString:(NSString *)fieldName {
  return CucumberRuntimeXstreamComplexTypeWriter_modifierAndTypeOfFieldWithNSString_withNSString_(clazz, fieldName);
}

- (void)dealloc {
  RELEASE_(columnNames_);
  RELEASE_(fields_);
  RELEASE_(currentKey_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LCucumberRuntimeCucumberException;", 0xa, 8, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 9, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilList:);
  methods[1].selector = @selector(getHeader);
  methods[2].selector = @selector(getValues);
  methods[3].selector = @selector(startNodeWithNSString:);
  methods[4].selector = @selector(addAttributeWithNSString:withNSString:);
  methods[5].selector = @selector(setValueWithNSString:);
  methods[6].selector = @selector(endNode);
  methods[7].selector = @selector(flush);
  methods[8].selector = @selector(close);
  methods[9].selector = @selector(createMissingConverterExceptionWithNSString:withNSString:);
  methods[10].selector = @selector(modifierAndTypeOfFieldWithNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "columnNames_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "fields_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
    { "currentKey_", "LJavaUtilStack;", .constantValue.asLong = 0, 0x12, -1, -1, 12, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)V", "()Ljava/util/List<Ljava/lang/String;>;", "startNode", "LNSString;", "addAttribute", "LNSString;LNSString;", "setValue", "createMissingConverterException", "modifierAndTypeOfField", "Ljava/util/List<Ljava/lang/String;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "Ljava/util/Stack<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeXstreamComplexTypeWriter = { "ComplexTypeWriter", "cucumber.runtime.xstream", ptrTable, methods, fields, 7, 0x1, 11, 3, -1, -1, -1, -1, -1 };
  return &_CucumberRuntimeXstreamComplexTypeWriter;
}

@end

void CucumberRuntimeXstreamComplexTypeWriter_initWithJavaUtilList_(CucumberRuntimeXstreamComplexTypeWriter *self, id<JavaUtilList> columnNames) {
  CucumberRuntimeXstreamCellWriter_init(self);
  JreStrongAssignAndConsume(&self->fields_, new_JavaUtilLinkedHashMap_init());
  JreStrongAssignAndConsume(&self->currentKey_, new_JavaUtilStack_init());
  JreStrongAssign(&self->columnNames_, columnNames);
}

CucumberRuntimeXstreamComplexTypeWriter *new_CucumberRuntimeXstreamComplexTypeWriter_initWithJavaUtilList_(id<JavaUtilList> columnNames) {
  J2OBJC_NEW_IMPL(CucumberRuntimeXstreamComplexTypeWriter, initWithJavaUtilList_, columnNames)
}

CucumberRuntimeXstreamComplexTypeWriter *create_CucumberRuntimeXstreamComplexTypeWriter_initWithJavaUtilList_(id<JavaUtilList> columnNames) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeXstreamComplexTypeWriter, initWithJavaUtilList_, columnNames)
}

CucumberRuntimeCucumberException *CucumberRuntimeXstreamComplexTypeWriter_createMissingConverterExceptionWithNSString_withNSString_(NSString *clazz, NSString *field) {
  CucumberRuntimeXstreamComplexTypeWriter_initialize();
  CucumberRuntimeTablePascalCaseStringConverter *converter = create_CucumberRuntimeTablePascalCaseStringConverter_init();
  return create_CucumberRuntimeCucumberException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Don't know how to convert \"%s.%s\" into a table entry.\nEither exclude %s from the table by selecting the fields to include:\n\nDataTable.create(entries, \"Field\", \"Other Field\")\n\nOr try writing your own converter:\n\n@%s(%sConverter.class)\n%s %s;\n", [IOSObjectArray arrayWithObjects:(id[]){ clazz, field, field, [CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter_class_() getName], [converter mapWithNSString:field], CucumberRuntimeXstreamComplexTypeWriter_modifierAndTypeOfFieldWithNSString_withNSString_(clazz, field), field } count:7 type:NSObject_class_()]));
}

NSString *CucumberRuntimeXstreamComplexTypeWriter_modifierAndTypeOfFieldWithNSString_withNSString_(NSString *clazz, NSString *fieldName) {
  CucumberRuntimeXstreamComplexTypeWriter_initialize();
  @try {
    JavaLangReflectField *field = [((IOSClass *) nil_chk(IOSClass_forName_(clazz))) getDeclaredField:fieldName];
    NSString *simpleTypeName = [((IOSClass *) nil_chk([((JavaLangReflectField *) nil_chk(field)) getType])) getSimpleName];
    NSString *modifiers = JavaLangReflectModifier_toStringWithInt_([field getModifiers]);
    return JreStrcat("$C$", modifiers, ' ', simpleTypeName);
  }
  @catch (JavaLangNoSuchFieldException *e) {
    return @"private Object";
  }
  @catch (JavaLangClassNotFoundException *e) {
    return @"private Object";
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeXstreamComplexTypeWriter)
