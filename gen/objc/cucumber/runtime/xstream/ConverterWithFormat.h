//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/xstream/ConverterWithFormat.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CucumberRuntimeXstreamConverterWithFormat")
#ifdef RESTRICT_CucumberRuntimeXstreamConverterWithFormat
#define INCLUDE_ALL_CucumberRuntimeXstreamConverterWithFormat 0
#else
#define INCLUDE_ALL_CucumberRuntimeXstreamConverterWithFormat 1
#endif
#undef RESTRICT_CucumberRuntimeXstreamConverterWithFormat

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (CCBRConverterWithFormat_) && (INCLUDE_ALL_CucumberRuntimeXstreamConverterWithFormat || defined(INCLUDE_CCBRConverterWithFormat))
#define CCBRConverterWithFormat_

#define RESTRICT_CucumberApiTransformer 1
#define INCLUDE_CucumberApiTransformer 1
#include "cucumber/api/Transformer.h"

@class IOSClass;
@class IOSObjectArray;
@class JavaTextFormat;
@protocol JavaUtilList;

@interface CCBRConverterWithFormat : CucumberApiTransformer

#pragma mark Public

- (jboolean)canConvertWithIOSClass:(IOSClass *)type;

- (NSString *)toStringWithId:(id)obj;

- (id)transformWithNSString:(NSString *)string;

#pragma mark Protected

/*!
 @return A Format to parse the argument
 */
- (id<JavaUtilList>)getFormats;

#pragma mark Package-Private

- (instancetype __nonnull)initWithIOSClassArray:(IOSObjectArray *)convertibleTypes;

/*!
 @brief Parses a value using one of the java.util.text format classes.
 @param format The format to use
 @param argument The object to parse
 @return The object
 */
- (id)transformWithJavaTextFormat:(JavaTextFormat *)format
                     withNSString:(NSString *)argument;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRConverterWithFormat)

FOUNDATION_EXPORT void CCBRConverterWithFormat_initWithIOSClassArray_(CCBRConverterWithFormat *self, IOSObjectArray *convertibleTypes);

J2OBJC_TYPE_LITERAL_HEADER(CCBRConverterWithFormat)

@compatibility_alias CucumberRuntimeXstreamConverterWithFormat CCBRConverterWithFormat;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_CucumberRuntimeXstreamConverterWithFormat")
