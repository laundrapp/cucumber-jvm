//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/xstream/ClassWithStringAssignableConstructorConverter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/runtime/CucumberException.h"
#include "cucumber/runtime/xstream/ClassWithStringAssignableConstructorConverter.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/InvocationTargetException.h"

@interface CCBRClassWithStringAssignableConstructorConverter () {
 @public
  JavaLangReflectConstructor *ctor_;
}

@end

J2OBJC_FIELD_SETTER(CCBRClassWithStringAssignableConstructorConverter, ctor_, JavaLangReflectConstructor *)

@implementation CCBRClassWithStringAssignableConstructorConverter

- (instancetype __nonnull)initWithJavaLangReflectConstructor:(JavaLangReflectConstructor *)constructor {
  CCBRClassWithStringAssignableConstructorConverter_initWithJavaLangReflectConstructor_(self, constructor);
  return self;
}

- (NSString *)toStringWithId:(id)obj {
  return [nil_chk(obj) description];
}

- (id)fromStringWithNSString:(NSString *)str {
  @try {
    return [((JavaLangReflectConstructor *) nil_chk(ctor_)) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ str } count:1 type:NSObject_class_()]];
  }
  @catch (JavaLangInstantiationException *e) {
    @throw create_CCBRCucumberException_initWithJavaLangThrowable_(e);
  }
  @catch (JavaLangIllegalAccessException *e) {
    @throw create_CCBRCucumberException_initWithJavaLangThrowable_(e);
  }
  @catch (JavaLangReflectInvocationTargetException *e) {
    @throw create_CCBRCucumberException_initWithJavaLangThrowable_([e getTargetException]);
  }
}

- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  return [((IOSClass *) nil_chk([((JavaLangReflectConstructor *) nil_chk(ctor_)) getDeclaringClass])) isEqual:type];
}

- (void)dealloc {
  RELEASE_(ctor_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangReflectConstructor:);
  methods[1].selector = @selector(toStringWithId:);
  methods[2].selector = @selector(fromStringWithNSString:);
  methods[3].selector = @selector(canConvertWithIOSClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ctor_", "LJavaLangReflectConstructor;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangReflectConstructor;", "toString", "LNSObject;", "fromString", "LNSString;", "canConvert", "LIOSClass;" };
  static const J2ObjcClassInfo _CCBRClassWithStringAssignableConstructorConverter = { "ClassWithStringAssignableConstructorConverter", "cucumber.runtime.xstream", ptrTable, methods, fields, 7, 0x0, 4, 1, -1, -1, -1, -1, -1 };
  return &_CCBRClassWithStringAssignableConstructorConverter;
}

@end

void CCBRClassWithStringAssignableConstructorConverter_initWithJavaLangReflectConstructor_(CCBRClassWithStringAssignableConstructorConverter *self, JavaLangReflectConstructor *constructor) {
  NSObject_init(self);
  JreStrongAssign(&self->ctor_, constructor);
}

CCBRClassWithStringAssignableConstructorConverter *new_CCBRClassWithStringAssignableConstructorConverter_initWithJavaLangReflectConstructor_(JavaLangReflectConstructor *constructor) {
  J2OBJC_NEW_IMPL(CCBRClassWithStringAssignableConstructorConverter, initWithJavaLangReflectConstructor_, constructor)
}

CCBRClassWithStringAssignableConstructorConverter *create_CCBRClassWithStringAssignableConstructorConverter_initWithJavaLangReflectConstructor_(JavaLangReflectConstructor *constructor) {
  J2OBJC_CREATE_IMPL(CCBRClassWithStringAssignableConstructorConverter, initWithJavaLangReflectConstructor_, constructor)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRClassWithStringAssignableConstructorConverter)
