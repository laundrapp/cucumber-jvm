//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/xstream/ListConverter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/deps/com/thoughtworks/xstream/converters/SingleValueConverter.h"
#include "cucumber/runtime/xstream/ListConverter.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface CCBRListConverter () {
 @public
  NSString *delimiter_;
  id<CucumberDepsComThoughtworksXstreamConvertersSingleValueConverter> delegate_;
}

@end

J2OBJC_FIELD_SETTER(CCBRListConverter, delimiter_, NSString *)
J2OBJC_FIELD_SETTER(CCBRListConverter, delegate_, id<CucumberDepsComThoughtworksXstreamConvertersSingleValueConverter>)

@implementation CCBRListConverter

- (instancetype __nonnull)initWithNSString:(NSString *)delimiter
withCucumberDepsComThoughtworksXstreamConvertersSingleValueConverter:(id<CucumberDepsComThoughtworksXstreamConvertersSingleValueConverter>)delegate {
  CCBRListConverter_initWithNSString_withCucumberDepsComThoughtworksXstreamConvertersSingleValueConverter_(self, delimiter, delegate);
  return self;
}

- (NSString *)toStringWithId:(id)obj {
  jboolean first = true;
  if ([JavaUtilList_class_() isInstance:obj]) {
    JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
    for (id __strong elem in nil_chk((id<JavaUtilList>) cast_check(obj, JavaUtilList_class_()))) {
      if (!first) {
        [sb appendWithNSString:delimiter_];
      }
      [sb appendWithNSString:[((id<CucumberDepsComThoughtworksXstreamConvertersSingleValueConverter>) nil_chk(delegate_)) toStringWithId:elem]];
      first = false;
    }
    return [sb description];
  }
  else {
    return [((id<CucumberDepsComThoughtworksXstreamConvertersSingleValueConverter>) nil_chk(delegate_)) toStringWithId:obj];
  }
}

- (id)fromStringWithNSString:(NSString *)s {
  if ([((NSString *) nil_chk(s)) java_isEmpty]) {
    return create_JavaUtilArrayList_initWithInt_(0);
  }
  IOSObjectArray *strings = [s java_split:delimiter_];
  id<JavaUtilList> list = create_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(strings))->size_);
  {
    IOSObjectArray *a__ = strings;
    NSString * const *b__ = a__->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *elem = *b__++;
      [list addWithId:[((id<CucumberDepsComThoughtworksXstreamConvertersSingleValueConverter>) nil_chk(delegate_)) fromStringWithNSString:elem]];
    }
  }
  return list;
}

- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  return [JavaUtilList_class_() isAssignableFrom:type];
}

- (void)dealloc {
  RELEASE_(delimiter_);
  RELEASE_(delegate_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withCucumberDepsComThoughtworksXstreamConvertersSingleValueConverter:);
  methods[1].selector = @selector(toStringWithId:);
  methods[2].selector = @selector(fromStringWithNSString:);
  methods[3].selector = @selector(canConvertWithIOSClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delimiter_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "delegate_", "LCucumberDepsComThoughtworksXstreamConvertersSingleValueConverter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LCucumberDepsComThoughtworksXstreamConvertersSingleValueConverter;", "toString", "LNSObject;", "fromString", "LNSString;", "canConvert", "LIOSClass;" };
  static const J2ObjcClassInfo _CCBRListConverter = { "ListConverter", "cucumber.runtime.xstream", ptrTable, methods, fields, 7, 0x0, 4, 2, -1, -1, -1, -1, -1 };
  return &_CCBRListConverter;
}

@end

void CCBRListConverter_initWithNSString_withCucumberDepsComThoughtworksXstreamConvertersSingleValueConverter_(CCBRListConverter *self, NSString *delimiter, id<CucumberDepsComThoughtworksXstreamConvertersSingleValueConverter> delegate) {
  NSObject_init(self);
  JreStrongAssign(&self->delimiter_, delimiter);
  JreStrongAssign(&self->delegate_, delegate);
}

CCBRListConverter *new_CCBRListConverter_initWithNSString_withCucumberDepsComThoughtworksXstreamConvertersSingleValueConverter_(NSString *delimiter, id<CucumberDepsComThoughtworksXstreamConvertersSingleValueConverter> delegate) {
  J2OBJC_NEW_IMPL(CCBRListConverter, initWithNSString_withCucumberDepsComThoughtworksXstreamConvertersSingleValueConverter_, delimiter, delegate)
}

CCBRListConverter *create_CCBRListConverter_initWithNSString_withCucumberDepsComThoughtworksXstreamConvertersSingleValueConverter_(NSString *delimiter, id<CucumberDepsComThoughtworksXstreamConvertersSingleValueConverter> delegate) {
  J2OBJC_CREATE_IMPL(CCBRListConverter, initWithNSString_withCucumberDepsComThoughtworksXstreamConvertersSingleValueConverter_, delimiter, delegate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRListConverter)
