//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/xstream/TimeConverter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/runtime/ParameterInfo.h"
#include "cucumber/runtime/xstream/ConverterWithFormat.h"
#include "cucumber/runtime/xstream/TimeConverter.h"
#include "java/text/DateFormat.h"
#include "java/text/Format.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "java/util/Locale.h"

@interface CucumberRuntimeXstreamTimeConverter () {
 @public
  id<JavaUtilList> formats_;
  NSString *format_;
}

- (JavaTextFormat *)getOnlyFormat;

@end

J2OBJC_FIELD_SETTER(CucumberRuntimeXstreamTimeConverter, formats_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CucumberRuntimeXstreamTimeConverter, format_, NSString *)

__attribute__((unused)) static JavaTextFormat *CucumberRuntimeXstreamTimeConverter_getOnlyFormat(CucumberRuntimeXstreamTimeConverter *self);

@implementation CucumberRuntimeXstreamTimeConverter

- (instancetype __nonnull)initWithJavaUtilLocale:(JavaUtilLocale *)locale
                               withIOSClassArray:(IOSObjectArray *)convertibleTypes {
  CucumberRuntimeXstreamTimeConverter_initWithJavaUtilLocale_withIOSClassArray_(self, locale, convertibleTypes);
  return self;
}

- (void)addFormatWithInt:(jint)style
      withJavaUtilLocale:(JavaUtilLocale *)locale {
  [self addWithJavaTextDateFormat:JavaTextDateFormat_getDateInstanceWithInt_withJavaUtilLocale_(style, locale)];
}

- (void)addWithJavaTextDateFormat:(JavaTextDateFormat *)dateFormat {
  [((JavaTextDateFormat *) nil_chk(dateFormat)) setLenientWithBoolean:false];
  [((id<JavaUtilList>) nil_chk(formats_)) addWithId:dateFormat];
}

- (id<JavaUtilList>)getFormats {
  return format_ == nil ? formats_ : JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ CucumberRuntimeXstreamTimeConverter_getOnlyFormat(self) } count:1 type:JavaTextFormat_class_()]);
}

- (JavaTextFormat *)getOnlyFormat {
  return CucumberRuntimeXstreamTimeConverter_getOnlyFormat(self);
}

- (NSString *)toStringWithId:(id)obj {
  if ([obj isKindOfClass:[JavaUtilCalendar class]]) {
    obj = [((JavaUtilCalendar *) nil_chk(((JavaUtilCalendar *) cast_chk(obj, [JavaUtilCalendar class])))) getTime];
  }
  return [super toStringWithId:obj];
}

- (void)setParameterInfoAndLocaleWithCucumberRuntimeParameterInfo:(CucumberRuntimeParameterInfo *)parameterInfo
                                               withJavaUtilLocale:(JavaUtilLocale *)locale {
  [super setParameterInfoAndLocaleWithCucumberRuntimeParameterInfo:parameterInfo withJavaUtilLocale:locale];
  if ([((CucumberRuntimeParameterInfo *) nil_chk(parameterInfo)) getFormat] != nil) {
    JreStrongAssign(&format_, [parameterInfo getFormat]);
  }
}

- (void)removeOnlyFormat {
  JreStrongAssign(&format_, nil);
}

+ (id<JavaUtilList>)getTimeClasses {
  return CucumberRuntimeXstreamTimeConverter_getTimeClasses();
}

- (void)dealloc {
  RELEASE_(formats_);
  RELEASE_(format_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LJavaTextFormat;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, -1, -1, -1, 10, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilLocale:withIOSClassArray:);
  methods[1].selector = @selector(addFormatWithInt:withJavaUtilLocale:);
  methods[2].selector = @selector(addWithJavaTextDateFormat:);
  methods[3].selector = @selector(getFormats);
  methods[4].selector = @selector(getOnlyFormat);
  methods[5].selector = @selector(toStringWithId:);
  methods[6].selector = @selector(setParameterInfoAndLocaleWithCucumberRuntimeParameterInfo:withJavaUtilLocale:);
  methods[7].selector = @selector(removeOnlyFormat);
  methods[8].selector = @selector(getTimeClasses);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "formats_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
    { "format_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilLocale;[LIOSClass;", "addFormat", "ILJavaUtilLocale;", "add", "LJavaTextDateFormat;", "()Ljava/util/List<+Ljava/text/Format;>;", "toString", "LNSObject;", "setParameterInfoAndLocale", "LCucumberRuntimeParameterInfo;LJavaUtilLocale;", "()Ljava/util/List<Ljava/lang/Class;>;", "Ljava/util/List<Ljava/text/DateFormat;>;", "<T:Ljava/lang/Object;>Lcucumber/runtime/xstream/ConverterWithFormat<TT;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeXstreamTimeConverter = { "TimeConverter", "cucumber.runtime.xstream", ptrTable, methods, fields, 7, 0x400, 9, 2, -1, -1, -1, 12, -1 };
  return &_CucumberRuntimeXstreamTimeConverter;
}

@end

void CucumberRuntimeXstreamTimeConverter_initWithJavaUtilLocale_withIOSClassArray_(CucumberRuntimeXstreamTimeConverter *self, JavaUtilLocale *locale, IOSObjectArray *convertibleTypes) {
  CucumberRuntimeXstreamConverterWithFormat_initWithIOSClassArray_(self, convertibleTypes);
  JreStrongAssignAndConsume(&self->formats_, new_JavaUtilArrayList_init());
  [self addFormatWithInt:JavaTextDateFormat_SHORT withJavaUtilLocale:locale];
  [self addFormatWithInt:JavaTextDateFormat_MEDIUM withJavaUtilLocale:locale];
  [self addFormatWithInt:JavaTextDateFormat_LONG withJavaUtilLocale:locale];
  [self addFormatWithInt:JavaTextDateFormat_FULL withJavaUtilLocale:locale];
}

JavaTextFormat *CucumberRuntimeXstreamTimeConverter_getOnlyFormat(CucumberRuntimeXstreamTimeConverter *self) {
  JavaTextDateFormat *dateFormat = create_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(self->format_, [self getLocale]);
  [dateFormat setLenientWithBoolean:false];
  return dateFormat;
}

id<JavaUtilList> CucumberRuntimeXstreamTimeConverter_getTimeClasses() {
  CucumberRuntimeXstreamTimeConverter_initialize();
  id<JavaUtilList> classes = create_JavaUtilArrayList_init();
  [classes addWithId:JavaUtilDate_class_()];
  [classes addWithId:JavaUtilCalendar_class_()];
  return classes;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeXstreamTimeConverter)
