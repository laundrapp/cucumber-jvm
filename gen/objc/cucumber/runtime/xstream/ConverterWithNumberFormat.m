//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/laundrapp_org/cucumber-jvm/core/src/main/java/cucumber/runtime/xstream/ConverterWithNumberFormat.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/runtime/xstream/ConverterWithFormat.h"
#include "cucumber/runtime/xstream/ConverterWithNumberFormat.h"
#include "java/text/NumberFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Locale.h"

@interface CucumberRuntimeXstreamConverterWithNumberFormat () {
 @public
  id<JavaUtilList> formats_;
}

@end

J2OBJC_FIELD_SETTER(CucumberRuntimeXstreamConverterWithNumberFormat, formats_, id<JavaUtilList>)

@implementation CucumberRuntimeXstreamConverterWithNumberFormat

- (instancetype)initWithJavaUtilLocale:(JavaUtilLocale *)locale
                     withIOSClassArray:(IOSObjectArray *)convertibleTypes {
  CucumberRuntimeXstreamConverterWithNumberFormat_initWithJavaUtilLocale_withIOSClassArray_(self, locale, convertibleTypes);
  return self;
}

- (NSNumber *)transformWithNSString:(NSString *)string {
  NSNumber *number = [super transformWithNSString:string];
  return number == nil ? nil : [self downcastWithNSNumber:number];
}

- (id<JavaUtilList>)getFormats {
  return formats_;
}

- (NSNumber *)downcastWithNSNumber:(NSNumber *)argument {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)dealloc {
  RELEASE_(formats_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSNumber;", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "LNSNumber;", 0x404, 5, 6, -1, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilLocale:withIOSClassArray:);
  methods[1].selector = @selector(transformWithNSString:);
  methods[2].selector = @selector(getFormats);
  methods[3].selector = @selector(downcastWithNSNumber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "formats_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilLocale;[LIOSClass;", "transform", "LNSString;", "(Ljava/lang/String;)TT;", "()Ljava/util/List<Ljava/text/NumberFormat;>;", "downcast", "LNSNumber;", "(Ljava/lang/Number;)TT;", "Ljava/util/List<Ljava/text/NumberFormat;>;", "<T:Ljava/lang/Number;>Lcucumber/runtime/xstream/ConverterWithFormat<TT;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeXstreamConverterWithNumberFormat = { "ConverterWithNumberFormat", "cucumber.runtime.xstream", ptrTable, methods, fields, 7, 0x400, 4, 1, -1, -1, -1, 9, -1 };
  return &_CucumberRuntimeXstreamConverterWithNumberFormat;
}

@end

void CucumberRuntimeXstreamConverterWithNumberFormat_initWithJavaUtilLocale_withIOSClassArray_(CucumberRuntimeXstreamConverterWithNumberFormat *self, JavaUtilLocale *locale, IOSObjectArray *convertibleTypes) {
  CucumberRuntimeXstreamConverterWithFormat_initWithIOSClassArray_(self, convertibleTypes);
  JreStrongAssignAndConsume(&self->formats_, new_JavaUtilArrayList_init());
  [self->formats_ addWithId:JavaTextNumberFormat_getNumberInstanceWithJavaUtilLocale_(locale)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeXstreamConverterWithNumberFormat)
