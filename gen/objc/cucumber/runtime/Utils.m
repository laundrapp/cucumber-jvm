//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/laundrapp_org/cucumber-jvm/core/src/main/java/cucumber/runtime/Utils.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/runtime/CucumberException.h"
#include "cucumber/runtime/MethodFormat.h"
#include "cucumber/runtime/Timeout.h"
#include "cucumber/runtime/Utils.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Modifier.h"
#include "java/lang/reflect/ParameterizedType.h"
#include "java/lang/reflect/Type.h"
#include "java/lang/reflect/TypeVariable.h"
#include "java/net/MalformedURLException.h"
#include "java/net/URL.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@interface CucumberRuntimeUtils ()

- (instancetype __nonnull)init;

+ (JavaLangReflectMethod *)targetMethodWithId:(id)target
                    withJavaLangReflectMethod:(JavaLangReflectMethod *)method;

+ (id<JavaLangReflectType>)typeArgWithJavaLangReflectType:(id<JavaLangReflectType>)type
                                             withIOSClass:(IOSClass *)wantedRawType
                                                  withInt:(jint)index;

+ (jboolean)includesBlankWithNSString:(NSString *)testCaseName;

@end

__attribute__((unused)) static void CucumberRuntimeUtils_init(CucumberRuntimeUtils *self);

__attribute__((unused)) static CucumberRuntimeUtils *new_CucumberRuntimeUtils_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberRuntimeUtils *create_CucumberRuntimeUtils_init(void);

__attribute__((unused)) static JavaLangReflectMethod *CucumberRuntimeUtils_targetMethodWithId_withJavaLangReflectMethod_(id target, JavaLangReflectMethod *method);

__attribute__((unused)) static id<JavaLangReflectType> CucumberRuntimeUtils_typeArgWithJavaLangReflectType_withIOSClass_withInt_(id<JavaLangReflectType> type, IOSClass *wantedRawType, jint index);

__attribute__((unused)) static jboolean CucumberRuntimeUtils_includesBlankWithNSString_(NSString *testCaseName);

@interface CucumberRuntimeUtils_1 : NSObject < CucumberRuntimeTimeout_Callback > {
 @public
  JavaLangReflectMethod *val$targetMethod_;
  id val$target_;
  IOSObjectArray *val$args_;
}

- (instancetype __nonnull)initWithJavaLangReflectMethod:(JavaLangReflectMethod *)capture$0
                                                 withId:(id)capture$1
                                      withNSObjectArray:(IOSObjectArray *)capture$2;

- (id)call;

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberRuntimeUtils_1)

__attribute__((unused)) static void CucumberRuntimeUtils_1_initWithJavaLangReflectMethod_withId_withNSObjectArray_(CucumberRuntimeUtils_1 *self, JavaLangReflectMethod *capture$0, id capture$1, IOSObjectArray *capture$2);

__attribute__((unused)) static CucumberRuntimeUtils_1 *new_CucumberRuntimeUtils_1_initWithJavaLangReflectMethod_withId_withNSObjectArray_(JavaLangReflectMethod *capture$0, id capture$1, IOSObjectArray *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberRuntimeUtils_1 *create_CucumberRuntimeUtils_1_initWithJavaLangReflectMethod_withId_withNSObjectArray_(JavaLangReflectMethod *capture$0, id capture$1, IOSObjectArray *capture$2);

@implementation CucumberRuntimeUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CucumberRuntimeUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)isInstantiableWithIOSClass:(IOSClass *)clazz {
  return CucumberRuntimeUtils_isInstantiableWithIOSClass_(clazz);
}

+ (id)invokeWithId:(id)target
withJavaLangReflectMethod:(JavaLangReflectMethod *)method
          withLong:(jlong)timeoutMillis
 withNSObjectArray:(IOSObjectArray *)args {
  return CucumberRuntimeUtils_invokeWithId_withJavaLangReflectMethod_withLong_withNSObjectArray_(target, method, timeoutMillis, args);
}

+ (JavaLangReflectMethod *)targetMethodWithId:(id)target
                    withJavaLangReflectMethod:(JavaLangReflectMethod *)method {
  return CucumberRuntimeUtils_targetMethodWithId_withJavaLangReflectMethod_(target, method);
}

+ (id<JavaLangReflectType>)listItemTypeWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  return CucumberRuntimeUtils_listItemTypeWithJavaLangReflectType_(type);
}

+ (id<JavaLangReflectType>)mapKeyTypeWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  return CucumberRuntimeUtils_mapKeyTypeWithJavaLangReflectType_(type);
}

+ (id<JavaLangReflectType>)mapValueTypeWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  return CucumberRuntimeUtils_mapValueTypeWithJavaLangReflectType_(type);
}

+ (id<JavaLangReflectType>)typeArgWithJavaLangReflectType:(id<JavaLangReflectType>)type
                                             withIOSClass:(IOSClass *)wantedRawType
                                                  withInt:(jint)index {
  return CucumberRuntimeUtils_typeArgWithJavaLangReflectType_withIOSClass_withInt_(type, wantedRawType, index);
}

+ (JavaNetURL *)toURLWithNSString:(NSString *)pathOrUrl {
  return CucumberRuntimeUtils_toURLWithNSString_(pathOrUrl);
}

+ (NSString *)htmlEscapeWithNSString:(NSString *)s {
  return CucumberRuntimeUtils_htmlEscapeWithNSString_(s);
}

+ (NSString *)getUniqueTestNameForScenarioExampleWithNSString:(NSString *)testCaseName
                                                      withInt:(jint)exampleNumber {
  return CucumberRuntimeUtils_getUniqueTestNameForScenarioExampleWithNSString_withInt_(testCaseName, exampleNumber);
}

+ (jboolean)includesBlankWithNSString:(NSString *)testCaseName {
  return CucumberRuntimeUtils_includesBlankWithNSString_(testCaseName);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x89, 3, 4, 5, -1, -1, -1 },
    { NULL, "LJavaLangReflectMethod;", 0xa, 6, 7, 8, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x9, 9, 10, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x9, 11, 10, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x9, 12, 10, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0xa, 13, 14, -1, 15, -1, -1 },
    { NULL, "LJavaNetURL;", 0x9, 16, 17, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 18, 17, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 19, 20, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 21, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isInstantiableWithIOSClass:);
  methods[2].selector = @selector(invokeWithId:withJavaLangReflectMethod:withLong:withNSObjectArray:);
  methods[3].selector = @selector(targetMethodWithId:withJavaLangReflectMethod:);
  methods[4].selector = @selector(listItemTypeWithJavaLangReflectType:);
  methods[5].selector = @selector(mapKeyTypeWithJavaLangReflectType:);
  methods[6].selector = @selector(mapValueTypeWithJavaLangReflectType:);
  methods[7].selector = @selector(typeArgWithJavaLangReflectType:withIOSClass:withInt:);
  methods[8].selector = @selector(toURLWithNSString:);
  methods[9].selector = @selector(htmlEscapeWithNSString:);
  methods[10].selector = @selector(getUniqueTestNameForScenarioExampleWithNSString:withInt:);
  methods[11].selector = @selector(includesBlankWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "isInstantiable", "LIOSClass;", "(Ljava/lang/Class<*>;)Z", "invoke", "LNSObject;LJavaLangReflectMethod;J[LNSObject;", "LJavaLangThrowable;", "targetMethod", "LNSObject;LJavaLangReflectMethod;", "LJavaLangNoSuchMethodException;", "listItemType", "LJavaLangReflectType;", "mapKeyType", "mapValueType", "typeArg", "LJavaLangReflectType;LIOSClass;I", "(Ljava/lang/reflect/Type;Ljava/lang/Class<*>;I)Ljava/lang/reflect/Type;", "toURL", "LNSString;", "htmlEscape", "getUniqueTestNameForScenarioExample", "LNSString;I", "includesBlank" };
  static const J2ObjcClassInfo _CucumberRuntimeUtils = { "Utils", "cucumber.runtime", ptrTable, methods, NULL, 7, 0x1, 12, 0, -1, -1, -1, -1, -1 };
  return &_CucumberRuntimeUtils;
}

@end

void CucumberRuntimeUtils_init(CucumberRuntimeUtils *self) {
  NSObject_init(self);
}

CucumberRuntimeUtils *new_CucumberRuntimeUtils_init() {
  J2OBJC_NEW_IMPL(CucumberRuntimeUtils, init)
}

CucumberRuntimeUtils *create_CucumberRuntimeUtils_init() {
  J2OBJC_CREATE_IMPL(CucumberRuntimeUtils, init)
}

jboolean CucumberRuntimeUtils_isInstantiableWithIOSClass_(IOSClass *clazz) {
  CucumberRuntimeUtils_initialize();
  jboolean isNonStaticInnerClass = !JavaLangReflectModifier_isStaticWithInt_([((IOSClass *) nil_chk(clazz)) getModifiers]) && [clazz getEnclosingClass] != nil;
  return JavaLangReflectModifier_isPublicWithInt_([clazz getModifiers]) && !JavaLangReflectModifier_isAbstractWithInt_([clazz getModifiers]) && !isNonStaticInnerClass;
}

id CucumberRuntimeUtils_invokeWithId_withJavaLangReflectMethod_withLong_withNSObjectArray_(id target, JavaLangReflectMethod *method, jlong timeoutMillis, IOSObjectArray *args) {
  CucumberRuntimeUtils_initialize();
  JavaLangReflectMethod *targetMethod = CucumberRuntimeUtils_targetMethodWithId_withJavaLangReflectMethod_(target, method);
  return CucumberRuntimeTimeout_timeoutWithCucumberRuntimeTimeout_Callback_withLong_(create_CucumberRuntimeUtils_1_initWithJavaLangReflectMethod_withId_withNSObjectArray_(targetMethod, target, args), timeoutMillis);
}

JavaLangReflectMethod *CucumberRuntimeUtils_targetMethodWithId_withJavaLangReflectMethod_(id target, JavaLangReflectMethod *method) {
  CucumberRuntimeUtils_initialize();
  IOSClass *targetClass = [nil_chk(target) java_getClass];
  IOSClass *declaringClass = [((JavaLangReflectMethod *) nil_chk(method)) getDeclaringClass];
  if ([((JavaLangClassLoader *) nil_chk([targetClass getClassLoader])) isEqual:[((IOSClass *) nil_chk(declaringClass)) getClassLoader]]) {
    return method;
  }
  else {
    if (JavaLangReflectModifier_isPublicWithInt_([method getModifiers])) {
      return [targetClass getMethod:[method getName] parameterTypes:[method getParameterTypes]];
    }
    IOSClass *currentClass = targetClass;
    while (currentClass != NSObject_class_()) {
      @try {
        return [((IOSClass *) nil_chk(currentClass)) getDeclaredMethod:[method getName] parameterTypes:[method getParameterTypes]];
      }
      @catch (JavaLangNoSuchMethodException *e) {
        currentClass = [currentClass getSuperclass];
      }
    }
    @throw create_JavaLangNoSuchMethodException_initWithNSString_(NSString_java_valueOf_(method));
  }
}

id<JavaLangReflectType> CucumberRuntimeUtils_listItemTypeWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  CucumberRuntimeUtils_initialize();
  return CucumberRuntimeUtils_typeArgWithJavaLangReflectType_withIOSClass_withInt_(type, JavaUtilList_class_(), 0);
}

id<JavaLangReflectType> CucumberRuntimeUtils_mapKeyTypeWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  CucumberRuntimeUtils_initialize();
  return CucumberRuntimeUtils_typeArgWithJavaLangReflectType_withIOSClass_withInt_(type, JavaUtilMap_class_(), 0);
}

id<JavaLangReflectType> CucumberRuntimeUtils_mapValueTypeWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  CucumberRuntimeUtils_initialize();
  return CucumberRuntimeUtils_typeArgWithJavaLangReflectType_withIOSClass_withInt_(type, JavaUtilMap_class_(), 1);
}

id<JavaLangReflectType> CucumberRuntimeUtils_typeArgWithJavaLangReflectType_withIOSClass_withInt_(id<JavaLangReflectType> type, IOSClass *wantedRawType, jint index) {
  CucumberRuntimeUtils_initialize();
  if ([JavaLangReflectParameterizedType_class_() isInstance:type]) {
    id<JavaLangReflectParameterizedType> parameterizedType = (id<JavaLangReflectParameterizedType>) cast_check(type, JavaLangReflectParameterizedType_class_());
    id<JavaLangReflectType> rawType = [((id<JavaLangReflectParameterizedType>) nil_chk(parameterizedType)) getRawType];
    if ([rawType isKindOfClass:[IOSClass class]] && [((IOSClass *) nil_chk(wantedRawType)) isAssignableFrom:(IOSClass *) cast_chk(rawType, [IOSClass class])]) {
      id<JavaLangReflectType> result = IOSObjectArray_Get(nil_chk([parameterizedType getActualTypeArguments]), index);
      if ([JavaLangReflectTypeVariable_class_() isInstance:result]) {
        @throw create_CucumberRuntimeCucumberException_initWithNSString_(@"Generic types must be explicit");
      }
      return result;
    }
    else {
      return nil;
    }
  }
  else {
    return nil;
  }
}

JavaNetURL *CucumberRuntimeUtils_toURLWithNSString_(NSString *pathOrUrl) {
  CucumberRuntimeUtils_initialize();
  @try {
    if (![((NSString *) nil_chk(pathOrUrl)) java_hasSuffix:@"/"]) {
      pathOrUrl = JreStrcat("$C", pathOrUrl, '/');
    }
    if ([pathOrUrl java_matches:@"^(file|http|https):.*"]) {
      return create_JavaNetURL_initWithNSString_(pathOrUrl);
    }
    else {
      return create_JavaNetURL_initWithNSString_(JreStrcat("$$", @"file:", pathOrUrl));
    }
  }
  @catch (JavaNetMalformedURLException *e) {
    @throw create_CucumberRuntimeCucumberException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Bad URL:", pathOrUrl), e);
  }
}

NSString *CucumberRuntimeUtils_htmlEscapeWithNSString_(NSString *s) {
  CucumberRuntimeUtils_initialize();
  return [((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk(s)) java_replace:@"&" withSequence:@"&amp;"])) java_replace:@"<" withSequence:@"&lt;"])) java_replace:@">" withSequence:@"&gt;"])) java_replace:@"\"" withSequence:@"&quot;"])) java_replace:@"'" withSequence:@"&#x27;"])) java_replace:@"/" withSequence:@"&#x2F;"];
}

NSString *CucumberRuntimeUtils_getUniqueTestNameForScenarioExampleWithNSString_withInt_(NSString *testCaseName, jint exampleNumber) {
  CucumberRuntimeUtils_initialize();
  return JreStrcat("$$I", testCaseName, (CucumberRuntimeUtils_includesBlankWithNSString_(testCaseName) ? @" " : @"_"), exampleNumber);
}

jboolean CucumberRuntimeUtils_includesBlankWithNSString_(NSString *testCaseName) {
  CucumberRuntimeUtils_initialize();
  return [((NSString *) nil_chk(testCaseName)) java_indexOf:' '] != -1;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeUtils)

@implementation CucumberRuntimeUtils_1

- (instancetype __nonnull)initWithJavaLangReflectMethod:(JavaLangReflectMethod *)capture$0
                                                 withId:(id)capture$1
                                      withNSObjectArray:(IOSObjectArray *)capture$2 {
  CucumberRuntimeUtils_1_initWithJavaLangReflectMethod_withId_withNSObjectArray_(self, capture$0, capture$1, capture$2);
  return self;
}

- (id)call {
  jboolean accessible = [((JavaLangReflectMethod *) nil_chk(val$targetMethod_)) isAccessible];
  @try {
    [val$targetMethod_ setAccessibleWithBoolean:true];
    return [val$targetMethod_ invokeWithId:val$target_ withNSObjectArray:val$args_];
  }
  @catch (JavaLangIllegalArgumentException *e) {
    @throw create_CucumberRuntimeCucumberException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$$$$$", @"Failed to invoke ", [((CucumberRuntimeMethodFormat *) nil_chk(JreLoadStatic(CucumberRuntimeMethodFormat, FULL))) formatWithJavaLangReflectMethod:val$targetMethod_], @", caused by ", [[e java_getClass] getName], @": ", [e getMessage]), e);
  }
  @catch (JavaLangReflectInvocationTargetException *e) {
    @throw nil_chk([e getTargetException]);
  }
  @catch (JavaLangIllegalAccessException *e) {
    @throw create_CucumberRuntimeCucumberException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$$$$$", @"Failed to invoke ", [((CucumberRuntimeMethodFormat *) nil_chk(JreLoadStatic(CucumberRuntimeMethodFormat, FULL))) formatWithJavaLangReflectMethod:val$targetMethod_], @", caused by ", [[e java_getClass] getName], @": ", [e getMessage]), e);
  }
  @finally {
    [val$targetMethod_ setAccessibleWithBoolean:accessible];
  }
}

- (void)dealloc {
  RELEASE_(val$targetMethod_);
  RELEASE_(val$target_);
  RELEASE_(val$args_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangReflectMethod:withId:withNSObjectArray:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$targetMethod_", "LJavaLangReflectMethod;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$target_", "LNSObject;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$args_", "[LNSObject;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangThrowable;", "LCucumberRuntimeUtils;", "invokeWithId:withJavaLangReflectMethod:withLong:withNSObjectArray:", "Ljava/lang/Object;Lcucumber/runtime/Timeout$Callback<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeUtils_1 = { "", "cucumber.runtime", ptrTable, methods, fields, 7, 0x8018, 2, 3, 1, -1, 2, 3, -1 };
  return &_CucumberRuntimeUtils_1;
}

@end

void CucumberRuntimeUtils_1_initWithJavaLangReflectMethod_withId_withNSObjectArray_(CucumberRuntimeUtils_1 *self, JavaLangReflectMethod *capture$0, id capture$1, IOSObjectArray *capture$2) {
  JreStrongAssign(&self->val$targetMethod_, capture$0);
  JreStrongAssign(&self->val$target_, capture$1);
  JreStrongAssign(&self->val$args_, capture$2);
  NSObject_init(self);
}

CucumberRuntimeUtils_1 *new_CucumberRuntimeUtils_1_initWithJavaLangReflectMethod_withId_withNSObjectArray_(JavaLangReflectMethod *capture$0, id capture$1, IOSObjectArray *capture$2) {
  J2OBJC_NEW_IMPL(CucumberRuntimeUtils_1, initWithJavaLangReflectMethod_withId_withNSObjectArray_, capture$0, capture$1, capture$2)
}

CucumberRuntimeUtils_1 *create_CucumberRuntimeUtils_1_initWithJavaLangReflectMethod_withId_withNSObjectArray_(JavaLangReflectMethod *capture$0, id capture$1, IOSObjectArray *capture$2) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeUtils_1, initWithJavaLangReflectMethod_withId_withNSObjectArray_, capture$0, capture$1, capture$2)
}
