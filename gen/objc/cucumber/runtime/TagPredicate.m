//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/TagPredicate.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/runtime/TagExpressionOld.h"
#include "cucumber/runtime/TagPredicate.h"
#include "gherkin/events/PickleEvent.h"
#include "gherkin/pickles/Pickle.h"
#include "gherkin/pickles/PickleTag.h"
#include "io/cucumber/tagexpressions/Expression.h"
#include "io/cucumber/tagexpressions/TagExpressionParser.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/List.h"

@interface CCBRTagPredicate () {
 @public
  id<JavaUtilList> expressions_;
  id<JavaUtilList> oldStyleExpressions_;
}

@end

J2OBJC_FIELD_SETTER(CCBRTagPredicate, expressions_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CCBRTagPredicate, oldStyleExpressions_, id<JavaUtilList>)

@implementation CCBRTagPredicate

- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)tagExpressions {
  CCBRTagPredicate_initWithJavaUtilList_(self, tagExpressions);
  return self;
}

- (jboolean)applyWithGherkinEventsPickleEvent:(GherkinEventsPickleEvent *)pickleEvent {
  return [self applyWithJavaUtilCollection:[((GherkinPicklesPickle *) nil_chk(((GherkinEventsPickleEvent *) nil_chk(pickleEvent))->pickle_)) getTags]];
}

- (jboolean)applyWithJavaUtilCollection:(id<JavaUtilCollection>)pickleTags {
  for (CCBRTagExpressionOld * __strong oldStyleExpression in nil_chk(oldStyleExpressions_)) {
    if (![((CCBRTagExpressionOld *) nil_chk(oldStyleExpression)) evaluateWithJavaUtilCollection:pickleTags]) {
      return false;
    }
  }
  id<JavaUtilList> tags = create_JavaUtilArrayList_init();
  for (GherkinPicklesPickleTag * __strong pickleTag in nil_chk(pickleTags)) {
    [tags addWithId:[((GherkinPicklesPickleTag *) nil_chk(pickleTag)) getName]];
  }
  for (id<IoCucumberTagexpressionsExpression> __strong expression in nil_chk(expressions_)) {
    if (![((id<IoCucumberTagexpressionsExpression>) nil_chk(expression)) evaluateWithJavaUtilList:tags]) {
      return false;
    }
  }
  return true;
}

- (void)dealloc {
  RELEASE_(expressions_);
  RELEASE_(oldStyleExpressions_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilList:);
  methods[1].selector = @selector(applyWithGherkinEventsPickleEvent:);
  methods[2].selector = @selector(applyWithJavaUtilCollection:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "expressions_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
    { "oldStyleExpressions_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)V", "apply", "LGherkinEventsPickleEvent;", "LJavaUtilCollection;", "(Ljava/util/Collection<Lgherkin/pickles/PickleTag;>;)Z", "Ljava/util/List<Lio/cucumber/tagexpressions/Expression;>;", "Ljava/util/List<Lcucumber/runtime/TagExpressionOld;>;" };
  static const J2ObjcClassInfo _CCBRTagPredicate = { "TagPredicate", "cucumber.runtime", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_CCBRTagPredicate;
}

@end

void CCBRTagPredicate_initWithJavaUtilList_(CCBRTagPredicate *self, id<JavaUtilList> tagExpressions) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->expressions_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->oldStyleExpressions_, new_JavaUtilArrayList_init());
  if (tagExpressions == nil) {
    return;
  }
  IoCucumberTagexpressionsTagExpressionParser *parser = create_IoCucumberTagexpressionsTagExpressionParser_init();
  for (NSString * __strong tagExpression in tagExpressions) {
    if (CCBRTagExpressionOld_isOldTagExpressionWithNSString_(tagExpression)) {
      [self->oldStyleExpressions_ addWithId:create_CCBRTagExpressionOld_initWithJavaUtilList_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ tagExpression } count:1 type:NSString_class_()]))];
    }
    else {
      [self->expressions_ addWithId:[parser parseWithNSString:tagExpression]];
    }
  }
}

CCBRTagPredicate *new_CCBRTagPredicate_initWithJavaUtilList_(id<JavaUtilList> tagExpressions) {
  J2OBJC_NEW_IMPL(CCBRTagPredicate, initWithJavaUtilList_, tagExpressions)
}

CCBRTagPredicate *create_CCBRTagPredicate_initWithJavaUtilList_(id<JavaUtilList> tagExpressions) {
  J2OBJC_CREATE_IMPL(CCBRTagPredicate, initWithJavaUtilList_, tagExpressions)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRTagPredicate)
