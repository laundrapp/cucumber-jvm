//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/Timeout.java
//

#include "J2ObjC_source.h"
#include "cucumber/runtime/Timeout.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Runnable.h"
#include "java/lang/Thread.h"
#include "java/util/List.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/ScheduledExecutorService.h"
#include "java/util/concurrent/ScheduledFuture.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/TimeoutException.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"

@interface CCBRTimeout ()

- (instancetype __nonnull)init;

@end

__attribute__((unused)) static void CCBRTimeout_init(CCBRTimeout *self);

__attribute__((unused)) static CCBRTimeout *new_CCBRTimeout_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRTimeout *create_CCBRTimeout_init(void);

@interface CCBRTimeout_1 : NSObject < JavaLangRunnable > {
 @public
  id val$monitor_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$done_;
  JavaLangThread *val$executionThread_;
}

- (instancetype __nonnull)initWithId:(id)capture$0
withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1
                  withJavaLangThread:(JavaLangThread *)capture$2;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRTimeout_1)

__attribute__((unused)) static void CCBRTimeout_1_initWithId_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaLangThread_(CCBRTimeout_1 *self, id capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, JavaLangThread *capture$2);

__attribute__((unused)) static CCBRTimeout_1 *new_CCBRTimeout_1_initWithId_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaLangThread_(id capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, JavaLangThread *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRTimeout_1 *create_CCBRTimeout_1_initWithId_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaLangThread_(id capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, JavaLangThread *capture$2);

@interface CCBRTimeout_Callback : NSObject

@end

@implementation CCBRTimeout

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CCBRTimeout_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id)timeoutWithCCBRTimeout_Callback:(id<CCBRTimeout_Callback>)callback
                             withLong:(jlong)timeoutMillis {
  return CCBRTimeout_timeoutWithCCBRTimeout_Callback_withLong_(callback, timeoutMillis);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 0, 1, 2, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(timeoutWithCCBRTimeout_Callback:withLong:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "timeout", "LCCBRTimeout_Callback;J", "LJavaLangThrowable;", "<T:Ljava/lang/Object;>(Lcucumber/runtime/Timeout$Callback<TT;>;J)TT;", "LCCBRTimeout_Callback;" };
  static const J2ObjcClassInfo _CCBRTimeout = { "Timeout", "cucumber.runtime", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, 4, -1, -1, -1 };
  return &_CCBRTimeout;
}

@end

void CCBRTimeout_init(CCBRTimeout *self) {
  NSObject_init(self);
}

CCBRTimeout *new_CCBRTimeout_init() {
  J2OBJC_NEW_IMPL(CCBRTimeout, init)
}

CCBRTimeout *create_CCBRTimeout_init() {
  J2OBJC_CREATE_IMPL(CCBRTimeout, init)
}

id CCBRTimeout_timeoutWithCCBRTimeout_Callback_withLong_(id<CCBRTimeout_Callback> callback, jlong timeoutMillis) {
  CCBRTimeout_initialize();
  if (timeoutMillis == 0) {
    return [((id<CCBRTimeout_Callback>) nil_chk(callback)) call];
  }
  JavaLangThread *executionThread = JavaLangThread_currentThread();
  id monitor = create_NSObject_init();
  JavaUtilConcurrentAtomicAtomicBoolean *done = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  id<JavaUtilConcurrentScheduledExecutorService> executorService = JavaUtilConcurrentExecutors_newSingleThreadScheduledExecutor();
  id<JavaUtilConcurrentScheduledFuture> timer = [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(executorService)) scheduleWithJavaLangRunnable:create_CCBRTimeout_1_initWithId_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaLangThread_(monitor, done, executionThread) withLong:timeoutMillis withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  @try {
    id result = [((id<CCBRTimeout_Callback>) nil_chk(callback)) call];
    if (JavaLangThread_interrupted()) {
      @throw create_JavaUtilConcurrentTimeoutException_initWithNSString_(JreStrcat("$J$", @"Timed out after ", timeoutMillis, @"ms."));
    }
    return result;
  }
  @catch (JavaLangInterruptedException *timeout) {
    @throw create_JavaUtilConcurrentTimeoutException_initWithNSString_(JreStrcat("$J$", @"Timed out after ", timeoutMillis, @"ms."));
  }
  @finally {
    @synchronized(monitor) {
      [done setWithBoolean:true];
      [((id<JavaUtilConcurrentScheduledFuture>) nil_chk(timer)) cancelWithBoolean:true];
      [executorService shutdownNow];
      JavaLangThread_interrupted();
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRTimeout)

@implementation CCBRTimeout_1

- (instancetype __nonnull)initWithId:(id)capture$0
withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1
                  withJavaLangThread:(JavaLangThread *)capture$2 {
  CCBRTimeout_1_initWithId_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaLangThread_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)run {
  @synchronized(val$monitor_) {
    if (![((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$done_)) get]) {
      [((JavaLangThread *) nil_chk(val$executionThread_)) interrupt];
    }
  }
}

- (void)dealloc {
  RELEASE_(val$monitor_);
  RELEASE_(val$done_);
  RELEASE_(val$executionThread_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithId:withJavaUtilConcurrentAtomicAtomicBoolean:withJavaLangThread:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$monitor_", "LNSObject;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$done_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$executionThread_", "LJavaLangThread;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LCCBRTimeout;", "timeoutWithCCBRTimeout_Callback:withLong:" };
  static const J2ObjcClassInfo _CCBRTimeout_1 = { "", "cucumber.runtime", ptrTable, methods, fields, 7, 0x8018, 2, 3, 0, -1, 1, -1, -1 };
  return &_CCBRTimeout_1;
}

@end

void CCBRTimeout_1_initWithId_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaLangThread_(CCBRTimeout_1 *self, id capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, JavaLangThread *capture$2) {
  JreStrongAssign(&self->val$monitor_, capture$0);
  JreStrongAssign(&self->val$done_, capture$1);
  JreStrongAssign(&self->val$executionThread_, capture$2);
  NSObject_init(self);
}

CCBRTimeout_1 *new_CCBRTimeout_1_initWithId_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaLangThread_(id capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, JavaLangThread *capture$2) {
  J2OBJC_NEW_IMPL(CCBRTimeout_1, initWithId_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaLangThread_, capture$0, capture$1, capture$2)
}

CCBRTimeout_1 *create_CCBRTimeout_1_initWithId_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaLangThread_(id capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, JavaLangThread *capture$2) {
  J2OBJC_CREATE_IMPL(CCBRTimeout_1, initWithId_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaLangThread_, capture$0, capture$1, capture$2)
}

@implementation CCBRTimeout_Callback

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x401, -1, -1, 0, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(call);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaLangThrowable;", "()TT;", "LCCBRTimeout;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _CCBRTimeout_Callback = { "Callback", "cucumber.runtime", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, 3, -1 };
  return &_CCBRTimeout_Callback;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(CCBRTimeout_Callback)
