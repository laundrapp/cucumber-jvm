//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/HookComparator.java
//

#include "J2ObjC_source.h"
#include "cucumber/runtime/HookComparator.h"
#include "cucumber/runtime/HookDefinition.h"
#include "java/util/Comparator.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface CucumberRuntimeHookComparator () {
 @public
  jboolean ascending_;
}

@end

@implementation CucumberRuntimeHookComparator

- (instancetype __nonnull)initWithBoolean:(jboolean)ascending {
  CucumberRuntimeHookComparator_initWithBoolean_(self, ascending);
  return self;
}

- (jint)compareWithId:(id<CucumberRuntimeHookDefinition>)hook1
               withId:(id<CucumberRuntimeHookDefinition>)hook2 {
  jint x = [((id<CucumberRuntimeHookDefinition>) nil_chk(hook1)) getOrder];
  jint y = [((id<CucumberRuntimeHookDefinition>) nil_chk(hook2)) getOrder];
  jint comparison = (x < y) ? -1 : ((x == y) ? 0 : 1);
  return ascending_ ? comparison : -comparison;
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithBoolean:);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ascending_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Z", "compare", "LCucumberRuntimeHookDefinition;LCucumberRuntimeHookDefinition;", "Ljava/lang/Object;Ljava/util/Comparator<Lcucumber/runtime/HookDefinition;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeHookComparator = { "HookComparator", "cucumber.runtime", ptrTable, methods, fields, 7, 0x0, 2, 1, -1, -1, -1, 3, -1 };
  return &_CucumberRuntimeHookComparator;
}

@end

void CucumberRuntimeHookComparator_initWithBoolean_(CucumberRuntimeHookComparator *self, jboolean ascending) {
  NSObject_init(self);
  self->ascending_ = ascending;
}

CucumberRuntimeHookComparator *new_CucumberRuntimeHookComparator_initWithBoolean_(jboolean ascending) {
  J2OBJC_NEW_IMPL(CucumberRuntimeHookComparator, initWithBoolean_, ascending)
}

CucumberRuntimeHookComparator *create_CucumberRuntimeHookComparator_initWithBoolean_(jboolean ascending) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeHookComparator, initWithBoolean_, ascending)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeHookComparator)
