//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/ScenarioImpl.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "cucumber/api/Result.h"
#include "cucumber/api/event/EmbedEvent.h"
#include "cucumber/api/event/WriteEvent.h"
#include "cucumber/runner/EventBus.h"
#include "cucumber/runtime/ScenarioImpl.h"
#include "gherkin/events/PickleEvent.h"
#include "gherkin/pickles/Pickle.h"
#include "gherkin/pickles/PickleLocation.h"
#include "gherkin/pickles/PickleTag.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"

@interface CCBRScenarioImpl () {
 @public
  id<JavaUtilList> stepResults_;
  id<JavaUtilList> tags_;
  NSString *uri_;
  NSString *scenarioName_;
  NSString *scenarioId_;
  id<JavaUtilList> scenarioLines_;
  CCBEventBus *bus_;
}

@end

J2OBJC_FIELD_SETTER(CCBRScenarioImpl, stepResults_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CCBRScenarioImpl, tags_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CCBRScenarioImpl, uri_, NSString *)
J2OBJC_FIELD_SETTER(CCBRScenarioImpl, scenarioName_, NSString *)
J2OBJC_FIELD_SETTER(CCBRScenarioImpl, scenarioId_, NSString *)
J2OBJC_FIELD_SETTER(CCBRScenarioImpl, scenarioLines_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CCBRScenarioImpl, bus_, CCBEventBus *)

@implementation CCBRScenarioImpl

- (instancetype __nonnull)initWithCCBEventBus:(CCBEventBus *)bus
                           withGHKPickleEvent:(GHKPickleEvent *)pickleEvent {
  CCBRScenarioImpl_initWithCCBEventBus_withGHKPickleEvent_(self, bus, pickleEvent);
  return self;
}

- (void)addWithCucumberApiResult:(CucumberApiResult *)result {
  [((id<JavaUtilList>) nil_chk(stepResults_)) addWithId:result];
}

- (id<JavaUtilCollection>)getSourceTagNames {
  id<JavaUtilSet> result = create_JavaUtilHashSet_init();
  for (GHKPickleTag * __strong tag in nil_chk(tags_)) {
    [result addWithId:[((GHKPickleTag *) nil_chk(tag)) getName]];
  }
  return create_JavaUtilArrayList_initWithJavaUtilCollection_(result);
}

- (CucumberApiResult_Type *)getStatus {
  if ([((id<JavaUtilList>) nil_chk(stepResults_)) isEmpty]) {
    return JreLoadEnum(CucumberApiResult_Type, UNDEFINED);
  }
  return [((CucumberApiResult *) nil_chk(JavaUtilCollections_maxWithJavaUtilCollection_withJavaUtilComparator_(stepResults_, JreLoadStatic(CucumberApiResult, SEVERITY)))) getStatus];
}

- (jboolean)isFailed {
  return [self getStatus] == JreLoadEnum(CucumberApiResult_Type, FAILED);
}

- (void)embedWithByteArray:(IOSByteArray *)data
              withNSString:(NSString *)mimeType {
  if (bus_ != nil) {
    [bus_ sendWithCucumberApiEventEvent:create_CucumberApiEventEmbedEvent_initWithJavaLangLong_withByteArray_withNSString_([bus_ getTime], data, mimeType)];
  }
}

- (void)writeWithNSString:(NSString *)text {
  if (bus_ != nil) {
    [bus_ sendWithCucumberApiEventEvent:create_CucumberApiEventWriteEvent_initWithJavaLangLong_withNSString_([bus_ getTime], text)];
  }
}

- (NSString *)getName {
  return scenarioName_;
}

- (NSString *)getId {
  return scenarioId_;
}

- (NSString *)getUri {
  return uri_;
}

- (id<JavaUtilList>)getLines {
  return scenarioLines_;
}

- (JavaLangThrowable *)getError {
  if ([((id<JavaUtilList>) nil_chk(stepResults_)) isEmpty]) {
    return nil;
  }
  return [((CucumberApiResult *) nil_chk(JavaUtilCollections_maxWithJavaUtilCollection_withJavaUtilComparator_(stepResults_, JreLoadStatic(CucumberApiResult, SEVERITY)))) getError];
}

- (void)dealloc {
  RELEASE_(stepResults_);
  RELEASE_(tags_);
  RELEASE_(uri_);
  RELEASE_(scenarioName_);
  RELEASE_(scenarioId_);
  RELEASE_(scenarioLines_);
  RELEASE_(bus_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LCucumberApiResult_Type;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 8, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBEventBus:withGHKPickleEvent:);
  methods[1].selector = @selector(addWithCucumberApiResult:);
  methods[2].selector = @selector(getSourceTagNames);
  methods[3].selector = @selector(getStatus);
  methods[4].selector = @selector(isFailed);
  methods[5].selector = @selector(embedWithByteArray:withNSString:);
  methods[6].selector = @selector(writeWithNSString:);
  methods[7].selector = @selector(getName);
  methods[8].selector = @selector(getId);
  methods[9].selector = @selector(getUri);
  methods[10].selector = @selector(getLines);
  methods[11].selector = @selector(getError);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "stepResults_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
    { "tags_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "uri_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "scenarioName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "scenarioId_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "scenarioLines_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
    { "bus_", "LCCBEventBus;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LCCBEventBus;LGHKPickleEvent;", "add", "LCucumberApiResult;", "()Ljava/util/Collection<Ljava/lang/String;>;", "embed", "[BLNSString;", "write", "LNSString;", "()Ljava/util/List<Ljava/lang/Integer;>;", "Ljava/util/List<Lcucumber/api/Result;>;", "Ljava/util/List<Lgherkin/pickles/PickleTag;>;", "Ljava/util/List<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _CCBRScenarioImpl = { "ScenarioImpl", "cucumber.runtime", ptrTable, methods, fields, 7, 0x1, 12, 7, -1, -1, -1, -1, -1 };
  return &_CCBRScenarioImpl;
}

@end

void CCBRScenarioImpl_initWithCCBEventBus_withGHKPickleEvent_(CCBRScenarioImpl *self, CCBEventBus *bus, GHKPickleEvent *pickleEvent) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->stepResults_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->bus_, bus);
  GHKPickle *pickle = ((GHKPickleEvent *) nil_chk(pickleEvent))->pickle_;
  JreStrongAssign(&self->tags_, [((GHKPickle *) nil_chk(pickle)) getTags]);
  JreStrongAssign(&self->uri_, pickleEvent->uri_);
  JreStrongAssign(&self->scenarioName_, [pickle getName]);
  id<JavaUtilList> locations = [pickle getLocations];
  JreStrongAssign(&self->scenarioId_, JreStrcat("$C$", pickleEvent->uri_, ':', JavaLangInteger_toStringWithInt_([((GHKPickleLocation *) nil_chk([((id<JavaUtilList>) nil_chk(locations)) getWithInt:0])) getLine])));
  JavaUtilArrayList *lines = create_JavaUtilArrayList_init();
  for (GHKPickleLocation * __strong location in locations) {
    [lines addWithId:JavaLangInteger_valueOfWithInt_([((GHKPickleLocation *) nil_chk(location)) getLine])];
  }
  JreStrongAssign(&self->scenarioLines_, JavaUtilCollections_unmodifiableListWithJavaUtilList_(lines));
}

CCBRScenarioImpl *new_CCBRScenarioImpl_initWithCCBEventBus_withGHKPickleEvent_(CCBEventBus *bus, GHKPickleEvent *pickleEvent) {
  J2OBJC_NEW_IMPL(CCBRScenarioImpl, initWithCCBEventBus_withGHKPickleEvent_, bus, pickleEvent)
}

CCBRScenarioImpl *create_CCBRScenarioImpl_initWithCCBEventBus_withGHKPickleEvent_(CCBEventBus *bus, GHKPickleEvent *pickleEvent) {
  J2OBJC_CREATE_IMPL(CCBRScenarioImpl, initWithCCBEventBus_withGHKPickleEvent_, bus, pickleEvent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRScenarioImpl)
