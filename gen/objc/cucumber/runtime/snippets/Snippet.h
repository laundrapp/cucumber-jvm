//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/snippets/Snippet.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CucumberRuntimeSnippetsSnippet")
#ifdef RESTRICT_CucumberRuntimeSnippetsSnippet
#define INCLUDE_ALL_CucumberRuntimeSnippetsSnippet 0
#else
#define INCLUDE_ALL_CucumberRuntimeSnippetsSnippet 1
#endif
#undef RESTRICT_CucumberRuntimeSnippetsSnippet

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (CCBRSnippet_) && (INCLUDE_ALL_CucumberRuntimeSnippetsSnippet || defined(INCLUDE_CCBRSnippet))
#define CCBRSnippet_

@protocol JavaUtilMap;

@protocol CCBRSnippet < JavaObject >

/*!
 @return a <code>java.text.MessageFormat</code> template used to generate a snippet. The template can access the
  following variables: 
 <p>
  <ul>
  <li>{0} : Step Keyword</li>
  <li>{1} : Value of <code>escapePattern(String)</code></li>
  <li>{2} : Function name</li>
  <li>{3} : Value of <code>arguments(Map)</code></li>
  <li>{4} : Regexp hint comment</li>
  <li>{5} : value of <code>tableHint()</code> if the step has a table</li>
  </ul>
 */
- (NSString *)template__;

/*!
 @return a hint about alternative ways to declare a table argument
 */
- (NSString *)tableHint;

/*!
 @brief Constructs a string representation of the arguments a step definition should accept.The arguments are
  provided a map of (suggested) names and types.
 The arguments are ordered by their position.
 @param arguments ordered pairs of names and types
 @return a string representation of the arguments
 */
- (NSString *)argumentsWithJavaUtilMap:(id<JavaUtilMap>)arguments;

/*!
 @param pattern the computed pattern that will match an undefined step
 @return an escaped representation of the pattern, if escaping is necessary.
 */
- (NSString *)escapePatternWithNSString:(NSString *)pattern;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRSnippet)

J2OBJC_TYPE_LITERAL_HEADER(CCBRSnippet)

#define CucumberRuntimeSnippetsSnippet CCBRSnippet

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_CucumberRuntimeSnippetsSnippet")
