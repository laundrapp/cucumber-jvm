//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/laundrapp_org/cucumber-jvm/core/src/main/java/cucumber/runtime/snippets/CamelCaseConcatenator.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/runtime/snippets/CamelCaseConcatenator.h"
#include "java/lang/Character.h"
#include "java/lang/StringBuilder.h"

@interface CucumberRuntimeSnippetsCamelCaseConcatenator ()

- (NSString *)capitalizeWithNSString:(NSString *)line;

@end

__attribute__((unused)) static NSString *CucumberRuntimeSnippetsCamelCaseConcatenator_capitalizeWithNSString_(CucumberRuntimeSnippetsCamelCaseConcatenator *self, NSString *line);

@implementation CucumberRuntimeSnippetsCamelCaseConcatenator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CucumberRuntimeSnippetsCamelCaseConcatenator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)concatenateWithNSStringArray:(IOSObjectArray *)words {
  JavaLangStringBuilder *functionName = create_JavaLangStringBuilder_init();
  jboolean firstWord = true;
  {
    IOSObjectArray *a__ = words;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *word = *b__++;
      if (firstWord) {
        [functionName appendWithNSString:[((NSString *) nil_chk(word)) lowercaseString]];
        firstWord = false;
      }
      else {
        [functionName appendWithNSString:CucumberRuntimeSnippetsCamelCaseConcatenator_capitalizeWithNSString_(self, word)];
      }
    }
  }
  return [functionName description];
}

- (NSString *)capitalizeWithNSString:(NSString *)line {
  return CucumberRuntimeSnippetsCamelCaseConcatenator_capitalizeWithNSString_(self, line);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(concatenateWithNSStringArray:);
  methods[2].selector = @selector(capitalizeWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "concatenate", "[LNSString;", "capitalize", "LNSString;" };
  static const J2ObjcClassInfo _CucumberRuntimeSnippetsCamelCaseConcatenator = { "CamelCaseConcatenator", "cucumber.runtime.snippets", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_CucumberRuntimeSnippetsCamelCaseConcatenator;
}

@end

void CucumberRuntimeSnippetsCamelCaseConcatenator_init(CucumberRuntimeSnippetsCamelCaseConcatenator *self) {
  NSObject_init(self);
}

CucumberRuntimeSnippetsCamelCaseConcatenator *new_CucumberRuntimeSnippetsCamelCaseConcatenator_init() {
  J2OBJC_NEW_IMPL(CucumberRuntimeSnippetsCamelCaseConcatenator, init)
}

CucumberRuntimeSnippetsCamelCaseConcatenator *create_CucumberRuntimeSnippetsCamelCaseConcatenator_init() {
  J2OBJC_CREATE_IMPL(CucumberRuntimeSnippetsCamelCaseConcatenator, init)
}

NSString *CucumberRuntimeSnippetsCamelCaseConcatenator_capitalizeWithNSString_(CucumberRuntimeSnippetsCamelCaseConcatenator *self, NSString *line) {
  return JreStrcat("C$", JavaLangCharacter_toUpperCaseWithChar_([((NSString *) nil_chk(line)) charAtWithInt:0]), [line java_substring:1]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeSnippetsCamelCaseConcatenator)
