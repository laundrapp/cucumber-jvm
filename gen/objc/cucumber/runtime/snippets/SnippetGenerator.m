//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/snippets/SnippetGenerator.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/runtime/snippets/ArgumentPattern.h"
#include "cucumber/runtime/snippets/FunctionNameGenerator.h"
#include "cucumber/runtime/snippets/Snippet.h"
#include "cucumber/runtime/snippets/SnippetGenerator.h"
#include "gherkin/pickles/Argument.h"
#include "gherkin/pickles/PickleStep.h"
#include "gherkin/pickles/PickleString.h"
#include "gherkin/pickles/PickleTable.h"
#include "io/cucumber/cucumberexpressions/CucumberExpressionGenerator.h"
#include "io/cucumber/cucumberexpressions/GeneratedExpression.h"
#include "io/cucumber/cucumberexpressions/ParameterType.h"
#include "io/cucumber/cucumberexpressions/ParameterTypeRegistry.h"
#include "io/cucumber/datatable/DataTable.h"
#include "java/lang/reflect/Type.h"
#include "java/text/MessageFormat.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/regex/Pattern.h"

@interface CCBRSnippetGenerator () {
 @public
  id<CCBRSnippet> snippet_;
  IoCucumberCucumberexpressionsCucumberExpressionGenerator *generator_;
}

- (NSString *)functionNameWithNSString:(NSString *)sentence
         withCCBRFunctionNameGenerator:(CCBRFunctionNameGenerator *)functionNameGenerator;

- (id<JavaUtilMap>)argumentsWithGHKPickleStep:(GHKPickleStep *)step
                             withJavaUtilList:(id<JavaUtilList>)parameterNames
                             withJavaUtilList:(id<JavaUtilList>)parameterTypes;

- (NSString *)parameterNameWithNSString:(NSString *)name
                       withJavaUtilList:(id<JavaUtilList>)parameterNames;

@end

J2OBJC_FIELD_SETTER(CCBRSnippetGenerator, snippet_, id<CCBRSnippet>)
J2OBJC_FIELD_SETTER(CCBRSnippetGenerator, generator_, IoCucumberCucumberexpressionsCucumberExpressionGenerator *)

inline IOSObjectArray *CCBRSnippetGenerator_get_DEFAULT_ARGUMENT_PATTERNS(void);
static IOSObjectArray *CCBRSnippetGenerator_DEFAULT_ARGUMENT_PATTERNS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CCBRSnippetGenerator, DEFAULT_ARGUMENT_PATTERNS, IOSObjectArray *)

inline NSString *CCBRSnippetGenerator_get_REGEXP_HINT(void);
static NSString *CCBRSnippetGenerator_REGEXP_HINT = @"Write code here that turns the phrase above into concrete actions";
J2OBJC_STATIC_FIELD_OBJ_FINAL(CCBRSnippetGenerator, REGEXP_HINT, NSString *)

__attribute__((unused)) static NSString *CCBRSnippetGenerator_functionNameWithNSString_withCCBRFunctionNameGenerator_(CCBRSnippetGenerator *self, NSString *sentence, CCBRFunctionNameGenerator *functionNameGenerator);

__attribute__((unused)) static id<JavaUtilMap> CCBRSnippetGenerator_argumentsWithGHKPickleStep_withJavaUtilList_withJavaUtilList_(CCBRSnippetGenerator *self, GHKPickleStep *step, id<JavaUtilList> parameterNames, id<JavaUtilList> parameterTypes);

__attribute__((unused)) static NSString *CCBRSnippetGenerator_parameterNameWithNSString_withJavaUtilList_(CCBRSnippetGenerator *self, NSString *name, id<JavaUtilList> parameterNames);

J2OBJC_INITIALIZED_DEFN(CCBRSnippetGenerator)

@implementation CCBRSnippetGenerator

- (instancetype __nonnull)initWithCCBRSnippet:(id<CCBRSnippet>)snippet
withIoCucumberCucumberexpressionsParameterTypeRegistry:(IoCucumberCucumberexpressionsParameterTypeRegistry *)parameterTypeRegistry {
  CCBRSnippetGenerator_initWithCCBRSnippet_withIoCucumberCucumberexpressionsParameterTypeRegistry_(self, snippet, parameterTypeRegistry);
  return self;
}

- (NSString *)getSnippetWithGHKPickleStep:(GHKPickleStep *)step
                             withNSString:(NSString *)keyword
            withCCBRFunctionNameGenerator:(CCBRFunctionNameGenerator *)functionNameGenerator {
  id<JavaUtilList> expressions = [((IoCucumberCucumberexpressionsCucumberExpressionGenerator *) nil_chk(generator_)) generateExpressionsWithNSString:[((GHKPickleStep *) nil_chk(step)) getText]];
  IoCucumberCucumberexpressionsGeneratedExpression *expression = [((id<JavaUtilList>) nil_chk(expressions)) getWithInt:0];
  return JavaTextMessageFormat_formatWithNSString_withNSObjectArray_([((id<CCBRSnippet>) nil_chk(snippet_)) template__], [IOSObjectArray arrayWithObjects:(id[]){ keyword, [snippet_ escapePatternWithNSString:[((IoCucumberCucumberexpressionsGeneratedExpression *) nil_chk(expression)) getSource]], CCBRSnippetGenerator_functionNameWithNSString_withCCBRFunctionNameGenerator_(self, [expression getSource], functionNameGenerator), [snippet_ argumentsWithJavaUtilMap:CCBRSnippetGenerator_argumentsWithGHKPickleStep_withJavaUtilList_withJavaUtilList_(self, step, [expression getParameterNames], [expression getParameterTypes])], CCBRSnippetGenerator_REGEXP_HINT, ![((id<JavaUtilList>) nil_chk([step getArgument])) isEmpty] && [[((id<JavaUtilList>) nil_chk([step getArgument])) getWithInt:0] isKindOfClass:[GHKPickleTable class]] ? [snippet_ tableHint] : @"" } count:6 type:NSObject_class_()]);
}

- (NSString *)functionNameWithNSString:(NSString *)sentence
         withCCBRFunctionNameGenerator:(CCBRFunctionNameGenerator *)functionNameGenerator {
  return CCBRSnippetGenerator_functionNameWithNSString_withCCBRFunctionNameGenerator_(self, sentence, functionNameGenerator);
}

- (id<JavaUtilMap>)argumentsWithGHKPickleStep:(GHKPickleStep *)step
                             withJavaUtilList:(id<JavaUtilList>)parameterNames
                             withJavaUtilList:(id<JavaUtilList>)parameterTypes {
  return CCBRSnippetGenerator_argumentsWithGHKPickleStep_withJavaUtilList_withJavaUtilList_(self, step, parameterNames, parameterTypes);
}

- (NSString *)parameterNameWithNSString:(NSString *)name
                       withJavaUtilList:(id<JavaUtilList>)parameterNames {
  return CCBRSnippetGenerator_parameterNameWithNSString_withJavaUtilList_(self, name, parameterNames);
}

- (IOSObjectArray *)argumentPatterns {
  return CCBRSnippetGenerator_DEFAULT_ARGUMENT_PATTERNS;
}

- (void)dealloc {
  RELEASE_(snippet_);
  RELEASE_(generator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 5, 6, -1, 7, -1, -1 },
    { NULL, "LNSString;", 0x2, 8, 9, -1, 10, -1, -1 },
    { NULL, "[LCCBRArgumentPattern;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRSnippet:withIoCucumberCucumberexpressionsParameterTypeRegistry:);
  methods[1].selector = @selector(getSnippetWithGHKPickleStep:withNSString:withCCBRFunctionNameGenerator:);
  methods[2].selector = @selector(functionNameWithNSString:withCCBRFunctionNameGenerator:);
  methods[3].selector = @selector(argumentsWithGHKPickleStep:withJavaUtilList:withJavaUtilList:);
  methods[4].selector = @selector(parameterNameWithNSString:withJavaUtilList:);
  methods[5].selector = @selector(argumentPatterns);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_ARGUMENT_PATTERNS", "[LCCBRArgumentPattern;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "REGEXP_HINT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "snippet_", "LCCBRSnippet;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "generator_", "LIoCucumberCucumberexpressionsCucumberExpressionGenerator;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LCCBRSnippet;LIoCucumberCucumberexpressionsParameterTypeRegistry;", "getSnippet", "LGHKPickleStep;LNSString;LCCBRFunctionNameGenerator;", "functionName", "LNSString;LCCBRFunctionNameGenerator;", "arguments", "LGHKPickleStep;LJavaUtilList;LJavaUtilList;", "(Lgherkin/pickles/PickleStep;Ljava/util/List<Ljava/lang/String;>;Ljava/util/List<Lio/cucumber/cucumberexpressions/ParameterType<*>;>;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/reflect/Type;>;", "parameterName", "LNSString;LJavaUtilList;", "(Ljava/lang/String;Ljava/util/List<Ljava/lang/String;>;)Ljava/lang/String;", &CCBRSnippetGenerator_DEFAULT_ARGUMENT_PATTERNS, &CCBRSnippetGenerator_REGEXP_HINT };
  static const J2ObjcClassInfo _CCBRSnippetGenerator = { "SnippetGenerator", "cucumber.runtime.snippets", ptrTable, methods, fields, 7, 0x1, 6, 4, -1, -1, -1, -1, -1 };
  return &_CCBRSnippetGenerator;
}

+ (void)initialize {
  if (self == [CCBRSnippetGenerator class]) {
    JreStrongAssignAndConsume(&CCBRSnippetGenerator_DEFAULT_ARGUMENT_PATTERNS, [IOSObjectArray newArrayWithObjects:(id[]){ create_CCBRArgumentPattern_initWithJavaUtilRegexPattern_(JavaUtilRegexPattern_compileWithNSString_(@"\\{.*?\\}")) } count:1 type:CCBRArgumentPattern_class_()]);
    J2OBJC_SET_INITIALIZED(CCBRSnippetGenerator)
  }
}

@end

void CCBRSnippetGenerator_initWithCCBRSnippet_withIoCucumberCucumberexpressionsParameterTypeRegistry_(CCBRSnippetGenerator *self, id<CCBRSnippet> snippet, IoCucumberCucumberexpressionsParameterTypeRegistry *parameterTypeRegistry) {
  NSObject_init(self);
  JreStrongAssign(&self->snippet_, snippet);
  JreStrongAssignAndConsume(&self->generator_, new_IoCucumberCucumberexpressionsCucumberExpressionGenerator_initWithIoCucumberCucumberexpressionsParameterTypeRegistry_(parameterTypeRegistry));
}

CCBRSnippetGenerator *new_CCBRSnippetGenerator_initWithCCBRSnippet_withIoCucumberCucumberexpressionsParameterTypeRegistry_(id<CCBRSnippet> snippet, IoCucumberCucumberexpressionsParameterTypeRegistry *parameterTypeRegistry) {
  J2OBJC_NEW_IMPL(CCBRSnippetGenerator, initWithCCBRSnippet_withIoCucumberCucumberexpressionsParameterTypeRegistry_, snippet, parameterTypeRegistry)
}

CCBRSnippetGenerator *create_CCBRSnippetGenerator_initWithCCBRSnippet_withIoCucumberCucumberexpressionsParameterTypeRegistry_(id<CCBRSnippet> snippet, IoCucumberCucumberexpressionsParameterTypeRegistry *parameterTypeRegistry) {
  J2OBJC_CREATE_IMPL(CCBRSnippetGenerator, initWithCCBRSnippet_withIoCucumberCucumberexpressionsParameterTypeRegistry_, snippet, parameterTypeRegistry)
}

NSString *CCBRSnippetGenerator_functionNameWithNSString_withCCBRFunctionNameGenerator_(CCBRSnippetGenerator *self, NSString *sentence, CCBRFunctionNameGenerator *functionNameGenerator) {
  if (functionNameGenerator == nil) {
    return nil;
  }
  {
    IOSObjectArray *a__ = [self argumentPatterns];
    CCBRArgumentPattern * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    CCBRArgumentPattern * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      CCBRArgumentPattern *argumentPattern = *b__++;
      sentence = [((CCBRArgumentPattern *) nil_chk(argumentPattern)) replaceMatchesWithSpaceWithNSString:sentence];
    }
  }
  return [functionNameGenerator generateFunctionNameWithNSString:sentence];
}

id<JavaUtilMap> CCBRSnippetGenerator_argumentsWithGHKPickleStep_withJavaUtilList_withJavaUtilList_(CCBRSnippetGenerator *self, GHKPickleStep *step, id<JavaUtilList> parameterNames, id<JavaUtilList> parameterTypes) {
  id<JavaUtilMap> arguments = create_JavaUtilLinkedHashMap_initWithInt_([((id<JavaUtilList>) nil_chk(parameterTypes)) size] + 1);
  for (jint i = 0; i < [parameterTypes size]; i++) {
    IoCucumberCucumberexpressionsParameterType *parameterType = [parameterTypes getWithInt:i];
    NSString *parameterName = [((id<JavaUtilList>) nil_chk(parameterNames)) getWithInt:i];
    [arguments putWithId:parameterName withId:[((IoCucumberCucumberexpressionsParameterType *) nil_chk(parameterType)) getType]];
  }
  if ([((id<JavaUtilList>) nil_chk([((GHKPickleStep *) nil_chk(step)) getArgument])) isEmpty]) {
    return arguments;
  }
  id<GHKArgument> arg = [((id<JavaUtilList>) nil_chk([step getArgument])) getWithInt:0];
  if ([arg isKindOfClass:[GHKPickleString class]]) {
    [arguments putWithId:CCBRSnippetGenerator_parameterNameWithNSString_withJavaUtilList_(self, @"docString", parameterNames) withId:NSString_class_()];
  }
  if ([arg isKindOfClass:[GHKPickleTable class]]) {
    [arguments putWithId:CCBRSnippetGenerator_parameterNameWithNSString_withJavaUtilList_(self, @"dataTable", parameterNames) withId:IoCucumberDatatableDataTable_class_()];
  }
  return arguments;
}

NSString *CCBRSnippetGenerator_parameterNameWithNSString_withJavaUtilList_(CCBRSnippetGenerator *self, NSString *name, id<JavaUtilList> parameterNames) {
  if (![((id<JavaUtilList>) nil_chk(parameterNames)) containsWithId:name]) {
    return name;
  }
  for (jint i = 1; ; i++) {
    if (![parameterNames containsWithId:JreStrcat("$I", name, i)]) {
      return JreStrcat("$I", name, i);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRSnippetGenerator)
