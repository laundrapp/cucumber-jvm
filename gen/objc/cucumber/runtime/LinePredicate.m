//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/LinePredicate.java
//

#include "J2ObjC_source.h"
#include "cucumber/runtime/LinePredicate.h"
#include "gherkin/events/PickleEvent.h"
#include "gherkin/pickles/Pickle.h"
#include "gherkin/pickles/PickleLocation.h"
#include "java/lang/Long.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@interface CCBRLinePredicate () {
 @public
  id<JavaUtilMap> lineFilters_;
}

@end

J2OBJC_FIELD_SETTER(CCBRLinePredicate, lineFilters_, id<JavaUtilMap>)

@implementation CCBRLinePredicate

- (instancetype __nonnull)initWithJavaUtilMap:(id<JavaUtilMap>)lineFilters {
  CCBRLinePredicate_initWithJavaUtilMap_(self, lineFilters);
  return self;
}

- (jboolean)applyWithGHKPickleEvent:(GHKPickleEvent *)pickleEvent {
  NSString *picklePath = ((GHKPickleEvent *) nil_chk(pickleEvent))->uri_;
  if (![((id<JavaUtilMap>) nil_chk(lineFilters_)) containsKeyWithId:picklePath]) {
    return true;
  }
  for (JavaLangLong * __strong line in nil_chk([((id<JavaUtilMap>) nil_chk(lineFilters_)) getWithId:picklePath])) {
    for (GHKPickleLocation * __strong location in nil_chk([((GHKPickle *) nil_chk(pickleEvent->pickle_)) getLocations])) {
      if ([((JavaLangLong *) nil_chk(line)) longLongValue] == [((GHKPickleLocation *) nil_chk(location)) getLine]) {
        return true;
      }
    }
  }
  return false;
}

- (void)dealloc {
  RELEASE_(lineFilters_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilMap:);
  methods[1].selector = @selector(applyWithGHKPickleEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lineFilters_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/util/List<Ljava/lang/Long;>;>;)V", "apply", "LGHKPickleEvent;", "Ljava/util/Map<Ljava/lang/String;Ljava/util/List<Ljava/lang/Long;>;>;" };
  static const J2ObjcClassInfo _CCBRLinePredicate = { "LinePredicate", "cucumber.runtime", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_CCBRLinePredicate;
}

@end

void CCBRLinePredicate_initWithJavaUtilMap_(CCBRLinePredicate *self, id<JavaUtilMap> lineFilters) {
  NSObject_init(self);
  JreStrongAssign(&self->lineFilters_, lineFilters);
}

CCBRLinePredicate *new_CCBRLinePredicate_initWithJavaUtilMap_(id<JavaUtilMap> lineFilters) {
  J2OBJC_NEW_IMPL(CCBRLinePredicate, initWithJavaUtilMap_, lineFilters)
}

CCBRLinePredicate *create_CCBRLinePredicate_initWithJavaUtilMap_(id<JavaUtilMap> lineFilters) {
  J2OBJC_CREATE_IMPL(CCBRLinePredicate, initWithJavaUtilMap_, lineFilters)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRLinePredicate)
