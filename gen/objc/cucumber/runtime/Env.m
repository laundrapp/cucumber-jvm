//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/Env.java
//

#include "J2ObjC_source.h"
#include "cucumber/runtime/Env.h"
#include "java/lang/System.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/MissingResourceException.h"
#include "java/util/Properties.h"
#include "java/util/ResourceBundle.h"
#include "java/util/Set.h"

@interface CCBREnv () {
 @public
  id<JavaUtilMap> map_;
}

- (void)putWithNSString:(NSString *)key
           withNSString:(NSString *)string;

@end

J2OBJC_FIELD_SETTER(CCBREnv, map_, id<JavaUtilMap>)

__attribute__((unused)) static void CCBREnv_putWithNSString_withNSString_(CCBREnv *self, NSString *key, NSString *string);

J2OBJC_INITIALIZED_DEFN(CCBREnv)

CCBREnv *CCBREnv_INSTANCE;

@implementation CCBREnv

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CCBREnv_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithNSString:(NSString *)bundleName {
  CCBREnv_initWithNSString_(self, bundleName);
  return self;
}

- (instancetype __nonnull)initWithJavaUtilProperties:(JavaUtilProperties *)properties {
  CCBREnv_initWithJavaUtilProperties_(self, properties);
  return self;
}

- (instancetype __nonnull)initWithNSString:(NSString *)bundleName
                    withJavaUtilProperties:(JavaUtilProperties *)properties {
  CCBREnv_initWithNSString_withJavaUtilProperties_(self, bundleName, properties);
  return self;
}

- (void)putWithNSString:(NSString *)key
           withNSString:(NSString *)string {
  CCBREnv_putWithNSString_withNSString_(self, key, string);
}

- (NSString *)getWithNSString:(NSString *)key {
  return [((id<JavaUtilMap>) nil_chk(map_)) getWithId:key];
}

- (NSString *)getWithNSString:(NSString *)key
                 withNSString:(NSString *)defaultValue {
  NSString *result = [self getWithNSString:key];
  return result != nil ? result : defaultValue;
}

- (void)dealloc {
  RELEASE_(map_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(initWithJavaUtilProperties:);
  methods[3].selector = @selector(initWithNSString:withJavaUtilProperties:);
  methods[4].selector = @selector(putWithNSString:withNSString:);
  methods[5].selector = @selector(getWithNSString:);
  methods[6].selector = @selector(getWithNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LCCBREnv;", .constantValue.asLong = 0, 0x19, -1, 6, -1, -1 },
    { "map_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LJavaUtilProperties;", "LNSString;LJavaUtilProperties;", "put", "LNSString;LNSString;", "get", &CCBREnv_INSTANCE, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _CCBREnv = { "Env", "cucumber.runtime", ptrTable, methods, fields, 7, 0x1, 7, 2, -1, -1, -1, -1, -1 };
  return &_CCBREnv;
}

+ (void)initialize {
  if (self == [CCBREnv class]) {
    JreStrongAssignAndConsume(&CCBREnv_INSTANCE, new_CCBREnv_initWithNSString_(@"cucumber"));
    J2OBJC_SET_INITIALIZED(CCBREnv)
  }
}

@end

void CCBREnv_init(CCBREnv *self) {
  CCBREnv_initWithNSString_withJavaUtilProperties_(self, nil, JavaLangSystem_getProperties());
}

CCBREnv *new_CCBREnv_init() {
  J2OBJC_NEW_IMPL(CCBREnv, init)
}

CCBREnv *create_CCBREnv_init() {
  J2OBJC_CREATE_IMPL(CCBREnv, init)
}

void CCBREnv_initWithNSString_(CCBREnv *self, NSString *bundleName) {
  CCBREnv_initWithNSString_withJavaUtilProperties_(self, bundleName, JavaLangSystem_getProperties());
}

CCBREnv *new_CCBREnv_initWithNSString_(NSString *bundleName) {
  J2OBJC_NEW_IMPL(CCBREnv, initWithNSString_, bundleName)
}

CCBREnv *create_CCBREnv_initWithNSString_(NSString *bundleName) {
  J2OBJC_CREATE_IMPL(CCBREnv, initWithNSString_, bundleName)
}

void CCBREnv_initWithJavaUtilProperties_(CCBREnv *self, JavaUtilProperties *properties) {
  CCBREnv_initWithNSString_withJavaUtilProperties_(self, nil, properties);
}

CCBREnv *new_CCBREnv_initWithJavaUtilProperties_(JavaUtilProperties *properties) {
  J2OBJC_NEW_IMPL(CCBREnv, initWithJavaUtilProperties_, properties)
}

CCBREnv *create_CCBREnv_initWithJavaUtilProperties_(JavaUtilProperties *properties) {
  J2OBJC_CREATE_IMPL(CCBREnv, initWithJavaUtilProperties_, properties)
}

void CCBREnv_initWithNSString_withJavaUtilProperties_(CCBREnv *self, NSString *bundleName, JavaUtilProperties *properties) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->map_, new_JavaUtilHashMap_init());
  if (bundleName != nil) {
    @try {
      JavaUtilResourceBundle *bundle = JavaUtilResourceBundle_getBundleWithNSString_(bundleName);
      for (NSString * __strong key in nil_chk([((JavaUtilResourceBundle *) nil_chk(bundle)) keySet])) {
        CCBREnv_putWithNSString_withNSString_(self, key, [bundle getStringWithNSString:key]);
      }
    }
    @catch (JavaUtilMissingResourceException *ignore) {
    }
  }
  if (properties != nil) {
    for (NSString * __strong key in nil_chk([properties stringPropertyNames])) {
      CCBREnv_putWithNSString_withNSString_(self, key, [properties getPropertyWithNSString:key]);
    }
  }
  id<JavaUtilMap> env = JavaLangSystem_getenv();
  for (NSString * __strong key in nil_chk([((id<JavaUtilMap>) nil_chk(env)) keySet])) {
    CCBREnv_putWithNSString_withNSString_(self, key, [env getWithId:key]);
  }
}

CCBREnv *new_CCBREnv_initWithNSString_withJavaUtilProperties_(NSString *bundleName, JavaUtilProperties *properties) {
  J2OBJC_NEW_IMPL(CCBREnv, initWithNSString_withJavaUtilProperties_, bundleName, properties)
}

CCBREnv *create_CCBREnv_initWithNSString_withJavaUtilProperties_(NSString *bundleName, JavaUtilProperties *properties) {
  J2OBJC_CREATE_IMPL(CCBREnv, initWithNSString_withJavaUtilProperties_, bundleName, properties)
}

void CCBREnv_putWithNSString_withNSString_(CCBREnv *self, NSString *key, NSString *string) {
  [((id<JavaUtilMap>) nil_chk(self->map_)) putWithId:key withId:string];
  [self->map_ putWithId:[((NSString *) nil_chk([((NSString *) nil_chk(key)) java_replace:'.' withChar:'_'])) uppercaseString] withId:string];
  [self->map_ putWithId:[((NSString *) nil_chk([key java_replace:'_' withChar:'.'])) lowercaseString] withId:string];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBREnv)
