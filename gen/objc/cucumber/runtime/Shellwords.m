//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/Shellwords.java
//

#include "J2ObjC_source.h"
#include "cucumber/runtime/Shellwords.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface CCBRShellwords ()

- (instancetype __nonnull)init;

@end

inline JavaUtilRegexPattern *CCBRShellwords_get_SHELLWORDS_PATTERN(void);
static JavaUtilRegexPattern *CCBRShellwords_SHELLWORDS_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CCBRShellwords, SHELLWORDS_PATTERN, JavaUtilRegexPattern *)

__attribute__((unused)) static void CCBRShellwords_init(CCBRShellwords *self);

__attribute__((unused)) static CCBRShellwords *new_CCBRShellwords_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRShellwords *create_CCBRShellwords_init(void);

J2OBJC_INITIALIZED_DEFN(CCBRShellwords)

@implementation CCBRShellwords

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CCBRShellwords_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<JavaUtilList>)parseWithNSString:(NSString *)cmdline {
  return CCBRShellwords_parseWithNSString_(cmdline);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(parseWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SHELLWORDS_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "parse", "LNSString;", "(Ljava/lang/String;)Ljava/util/List<Ljava/lang/String;>;", &CCBRShellwords_SHELLWORDS_PATTERN };
  static const J2ObjcClassInfo _CCBRShellwords = { "Shellwords", "cucumber.runtime", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_CCBRShellwords;
}

+ (void)initialize {
  if (self == [CCBRShellwords class]) {
    JreStrongAssign(&CCBRShellwords_SHELLWORDS_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"[^\\s']+|'([^']*)'"));
    J2OBJC_SET_INITIALIZED(CCBRShellwords)
  }
}

@end

void CCBRShellwords_init(CCBRShellwords *self) {
  NSObject_init(self);
}

CCBRShellwords *new_CCBRShellwords_init() {
  J2OBJC_NEW_IMPL(CCBRShellwords, init)
}

CCBRShellwords *create_CCBRShellwords_init() {
  J2OBJC_CREATE_IMPL(CCBRShellwords, init)
}

id<JavaUtilList> CCBRShellwords_parseWithNSString_(NSString *cmdline) {
  CCBRShellwords_initialize();
  id<JavaUtilList> matchList = create_JavaUtilArrayList_init();
  JavaUtilRegexMatcher *shellwordsMatcher = [((JavaUtilRegexPattern *) nil_chk(CCBRShellwords_SHELLWORDS_PATTERN)) matcherWithJavaLangCharSequence:cmdline];
  while ([((JavaUtilRegexMatcher *) nil_chk(shellwordsMatcher)) find]) {
    if ([shellwordsMatcher groupWithInt:1] != nil) {
      [matchList addWithId:[shellwordsMatcher groupWithInt:1]];
    }
    else {
      [matchList addWithId:[shellwordsMatcher group]];
    }
  }
  return matchList;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRShellwords)
