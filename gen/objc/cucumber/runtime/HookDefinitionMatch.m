//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/HookDefinitionMatch.java
//

#include "J2ObjC_source.h"
#include "cucumber/api/Scenario.h"
#include "cucumber/runtime/HookDefinition.h"
#include "cucumber/runtime/HookDefinitionMatch.h"

@interface CCBRHookDefinitionMatch () {
 @public
  id<CCBRHookDefinition> hookDefinition_;
}

@end

J2OBJC_FIELD_SETTER(CCBRHookDefinitionMatch, hookDefinition_, id<CCBRHookDefinition>)

@implementation CCBRHookDefinitionMatch

- (instancetype __nonnull)initWithCCBRHookDefinition:(id<CCBRHookDefinition>)hookDefinition {
  CCBRHookDefinitionMatch_initWithCCBRHookDefinition_(self, hookDefinition);
  return self;
}

- (void)runStepWithNSString:(NSString *)language
    withCucumberApiScenario:(id<CucumberApiScenario>)scenario {
  [((id<CCBRHookDefinition>) nil_chk(hookDefinition_)) executeWithCucumberApiScenario:scenario];
}

- (void)dryRunStepWithNSString:(NSString *)language
       withCucumberApiScenario:(id<CucumberApiScenario>)scenario {
}

- (NSString *)getCodeLocation {
  return [((id<CCBRHookDefinition>) nil_chk(hookDefinition_)) getLocationWithBoolean:false];
}

- (void)dealloc {
  RELEASE_(hookDefinition_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRHookDefinition:);
  methods[1].selector = @selector(runStepWithNSString:withCucumberApiScenario:);
  methods[2].selector = @selector(dryRunStepWithNSString:withCucumberApiScenario:);
  methods[3].selector = @selector(getCodeLocation);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hookDefinition_", "LCCBRHookDefinition;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LCCBRHookDefinition;", "runStep", "LNSString;LCucumberApiScenario;", "LJavaLangThrowable;", "dryRunStep" };
  static const J2ObjcClassInfo _CCBRHookDefinitionMatch = { "HookDefinitionMatch", "cucumber.runtime", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_CCBRHookDefinitionMatch;
}

@end

void CCBRHookDefinitionMatch_initWithCCBRHookDefinition_(CCBRHookDefinitionMatch *self, id<CCBRHookDefinition> hookDefinition) {
  NSObject_init(self);
  JreStrongAssign(&self->hookDefinition_, hookDefinition);
}

CCBRHookDefinitionMatch *new_CCBRHookDefinitionMatch_initWithCCBRHookDefinition_(id<CCBRHookDefinition> hookDefinition) {
  J2OBJC_NEW_IMPL(CCBRHookDefinitionMatch, initWithCCBRHookDefinition_, hookDefinition)
}

CCBRHookDefinitionMatch *create_CCBRHookDefinitionMatch_initWithCCBRHookDefinition_(id<CCBRHookDefinition> hookDefinition) {
  J2OBJC_CREATE_IMPL(CCBRHookDefinitionMatch, initWithCCBRHookDefinition_, hookDefinition)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRHookDefinitionMatch)
