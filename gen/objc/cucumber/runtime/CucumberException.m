//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/CucumberException.java
//

#include "J2ObjC_source.h"
#include "cucumber/runtime/CucumberException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"

@implementation CCBRCucumberException

- (instancetype __nonnull)initWithNSString:(NSString *)message {
  CCBRCucumberException_initWithNSString_(self, message);
  return self;
}

- (instancetype __nonnull)initWithNSString:(NSString *)message
                     withJavaLangThrowable:(JavaLangThrowable *)e {
  CCBRCucumberException_initWithNSString_withJavaLangThrowable_(self, message, e);
  return self;
}

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)e {
  CCBRCucumberException_initWithJavaLangThrowable_(self, e);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithNSString:withJavaLangThrowable:);
  methods[2].selector = @selector(initWithJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LNSString;LJavaLangThrowable;", "LJavaLangThrowable;" };
  static const J2ObjcClassInfo _CCBRCucumberException = { "CucumberException", "cucumber.runtime", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_CCBRCucumberException;
}

@end

void CCBRCucumberException_initWithNSString_(CCBRCucumberException *self, NSString *message) {
  JavaLangRuntimeException_initWithNSString_(self, message);
}

CCBRCucumberException *new_CCBRCucumberException_initWithNSString_(NSString *message) {
  J2OBJC_NEW_IMPL(CCBRCucumberException, initWithNSString_, message)
}

CCBRCucumberException *create_CCBRCucumberException_initWithNSString_(NSString *message) {
  J2OBJC_CREATE_IMPL(CCBRCucumberException, initWithNSString_, message)
}

void CCBRCucumberException_initWithNSString_withJavaLangThrowable_(CCBRCucumberException *self, NSString *message, JavaLangThrowable *e) {
  JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(self, message, e);
}

CCBRCucumberException *new_CCBRCucumberException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *e) {
  J2OBJC_NEW_IMPL(CCBRCucumberException, initWithNSString_withJavaLangThrowable_, message, e)
}

CCBRCucumberException *create_CCBRCucumberException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *e) {
  J2OBJC_CREATE_IMPL(CCBRCucumberException, initWithNSString_withJavaLangThrowable_, message, e)
}

void CCBRCucumberException_initWithJavaLangThrowable_(CCBRCucumberException *self, JavaLangThrowable *e) {
  JavaLangRuntimeException_initWithJavaLangThrowable_(self, e);
}

CCBRCucumberException *new_CCBRCucumberException_initWithJavaLangThrowable_(JavaLangThrowable *e) {
  J2OBJC_NEW_IMPL(CCBRCucumberException, initWithJavaLangThrowable_, e)
}

CCBRCucumberException *create_CCBRCucumberException_initWithJavaLangThrowable_(JavaLangThrowable *e) {
  J2OBJC_CREATE_IMPL(CCBRCucumberException, initWithJavaLangThrowable_, e)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRCucumberException)
