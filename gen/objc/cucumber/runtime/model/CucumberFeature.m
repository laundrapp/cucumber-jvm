//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/laundrapp_org/cucumber-jvm/core/src/main/java/cucumber/runtime/model/CucumberFeature.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/api/event/TestSourceRead.h"
#include "cucumber/runner/EventBus.h"
#include "cucumber/runtime/CucumberException.h"
#include "cucumber/runtime/FeatureBuilder.h"
#include "cucumber/runtime/io/MultiLoader.h"
#include "cucumber/runtime/io/Resource.h"
#include "cucumber/runtime/io/ResourceLoader.h"
#include "cucumber/runtime/model/CucumberFeature.h"
#include "cucumber/runtime/model/PathWithLines.h"
#include "cucumber/util/Encoding.h"
#include "gherkin/ast/GherkinDocument.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface CucumberRuntimeModelCucumberFeature () {
 @public
  NSString *uri_;
  GherkinAstGherkinDocument *gherkinDocument_;
  NSString *gherkinSource_;
}

+ (void)loadFromRerunFileWithCucumberRuntimeFeatureBuilder:(CucumberRuntimeFeatureBuilder *)builder
                       withCucumberRuntimeIoResourceLoader:(id<CucumberRuntimeIoResourceLoader>)resourceLoader
                                              withNSString:(NSString *)rerunPath;

+ (NSString *)readWithCucumberRuntimeIoResource:(id<CucumberRuntimeIoResource>)resource;

+ (void)loadFromFileSystemOrClasspathWithCucumberRuntimeFeatureBuilder:(CucumberRuntimeFeatureBuilder *)builder
                                   withCucumberRuntimeIoResourceLoader:(id<CucumberRuntimeIoResourceLoader>)resourceLoader
                                                          withNSString:(NSString *)featurePath;

+ (void)loadFromFeaturePathWithCucumberRuntimeFeatureBuilder:(CucumberRuntimeFeatureBuilder *)builder
                         withCucumberRuntimeIoResourceLoader:(id<CucumberRuntimeIoResourceLoader>)resourceLoader
                                                withNSString:(NSString *)featurePath
                                                 withBoolean:(jboolean)failOnNoResource;

@end

J2OBJC_FIELD_SETTER(CucumberRuntimeModelCucumberFeature, uri_, NSString *)
J2OBJC_FIELD_SETTER(CucumberRuntimeModelCucumberFeature, gherkinDocument_, GherkinAstGherkinDocument *)
J2OBJC_FIELD_SETTER(CucumberRuntimeModelCucumberFeature, gherkinSource_, NSString *)

inline jlong CucumberRuntimeModelCucumberFeature_get_serialVersionUID(void);
#define CucumberRuntimeModelCucumberFeature_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(CucumberRuntimeModelCucumberFeature, serialVersionUID, jlong)

__attribute__((unused)) static void CucumberRuntimeModelCucumberFeature_loadFromRerunFileWithCucumberRuntimeFeatureBuilder_withCucumberRuntimeIoResourceLoader_withNSString_(CucumberRuntimeFeatureBuilder *builder, id<CucumberRuntimeIoResourceLoader> resourceLoader, NSString *rerunPath);

__attribute__((unused)) static NSString *CucumberRuntimeModelCucumberFeature_readWithCucumberRuntimeIoResource_(id<CucumberRuntimeIoResource> resource);

__attribute__((unused)) static void CucumberRuntimeModelCucumberFeature_loadFromFileSystemOrClasspathWithCucumberRuntimeFeatureBuilder_withCucumberRuntimeIoResourceLoader_withNSString_(CucumberRuntimeFeatureBuilder *builder, id<CucumberRuntimeIoResourceLoader> resourceLoader, NSString *featurePath);

__attribute__((unused)) static void CucumberRuntimeModelCucumberFeature_loadFromFeaturePathWithCucumberRuntimeFeatureBuilder_withCucumberRuntimeIoResourceLoader_withNSString_withBoolean_(CucumberRuntimeFeatureBuilder *builder, id<CucumberRuntimeIoResourceLoader> resourceLoader, NSString *featurePath, jboolean failOnNoResource);

@interface CucumberRuntimeModelCucumberFeature_CucumberFeatureUriComparator : NSObject < JavaUtilComparator >

- (instancetype)init;

- (jint)compareWithId:(CucumberRuntimeModelCucumberFeature *)a
               withId:(CucumberRuntimeModelCucumberFeature *)b;

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberRuntimeModelCucumberFeature_CucumberFeatureUriComparator)

__attribute__((unused)) static void CucumberRuntimeModelCucumberFeature_CucumberFeatureUriComparator_init(CucumberRuntimeModelCucumberFeature_CucumberFeatureUriComparator *self);

__attribute__((unused)) static CucumberRuntimeModelCucumberFeature_CucumberFeatureUriComparator *new_CucumberRuntimeModelCucumberFeature_CucumberFeatureUriComparator_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberRuntimeModelCucumberFeature_CucumberFeatureUriComparator *create_CucumberRuntimeModelCucumberFeature_CucumberFeatureUriComparator_init(void);

J2OBJC_TYPE_LITERAL_HEADER(CucumberRuntimeModelCucumberFeature_CucumberFeatureUriComparator)

J2OBJC_INITIALIZED_DEFN(CucumberRuntimeModelCucumberFeature)

JavaUtilRegexPattern *CucumberRuntimeModelCucumberFeature_RERUN_PATH_SPECIFICATION;

@implementation CucumberRuntimeModelCucumberFeature

+ (id<JavaUtilList>)load__WithCucumberRuntimeIoResourceLoader:(id<CucumberRuntimeIoResourceLoader>)resourceLoader
                                             withJavaUtilList:(id<JavaUtilList>)featurePaths
                                        withJavaIoPrintStream:(JavaIoPrintStream *)outArg {
  return CucumberRuntimeModelCucumberFeature_load__WithCucumberRuntimeIoResourceLoader_withJavaUtilList_withJavaIoPrintStream_(resourceLoader, featurePaths, outArg);
}

+ (id<JavaUtilList>)load__WithCucumberRuntimeIoResourceLoader:(id<CucumberRuntimeIoResourceLoader>)resourceLoader
                                             withJavaUtilList:(id<JavaUtilList>)featurePaths {
  return CucumberRuntimeModelCucumberFeature_load__WithCucumberRuntimeIoResourceLoader_withJavaUtilList_(resourceLoader, featurePaths);
}

+ (void)loadFromRerunFileWithCucumberRuntimeFeatureBuilder:(CucumberRuntimeFeatureBuilder *)builder
                       withCucumberRuntimeIoResourceLoader:(id<CucumberRuntimeIoResourceLoader>)resourceLoader
                                              withNSString:(NSString *)rerunPath {
  CucumberRuntimeModelCucumberFeature_loadFromRerunFileWithCucumberRuntimeFeatureBuilder_withCucumberRuntimeIoResourceLoader_withNSString_(builder, resourceLoader, rerunPath);
}

+ (id<JavaUtilList>)loadRerunFileWithCucumberRuntimeIoResourceLoader:(id<CucumberRuntimeIoResourceLoader>)resourceLoader
                                                        withNSString:(NSString *)rerunPath {
  return CucumberRuntimeModelCucumberFeature_loadRerunFileWithCucumberRuntimeIoResourceLoader_withNSString_(resourceLoader, rerunPath);
}

+ (NSString *)readWithCucumberRuntimeIoResource:(id<CucumberRuntimeIoResource>)resource {
  return CucumberRuntimeModelCucumberFeature_readWithCucumberRuntimeIoResource_(resource);
}

+ (void)loadFromFileSystemOrClasspathWithCucumberRuntimeFeatureBuilder:(CucumberRuntimeFeatureBuilder *)builder
                                   withCucumberRuntimeIoResourceLoader:(id<CucumberRuntimeIoResourceLoader>)resourceLoader
                                                          withNSString:(NSString *)featurePath {
  CucumberRuntimeModelCucumberFeature_loadFromFileSystemOrClasspathWithCucumberRuntimeFeatureBuilder_withCucumberRuntimeIoResourceLoader_withNSString_(builder, resourceLoader, featurePath);
}

+ (void)loadFromFeaturePathWithCucumberRuntimeFeatureBuilder:(CucumberRuntimeFeatureBuilder *)builder
                         withCucumberRuntimeIoResourceLoader:(id<CucumberRuntimeIoResourceLoader>)resourceLoader
                                                withNSString:(NSString *)featurePath
                                                 withBoolean:(jboolean)failOnNoResource {
  CucumberRuntimeModelCucumberFeature_loadFromFeaturePathWithCucumberRuntimeFeatureBuilder_withCucumberRuntimeIoResourceLoader_withNSString_withBoolean_(builder, resourceLoader, featurePath, failOnNoResource);
}

- (instancetype)initWithGherkinAstGherkinDocument:(GherkinAstGherkinDocument *)gherkinDocument
                                     withNSString:(NSString *)uri
                                     withNSString:(NSString *)gherkinSource {
  CucumberRuntimeModelCucumberFeature_initWithGherkinAstGherkinDocument_withNSString_withNSString_(self, gherkinDocument, uri, gherkinSource);
  return self;
}

- (GherkinAstGherkinDocument *)getGherkinFeature {
  return gherkinDocument_;
}

- (NSString *)getUri {
  return uri_;
}

- (void)sendTestSourceReadWithCucumberRunnerEventBus:(CucumberRunnerEventBus *)bus {
  [((CucumberRunnerEventBus *) nil_chk(bus)) sendWithCucumberApiEventEvent:create_CucumberApiEventTestSourceRead_initWithJavaLangLong_withNSString_withNSString_([bus getTime], uri_, gherkinSource_)];
}

- (void)dealloc {
  RELEASE_(uri_);
  RELEASE_(gherkinDocument_);
  RELEASE_(gherkinSource_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilList;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 0, 3, -1, 4, -1, -1 },
    { NULL, "V", 0xa, 5, 6, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 7, 8, -1, 9, -1, -1 },
    { NULL, "LNSString;", 0xa, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 12, 6, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 13, 14, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 15, -1, -1, -1, -1 },
    { NULL, "LGherkinAstGherkinDocument;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(load__WithCucumberRuntimeIoResourceLoader:withJavaUtilList:withJavaIoPrintStream:);
  methods[1].selector = @selector(load__WithCucumberRuntimeIoResourceLoader:withJavaUtilList:);
  methods[2].selector = @selector(loadFromRerunFileWithCucumberRuntimeFeatureBuilder:withCucumberRuntimeIoResourceLoader:withNSString:);
  methods[3].selector = @selector(loadRerunFileWithCucumberRuntimeIoResourceLoader:withNSString:);
  methods[4].selector = @selector(readWithCucumberRuntimeIoResource:);
  methods[5].selector = @selector(loadFromFileSystemOrClasspathWithCucumberRuntimeFeatureBuilder:withCucumberRuntimeIoResourceLoader:withNSString:);
  methods[6].selector = @selector(loadFromFeaturePathWithCucumberRuntimeFeatureBuilder:withCucumberRuntimeIoResourceLoader:withNSString:withBoolean:);
  methods[7].selector = @selector(initWithGherkinAstGherkinDocument:withNSString:withNSString:);
  methods[8].selector = @selector(getGherkinFeature);
  methods[9].selector = @selector(getUri);
  methods[10].selector = @selector(sendTestSourceReadWithCucumberRunnerEventBus:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = CucumberRuntimeModelCucumberFeature_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "uri_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "gherkinDocument_", "LGherkinAstGherkinDocument;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "gherkinSource_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "RERUN_PATH_SPECIFICATION", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x19, -1, 18, -1, -1 },
  };
  static const void *ptrTable[] = { "load", "LCucumberRuntimeIoResourceLoader;LJavaUtilList;LJavaIoPrintStream;", "(Lcucumber/runtime/io/ResourceLoader;Ljava/util/List<Ljava/lang/String;>;Ljava/io/PrintStream;)Ljava/util/List<Lcucumber/runtime/model/CucumberFeature;>;", "LCucumberRuntimeIoResourceLoader;LJavaUtilList;", "(Lcucumber/runtime/io/ResourceLoader;Ljava/util/List<Ljava/lang/String;>;)Ljava/util/List<Lcucumber/runtime/model/CucumberFeature;>;", "loadFromRerunFile", "LCucumberRuntimeFeatureBuilder;LCucumberRuntimeIoResourceLoader;LNSString;", "loadRerunFile", "LCucumberRuntimeIoResourceLoader;LNSString;", "(Lcucumber/runtime/io/ResourceLoader;Ljava/lang/String;)Ljava/util/List<Lcucumber/runtime/model/PathWithLines;>;", "read", "LCucumberRuntimeIoResource;", "loadFromFileSystemOrClasspath", "loadFromFeaturePath", "LCucumberRuntimeFeatureBuilder;LCucumberRuntimeIoResourceLoader;LNSString;Z", "LGherkinAstGherkinDocument;LNSString;LNSString;", "sendTestSourceRead", "LCucumberRunnerEventBus;", &CucumberRuntimeModelCucumberFeature_RERUN_PATH_SPECIFICATION, "LCucumberRuntimeModelCucumberFeature_CucumberFeatureUriComparator;" };
  static const J2ObjcClassInfo _CucumberRuntimeModelCucumberFeature = { "CucumberFeature", "cucumber.runtime.model", ptrTable, methods, fields, 7, 0x1, 11, 5, -1, 19, -1, -1, -1 };
  return &_CucumberRuntimeModelCucumberFeature;
}

+ (void)initialize {
  if (self == [CucumberRuntimeModelCucumberFeature class]) {
    JreStrongAssign(&CucumberRuntimeModelCucumberFeature_RERUN_PATH_SPECIFICATION, JavaUtilRegexPattern_compileWithNSString_(@"(?m:^| |)(.*?\\.feature(?:(?::\\d+)*))"));
    J2OBJC_SET_INITIALIZED(CucumberRuntimeModelCucumberFeature)
  }
}

@end

id<JavaUtilList> CucumberRuntimeModelCucumberFeature_load__WithCucumberRuntimeIoResourceLoader_withJavaUtilList_withJavaIoPrintStream_(id<CucumberRuntimeIoResourceLoader> resourceLoader, id<JavaUtilList> featurePaths, JavaIoPrintStream *outArg) {
  CucumberRuntimeModelCucumberFeature_initialize();
  id<JavaUtilList> cucumberFeatures = CucumberRuntimeModelCucumberFeature_load__WithCucumberRuntimeIoResourceLoader_withJavaUtilList_(resourceLoader, featurePaths);
  if ([((id<JavaUtilList>) nil_chk(cucumberFeatures)) isEmpty]) {
    if ([((id<JavaUtilList>) nil_chk(featurePaths)) isEmpty]) {
      [((JavaIoPrintStream *) nil_chk(outArg)) printlnWithNSString:@"Got no path to feature directory or feature file"];
    }
    else {
      [((JavaIoPrintStream *) nil_chk(outArg)) printlnWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"No features found at %s", [IOSObjectArray arrayWithObjects:(id[]){ featurePaths } count:1 type:NSObject_class_()])];
    }
  }
  return cucumberFeatures;
}

id<JavaUtilList> CucumberRuntimeModelCucumberFeature_load__WithCucumberRuntimeIoResourceLoader_withJavaUtilList_(id<CucumberRuntimeIoResourceLoader> resourceLoader, id<JavaUtilList> featurePaths) {
  CucumberRuntimeModelCucumberFeature_initialize();
  id<JavaUtilList> cucumberFeatures = create_JavaUtilArrayList_init();
  CucumberRuntimeFeatureBuilder *builder = create_CucumberRuntimeFeatureBuilder_initWithJavaUtilList_(cucumberFeatures);
  for (NSString * __strong featurePath in nil_chk(featurePaths)) {
    if ([((NSString *) nil_chk(featurePath)) java_hasPrefix:@"@"]) {
      CucumberRuntimeModelCucumberFeature_loadFromRerunFileWithCucumberRuntimeFeatureBuilder_withCucumberRuntimeIoResourceLoader_withNSString_(builder, resourceLoader, [featurePath java_substring:1]);
    }
    else {
      CucumberRuntimeModelCucumberFeature_loadFromFeaturePathWithCucumberRuntimeFeatureBuilder_withCucumberRuntimeIoResourceLoader_withNSString_withBoolean_(builder, resourceLoader, featurePath, false);
    }
  }
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(cucumberFeatures, create_CucumberRuntimeModelCucumberFeature_CucumberFeatureUriComparator_init());
  return cucumberFeatures;
}

void CucumberRuntimeModelCucumberFeature_loadFromRerunFileWithCucumberRuntimeFeatureBuilder_withCucumberRuntimeIoResourceLoader_withNSString_(CucumberRuntimeFeatureBuilder *builder, id<CucumberRuntimeIoResourceLoader> resourceLoader, NSString *rerunPath) {
  CucumberRuntimeModelCucumberFeature_initialize();
  for (CucumberRuntimeModelPathWithLines * __strong pathWithLines in nil_chk(CucumberRuntimeModelCucumberFeature_loadRerunFileWithCucumberRuntimeIoResourceLoader_withNSString_(resourceLoader, rerunPath))) {
    CucumberRuntimeModelCucumberFeature_loadFromFileSystemOrClasspathWithCucumberRuntimeFeatureBuilder_withCucumberRuntimeIoResourceLoader_withNSString_(builder, resourceLoader, ((CucumberRuntimeModelPathWithLines *) nil_chk(pathWithLines))->path_);
  }
}

id<JavaUtilList> CucumberRuntimeModelCucumberFeature_loadRerunFileWithCucumberRuntimeIoResourceLoader_withNSString_(id<CucumberRuntimeIoResourceLoader> resourceLoader, NSString *rerunPath) {
  CucumberRuntimeModelCucumberFeature_initialize();
  id<JavaUtilList> featurePaths = create_JavaUtilArrayList_init();
  id<JavaLangIterable> resources = [((id<CucumberRuntimeIoResourceLoader>) nil_chk(resourceLoader)) resourcesWithNSString:rerunPath withNSString:nil];
  for (id<CucumberRuntimeIoResource> __strong resource in nil_chk(resources)) {
    NSString *source = CucumberRuntimeModelCucumberFeature_readWithCucumberRuntimeIoResource_(resource);
    if (![((NSString *) nil_chk(source)) java_isEmpty]) {
      JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(CucumberRuntimeModelCucumberFeature_RERUN_PATH_SPECIFICATION)) matcherWithJavaLangCharSequence:source];
      while ([((JavaUtilRegexMatcher *) nil_chk(matcher)) find]) {
        [featurePaths addWithId:create_CucumberRuntimeModelPathWithLines_initWithNSString_([matcher groupWithInt:1])];
      }
    }
  }
  return featurePaths;
}

NSString *CucumberRuntimeModelCucumberFeature_readWithCucumberRuntimeIoResource_(id<CucumberRuntimeIoResource> resource) {
  CucumberRuntimeModelCucumberFeature_initialize();
  @try {
    return CucumberUtilEncoding_readFileWithCucumberRuntimeIoResource_(resource);
  }
  @catch (JavaIoIOException *e) {
    @throw create_CucumberRuntimeCucumberException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Failed to read resource:", [((id<CucumberRuntimeIoResource>) nil_chk(resource)) getPath]), e);
  }
}

void CucumberRuntimeModelCucumberFeature_loadFromFileSystemOrClasspathWithCucumberRuntimeFeatureBuilder_withCucumberRuntimeIoResourceLoader_withNSString_(CucumberRuntimeFeatureBuilder *builder, id<CucumberRuntimeIoResourceLoader> resourceLoader, NSString *featurePath) {
  CucumberRuntimeModelCucumberFeature_initialize();
  @try {
    CucumberRuntimeModelCucumberFeature_loadFromFeaturePathWithCucumberRuntimeFeatureBuilder_withCucumberRuntimeIoResourceLoader_withNSString_withBoolean_(builder, resourceLoader, featurePath, false);
  }
  @catch (JavaLangIllegalArgumentException *originalException) {
    if (![((NSString *) nil_chk(featurePath)) java_hasPrefix:CucumberRuntimeIoMultiLoader_CLASSPATH_SCHEME] && [((NSString *) nil_chk([originalException getMessage])) java_contains:@"Not a file or directory"]) {
      @try {
        CucumberRuntimeModelCucumberFeature_loadFromFeaturePathWithCucumberRuntimeFeatureBuilder_withCucumberRuntimeIoResourceLoader_withNSString_withBoolean_(builder, resourceLoader, JreStrcat("$$", CucumberRuntimeIoMultiLoader_CLASSPATH_SCHEME, featurePath), true);
      }
      @catch (JavaLangIllegalArgumentException *secondException) {
        if ([((NSString *) nil_chk([secondException getMessage])) java_contains:@"No resource found for"]) {
          @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"Neither found on file system or on classpath: ", [originalException getMessage], @", ", [secondException getMessage]));
        }
        else {
          @throw secondException;
        }
      }
    }
    else {
      @throw originalException;
    }
  }
}

void CucumberRuntimeModelCucumberFeature_loadFromFeaturePathWithCucumberRuntimeFeatureBuilder_withCucumberRuntimeIoResourceLoader_withNSString_withBoolean_(CucumberRuntimeFeatureBuilder *builder, id<CucumberRuntimeIoResourceLoader> resourceLoader, NSString *featurePath, jboolean failOnNoResource) {
  CucumberRuntimeModelCucumberFeature_initialize();
  id<JavaLangIterable> resources = [((id<CucumberRuntimeIoResourceLoader>) nil_chk(resourceLoader)) resourcesWithNSString:featurePath withNSString:@".feature"];
  if (failOnNoResource && ![((id<JavaUtilIterator>) nil_chk([((id<JavaLangIterable>) nil_chk(resources)) iterator])) hasNext]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"No resource found for: ", featurePath));
  }
  for (id<CucumberRuntimeIoResource> __strong resource in nil_chk(resources)) {
    [((CucumberRuntimeFeatureBuilder *) nil_chk(builder)) parseWithCucumberRuntimeIoResource:resource];
  }
}

void CucumberRuntimeModelCucumberFeature_initWithGherkinAstGherkinDocument_withNSString_withNSString_(CucumberRuntimeModelCucumberFeature *self, GherkinAstGherkinDocument *gherkinDocument, NSString *uri, NSString *gherkinSource) {
  NSObject_init(self);
  JreStrongAssign(&self->gherkinDocument_, gherkinDocument);
  JreStrongAssign(&self->uri_, uri);
  JreStrongAssign(&self->gherkinSource_, gherkinSource);
}

CucumberRuntimeModelCucumberFeature *new_CucumberRuntimeModelCucumberFeature_initWithGherkinAstGherkinDocument_withNSString_withNSString_(GherkinAstGherkinDocument *gherkinDocument, NSString *uri, NSString *gherkinSource) {
  J2OBJC_NEW_IMPL(CucumberRuntimeModelCucumberFeature, initWithGherkinAstGherkinDocument_withNSString_withNSString_, gherkinDocument, uri, gherkinSource)
}

CucumberRuntimeModelCucumberFeature *create_CucumberRuntimeModelCucumberFeature_initWithGherkinAstGherkinDocument_withNSString_withNSString_(GherkinAstGherkinDocument *gherkinDocument, NSString *uri, NSString *gherkinSource) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeModelCucumberFeature, initWithGherkinAstGherkinDocument_withNSString_withNSString_, gherkinDocument, uri, gherkinSource)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeModelCucumberFeature)

@implementation CucumberRuntimeModelCucumberFeature_CucumberFeatureUriComparator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CucumberRuntimeModelCucumberFeature_CucumberFeatureUriComparator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(CucumberRuntimeModelCucumberFeature *)a
               withId:(CucumberRuntimeModelCucumberFeature *)b {
  return [((NSString *) nil_chk([((CucumberRuntimeModelCucumberFeature *) nil_chk(a)) getUri])) compareToWithId:[((CucumberRuntimeModelCucumberFeature *) nil_chk(b)) getUri]];
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LCucumberRuntimeModelCucumberFeature;LCucumberRuntimeModelCucumberFeature;", "LCucumberRuntimeModelCucumberFeature;", "Ljava/lang/Object;Ljava/util/Comparator<Lcucumber/runtime/model/CucumberFeature;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeModelCucumberFeature_CucumberFeatureUriComparator = { "CucumberFeatureUriComparator", "cucumber.runtime.model", ptrTable, methods, NULL, 7, 0xa, 2, 0, 2, -1, -1, 3, -1 };
  return &_CucumberRuntimeModelCucumberFeature_CucumberFeatureUriComparator;
}

@end

void CucumberRuntimeModelCucumberFeature_CucumberFeatureUriComparator_init(CucumberRuntimeModelCucumberFeature_CucumberFeatureUriComparator *self) {
  NSObject_init(self);
}

CucumberRuntimeModelCucumberFeature_CucumberFeatureUriComparator *new_CucumberRuntimeModelCucumberFeature_CucumberFeatureUriComparator_init() {
  J2OBJC_NEW_IMPL(CucumberRuntimeModelCucumberFeature_CucumberFeatureUriComparator, init)
}

CucumberRuntimeModelCucumberFeature_CucumberFeatureUriComparator *create_CucumberRuntimeModelCucumberFeature_CucumberFeatureUriComparator_init() {
  J2OBJC_CREATE_IMPL(CucumberRuntimeModelCucumberFeature_CucumberFeatureUriComparator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeModelCucumberFeature_CucumberFeatureUriComparator)
