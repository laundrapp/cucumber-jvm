//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/laundrapp_org/cucumber-jvm/core/src/main/java/cucumber/runtime/model/PathWithLines.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/runtime/model/PathWithLines.h"
#include "java/lang/Long.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface CucumberRuntimeModelPathWithLines ()

+ (id<JavaUtilList>)toLongsWithNSStringArray:(IOSObjectArray *)strings;

@end

inline JavaUtilRegexPattern *CucumberRuntimeModelPathWithLines_get_FILE_COLON_LINE_PATTERN(void);
static JavaUtilRegexPattern *CucumberRuntimeModelPathWithLines_FILE_COLON_LINE_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CucumberRuntimeModelPathWithLines, FILE_COLON_LINE_PATTERN, JavaUtilRegexPattern *)

__attribute__((unused)) static id<JavaUtilList> CucumberRuntimeModelPathWithLines_toLongsWithNSStringArray_(IOSObjectArray *strings);

J2OBJC_INITIALIZED_DEFN(CucumberRuntimeModelPathWithLines)

@implementation CucumberRuntimeModelPathWithLines

+ (jboolean)hasLineFiltersWithNSString:(NSString *)pathName {
  return CucumberRuntimeModelPathWithLines_hasLineFiltersWithNSString_(pathName);
}

+ (NSString *)stripLineFiltersWithNSString:(NSString *)pathName {
  return CucumberRuntimeModelPathWithLines_stripLineFiltersWithNSString_(pathName);
}

- (instancetype __nonnull)initWithNSString:(NSString *)pathName {
  CucumberRuntimeModelPathWithLines_initWithNSString_(self, pathName);
  return self;
}

+ (id<JavaUtilList>)toLongsWithNSStringArray:(IOSObjectArray *)strings {
  return CucumberRuntimeModelPathWithLines_toLongsWithNSStringArray_(strings);
}

- (NSString *)description {
  return JreStrcat("$C@", path_, ':', lines_);
}

- (void)dealloc {
  RELEASE_(path_);
  RELEASE_(lines_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 3, 4, -1, 5, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(hasLineFiltersWithNSString:);
  methods[1].selector = @selector(stripLineFiltersWithNSString:);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(toLongsWithNSStringArray:);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FILE_COLON_LINE_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "path_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "lines_", "LJavaUtilList;", .constantValue.asLong = 0, 0x11, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "hasLineFilters", "LNSString;", "stripLineFilters", "toLongs", "[LNSString;", "([Ljava/lang/String;)Ljava/util/List<Ljava/lang/Long;>;", "toString", &CucumberRuntimeModelPathWithLines_FILE_COLON_LINE_PATTERN, "Ljava/util/List<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeModelPathWithLines = { "PathWithLines", "cucumber.runtime.model", ptrTable, methods, fields, 7, 0x1, 5, 3, -1, -1, -1, -1, -1 };
  return &_CucumberRuntimeModelPathWithLines;
}

+ (void)initialize {
  if (self == [CucumberRuntimeModelPathWithLines class]) {
    JreStrongAssign(&CucumberRuntimeModelPathWithLines_FILE_COLON_LINE_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^([\\w\\W]*?):([\\d:]+)$"));
    J2OBJC_SET_INITIALIZED(CucumberRuntimeModelPathWithLines)
  }
}

@end

jboolean CucumberRuntimeModelPathWithLines_hasLineFiltersWithNSString_(NSString *pathName) {
  CucumberRuntimeModelPathWithLines_initialize();
  return [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(CucumberRuntimeModelPathWithLines_FILE_COLON_LINE_PATTERN)) matcherWithJavaLangCharSequence:pathName])) matches];
}

NSString *CucumberRuntimeModelPathWithLines_stripLineFiltersWithNSString_(NSString *pathName) {
  CucumberRuntimeModelPathWithLines_initialize();
  JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(CucumberRuntimeModelPathWithLines_FILE_COLON_LINE_PATTERN)) matcherWithJavaLangCharSequence:pathName];
  if ([((JavaUtilRegexMatcher *) nil_chk(matcher)) matches]) {
    return [matcher groupWithInt:1];
  }
  else {
    return pathName;
  }
}

void CucumberRuntimeModelPathWithLines_initWithNSString_(CucumberRuntimeModelPathWithLines *self, NSString *pathName) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->lines_, new_JavaUtilArrayList_init());
  JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(CucumberRuntimeModelPathWithLines_FILE_COLON_LINE_PATTERN)) matcherWithJavaLangCharSequence:pathName];
  if ([((JavaUtilRegexMatcher *) nil_chk(matcher)) matches]) {
    JreStrongAssign(&self->path_, [matcher groupWithInt:1]);
    [self->lines_ addAllWithJavaUtilCollection:CucumberRuntimeModelPathWithLines_toLongsWithNSStringArray_([((NSString *) nil_chk([matcher groupWithInt:2])) java_split:@":"])];
  }
  else {
    JreStrongAssign(&self->path_, pathName);
  }
}

CucumberRuntimeModelPathWithLines *new_CucumberRuntimeModelPathWithLines_initWithNSString_(NSString *pathName) {
  J2OBJC_NEW_IMPL(CucumberRuntimeModelPathWithLines, initWithNSString_, pathName)
}

CucumberRuntimeModelPathWithLines *create_CucumberRuntimeModelPathWithLines_initWithNSString_(NSString *pathName) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeModelPathWithLines, initWithNSString_, pathName)
}

id<JavaUtilList> CucumberRuntimeModelPathWithLines_toLongsWithNSStringArray_(IOSObjectArray *strings) {
  CucumberRuntimeModelPathWithLines_initialize();
  id<JavaUtilList> result = create_JavaUtilArrayList_init();
  {
    IOSObjectArray *a__ = strings;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *string = *b__++;
      [result addWithId:JavaLangLong_valueOfWithLong_(JavaLangLong_parseLongWithNSString_(string))];
    }
  }
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeModelPathWithLines)
