//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/RuntimeOptions.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/api/Plugin.h"
#include "cucumber/api/SnippetType.h"
#include "cucumber/api/StepDefinitionReporter.h"
#include "cucumber/api/SummaryPrinter.h"
#include "cucumber/api/event/TestRunStarted.h"
#include "cucumber/api/formatter/ColorAware.h"
#include "cucumber/api/formatter/Formatter.h"
#include "cucumber/api/formatter/StrictAware.h"
#include "cucumber/runner/EventBus.h"
#include "cucumber/runtime/CucumberException.h"
#include "cucumber/runtime/Env.h"
#include "cucumber/runtime/RuntimeOptions.h"
#include "cucumber/runtime/Shellwords.h"
#include "cucumber/runtime/Utils.h"
#include "cucumber/runtime/formatter/PluginFactory.h"
#include "cucumber/runtime/io/ResourceLoader.h"
#include "cucumber/runtime/model/CucumberFeature.h"
#include "cucumber/runtime/model/PathWithLines.h"
#include "cucumber/runtime/table/TablePrinter.h"
#include "cucumber/util/FixJava.h"
#include "cucumber/util/Mapper.h"
#include "gherkin/GherkinDialect.h"
#include "gherkin/GherkinDialectProvider.h"
#include "gherkin/IGherkinDialectProvider.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/PrintStream.h"
#include "java/io/Reader.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Exception.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/InvocationHandler.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Proxy.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/ResourceBundle.h"
#include "java/util/Set.h"
#include "java/util/regex/Pattern.h"

@interface CCBRRuntimeOptions () {
 @public
  id<JavaUtilList> glue_;
  id<JavaUtilList> tagFilters_;
  id<JavaUtilList> nameFilters_;
  id<JavaUtilMap> lineFilters_;
  id<JavaUtilList> featurePaths_;
  id<JavaUtilList> pluginFormatterNames_;
  id<JavaUtilList> pluginStepDefinitionReporterNames_;
  id<JavaUtilList> pluginSummaryPrinterNames_;
  id<JavaUtilList> junitOptions_;
  CCBRPluginFactory *pluginFactory_;
  id<JavaUtilList> plugins_;
  id<JavaUtilList> converters_;
  jboolean dryRun_;
  jboolean strict_;
  jboolean monochrome_;
  CCBSnippetType *snippetType_;
  jboolean pluginNamesInstantiated_;
  CCBEventBus *bus_;
}

- (void)parseWithJavaUtilList:(id<JavaUtilList>)args;

- (void)addLineFiltersWithJavaUtilMap:(id<JavaUtilMap>)parsedLineFilters
                         withNSString:(NSString *)key
                     withJavaUtilList:(id<JavaUtilList>)lines;

- (jboolean)haveLineFiltersWithJavaUtilList:(id<JavaUtilList>)parsedFeaturePaths;

- (void)printUsage;

- (jint)printI18nWithNSString:(NSString *)language;

- (jint)printKeywordsForWithGherkinGherkinDialect:(GherkinGherkinDialect *)dialect;

- (void)addCodeKeywordRowWithJavaUtilList:(id<JavaUtilList>)table
                             withNSString:(NSString *)key
                         withJavaUtilList:(id<JavaUtilList>)keywords;

- (void)addKeywordRowWithJavaUtilList:(id<JavaUtilList>)table
                         withNSString:(NSString *)key
                     withJavaUtilList:(id<JavaUtilList>)keywords;

/*!
 @brief Creates a dynamic proxy that multiplexes method invocations to all plugins of the same type.
 @param classLoader used to create the proxy
 @param type proxy type
 @return a proxy
 */
- (id)pluginProxyWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader
                            withIOSClass:(IOSClass *)type;

- (void)setMonochromeOnColorAwarePluginsWithId:(id)plugin;

- (void)setStrictOnStrictAwarePluginsWithId:(id)plugin;

- (void)setEventBusFormatterPluginsWithId:(id)plugin;

- (void)processRerunFilesWithCCBRResourceLoader:(id<CCBRResourceLoader>)resourceLoader;

@end

J2OBJC_FIELD_SETTER(CCBRRuntimeOptions, glue_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CCBRRuntimeOptions, tagFilters_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CCBRRuntimeOptions, nameFilters_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CCBRRuntimeOptions, lineFilters_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(CCBRRuntimeOptions, featurePaths_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CCBRRuntimeOptions, pluginFormatterNames_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CCBRRuntimeOptions, pluginStepDefinitionReporterNames_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CCBRRuntimeOptions, pluginSummaryPrinterNames_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CCBRRuntimeOptions, junitOptions_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CCBRRuntimeOptions, pluginFactory_, CCBRPluginFactory *)
J2OBJC_FIELD_SETTER(CCBRRuntimeOptions, plugins_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CCBRRuntimeOptions, converters_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CCBRRuntimeOptions, snippetType_, CCBSnippetType *)
J2OBJC_FIELD_SETTER(CCBRRuntimeOptions, bus_, CCBEventBus *)

inline id<CCBMapper> CCBRRuntimeOptions_get_QUOTE_MAPPER(void);
static id<CCBMapper> CCBRRuntimeOptions_QUOTE_MAPPER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CCBRRuntimeOptions, QUOTE_MAPPER, id<CCBMapper>)

inline id<CCBMapper> CCBRRuntimeOptions_get_CODE_KEYWORD_MAPPER(void);
static id<CCBMapper> CCBRRuntimeOptions_CODE_KEYWORD_MAPPER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CCBRRuntimeOptions, CODE_KEYWORD_MAPPER, id<CCBMapper>)

__attribute__((unused)) static void CCBRRuntimeOptions_parseWithJavaUtilList_(CCBRRuntimeOptions *self, id<JavaUtilList> args);

__attribute__((unused)) static void CCBRRuntimeOptions_addLineFiltersWithJavaUtilMap_withNSString_withJavaUtilList_(CCBRRuntimeOptions *self, id<JavaUtilMap> parsedLineFilters, NSString *key, id<JavaUtilList> lines);

__attribute__((unused)) static jboolean CCBRRuntimeOptions_haveLineFiltersWithJavaUtilList_(CCBRRuntimeOptions *self, id<JavaUtilList> parsedFeaturePaths);

__attribute__((unused)) static void CCBRRuntimeOptions_printUsage(CCBRRuntimeOptions *self);

__attribute__((unused)) static jint CCBRRuntimeOptions_printI18nWithNSString_(CCBRRuntimeOptions *self, NSString *language);

__attribute__((unused)) static jint CCBRRuntimeOptions_printKeywordsForWithGherkinGherkinDialect_(CCBRRuntimeOptions *self, GherkinGherkinDialect *dialect);

__attribute__((unused)) static void CCBRRuntimeOptions_addCodeKeywordRowWithJavaUtilList_withNSString_withJavaUtilList_(CCBRRuntimeOptions *self, id<JavaUtilList> table, NSString *key, id<JavaUtilList> keywords);

__attribute__((unused)) static void CCBRRuntimeOptions_addKeywordRowWithJavaUtilList_withNSString_withJavaUtilList_(CCBRRuntimeOptions *self, id<JavaUtilList> table, NSString *key, id<JavaUtilList> keywords);

__attribute__((unused)) static id CCBRRuntimeOptions_pluginProxyWithJavaLangClassLoader_withIOSClass_(CCBRRuntimeOptions *self, JavaLangClassLoader *classLoader, IOSClass *type);

__attribute__((unused)) static void CCBRRuntimeOptions_setMonochromeOnColorAwarePluginsWithId_(CCBRRuntimeOptions *self, id plugin);

__attribute__((unused)) static void CCBRRuntimeOptions_setStrictOnStrictAwarePluginsWithId_(CCBRRuntimeOptions *self, id plugin);

__attribute__((unused)) static void CCBRRuntimeOptions_setEventBusFormatterPluginsWithId_(CCBRRuntimeOptions *self, id plugin);

__attribute__((unused)) static void CCBRRuntimeOptions_processRerunFilesWithCCBRResourceLoader_(CCBRRuntimeOptions *self, id<CCBRResourceLoader> resourceLoader);

@interface CCBRRuntimeOptions_1 : NSObject < CCBMapper >

- (instancetype __nonnull)init;

- (NSString *)mapWithId:(NSString *)o;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRRuntimeOptions_1)

__attribute__((unused)) static void CCBRRuntimeOptions_1_init(CCBRRuntimeOptions_1 *self);

__attribute__((unused)) static CCBRRuntimeOptions_1 *new_CCBRRuntimeOptions_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRRuntimeOptions_1 *create_CCBRRuntimeOptions_1_init(void);

@interface CCBRRuntimeOptions_2 : NSObject < CCBMapper >

- (instancetype __nonnull)init;

- (NSString *)mapWithId:(NSString *)keyword;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRRuntimeOptions_2)

__attribute__((unused)) static void CCBRRuntimeOptions_2_init(CCBRRuntimeOptions_2 *self);

__attribute__((unused)) static CCBRRuntimeOptions_2 *new_CCBRRuntimeOptions_2_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRRuntimeOptions_2 *create_CCBRRuntimeOptions_2_init(void);

@interface CCBRRuntimeOptions_3 : NSObject < JavaLangReflectInvocationHandler > {
 @public
  CCBRRuntimeOptions *this$0_;
  IOSClass *val$type_;
}

- (instancetype __nonnull)initWithCCBRRuntimeOptions:(CCBRRuntimeOptions *)outer$
                                        withIOSClass:(IOSClass *)capture$0;

- (id)invokeWithId:(id)target
withJavaLangReflectMethod:(JavaLangReflectMethod *)method
 withNSObjectArray:(IOSObjectArray *)args;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRRuntimeOptions_3)

__attribute__((unused)) static void CCBRRuntimeOptions_3_initWithCCBRRuntimeOptions_withIOSClass_(CCBRRuntimeOptions_3 *self, CCBRRuntimeOptions *outer$, IOSClass *capture$0);

__attribute__((unused)) static CCBRRuntimeOptions_3 *new_CCBRRuntimeOptions_3_initWithCCBRRuntimeOptions_withIOSClass_(CCBRRuntimeOptions *outer$, IOSClass *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRRuntimeOptions_3 *create_CCBRRuntimeOptions_3_initWithCCBRRuntimeOptions_withIOSClass_(CCBRRuntimeOptions *outer$, IOSClass *capture$0);

@interface CCBRRuntimeOptions_ParsedOptionNames () {
 @public
  id<JavaUtilList> names_;
  jboolean clobber_;
}

@end

J2OBJC_FIELD_SETTER(CCBRRuntimeOptions_ParsedOptionNames, names_, id<JavaUtilList>)

J2OBJC_INITIALIZED_DEFN(CCBRRuntimeOptions)

NSString *CCBRRuntimeOptions_VERSION;
NSString *CCBRRuntimeOptions_USAGE_RESOURCE = @"/cucumber/api/cli/USAGE.txt";
NSString *CCBRRuntimeOptions_usageText;

@implementation CCBRRuntimeOptions

- (instancetype __nonnull)initWithNSString:(NSString *)argv {
  CCBRRuntimeOptions_initWithNSString_(self, argv);
  return self;
}

- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)argv {
  CCBRRuntimeOptions_initWithJavaUtilList_(self, argv);
  return self;
}

- (instancetype __nonnull)initWithCCBREnv:(CCBREnv *)env
                         withJavaUtilList:(id<JavaUtilList>)argv {
  CCBRRuntimeOptions_initWithCCBREnv_withJavaUtilList_(self, env, argv);
  return self;
}

- (instancetype __nonnull)initWithCCBRPluginFactory:(CCBRPluginFactory *)pluginFactory
                                   withJavaUtilList:(id<JavaUtilList>)argv {
  CCBRRuntimeOptions_initWithCCBRPluginFactory_withJavaUtilList_(self, pluginFactory, argv);
  return self;
}

- (instancetype __nonnull)initWithCCBREnv:(CCBREnv *)env
                    withCCBRPluginFactory:(CCBRPluginFactory *)pluginFactory
                         withJavaUtilList:(id<JavaUtilList>)argv {
  CCBRRuntimeOptions_initWithCCBREnv_withCCBRPluginFactory_withJavaUtilList_(self, env, pluginFactory, argv);
  return self;
}

- (void)parseWithJavaUtilList:(id<JavaUtilList>)args {
  CCBRRuntimeOptions_parseWithJavaUtilList_(self, args);
}

- (CCBRRuntimeOptions *)withConvertersWithJavaUtilList:(id<JavaUtilList>)converters {
  [((id<JavaUtilList>) nil_chk(self->converters_)) addAllWithJavaUtilCollection:converters];
  return self;
}

- (void)addLineFiltersWithJavaUtilMap:(id<JavaUtilMap>)parsedLineFilters
                         withNSString:(NSString *)key
                     withJavaUtilList:(id<JavaUtilList>)lines {
  CCBRRuntimeOptions_addLineFiltersWithJavaUtilMap_withNSString_withJavaUtilList_(self, parsedLineFilters, key, lines);
}

- (jboolean)haveLineFiltersWithJavaUtilList:(id<JavaUtilList>)parsedFeaturePaths {
  return CCBRRuntimeOptions_haveLineFiltersWithJavaUtilList_(self, parsedFeaturePaths);
}

- (void)printUsage {
  CCBRRuntimeOptions_printUsage(self);
}

+ (void)loadUsageTextIfNeeded {
  CCBRRuntimeOptions_loadUsageTextIfNeeded();
}

- (jint)printI18nWithNSString:(NSString *)language {
  return CCBRRuntimeOptions_printI18nWithNSString_(self, language);
}

- (jint)printKeywordsForWithGherkinGherkinDialect:(GherkinGherkinDialect *)dialect {
  return CCBRRuntimeOptions_printKeywordsForWithGherkinGherkinDialect_(self, dialect);
}

- (void)addCodeKeywordRowWithJavaUtilList:(id<JavaUtilList>)table
                             withNSString:(NSString *)key
                         withJavaUtilList:(id<JavaUtilList>)keywords {
  CCBRRuntimeOptions_addCodeKeywordRowWithJavaUtilList_withNSString_withJavaUtilList_(self, table, key, keywords);
}

- (void)addKeywordRowWithJavaUtilList:(id<JavaUtilList>)table
                         withNSString:(NSString *)key
                     withJavaUtilList:(id<JavaUtilList>)keywords {
  CCBRRuntimeOptions_addKeywordRowWithJavaUtilList_withNSString_withJavaUtilList_(self, table, key, keywords);
}

- (id<JavaUtilList>)cucumberFeaturesWithCCBRResourceLoader:(id<CCBRResourceLoader>)resourceLoader
                                           withCCBEventBus:(CCBEventBus *)bus {
  id<JavaUtilList> features = CCBRCucumberFeature_load__WithCCBRResourceLoader_withJavaUtilList_withJavaIoPrintStream_(resourceLoader, featurePaths_, JreLoadStatic(JavaLangSystem, out));
  [self getPlugins];
  [((CCBEventBus *) nil_chk(bus)) sendWithCCBEvent:create_CCBTestRunStarted_initWithJavaLangLong_([bus getTime])];
  for (CCBRCucumberFeature * __strong feature in nil_chk(features)) {
    [((CCBRCucumberFeature *) nil_chk(feature)) sendTestSourceReadWithCCBEventBus:bus];
  }
  return features;
}

- (id<JavaUtilList>)getPlugins {
  if (!pluginNamesInstantiated_) {
    for (NSString * __strong pluginName in nil_chk(pluginFormatterNames_)) {
      id<CCBPlugin> plugin = [((CCBRPluginFactory *) nil_chk(pluginFactory_)) createWithNSString:pluginName];
      [((id<JavaUtilList>) nil_chk(plugins_)) addWithId:plugin];
      CCBRRuntimeOptions_setMonochromeOnColorAwarePluginsWithId_(self, plugin);
      CCBRRuntimeOptions_setStrictOnStrictAwarePluginsWithId_(self, plugin);
      CCBRRuntimeOptions_setEventBusFormatterPluginsWithId_(self, plugin);
    }
    for (NSString * __strong pluginName in nil_chk(pluginStepDefinitionReporterNames_)) {
      id<CCBPlugin> plugin = [((CCBRPluginFactory *) nil_chk(pluginFactory_)) createWithNSString:pluginName];
      [((id<JavaUtilList>) nil_chk(plugins_)) addWithId:plugin];
    }
    for (NSString * __strong pluginName in nil_chk(pluginSummaryPrinterNames_)) {
      id<CCBPlugin> plugin = [((CCBRPluginFactory *) nil_chk(pluginFactory_)) createWithNSString:pluginName];
      [((id<JavaUtilList>) nil_chk(plugins_)) addWithId:plugin];
    }
    pluginNamesInstantiated_ = true;
  }
  return plugins_;
}

- (id<JavaUtilList>)getConverters {
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(converters_);
}

- (id<CCBFormatter>)formatterWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader {
  return CCBRRuntimeOptions_pluginProxyWithJavaLangClassLoader_withIOSClass_(self, classLoader, CCBFormatter_class_());
}

- (id<CCBStepDefinitionReporter>)stepDefinitionReporterWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader {
  return CCBRRuntimeOptions_pluginProxyWithJavaLangClassLoader_withIOSClass_(self, classLoader, CCBStepDefinitionReporter_class_());
}

- (id<CCBSummaryPrinter>)summaryPrinterWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader {
  return CCBRRuntimeOptions_pluginProxyWithJavaLangClassLoader_withIOSClass_(self, classLoader, CCBSummaryPrinter_class_());
}

- (id)pluginProxyWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader
                            withIOSClass:(IOSClass *)type {
  return CCBRRuntimeOptions_pluginProxyWithJavaLangClassLoader_withIOSClass_(self, classLoader, type);
}

- (void)setMonochromeOnColorAwarePluginsWithId:(id)plugin {
  CCBRRuntimeOptions_setMonochromeOnColorAwarePluginsWithId_(self, plugin);
}

- (void)setStrictOnStrictAwarePluginsWithId:(id)plugin {
  CCBRRuntimeOptions_setStrictOnStrictAwarePluginsWithId_(self, plugin);
}

- (void)setEventBusFormatterPluginsWithId:(id)plugin {
  CCBRRuntimeOptions_setEventBusFormatterPluginsWithId_(self, plugin);
}

- (id<JavaUtilList>)getGlue {
  return glue_;
}

- (jboolean)isStrict {
  return strict_;
}

- (jboolean)isDryRun {
  return dryRun_;
}

- (id<JavaUtilList>)getFeaturePaths {
  return featurePaths_;
}

- (void)addPluginWithCCBFormatter:(id<CCBFormatter>)plugin {
  [((id<JavaUtilList>) nil_chk(plugins_)) addWithId:plugin];
  CCBRRuntimeOptions_setEventBusFormatterPluginsWithId_(self, plugin);
}

- (id<JavaUtilList>)getNameFilters {
  return nameFilters_;
}

- (id<JavaUtilList>)getTagFilters {
  return tagFilters_;
}

- (id<JavaUtilMap>)getLineFiltersWithCCBRResourceLoader:(id<CCBRResourceLoader>)resourceLoader {
  CCBRRuntimeOptions_processRerunFilesWithCCBRResourceLoader_(self, resourceLoader);
  return lineFilters_;
}

- (void)processRerunFilesWithCCBRResourceLoader:(id<CCBRResourceLoader>)resourceLoader {
  CCBRRuntimeOptions_processRerunFilesWithCCBRResourceLoader_(self, resourceLoader);
}

- (jboolean)isMonochrome {
  return monochrome_;
}

- (CCBSnippetType *)getSnippetType {
  return snippetType_;
}

- (id<JavaUtilList>)getJunitOptions {
  return junitOptions_;
}

- (void)setEventBusWithCCBEventBus:(CCBEventBus *)bus {
  JreStrongAssign(&self->bus_, bus);
}

- (void)dealloc {
  RELEASE_(glue_);
  RELEASE_(tagFilters_);
  RELEASE_(nameFilters_);
  RELEASE_(lineFilters_);
  RELEASE_(featurePaths_);
  RELEASE_(pluginFormatterNames_);
  RELEASE_(pluginStepDefinitionReporterNames_);
  RELEASE_(pluginSummaryPrinterNames_);
  RELEASE_(junitOptions_);
  RELEASE_(pluginFactory_);
  RELEASE_(plugins_);
  RELEASE_(converters_);
  RELEASE_(snippetType_);
  RELEASE_(bus_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, 4, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, 6, -1, -1 },
    { NULL, NULL, 0x1, -1, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x2, 9, 1, -1, 2, -1, -1 },
    { NULL, "LCCBRRuntimeOptions;", 0x0, 10, 1, -1, 11, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, 14, -1, -1 },
    { NULL, "Z", 0x2, 15, 1, -1, 16, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 17, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 21, -1, 22, -1, -1 },
    { NULL, "V", 0x2, 23, 21, -1, 22, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 24, 25, -1, 26, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 27, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, -1, -1, -1, 28, -1, -1 },
    { NULL, "LCCBFormatter;", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "LCCBStepDefinitionReporter;", 0x1, 31, 30, -1, -1, -1, -1 },
    { NULL, "LCCBSummaryPrinter;", 0x1, 32, 30, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 33, 34, -1, 35, -1, -1 },
    { NULL, "V", 0x2, 36, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 38, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 39, 37, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 40, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 40, -1, -1 },
    { NULL, "V", 0x1, 41, 42, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 43, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 40, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 44, 45, -1, 46, -1, -1 },
    { NULL, "V", 0x2, 47, 45, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LCCBSnippetType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 40, -1, -1 },
    { NULL, "V", 0x0, 48, 49, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  methods[2].selector = @selector(initWithCCBREnv:withJavaUtilList:);
  methods[3].selector = @selector(initWithCCBRPluginFactory:withJavaUtilList:);
  methods[4].selector = @selector(initWithCCBREnv:withCCBRPluginFactory:withJavaUtilList:);
  methods[5].selector = @selector(parseWithJavaUtilList:);
  methods[6].selector = @selector(withConvertersWithJavaUtilList:);
  methods[7].selector = @selector(addLineFiltersWithJavaUtilMap:withNSString:withJavaUtilList:);
  methods[8].selector = @selector(haveLineFiltersWithJavaUtilList:);
  methods[9].selector = @selector(printUsage);
  methods[10].selector = @selector(loadUsageTextIfNeeded);
  methods[11].selector = @selector(printI18nWithNSString:);
  methods[12].selector = @selector(printKeywordsForWithGherkinGherkinDialect:);
  methods[13].selector = @selector(addCodeKeywordRowWithJavaUtilList:withNSString:withJavaUtilList:);
  methods[14].selector = @selector(addKeywordRowWithJavaUtilList:withNSString:withJavaUtilList:);
  methods[15].selector = @selector(cucumberFeaturesWithCCBRResourceLoader:withCCBEventBus:);
  methods[16].selector = @selector(getPlugins);
  methods[17].selector = @selector(getConverters);
  methods[18].selector = @selector(formatterWithJavaLangClassLoader:);
  methods[19].selector = @selector(stepDefinitionReporterWithJavaLangClassLoader:);
  methods[20].selector = @selector(summaryPrinterWithJavaLangClassLoader:);
  methods[21].selector = @selector(pluginProxyWithJavaLangClassLoader:withIOSClass:);
  methods[22].selector = @selector(setMonochromeOnColorAwarePluginsWithId:);
  methods[23].selector = @selector(setStrictOnStrictAwarePluginsWithId:);
  methods[24].selector = @selector(setEventBusFormatterPluginsWithId:);
  methods[25].selector = @selector(getGlue);
  methods[26].selector = @selector(isStrict);
  methods[27].selector = @selector(isDryRun);
  methods[28].selector = @selector(getFeaturePaths);
  methods[29].selector = @selector(addPluginWithCCBFormatter:);
  methods[30].selector = @selector(getNameFilters);
  methods[31].selector = @selector(getTagFilters);
  methods[32].selector = @selector(getLineFiltersWithCCBRResourceLoader:);
  methods[33].selector = @selector(processRerunFilesWithCCBRResourceLoader:);
  methods[34].selector = @selector(isMonochrome);
  methods[35].selector = @selector(getSnippetType);
  methods[36].selector = @selector(getJunitOptions);
  methods[37].selector = @selector(setEventBusWithCCBEventBus:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "VERSION", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 50, -1, -1 },
    { "USAGE_RESOURCE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 51, -1, -1 },
    { "usageText", "LNSString;", .constantValue.asLong = 0, 0x8, -1, 52, -1, -1 },
    { "QUOTE_MAPPER", "LCCBMapper;", .constantValue.asLong = 0, 0x1a, -1, 53, 54, -1 },
    { "CODE_KEYWORD_MAPPER", "LCCBMapper;", .constantValue.asLong = 0, 0x1a, -1, 55, 54, -1 },
    { "glue_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 56, -1 },
    { "tagFilters_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 56, -1 },
    { "nameFilters_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 57, -1 },
    { "lineFilters_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 58, -1 },
    { "featurePaths_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 56, -1 },
    { "pluginFormatterNames_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 56, -1 },
    { "pluginStepDefinitionReporterNames_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 56, -1 },
    { "pluginSummaryPrinterNames_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 56, -1 },
    { "junitOptions_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 56, -1 },
    { "pluginFactory_", "LCCBRPluginFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "plugins_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 59, -1 },
    { "converters_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 60, -1 },
    { "dryRun_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strict_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "monochrome_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "snippetType_", "LCCBSnippetType;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pluginNamesInstantiated_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bus_", "LCCBEventBus;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)V", "LCCBREnv;LJavaUtilList;", "(Lcucumber/runtime/Env;Ljava/util/List<Ljava/lang/String;>;)V", "LCCBRPluginFactory;LJavaUtilList;", "(Lcucumber/runtime/formatter/PluginFactory;Ljava/util/List<Ljava/lang/String;>;)V", "LCCBREnv;LCCBRPluginFactory;LJavaUtilList;", "(Lcucumber/runtime/Env;Lcucumber/runtime/formatter/PluginFactory;Ljava/util/List<Ljava/lang/String;>;)V", "parse", "withConverters", "(Ljava/util/List<Lcucumber/deps/com/thoughtworks/xstream/annotations/XStreamConverter;>;)Lcucumber/runtime/RuntimeOptions;", "addLineFilters", "LJavaUtilMap;LNSString;LJavaUtilList;", "(Ljava/util/Map<Ljava/lang/String;Ljava/util/List<Ljava/lang/Long;>;>;Ljava/lang/String;Ljava/util/List<Ljava/lang/Long;>;)V", "haveLineFilters", "(Ljava/util/List<Ljava/lang/String;>;)Z", "printI18n", "printKeywordsFor", "LGherkinGherkinDialect;", "addCodeKeywordRow", "LJavaUtilList;LNSString;LJavaUtilList;", "(Ljava/util/List<Ljava/util/List<Ljava/lang/String;>;>;Ljava/lang/String;Ljava/util/List<Ljava/lang/String;>;)V", "addKeywordRow", "cucumberFeatures", "LCCBRResourceLoader;LCCBEventBus;", "(Lcucumber/runtime/io/ResourceLoader;Lcucumber/runner/EventBus;)Ljava/util/List<Lcucumber/runtime/model/CucumberFeature;>;", "()Ljava/util/List<Lcucumber/api/Plugin;>;", "()Ljava/util/List<Lcucumber/deps/com/thoughtworks/xstream/annotations/XStreamConverter;>;", "formatter", "LJavaLangClassLoader;", "stepDefinitionReporter", "summaryPrinter", "pluginProxy", "LJavaLangClassLoader;LIOSClass;", "<T:Ljava/lang/Object;>(Ljava/lang/ClassLoader;Ljava/lang/Class<TT;>;)TT;", "setMonochromeOnColorAwarePlugins", "LNSObject;", "setStrictOnStrictAwarePlugins", "setEventBusFormatterPlugins", "()Ljava/util/List<Ljava/lang/String;>;", "addPlugin", "LCCBFormatter;", "()Ljava/util/List<Ljava/util/regex/Pattern;>;", "getLineFilters", "LCCBRResourceLoader;", "(Lcucumber/runtime/io/ResourceLoader;)Ljava/util/Map<Ljava/lang/String;Ljava/util/List<Ljava/lang/Long;>;>;", "processRerunFiles", "setEventBus", "LCCBEventBus;", &CCBRRuntimeOptions_VERSION, &CCBRRuntimeOptions_USAGE_RESOURCE, &CCBRRuntimeOptions_usageText, &CCBRRuntimeOptions_QUOTE_MAPPER, "Lcucumber/util/Mapper<Ljava/lang/String;Ljava/lang/String;>;", &CCBRRuntimeOptions_CODE_KEYWORD_MAPPER, "Ljava/util/List<Ljava/lang/String;>;", "Ljava/util/List<Ljava/util/regex/Pattern;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/util/List<Ljava/lang/Long;>;>;", "Ljava/util/List<Lcucumber/api/Plugin;>;", "Ljava/util/List<Lcucumber/deps/com/thoughtworks/xstream/annotations/XStreamConverter;>;", "LCCBRRuntimeOptions_ParsedPluginData;LCCBRRuntimeOptions_ParsedOptionNames;" };
  static const J2ObjcClassInfo _CCBRRuntimeOptions = { "RuntimeOptions", "cucumber.runtime", ptrTable, methods, fields, 7, 0x1, 38, 23, -1, 61, -1, -1, -1 };
  return &_CCBRRuntimeOptions;
}

+ (void)initialize {
  if (self == [CCBRRuntimeOptions class]) {
    JreStrongAssign(&CCBRRuntimeOptions_VERSION, [((JavaUtilResourceBundle *) nil_chk(JavaUtilResourceBundle_getBundleWithNSString_(@"cucumber.version"))) getStringWithNSString:@"cucumber-jvm.version"]);
    JreStrongAssignAndConsume(&CCBRRuntimeOptions_QUOTE_MAPPER, new_CCBRRuntimeOptions_1_init());
    JreStrongAssignAndConsume(&CCBRRuntimeOptions_CODE_KEYWORD_MAPPER, new_CCBRRuntimeOptions_2_init());
    J2OBJC_SET_INITIALIZED(CCBRRuntimeOptions)
  }
}

@end

void CCBRRuntimeOptions_initWithNSString_(CCBRRuntimeOptions *self, NSString *argv) {
  CCBRRuntimeOptions_initWithCCBRPluginFactory_withJavaUtilList_(self, create_CCBRPluginFactory_init(), CCBRShellwords_parseWithNSString_(argv));
}

CCBRRuntimeOptions *new_CCBRRuntimeOptions_initWithNSString_(NSString *argv) {
  J2OBJC_NEW_IMPL(CCBRRuntimeOptions, initWithNSString_, argv)
}

CCBRRuntimeOptions *create_CCBRRuntimeOptions_initWithNSString_(NSString *argv) {
  J2OBJC_CREATE_IMPL(CCBRRuntimeOptions, initWithNSString_, argv)
}

void CCBRRuntimeOptions_initWithJavaUtilList_(CCBRRuntimeOptions *self, id<JavaUtilList> argv) {
  CCBRRuntimeOptions_initWithCCBRPluginFactory_withJavaUtilList_(self, create_CCBRPluginFactory_init(), argv);
}

CCBRRuntimeOptions *new_CCBRRuntimeOptions_initWithJavaUtilList_(id<JavaUtilList> argv) {
  J2OBJC_NEW_IMPL(CCBRRuntimeOptions, initWithJavaUtilList_, argv)
}

CCBRRuntimeOptions *create_CCBRRuntimeOptions_initWithJavaUtilList_(id<JavaUtilList> argv) {
  J2OBJC_CREATE_IMPL(CCBRRuntimeOptions, initWithJavaUtilList_, argv)
}

void CCBRRuntimeOptions_initWithCCBREnv_withJavaUtilList_(CCBRRuntimeOptions *self, CCBREnv *env, id<JavaUtilList> argv) {
  CCBRRuntimeOptions_initWithCCBREnv_withCCBRPluginFactory_withJavaUtilList_(self, env, create_CCBRPluginFactory_init(), argv);
}

CCBRRuntimeOptions *new_CCBRRuntimeOptions_initWithCCBREnv_withJavaUtilList_(CCBREnv *env, id<JavaUtilList> argv) {
  J2OBJC_NEW_IMPL(CCBRRuntimeOptions, initWithCCBREnv_withJavaUtilList_, env, argv)
}

CCBRRuntimeOptions *create_CCBRRuntimeOptions_initWithCCBREnv_withJavaUtilList_(CCBREnv *env, id<JavaUtilList> argv) {
  J2OBJC_CREATE_IMPL(CCBRRuntimeOptions, initWithCCBREnv_withJavaUtilList_, env, argv)
}

void CCBRRuntimeOptions_initWithCCBRPluginFactory_withJavaUtilList_(CCBRRuntimeOptions *self, CCBRPluginFactory *pluginFactory, id<JavaUtilList> argv) {
  CCBRRuntimeOptions_initWithCCBREnv_withCCBRPluginFactory_withJavaUtilList_(self, JreLoadStatic(CCBREnv, INSTANCE), pluginFactory, argv);
}

CCBRRuntimeOptions *new_CCBRRuntimeOptions_initWithCCBRPluginFactory_withJavaUtilList_(CCBRPluginFactory *pluginFactory, id<JavaUtilList> argv) {
  J2OBJC_NEW_IMPL(CCBRRuntimeOptions, initWithCCBRPluginFactory_withJavaUtilList_, pluginFactory, argv)
}

CCBRRuntimeOptions *create_CCBRRuntimeOptions_initWithCCBRPluginFactory_withJavaUtilList_(CCBRPluginFactory *pluginFactory, id<JavaUtilList> argv) {
  J2OBJC_CREATE_IMPL(CCBRRuntimeOptions, initWithCCBRPluginFactory_withJavaUtilList_, pluginFactory, argv)
}

void CCBRRuntimeOptions_initWithCCBREnv_withCCBRPluginFactory_withJavaUtilList_(CCBRRuntimeOptions *self, CCBREnv *env, CCBRPluginFactory *pluginFactory, id<JavaUtilList> argv) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->glue_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->tagFilters_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->nameFilters_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->lineFilters_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->featurePaths_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->pluginFormatterNames_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->pluginStepDefinitionReporterNames_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->pluginSummaryPrinterNames_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->junitOptions_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->plugins_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->converters_, new_JavaUtilArrayList_init());
  self->strict_ = false;
  self->monochrome_ = false;
  JreStrongAssign(&self->snippetType_, JreLoadEnum(CCBSnippetType, UNDERSCORE));
  JreStrongAssign(&self->pluginFactory_, pluginFactory);
  argv = create_JavaUtilArrayList_initWithJavaUtilCollection_(argv);
  CCBRRuntimeOptions_parseWithJavaUtilList_(self, argv);
  NSString *cucumberOptionsFromEnv = [((CCBREnv *) nil_chk(env)) getWithNSString:@"cucumber.options"];
  if (cucumberOptionsFromEnv != nil) {
    CCBRRuntimeOptions_parseWithJavaUtilList_(self, CCBRShellwords_parseWithNSString_(cucumberOptionsFromEnv));
  }
  if ([self->pluginFormatterNames_ isEmpty]) {
    [self->pluginFormatterNames_ addWithId:@"progress"];
  }
  if ([self->pluginSummaryPrinterNames_ isEmpty]) {
    [self->pluginSummaryPrinterNames_ addWithId:@"default_summary"];
  }
}

CCBRRuntimeOptions *new_CCBRRuntimeOptions_initWithCCBREnv_withCCBRPluginFactory_withJavaUtilList_(CCBREnv *env, CCBRPluginFactory *pluginFactory, id<JavaUtilList> argv) {
  J2OBJC_NEW_IMPL(CCBRRuntimeOptions, initWithCCBREnv_withCCBRPluginFactory_withJavaUtilList_, env, pluginFactory, argv)
}

CCBRRuntimeOptions *create_CCBRRuntimeOptions_initWithCCBREnv_withCCBRPluginFactory_withJavaUtilList_(CCBREnv *env, CCBRPluginFactory *pluginFactory, id<JavaUtilList> argv) {
  J2OBJC_CREATE_IMPL(CCBRRuntimeOptions, initWithCCBREnv_withCCBRPluginFactory_withJavaUtilList_, env, pluginFactory, argv)
}

void CCBRRuntimeOptions_parseWithJavaUtilList_(CCBRRuntimeOptions *self, id<JavaUtilList> args) {
  id<JavaUtilList> parsedTagFilters = create_JavaUtilArrayList_init();
  id<JavaUtilList> parsedNameFilters = create_JavaUtilArrayList_init();
  id<JavaUtilMap> parsedLineFilters = create_JavaUtilHashMap_init();
  id<JavaUtilList> parsedFeaturePaths = create_JavaUtilArrayList_init();
  id<JavaUtilList> parsedGlue = create_JavaUtilArrayList_init();
  CCBRRuntimeOptions_ParsedPluginData *parsedPluginData = create_CCBRRuntimeOptions_ParsedPluginData_initWithCCBRRuntimeOptions_(self);
  id<JavaUtilList> parsedJunitOptions = create_JavaUtilArrayList_init();
  while (![((id<JavaUtilList>) nil_chk(args)) isEmpty]) {
    NSString *arg = [((NSString *) nil_chk([args removeWithInt:0])) java_trim];
    if ([((NSString *) nil_chk(arg)) isEqual:@"--help"] || [arg isEqual:@"-h"]) {
      CCBRRuntimeOptions_printUsage(self);
      JavaLangSystem_exitWithInt_(0);
    }
    else if ([arg isEqual:@"--version"] || [arg isEqual:@"-v"]) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:CCBRRuntimeOptions_VERSION];
      JavaLangSystem_exitWithInt_(0);
    }
    else if ([arg isEqual:@"--i18n"]) {
      NSString *nextArg = [args removeWithInt:0];
      JavaLangSystem_exitWithInt_(CCBRRuntimeOptions_printI18nWithNSString_(self, nextArg));
    }
    else if ([arg isEqual:@"--glue"] || [arg isEqual:@"-g"]) {
      NSString *gluePath = [args removeWithInt:0];
      [parsedGlue addWithId:gluePath];
    }
    else if ([arg isEqual:@"--tags"] || [arg isEqual:@"-t"]) {
      [parsedTagFilters addWithId:[args removeWithInt:0]];
    }
    else if ([arg isEqual:@"--plugin"] || [arg isEqual:@"--add-plugin"] || [arg isEqual:@"-p"]) {
      [parsedPluginData addPluginNameWithNSString:[args removeWithInt:0] withBoolean:[arg isEqual:@"--add-plugin"]];
    }
    else if ([arg isEqual:@"--format"] || [arg isEqual:@"-f"]) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"WARNING: Cucumber-JVM's --format option is deprecated. Please use --plugin instead."];
      [parsedPluginData addPluginNameWithNSString:[args removeWithInt:0] withBoolean:true];
    }
    else if ([arg isEqual:@"--no-dry-run"] || [arg isEqual:@"--dry-run"] || [arg isEqual:@"-d"]) {
      self->dryRun_ = ![arg java_hasPrefix:@"--no-"];
    }
    else if ([arg isEqual:@"--no-strict"] || [arg isEqual:@"--strict"] || [arg isEqual:@"-s"]) {
      self->strict_ = ![arg java_hasPrefix:@"--no-"];
    }
    else if ([arg isEqual:@"--no-monochrome"] || [arg isEqual:@"--monochrome"] || [arg isEqual:@"-m"]) {
      self->monochrome_ = ![arg java_hasPrefix:@"--no-"];
    }
    else if ([arg isEqual:@"--snippets"]) {
      NSString *nextArg = [args removeWithInt:0];
      JreStrongAssign(&self->snippetType_, CCBSnippetType_fromStringWithNSString_(nextArg));
    }
    else if ([arg isEqual:@"--name"] || [arg isEqual:@"-n"]) {
      NSString *nextArg = [args removeWithInt:0];
      JavaUtilRegexPattern *patternFilter = JavaUtilRegexPattern_compileWithNSString_(nextArg);
      [parsedNameFilters addWithId:patternFilter];
    }
    else if ([arg java_hasPrefix:@"--junit,"]) {
      {
        IOSObjectArray *a__ = [((NSString *) nil_chk([arg java_substring:[@"--junit," java_length]])) java_split:@","];
        NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        NSString * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          NSString *option = *b__++;
          [parsedJunitOptions addWithId:option];
        }
      }
    }
    else if ([arg java_hasPrefix:@"-"]) {
      CCBRRuntimeOptions_printUsage(self);
      @throw create_CCBRCucumberException_initWithNSString_(JreStrcat("$$", @"Unknown option: ", arg));
    }
    else {
      CCBRPathWithLines *pathWithLines = create_CCBRPathWithLines_initWithNSString_(arg);
      [parsedFeaturePaths addWithId:pathWithLines->path_];
      if (![((id<JavaUtilList>) nil_chk(pathWithLines->lines_)) isEmpty]) {
        NSString *key = [((NSString *) nil_chk(pathWithLines->path_)) java_replace:@"classpath:" withSequence:@""];
        CCBRRuntimeOptions_addLineFiltersWithJavaUtilMap_withNSString_withJavaUtilList_(self, parsedLineFilters, key, pathWithLines->lines_);
      }
    }
  }
  if (![parsedTagFilters isEmpty] || ![parsedNameFilters isEmpty] || ![parsedLineFilters isEmpty] || CCBRRuntimeOptions_haveLineFiltersWithJavaUtilList_(self, parsedFeaturePaths)) {
    [((id<JavaUtilList>) nil_chk(self->tagFilters_)) clear];
    [self->tagFilters_ addAllWithJavaUtilCollection:parsedTagFilters];
    [((id<JavaUtilList>) nil_chk(self->nameFilters_)) clear];
    [self->nameFilters_ addAllWithJavaUtilCollection:parsedNameFilters];
    [((id<JavaUtilMap>) nil_chk(self->lineFilters_)) clear];
    for (NSString * __strong path in nil_chk([parsedLineFilters keySet])) {
      [self->lineFilters_ putWithId:path withId:[parsedLineFilters getWithId:path]];
    }
  }
  if (![parsedFeaturePaths isEmpty]) {
    [((id<JavaUtilList>) nil_chk(self->featurePaths_)) clear];
    [self->featurePaths_ addAllWithJavaUtilCollection:parsedFeaturePaths];
  }
  if (![parsedGlue isEmpty]) {
    [((id<JavaUtilList>) nil_chk(self->glue_)) clear];
    [self->glue_ addAllWithJavaUtilCollection:parsedGlue];
  }
  if (![parsedJunitOptions isEmpty]) {
    [((id<JavaUtilList>) nil_chk(self->junitOptions_)) clear];
    [self->junitOptions_ addAllWithJavaUtilCollection:parsedJunitOptions];
  }
  [parsedPluginData updatePluginFormatterNamesWithJavaUtilList:self->pluginFormatterNames_];
  [parsedPluginData updatePluginStepDefinitionReporterNamesWithJavaUtilList:self->pluginStepDefinitionReporterNames_];
  [parsedPluginData updatePluginSummaryPrinterNamesWithJavaUtilList:self->pluginSummaryPrinterNames_];
}

void CCBRRuntimeOptions_addLineFiltersWithJavaUtilMap_withNSString_withJavaUtilList_(CCBRRuntimeOptions *self, id<JavaUtilMap> parsedLineFilters, NSString *key, id<JavaUtilList> lines) {
  if ([((id<JavaUtilMap>) nil_chk(parsedLineFilters)) containsKeyWithId:key]) {
    [((id<JavaUtilList>) nil_chk([parsedLineFilters getWithId:key])) addAllWithJavaUtilCollection:lines];
  }
  else {
    [parsedLineFilters putWithId:key withId:lines];
  }
}

jboolean CCBRRuntimeOptions_haveLineFiltersWithJavaUtilList_(CCBRRuntimeOptions *self, id<JavaUtilList> parsedFeaturePaths) {
  for (NSString * __strong pathName in nil_chk(parsedFeaturePaths)) {
    if ([((NSString *) nil_chk(pathName)) java_hasPrefix:@"@"] || CCBRPathWithLines_hasLineFiltersWithNSString_(pathName)) {
      return true;
    }
  }
  return false;
}

void CCBRRuntimeOptions_printUsage(CCBRRuntimeOptions *self) {
  CCBRRuntimeOptions_loadUsageTextIfNeeded();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:CCBRRuntimeOptions_usageText];
}

void CCBRRuntimeOptions_loadUsageTextIfNeeded() {
  CCBRRuntimeOptions_initialize();
  if (CCBRRuntimeOptions_usageText == nil) {
    @try {
      JavaIoReader *reader = create_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_([CCBFixJava_class_() getResourceAsStream:CCBRRuntimeOptions_USAGE_RESOURCE], @"UTF-8");
      JreStrongAssign(&CCBRRuntimeOptions_usageText, CCBFixJava_readReaderWithJavaIoReader_(reader));
    }
    @catch (JavaLangException *e) {
      JreStrongAssign(&CCBRRuntimeOptions_usageText, JreStrcat("$$", @"Could not load usage text: ", [e description]));
    }
  }
}

jint CCBRRuntimeOptions_printI18nWithNSString_(CCBRRuntimeOptions *self, NSString *language) {
  id<GherkinIGherkinDialectProvider> dialectProvider = create_GherkinGherkinDialectProvider_init();
  id<JavaUtilList> languages = [dialectProvider getLanguages];
  if ([((NSString *) nil_chk(language)) java_equalsIgnoreCase:@"help"]) {
    for (NSString * __strong code in nil_chk(languages)) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:code];
    }
    return 0;
  }
  if ([((id<JavaUtilList>) nil_chk(languages)) containsWithId:language]) {
    return CCBRRuntimeOptions_printKeywordsForWithGherkinGherkinDialect_(self, [dialectProvider getDialectWithNSString:language withGherkinAstLocation:nil]);
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Unrecognised ISO language code"];
  return 1;
}

jint CCBRRuntimeOptions_printKeywordsForWithGherkinGherkinDialect_(CCBRRuntimeOptions *self, GherkinGherkinDialect *dialect) {
  JavaLangStringBuilder *builder = create_JavaLangStringBuilder_init();
  CCBRTablePrinter *printer = create_CCBRTablePrinter_init();
  id<JavaUtilList> table = create_JavaUtilArrayList_init();
  CCBRRuntimeOptions_addKeywordRowWithJavaUtilList_withNSString_withJavaUtilList_(self, table, @"feature", [((GherkinGherkinDialect *) nil_chk(dialect)) getFeatureKeywords]);
  CCBRRuntimeOptions_addKeywordRowWithJavaUtilList_withNSString_withJavaUtilList_(self, table, @"background", [dialect getBackgroundKeywords]);
  CCBRRuntimeOptions_addKeywordRowWithJavaUtilList_withNSString_withJavaUtilList_(self, table, @"scenario", [dialect getScenarioKeywords]);
  CCBRRuntimeOptions_addKeywordRowWithJavaUtilList_withNSString_withJavaUtilList_(self, table, @"scenario outline", [dialect getScenarioOutlineKeywords]);
  CCBRRuntimeOptions_addKeywordRowWithJavaUtilList_withNSString_withJavaUtilList_(self, table, @"examples", [dialect getExamplesKeywords]);
  CCBRRuntimeOptions_addKeywordRowWithJavaUtilList_withNSString_withJavaUtilList_(self, table, @"given", [dialect getGivenKeywords]);
  CCBRRuntimeOptions_addKeywordRowWithJavaUtilList_withNSString_withJavaUtilList_(self, table, @"when", [dialect getWhenKeywords]);
  CCBRRuntimeOptions_addKeywordRowWithJavaUtilList_withNSString_withJavaUtilList_(self, table, @"then", [dialect getThenKeywords]);
  CCBRRuntimeOptions_addKeywordRowWithJavaUtilList_withNSString_withJavaUtilList_(self, table, @"and", [dialect getAndKeywords]);
  CCBRRuntimeOptions_addKeywordRowWithJavaUtilList_withNSString_withJavaUtilList_(self, table, @"but", [dialect getButKeywords]);
  CCBRRuntimeOptions_addCodeKeywordRowWithJavaUtilList_withNSString_withJavaUtilList_(self, table, @"given", [dialect getGivenKeywords]);
  CCBRRuntimeOptions_addCodeKeywordRowWithJavaUtilList_withNSString_withJavaUtilList_(self, table, @"when", [dialect getWhenKeywords]);
  CCBRRuntimeOptions_addCodeKeywordRowWithJavaUtilList_withNSString_withJavaUtilList_(self, table, @"then", [dialect getThenKeywords]);
  CCBRRuntimeOptions_addCodeKeywordRowWithJavaUtilList_withNSString_withJavaUtilList_(self, table, @"and", [dialect getAndKeywords]);
  CCBRRuntimeOptions_addCodeKeywordRowWithJavaUtilList_withNSString_withJavaUtilList_(self, table, @"but", [dialect getButKeywords]);
  [printer printTableWithJavaUtilList:table withJavaLangStringBuilder:builder];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:[builder description]];
  return 0;
}

void CCBRRuntimeOptions_addCodeKeywordRowWithJavaUtilList_withNSString_withJavaUtilList_(CCBRRuntimeOptions *self, id<JavaUtilList> table, NSString *key, id<JavaUtilList> keywords) {
  id<JavaUtilList> codeKeywordList = create_JavaUtilArrayList_initWithJavaUtilCollection_(keywords);
  [codeKeywordList removeWithId:@"* "];
  CCBRRuntimeOptions_addKeywordRowWithJavaUtilList_withNSString_withJavaUtilList_(self, table, JreStrcat("$$", key, @" (code)"), CCBFixJava_mapWithJavaUtilList_withCCBMapper_(codeKeywordList, CCBRRuntimeOptions_CODE_KEYWORD_MAPPER));
}

void CCBRRuntimeOptions_addKeywordRowWithJavaUtilList_withNSString_withJavaUtilList_(CCBRRuntimeOptions *self, id<JavaUtilList> table, NSString *key, id<JavaUtilList> keywords) {
  id<JavaUtilList> cells = JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ key, CCBFixJava_joinWithJavaUtilList_withNSString_(CCBFixJava_mapWithJavaUtilList_withCCBMapper_(keywords, CCBRRuntimeOptions_QUOTE_MAPPER), @", ") } count:2 type:NSString_class_()]);
  [((id<JavaUtilList>) nil_chk(table)) addWithId:cells];
}

id CCBRRuntimeOptions_pluginProxyWithJavaLangClassLoader_withIOSClass_(CCBRRuntimeOptions *self, JavaLangClassLoader *classLoader, IOSClass *type) {
  id proxy = JavaLangReflectProxy_newProxyInstanceWithJavaLangClassLoader_withIOSClassArray_withJavaLangReflectInvocationHandler_(classLoader, [IOSObjectArray arrayWithObjects:(id[]){ type } count:1 type:IOSClass_class_()], create_CCBRRuntimeOptions_3_initWithCCBRRuntimeOptions_withIOSClass_(self, type));
  return [((IOSClass *) nil_chk(type)) cast:proxy];
}

void CCBRRuntimeOptions_setMonochromeOnColorAwarePluginsWithId_(CCBRRuntimeOptions *self, id plugin) {
  if ([CCBColorAware_class_() isInstance:plugin]) {
    id<CCBColorAware> colorAware = (id<CCBColorAware>) cast_check(plugin, CCBColorAware_class_());
    [((id<CCBColorAware>) nil_chk(colorAware)) setMonochromeWithBoolean:self->monochrome_];
  }
}

void CCBRRuntimeOptions_setStrictOnStrictAwarePluginsWithId_(CCBRRuntimeOptions *self, id plugin) {
  if ([CCBStrictAware_class_() isInstance:plugin]) {
    id<CCBStrictAware> strictAware = (id<CCBStrictAware>) cast_check(plugin, CCBStrictAware_class_());
    [((id<CCBStrictAware>) nil_chk(strictAware)) setStrictWithBoolean:self->strict_];
  }
}

void CCBRRuntimeOptions_setEventBusFormatterPluginsWithId_(CCBRRuntimeOptions *self, id plugin) {
  if ([CCBFormatter_class_() isInstance:plugin] && self->bus_ != nil) {
    id<CCBFormatter> formatter = (id<CCBFormatter>) cast_check(plugin, CCBFormatter_class_());
    [((id<CCBFormatter>) nil_chk(formatter)) setEventPublisherWithCCBEventPublisher:self->bus_];
  }
}

void CCBRRuntimeOptions_processRerunFilesWithCCBRResourceLoader_(CCBRRuntimeOptions *self, id<CCBRResourceLoader> resourceLoader) {
  for (NSString * __strong featurePath in nil_chk(self->featurePaths_)) {
    if ([((NSString *) nil_chk(featurePath)) java_hasPrefix:@"@"]) {
      for (CCBRPathWithLines * __strong pathWithLines in nil_chk(CCBRCucumberFeature_loadRerunFileWithCCBRResourceLoader_withNSString_(resourceLoader, [featurePath java_substring:1]))) {
        CCBRRuntimeOptions_addLineFiltersWithJavaUtilMap_withNSString_withJavaUtilList_(self, self->lineFilters_, ((CCBRPathWithLines *) nil_chk(pathWithLines))->path_, pathWithLines->lines_);
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRRuntimeOptions)

@implementation CCBRRuntimeOptions_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CCBRRuntimeOptions_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)mapWithId:(NSString *)o {
  return JreStrcat("C$C", '"', o, '"');
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mapWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "map", "LNSString;", "LCCBRRuntimeOptions;", "Ljava/lang/Object;Lcucumber/util/Mapper<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _CCBRRuntimeOptions_1 = { "", "cucumber.runtime", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, -1, 3, -1 };
  return &_CCBRRuntimeOptions_1;
}

@end

void CCBRRuntimeOptions_1_init(CCBRRuntimeOptions_1 *self) {
  NSObject_init(self);
}

CCBRRuntimeOptions_1 *new_CCBRRuntimeOptions_1_init() {
  J2OBJC_NEW_IMPL(CCBRRuntimeOptions_1, init)
}

CCBRRuntimeOptions_1 *create_CCBRRuntimeOptions_1_init() {
  J2OBJC_CREATE_IMPL(CCBRRuntimeOptions_1, init)
}

@implementation CCBRRuntimeOptions_2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CCBRRuntimeOptions_2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)mapWithId:(NSString *)keyword {
  return [((NSString *) nil_chk(keyword)) java_replaceAll:@"[\\s',!]" withReplacement:@""];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mapWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "map", "LNSString;", "LCCBRRuntimeOptions;", "Ljava/lang/Object;Lcucumber/util/Mapper<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _CCBRRuntimeOptions_2 = { "", "cucumber.runtime", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, -1, 3, -1 };
  return &_CCBRRuntimeOptions_2;
}

@end

void CCBRRuntimeOptions_2_init(CCBRRuntimeOptions_2 *self) {
  NSObject_init(self);
}

CCBRRuntimeOptions_2 *new_CCBRRuntimeOptions_2_init() {
  J2OBJC_NEW_IMPL(CCBRRuntimeOptions_2, init)
}

CCBRRuntimeOptions_2 *create_CCBRRuntimeOptions_2_init() {
  J2OBJC_CREATE_IMPL(CCBRRuntimeOptions_2, init)
}

@implementation CCBRRuntimeOptions_3

- (instancetype __nonnull)initWithCCBRRuntimeOptions:(CCBRRuntimeOptions *)outer$
                                        withIOSClass:(IOSClass *)capture$0 {
  CCBRRuntimeOptions_3_initWithCCBRRuntimeOptions_withIOSClass_(self, outer$, capture$0);
  return self;
}

- (id)invokeWithId:(id)target
withJavaLangReflectMethod:(JavaLangReflectMethod *)method
 withNSObjectArray:(IOSObjectArray *)args {
  for (id __strong plugin in nil_chk([this$0_ getPlugins])) {
    if ([((IOSClass *) nil_chk(val$type_)) isInstance:plugin]) {
      @try {
        CCBRUtils_invokeWithId_withJavaLangReflectMethod_withLong_withNSObjectArray_(plugin, method, 0, args);
      }
      @catch (JavaLangThrowable *t) {
        if (![((NSString *) nil_chk([((JavaLangReflectMethod *) nil_chk(method)) getName])) isEqual:@"startOfScenarioLifeCycle"] && ![((NSString *) nil_chk([method getName])) isEqual:@"endOfScenarioLifeCycle"]) {
          @throw t;
        }
      }
    }
  }
  return nil;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$type_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRRuntimeOptions:withIOSClass:);
  methods[1].selector = @selector(invokeWithId:withJavaLangReflectMethod:withNSObjectArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRRuntimeOptions;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$type_", "LIOSClass;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "invoke", "LNSObject;LJavaLangReflectMethod;[LNSObject;", "LJavaLangThrowable;", "Ljava/lang/Class<TT;>;", "LCCBRRuntimeOptions;", "pluginProxyWithJavaLangClassLoader:withIOSClass:" };
  static const J2ObjcClassInfo _CCBRRuntimeOptions_3 = { "", "cucumber.runtime", ptrTable, methods, fields, 7, 0x8018, 2, 2, 4, -1, 5, -1, -1 };
  return &_CCBRRuntimeOptions_3;
}

@end

void CCBRRuntimeOptions_3_initWithCCBRRuntimeOptions_withIOSClass_(CCBRRuntimeOptions_3 *self, CCBRRuntimeOptions *outer$, IOSClass *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$type_, capture$0);
  NSObject_init(self);
}

CCBRRuntimeOptions_3 *new_CCBRRuntimeOptions_3_initWithCCBRRuntimeOptions_withIOSClass_(CCBRRuntimeOptions *outer$, IOSClass *capture$0) {
  J2OBJC_NEW_IMPL(CCBRRuntimeOptions_3, initWithCCBRRuntimeOptions_withIOSClass_, outer$, capture$0)
}

CCBRRuntimeOptions_3 *create_CCBRRuntimeOptions_3_initWithCCBRRuntimeOptions_withIOSClass_(CCBRRuntimeOptions *outer$, IOSClass *capture$0) {
  J2OBJC_CREATE_IMPL(CCBRRuntimeOptions_3, initWithCCBRRuntimeOptions_withIOSClass_, outer$, capture$0)
}

@implementation CCBRRuntimeOptions_ParsedPluginData

- (instancetype __nonnull)initWithCCBRRuntimeOptions:(CCBRRuntimeOptions *)outer$ {
  CCBRRuntimeOptions_ParsedPluginData_initWithCCBRRuntimeOptions_(self, outer$);
  return self;
}

- (void)addPluginNameWithNSString:(NSString *)name
                      withBoolean:(jboolean)isAddPlugin {
  if (CCBRPluginFactory_isFormatterNameWithNSString_(name)) {
    [((CCBRRuntimeOptions_ParsedOptionNames *) nil_chk(formatterNames_)) addNameWithNSString:name withBoolean:isAddPlugin];
  }
  else if (CCBRPluginFactory_isStepDefinitionReporterNameWithNSString_(name)) {
    [((CCBRRuntimeOptions_ParsedOptionNames *) nil_chk(stepDefinitionReporterNames_)) addNameWithNSString:name withBoolean:isAddPlugin];
  }
  else if (CCBRPluginFactory_isSummaryPrinterNameWithNSString_(name)) {
    [((CCBRRuntimeOptions_ParsedOptionNames *) nil_chk(summaryPrinterNames_)) addNameWithNSString:name withBoolean:isAddPlugin];
  }
  else {
    @throw create_CCBRCucumberException_initWithNSString_(JreStrcat("$$", @"Unrecognized plugin: ", name));
  }
}

- (void)updatePluginFormatterNamesWithJavaUtilList:(id<JavaUtilList>)pluginFormatterNames {
  [((CCBRRuntimeOptions_ParsedOptionNames *) nil_chk(formatterNames_)) updateNameListWithJavaUtilList:pluginFormatterNames];
}

- (void)updatePluginStepDefinitionReporterNamesWithJavaUtilList:(id<JavaUtilList>)pluginStepDefinitionReporterNames {
  [((CCBRRuntimeOptions_ParsedOptionNames *) nil_chk(stepDefinitionReporterNames_)) updateNameListWithJavaUtilList:pluginStepDefinitionReporterNames];
}

- (void)updatePluginSummaryPrinterNamesWithJavaUtilList:(id<JavaUtilList>)pluginSummaryPrinterNames {
  [((CCBRRuntimeOptions_ParsedOptionNames *) nil_chk(summaryPrinterNames_)) updateNameListWithJavaUtilList:pluginSummaryPrinterNames];
}

- (void)dealloc {
  RELEASE_(formatterNames_);
  RELEASE_(stepDefinitionReporterNames_);
  RELEASE_(summaryPrinterNames_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRRuntimeOptions:);
  methods[1].selector = @selector(addPluginNameWithNSString:withBoolean:);
  methods[2].selector = @selector(updatePluginFormatterNamesWithJavaUtilList:);
  methods[3].selector = @selector(updatePluginStepDefinitionReporterNamesWithJavaUtilList:);
  methods[4].selector = @selector(updatePluginSummaryPrinterNamesWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "formatterNames_", "LCCBRRuntimeOptions_ParsedOptionNames;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "stepDefinitionReporterNames_", "LCCBRRuntimeOptions_ParsedOptionNames;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "summaryPrinterNames_", "LCCBRRuntimeOptions_ParsedOptionNames;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "addPluginName", "LNSString;Z", "updatePluginFormatterNames", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)V", "updatePluginStepDefinitionReporterNames", "updatePluginSummaryPrinterNames", "LCCBRRuntimeOptions;" };
  static const J2ObjcClassInfo _CCBRRuntimeOptions_ParsedPluginData = { "ParsedPluginData", "cucumber.runtime", ptrTable, methods, fields, 7, 0x0, 5, 3, 7, -1, -1, -1, -1 };
  return &_CCBRRuntimeOptions_ParsedPluginData;
}

@end

void CCBRRuntimeOptions_ParsedPluginData_initWithCCBRRuntimeOptions_(CCBRRuntimeOptions_ParsedPluginData *self, CCBRRuntimeOptions *outer$) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->formatterNames_, new_CCBRRuntimeOptions_ParsedOptionNames_initWithCCBRRuntimeOptions_(outer$));
  JreStrongAssignAndConsume(&self->stepDefinitionReporterNames_, new_CCBRRuntimeOptions_ParsedOptionNames_initWithCCBRRuntimeOptions_(outer$));
  JreStrongAssignAndConsume(&self->summaryPrinterNames_, new_CCBRRuntimeOptions_ParsedOptionNames_initWithCCBRRuntimeOptions_(outer$));
}

CCBRRuntimeOptions_ParsedPluginData *new_CCBRRuntimeOptions_ParsedPluginData_initWithCCBRRuntimeOptions_(CCBRRuntimeOptions *outer$) {
  J2OBJC_NEW_IMPL(CCBRRuntimeOptions_ParsedPluginData, initWithCCBRRuntimeOptions_, outer$)
}

CCBRRuntimeOptions_ParsedPluginData *create_CCBRRuntimeOptions_ParsedPluginData_initWithCCBRRuntimeOptions_(CCBRRuntimeOptions *outer$) {
  J2OBJC_CREATE_IMPL(CCBRRuntimeOptions_ParsedPluginData, initWithCCBRRuntimeOptions_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRRuntimeOptions_ParsedPluginData)

@implementation CCBRRuntimeOptions_ParsedOptionNames

- (instancetype __nonnull)initWithCCBRRuntimeOptions:(CCBRRuntimeOptions *)outer$ {
  CCBRRuntimeOptions_ParsedOptionNames_initWithCCBRRuntimeOptions_(self, outer$);
  return self;
}

- (void)addNameWithNSString:(NSString *)name
                withBoolean:(jboolean)isAddOption {
  [((id<JavaUtilList>) nil_chk(names_)) addWithId:name];
  if (!isAddOption) {
    clobber_ = true;
  }
}

- (void)updateNameListWithJavaUtilList:(id<JavaUtilList>)nameList {
  if (![((id<JavaUtilList>) nil_chk(names_)) isEmpty]) {
    if (clobber_) {
      [((id<JavaUtilList>) nil_chk(nameList)) clear];
    }
    [((id<JavaUtilList>) nil_chk(nameList)) addAllWithJavaUtilCollection:names_];
  }
}

- (void)dealloc {
  RELEASE_(names_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRRuntimeOptions:);
  methods[1].selector = @selector(addNameWithNSString:withBoolean:);
  methods[2].selector = @selector(updateNameListWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "names_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 5, -1 },
    { "clobber_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "addName", "LNSString;Z", "updateNameList", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)V", "Ljava/util/List<Ljava/lang/String;>;", "LCCBRRuntimeOptions;" };
  static const J2ObjcClassInfo _CCBRRuntimeOptions_ParsedOptionNames = { "ParsedOptionNames", "cucumber.runtime", ptrTable, methods, fields, 7, 0x0, 3, 2, 6, -1, -1, -1, -1 };
  return &_CCBRRuntimeOptions_ParsedOptionNames;
}

@end

void CCBRRuntimeOptions_ParsedOptionNames_initWithCCBRRuntimeOptions_(CCBRRuntimeOptions_ParsedOptionNames *self, CCBRRuntimeOptions *outer$) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->names_, new_JavaUtilArrayList_init());
  self->clobber_ = false;
}

CCBRRuntimeOptions_ParsedOptionNames *new_CCBRRuntimeOptions_ParsedOptionNames_initWithCCBRRuntimeOptions_(CCBRRuntimeOptions *outer$) {
  J2OBJC_NEW_IMPL(CCBRRuntimeOptions_ParsedOptionNames, initWithCCBRRuntimeOptions_, outer$)
}

CCBRRuntimeOptions_ParsedOptionNames *create_CCBRRuntimeOptions_ParsedOptionNames_initWithCCBRRuntimeOptions_(CCBRRuntimeOptions *outer$) {
  J2OBJC_CREATE_IMPL(CCBRRuntimeOptions_ParsedOptionNames, initWithCCBRRuntimeOptions_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRRuntimeOptions_ParsedOptionNames)
