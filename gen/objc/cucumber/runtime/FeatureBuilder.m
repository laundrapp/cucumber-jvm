//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/FeatureBuilder.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "cucumber/runtime/CucumberException.h"
#include "cucumber/runtime/FeatureBuilder.h"
#include "cucumber/runtime/io/Resource.h"
#include "cucumber/runtime/model/CucumberFeature.h"
#include "cucumber/util/Encoding.h"
#include "gherkin/AstBuilder.h"
#include "gherkin/Parser.h"
#include "gherkin/ParserException.h"
#include "gherkin/TokenMatcher.h"
#include "gherkin/ast/GherkinDocument.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/math/BigInteger.h"
#include "java/nio/charset/Charset.h"
#include "java/security/MessageDigest.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@interface CCBRFeatureBuilder () {
 @public
  id<JavaUtilList> cucumberFeatures_;
  jchar fileSeparatorChar_;
  JavaSecurityMessageDigest *md5_;
  id<JavaUtilMap> pathsByChecksum_;
}

- (NSString *)convertFileSeparatorToForwardSlashWithNSString:(NSString *)path;

- (NSString *)checksumWithNSString:(NSString *)gherkin;

@end

J2OBJC_FIELD_SETTER(CCBRFeatureBuilder, cucumberFeatures_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CCBRFeatureBuilder, md5_, JavaSecurityMessageDigest *)
J2OBJC_FIELD_SETTER(CCBRFeatureBuilder, pathsByChecksum_, id<JavaUtilMap>)

inline JavaNioCharsetCharset *CCBRFeatureBuilder_get_UTF8(void);
static JavaNioCharsetCharset *CCBRFeatureBuilder_UTF8;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CCBRFeatureBuilder, UTF8, JavaNioCharsetCharset *)

__attribute__((unused)) static NSString *CCBRFeatureBuilder_convertFileSeparatorToForwardSlashWithNSString_(CCBRFeatureBuilder *self, NSString *path);

__attribute__((unused)) static NSString *CCBRFeatureBuilder_checksumWithNSString_(CCBRFeatureBuilder *self, NSString *gherkin);

J2OBJC_INITIALIZED_DEFN(CCBRFeatureBuilder)

@implementation CCBRFeatureBuilder

- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)cucumberFeatures {
  CCBRFeatureBuilder_initWithJavaUtilList_(self, cucumberFeatures);
  return self;
}

- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)cucumberFeatures
                                      withChar:(jchar)fileSeparatorChar {
  CCBRFeatureBuilder_initWithJavaUtilList_withChar_(self, cucumberFeatures, fileSeparatorChar);
  return self;
}

- (void)parseWithCCBRResource:(id<CCBRResource>)resource {
  NSString *gherkin = [self readWithCCBRResource:resource];
  NSString *checksum = CCBRFeatureBuilder_checksumWithNSString_(self, gherkin);
  NSString *path = [((id<JavaUtilMap>) nil_chk(pathsByChecksum_)) getWithId:checksum];
  if (path != nil) {
    return;
  }
  [pathsByChecksum_ putWithId:checksum withId:[((id<CCBRResource>) nil_chk(resource)) getPath]];
  GherkinParser *parser = create_GherkinParser_initWithGherkinParser_Builder_(create_GherkinAstBuilder_init());
  GherkinTokenMatcher *matcher = create_GherkinTokenMatcher_init();
  @try {
    GherkinAstGherkinDocument *gherkinDocument = [parser parseWithNSString:gherkin withGherkinParser_ITokenMatcher:matcher];
    CCBRCucumberFeature *feature = create_CCBRCucumberFeature_initWithGherkinAstGherkinDocument_withNSString_withNSString_(gherkinDocument, CCBRFeatureBuilder_convertFileSeparatorToForwardSlashWithNSString_(self, [resource getPath]), gherkin);
    [((id<JavaUtilList>) nil_chk(cucumberFeatures_)) addWithId:feature];
  }
  @catch (GherkinParserException *e) {
    @throw create_CCBRCucumberException_initWithJavaLangThrowable_(e);
  }
}

- (NSString *)convertFileSeparatorToForwardSlashWithNSString:(NSString *)path {
  return CCBRFeatureBuilder_convertFileSeparatorToForwardSlashWithNSString_(self, path);
}

- (NSString *)checksumWithNSString:(NSString *)gherkin {
  return CCBRFeatureBuilder_checksumWithNSString_(self, gherkin);
}

- (NSString *)readWithCCBRResource:(id<CCBRResource>)resource {
  @try {
    NSString *source = CCBEncoding_readFileWithCCBRResource_(resource);
    return source;
  }
  @catch (JavaIoIOException *e) {
    @throw create_CCBRCucumberException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Failed to read resource:", [((id<CCBRResource>) nil_chk(resource)) getPath]), e);
  }
}

- (void)dealloc {
  RELEASE_(cucumberFeatures_);
  RELEASE_(md5_);
  RELEASE_(pathsByChecksum_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 8, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilList:);
  methods[1].selector = @selector(initWithJavaUtilList:withChar:);
  methods[2].selector = @selector(parseWithCCBRResource:);
  methods[3].selector = @selector(convertFileSeparatorToForwardSlashWithNSString:);
  methods[4].selector = @selector(checksumWithNSString:);
  methods[5].selector = @selector(readWithCCBRResource:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "UTF8", "LJavaNioCharsetCharset;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "cucumberFeatures_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
    { "fileSeparatorChar_", "C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "md5_", "LJavaSecurityMessageDigest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "pathsByChecksum_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 12, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Lcucumber/runtime/model/CucumberFeature;>;)V", "LJavaUtilList;C", "(Ljava/util/List<Lcucumber/runtime/model/CucumberFeature;>;C)V", "parse", "LCCBRResource;", "convertFileSeparatorToForwardSlash", "LNSString;", "checksum", "read", &CCBRFeatureBuilder_UTF8, "Ljava/util/List<Lcucumber/runtime/model/CucumberFeature;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _CCBRFeatureBuilder = { "FeatureBuilder", "cucumber.runtime", ptrTable, methods, fields, 7, 0x1, 6, 5, -1, -1, -1, -1, -1 };
  return &_CCBRFeatureBuilder;
}

+ (void)initialize {
  if (self == [CCBRFeatureBuilder class]) {
    JreStrongAssign(&CCBRFeatureBuilder_UTF8, JavaNioCharsetCharset_forNameWithNSString_(@"UTF-8"));
    J2OBJC_SET_INITIALIZED(CCBRFeatureBuilder)
  }
}

@end

void CCBRFeatureBuilder_initWithJavaUtilList_(CCBRFeatureBuilder *self, id<JavaUtilList> cucumberFeatures) {
  CCBRFeatureBuilder_initWithJavaUtilList_withChar_(self, cucumberFeatures, JreLoadStatic(JavaIoFile, separatorChar));
}

CCBRFeatureBuilder *new_CCBRFeatureBuilder_initWithJavaUtilList_(id<JavaUtilList> cucumberFeatures) {
  J2OBJC_NEW_IMPL(CCBRFeatureBuilder, initWithJavaUtilList_, cucumberFeatures)
}

CCBRFeatureBuilder *create_CCBRFeatureBuilder_initWithJavaUtilList_(id<JavaUtilList> cucumberFeatures) {
  J2OBJC_CREATE_IMPL(CCBRFeatureBuilder, initWithJavaUtilList_, cucumberFeatures)
}

void CCBRFeatureBuilder_initWithJavaUtilList_withChar_(CCBRFeatureBuilder *self, id<JavaUtilList> cucumberFeatures, jchar fileSeparatorChar) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->pathsByChecksum_, new_JavaUtilHashMap_init());
  JreStrongAssign(&self->cucumberFeatures_, cucumberFeatures);
  self->fileSeparatorChar_ = fileSeparatorChar;
  @try {
    JreStrongAssign(&self->md5_, JavaSecurityMessageDigest_getInstanceWithNSString_(@"MD5"));
  }
  @catch (JavaSecurityNoSuchAlgorithmException *e) {
    @throw create_CCBRCucumberException_initWithJavaLangThrowable_(e);
  }
}

CCBRFeatureBuilder *new_CCBRFeatureBuilder_initWithJavaUtilList_withChar_(id<JavaUtilList> cucumberFeatures, jchar fileSeparatorChar) {
  J2OBJC_NEW_IMPL(CCBRFeatureBuilder, initWithJavaUtilList_withChar_, cucumberFeatures, fileSeparatorChar)
}

CCBRFeatureBuilder *create_CCBRFeatureBuilder_initWithJavaUtilList_withChar_(id<JavaUtilList> cucumberFeatures, jchar fileSeparatorChar) {
  J2OBJC_CREATE_IMPL(CCBRFeatureBuilder, initWithJavaUtilList_withChar_, cucumberFeatures, fileSeparatorChar)
}

NSString *CCBRFeatureBuilder_convertFileSeparatorToForwardSlashWithNSString_(CCBRFeatureBuilder *self, NSString *path) {
  return [((NSString *) nil_chk(path)) java_replace:self->fileSeparatorChar_ withChar:'/'];
}

NSString *CCBRFeatureBuilder_checksumWithNSString_(CCBRFeatureBuilder *self, NSString *gherkin) {
  return [create_JavaMathBigInteger_initWithInt_withByteArray_(1, [((JavaSecurityMessageDigest *) nil_chk(self->md5_)) digestWithByteArray:[((NSString *) nil_chk(gherkin)) java_getBytesWithCharset:CCBRFeatureBuilder_UTF8]]) toStringWithInt:16];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRFeatureBuilder)
