//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/formatter/ProgressFormatter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "cucumber/api/Result.h"
#include "cucumber/api/TestStep.h"
#include "cucumber/api/event/EventHandler.h"
#include "cucumber/api/event/EventPublisher.h"
#include "cucumber/api/event/TestRunFinished.h"
#include "cucumber/api/event/TestStepFinished.h"
#include "cucumber/api/event/WriteEvent.h"
#include "cucumber/api/formatter/AnsiEscapes.h"
#include "cucumber/api/formatter/NiceAppendable.h"
#include "cucumber/runtime/formatter/ProgressFormatter.h"
#include "java/lang/Appendable.h"
#include "java/lang/Character.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@protocol JavaUtilFunctionBiFunction;
@protocol JavaUtilFunctionFunction;

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface CCBRProgressFormatter () {
 @public
  CucumberApiFormatterNiceAppendable *out_;
  jboolean monochrome_;
  id<CucumberApiEventEventHandler> stepFinishedhandler_;
  id<CucumberApiEventEventHandler> writeHandler_;
  id<CucumberApiEventEventHandler> runFinishHandler_;
}

- (void)handleTestStepFinishedWithCucumberApiEventTestStepFinished:(CucumberApiEventTestStepFinished *)event;

- (void)handleWriteWithCucumberApiEventWriteEvent:(CucumberApiEventWriteEvent *)event;

- (void)handleTestRunFinished;

@end

J2OBJC_FIELD_SETTER(CCBRProgressFormatter, out_, CucumberApiFormatterNiceAppendable *)
J2OBJC_FIELD_SETTER(CCBRProgressFormatter, stepFinishedhandler_, id<CucumberApiEventEventHandler>)
J2OBJC_FIELD_SETTER(CCBRProgressFormatter, writeHandler_, id<CucumberApiEventEventHandler>)
J2OBJC_FIELD_SETTER(CCBRProgressFormatter, runFinishHandler_, id<CucumberApiEventEventHandler>)

inline id<JavaUtilMap> CCBRProgressFormatter_get_CHARS(void);
static id<JavaUtilMap> CCBRProgressFormatter_CHARS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CCBRProgressFormatter, CHARS, id<JavaUtilMap>)

inline id<JavaUtilMap> CCBRProgressFormatter_get_ANSI_ESCAPES(void);
static id<JavaUtilMap> CCBRProgressFormatter_ANSI_ESCAPES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CCBRProgressFormatter, ANSI_ESCAPES, id<JavaUtilMap>)

__attribute__((unused)) static void CCBRProgressFormatter_handleTestStepFinishedWithCucumberApiEventTestStepFinished_(CCBRProgressFormatter *self, CucumberApiEventTestStepFinished *event);

__attribute__((unused)) static void CCBRProgressFormatter_handleWriteWithCucumberApiEventWriteEvent_(CCBRProgressFormatter *self, CucumberApiEventWriteEvent *event);

__attribute__((unused)) static void CCBRProgressFormatter_handleTestRunFinished(CCBRProgressFormatter *self);

@interface CCBRProgressFormatter_1 : JavaUtilHashMap

- (instancetype __nonnull)init;

- (JavaLangCharacter *)computeIfAbsentWithId:(CucumberApiResult_Type *)arg0
                withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg1;

- (JavaLangCharacter *)getWithId:(id)arg0;

- (JavaLangCharacter *)removeWithId:(id)arg0;

- (JavaLangCharacter *)putIfAbsentWithId:(CucumberApiResult_Type *)arg0
                                  withId:(JavaLangCharacter *)arg1;

- (JavaLangCharacter *)computeIfPresentWithId:(CucumberApiResult_Type *)arg0
               withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1;

- (JavaLangCharacter *)replaceWithId:(CucumberApiResult_Type *)arg0
                              withId:(JavaLangCharacter *)arg1;

- (JavaLangCharacter *)putWithId:(CucumberApiResult_Type *)arg0
                          withId:(JavaLangCharacter *)arg1;

- (JavaLangCharacter *)computeWithId:(CucumberApiResult_Type *)arg0
      withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1;

- (JavaLangCharacter *)mergeWithId:(CucumberApiResult_Type *)arg0
                            withId:(JavaLangCharacter *)arg1
    withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg2;

- (JavaLangCharacter *)getOrDefaultWithId:(id)arg0
                                   withId:(JavaLangCharacter *)arg1;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRProgressFormatter_1)

__attribute__((unused)) static void CCBRProgressFormatter_1_init(CCBRProgressFormatter_1 *self);

__attribute__((unused)) static CCBRProgressFormatter_1 *new_CCBRProgressFormatter_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRProgressFormatter_1 *create_CCBRProgressFormatter_1_init(void);

@interface CCBRProgressFormatter_2 : JavaUtilHashMap

- (instancetype __nonnull)init;

- (CucumberApiFormatterAnsiEscapes *)computeIfAbsentWithId:(CucumberApiResult_Type *)arg0
                              withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg1;

- (CucumberApiFormatterAnsiEscapes *)getWithId:(id)arg0;

- (CucumberApiFormatterAnsiEscapes *)removeWithId:(id)arg0;

- (CucumberApiFormatterAnsiEscapes *)putIfAbsentWithId:(CucumberApiResult_Type *)arg0
                                                withId:(CucumberApiFormatterAnsiEscapes *)arg1;

- (CucumberApiFormatterAnsiEscapes *)computeIfPresentWithId:(CucumberApiResult_Type *)arg0
                             withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1;

- (CucumberApiFormatterAnsiEscapes *)replaceWithId:(CucumberApiResult_Type *)arg0
                                            withId:(CucumberApiFormatterAnsiEscapes *)arg1;

- (CucumberApiFormatterAnsiEscapes *)putWithId:(CucumberApiResult_Type *)arg0
                                        withId:(CucumberApiFormatterAnsiEscapes *)arg1;

- (CucumberApiFormatterAnsiEscapes *)computeWithId:(CucumberApiResult_Type *)arg0
                    withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1;

- (CucumberApiFormatterAnsiEscapes *)mergeWithId:(CucumberApiResult_Type *)arg0
                                          withId:(CucumberApiFormatterAnsiEscapes *)arg1
                  withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg2;

- (CucumberApiFormatterAnsiEscapes *)getOrDefaultWithId:(id)arg0
                                                 withId:(CucumberApiFormatterAnsiEscapes *)arg1;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRProgressFormatter_2)

__attribute__((unused)) static void CCBRProgressFormatter_2_init(CCBRProgressFormatter_2 *self);

__attribute__((unused)) static CCBRProgressFormatter_2 *new_CCBRProgressFormatter_2_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRProgressFormatter_2 *create_CCBRProgressFormatter_2_init(void);

@interface CCBRProgressFormatter_3 : NSObject < CucumberApiEventEventHandler > {
 @public
  CCBRProgressFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRProgressFormatter:(CCBRProgressFormatter *)outer$;

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestStepFinished *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRProgressFormatter_3)

__attribute__((unused)) static void CCBRProgressFormatter_3_initWithCCBRProgressFormatter_(CCBRProgressFormatter_3 *self, CCBRProgressFormatter *outer$);

__attribute__((unused)) static CCBRProgressFormatter_3 *new_CCBRProgressFormatter_3_initWithCCBRProgressFormatter_(CCBRProgressFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRProgressFormatter_3 *create_CCBRProgressFormatter_3_initWithCCBRProgressFormatter_(CCBRProgressFormatter *outer$);

@interface CCBRProgressFormatter_4 : NSObject < CucumberApiEventEventHandler > {
 @public
  CCBRProgressFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRProgressFormatter:(CCBRProgressFormatter *)outer$;

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventWriteEvent *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRProgressFormatter_4)

__attribute__((unused)) static void CCBRProgressFormatter_4_initWithCCBRProgressFormatter_(CCBRProgressFormatter_4 *self, CCBRProgressFormatter *outer$);

__attribute__((unused)) static CCBRProgressFormatter_4 *new_CCBRProgressFormatter_4_initWithCCBRProgressFormatter_(CCBRProgressFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRProgressFormatter_4 *create_CCBRProgressFormatter_4_initWithCCBRProgressFormatter_(CCBRProgressFormatter *outer$);

@interface CCBRProgressFormatter_5 : NSObject < CucumberApiEventEventHandler > {
 @public
  CCBRProgressFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRProgressFormatter:(CCBRProgressFormatter *)outer$;

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestRunFinished *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRProgressFormatter_5)

__attribute__((unused)) static void CCBRProgressFormatter_5_initWithCCBRProgressFormatter_(CCBRProgressFormatter_5 *self, CCBRProgressFormatter *outer$);

__attribute__((unused)) static CCBRProgressFormatter_5 *new_CCBRProgressFormatter_5_initWithCCBRProgressFormatter_(CCBRProgressFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRProgressFormatter_5 *create_CCBRProgressFormatter_5_initWithCCBRProgressFormatter_(CCBRProgressFormatter *outer$);

J2OBJC_INITIALIZED_DEFN(CCBRProgressFormatter)

@implementation CCBRProgressFormatter

- (instancetype __nonnull)initWithJavaLangAppendable:(id<JavaLangAppendable>)appendable {
  CCBRProgressFormatter_initWithJavaLangAppendable_(self, appendable);
  return self;
}

- (void)setMonochromeWithBoolean:(jboolean)monochrome {
  self->monochrome_ = monochrome;
}

- (void)setEventPublisherWithCucumberApiEventEventPublisher:(id<CucumberApiEventEventPublisher>)publisher {
  [((id<CucumberApiEventEventPublisher>) nil_chk(publisher)) registerHandlerForWithIOSClass:CucumberApiEventTestStepFinished_class_() withCucumberApiEventEventHandler:stepFinishedhandler_];
  [publisher registerHandlerForWithIOSClass:CucumberApiEventWriteEvent_class_() withCucumberApiEventEventHandler:writeHandler_];
  [publisher registerHandlerForWithIOSClass:CucumberApiEventTestRunFinished_class_() withCucumberApiEventEventHandler:runFinishHandler_];
}

- (void)handleTestStepFinishedWithCucumberApiEventTestStepFinished:(CucumberApiEventTestStepFinished *)event {
  CCBRProgressFormatter_handleTestStepFinishedWithCucumberApiEventTestStepFinished_(self, event);
}

- (void)handleWriteWithCucumberApiEventWriteEvent:(CucumberApiEventWriteEvent *)event {
  CCBRProgressFormatter_handleWriteWithCucumberApiEventWriteEvent_(self, event);
}

- (void)handleTestRunFinished {
  CCBRProgressFormatter_handleTestRunFinished(self);
}

- (void)dealloc {
  RELEASE_(out_);
  RELEASE_(stepFinishedhandler_);
  RELEASE_(writeHandler_);
  RELEASE_(runFinishHandler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangAppendable:);
  methods[1].selector = @selector(setMonochromeWithBoolean:);
  methods[2].selector = @selector(setEventPublisherWithCucumberApiEventEventPublisher:);
  methods[3].selector = @selector(handleTestStepFinishedWithCucumberApiEventTestStepFinished:);
  methods[4].selector = @selector(handleWriteWithCucumberApiEventWriteEvent:);
  methods[5].selector = @selector(handleTestRunFinished);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CHARS", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 9, 10, -1 },
    { "ANSI_ESCAPES", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 11, 12, -1 },
    { "out_", "LCucumberApiFormatterNiceAppendable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "monochrome_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "stepFinishedhandler_", "LCucumberApiEventEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 13, -1 },
    { "writeHandler_", "LCucumberApiEventEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 14, -1 },
    { "runFinishHandler_", "LCucumberApiEventEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 15, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangAppendable;", "setMonochrome", "Z", "setEventPublisher", "LCucumberApiEventEventPublisher;", "handleTestStepFinished", "LCucumberApiEventTestStepFinished;", "handleWrite", "LCucumberApiEventWriteEvent;", &CCBRProgressFormatter_CHARS, "Ljava/util/Map<Lcucumber/api/Result$Type;Ljava/lang/Character;>;", &CCBRProgressFormatter_ANSI_ESCAPES, "Ljava/util/Map<Lcucumber/api/Result$Type;Lcucumber/api/formatter/AnsiEscapes;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestStepFinished;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/WriteEvent;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestRunFinished;>;" };
  static const J2ObjcClassInfo _CCBRProgressFormatter = { "ProgressFormatter", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x10, 6, 7, -1, -1, -1, -1, -1 };
  return &_CCBRProgressFormatter;
}

+ (void)initialize {
  if (self == [CCBRProgressFormatter class]) {
    JreStrongAssignAndConsume(&CCBRProgressFormatter_CHARS, new_CCBRProgressFormatter_1_init());
    JreStrongAssignAndConsume(&CCBRProgressFormatter_ANSI_ESCAPES, new_CCBRProgressFormatter_2_init());
    J2OBJC_SET_INITIALIZED(CCBRProgressFormatter)
  }
}

@end

void CCBRProgressFormatter_initWithJavaLangAppendable_(CCBRProgressFormatter *self, id<JavaLangAppendable> appendable) {
  NSObject_init(self);
  self->monochrome_ = false;
  JreStrongAssignAndConsume(&self->stepFinishedhandler_, new_CCBRProgressFormatter_3_initWithCCBRProgressFormatter_(self));
  JreStrongAssignAndConsume(&self->writeHandler_, new_CCBRProgressFormatter_4_initWithCCBRProgressFormatter_(self));
  JreStrongAssignAndConsume(&self->runFinishHandler_, new_CCBRProgressFormatter_5_initWithCCBRProgressFormatter_(self));
  JreStrongAssignAndConsume(&self->out_, new_CucumberApiFormatterNiceAppendable_initWithJavaLangAppendable_(appendable));
}

CCBRProgressFormatter *new_CCBRProgressFormatter_initWithJavaLangAppendable_(id<JavaLangAppendable> appendable) {
  J2OBJC_NEW_IMPL(CCBRProgressFormatter, initWithJavaLangAppendable_, appendable)
}

CCBRProgressFormatter *create_CCBRProgressFormatter_initWithJavaLangAppendable_(id<JavaLangAppendable> appendable) {
  J2OBJC_CREATE_IMPL(CCBRProgressFormatter, initWithJavaLangAppendable_, appendable)
}

void CCBRProgressFormatter_handleTestStepFinishedWithCucumberApiEventTestStepFinished_(CCBRProgressFormatter *self, CucumberApiEventTestStepFinished *event) {
  if (![((CucumberApiTestStep *) nil_chk(((CucumberApiEventTestStepFinished *) nil_chk(event))->testStep_)) isHook] || [((CucumberApiResult *) nil_chk(event->result_)) isWithCucumberApiResult_Type:JreLoadEnum(CucumberApiResult_Type, FAILED)]) {
    if (!self->monochrome_) {
      [((CucumberApiFormatterAnsiEscapes *) nil_chk([((id<JavaUtilMap>) nil_chk(CCBRProgressFormatter_ANSI_ESCAPES)) getWithId:[((CucumberApiResult *) nil_chk(event->result_)) getStatus]])) appendToWithCucumberApiFormatterNiceAppendable:self->out_];
    }
    [((CucumberApiFormatterNiceAppendable *) nil_chk(self->out_)) appendWithChar:[((JavaLangCharacter *) nil_chk([((id<JavaUtilMap>) nil_chk(CCBRProgressFormatter_CHARS)) getWithId:[((CucumberApiResult *) nil_chk(event->result_)) getStatus]])) charValue]];
    if (!self->monochrome_) {
      [((CucumberApiFormatterAnsiEscapes *) nil_chk(JreLoadStatic(CucumberApiFormatterAnsiEscapes, RESET))) appendToWithCucumberApiFormatterNiceAppendable:self->out_];
    }
  }
}

void CCBRProgressFormatter_handleWriteWithCucumberApiEventWriteEvent_(CCBRProgressFormatter *self, CucumberApiEventWriteEvent *event) {
  [((CucumberApiFormatterNiceAppendable *) nil_chk(self->out_)) appendWithJavaLangCharSequence:((CucumberApiEventWriteEvent *) nil_chk(event))->text_];
}

void CCBRProgressFormatter_handleTestRunFinished(CCBRProgressFormatter *self) {
  [((CucumberApiFormatterNiceAppendable *) nil_chk(self->out_)) println];
  [self->out_ close];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRProgressFormatter)

@implementation CCBRProgressFormatter_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CCBRProgressFormatter_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LCCBRProgressFormatter;", "Ljava/util/HashMap<Lcucumber/api/Result$Type;Ljava/lang/Character;>;" };
  static const J2ObjcClassInfo _CCBRProgressFormatter_1 = { "", "cucumber.runtime.formatter", ptrTable, methods, NULL, 7, 0x8018, 1, 0, 0, -1, -1, 1, -1 };
  return &_CCBRProgressFormatter_1;
}

@end

void CCBRProgressFormatter_1_init(CCBRProgressFormatter_1 *self) {
  JavaUtilHashMap_init(self);
  {
    [self putWithId:JreLoadEnum(CucumberApiResult_Type, PASSED) withId:JavaLangCharacter_valueOfWithChar_('.')];
    [self putWithId:JreLoadEnum(CucumberApiResult_Type, UNDEFINED) withId:JavaLangCharacter_valueOfWithChar_('U')];
    [self putWithId:JreLoadEnum(CucumberApiResult_Type, PENDING) withId:JavaLangCharacter_valueOfWithChar_('P')];
    [self putWithId:JreLoadEnum(CucumberApiResult_Type, SKIPPED) withId:JavaLangCharacter_valueOfWithChar_('-')];
    [self putWithId:JreLoadEnum(CucumberApiResult_Type, FAILED) withId:JavaLangCharacter_valueOfWithChar_('F')];
    [self putWithId:JreLoadEnum(CucumberApiResult_Type, AMBIGUOUS) withId:JavaLangCharacter_valueOfWithChar_('A')];
  }
}

CCBRProgressFormatter_1 *new_CCBRProgressFormatter_1_init() {
  J2OBJC_NEW_IMPL(CCBRProgressFormatter_1, init)
}

CCBRProgressFormatter_1 *create_CCBRProgressFormatter_1_init() {
  J2OBJC_CREATE_IMPL(CCBRProgressFormatter_1, init)
}

@implementation CCBRProgressFormatter_2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CCBRProgressFormatter_2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LCCBRProgressFormatter;", "Ljava/util/HashMap<Lcucumber/api/Result$Type;Lcucumber/api/formatter/AnsiEscapes;>;" };
  static const J2ObjcClassInfo _CCBRProgressFormatter_2 = { "", "cucumber.runtime.formatter", ptrTable, methods, NULL, 7, 0x8018, 1, 0, 0, -1, -1, 1, -1 };
  return &_CCBRProgressFormatter_2;
}

@end

void CCBRProgressFormatter_2_init(CCBRProgressFormatter_2 *self) {
  JavaUtilHashMap_init(self);
  {
    [self putWithId:JreLoadEnum(CucumberApiResult_Type, PASSED) withId:JreLoadStatic(CucumberApiFormatterAnsiEscapes, GREEN)];
    [self putWithId:JreLoadEnum(CucumberApiResult_Type, UNDEFINED) withId:JreLoadStatic(CucumberApiFormatterAnsiEscapes, YELLOW)];
    [self putWithId:JreLoadEnum(CucumberApiResult_Type, PENDING) withId:JreLoadStatic(CucumberApiFormatterAnsiEscapes, YELLOW)];
    [self putWithId:JreLoadEnum(CucumberApiResult_Type, SKIPPED) withId:JreLoadStatic(CucumberApiFormatterAnsiEscapes, CYAN)];
    [self putWithId:JreLoadEnum(CucumberApiResult_Type, FAILED) withId:JreLoadStatic(CucumberApiFormatterAnsiEscapes, RED)];
    [self putWithId:JreLoadEnum(CucumberApiResult_Type, AMBIGUOUS) withId:JreLoadStatic(CucumberApiFormatterAnsiEscapes, RED)];
  }
}

CCBRProgressFormatter_2 *new_CCBRProgressFormatter_2_init() {
  J2OBJC_NEW_IMPL(CCBRProgressFormatter_2, init)
}

CCBRProgressFormatter_2 *create_CCBRProgressFormatter_2_init() {
  J2OBJC_CREATE_IMPL(CCBRProgressFormatter_2, init)
}

@implementation CCBRProgressFormatter_3

- (instancetype __nonnull)initWithCCBRProgressFormatter:(CCBRProgressFormatter *)outer$ {
  CCBRProgressFormatter_3_initWithCCBRProgressFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestStepFinished *)event {
  CCBRProgressFormatter_handleTestStepFinishedWithCucumberApiEventTestStepFinished_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRProgressFormatter:);
  methods[1].selector = @selector(receiveWithCucumberApiEventEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRProgressFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCucumberApiEventTestStepFinished;", "LCCBRProgressFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestStepFinished;>;" };
  static const J2ObjcClassInfo _CCBRProgressFormatter_3 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRProgressFormatter_3;
}

@end

void CCBRProgressFormatter_3_initWithCCBRProgressFormatter_(CCBRProgressFormatter_3 *self, CCBRProgressFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRProgressFormatter_3 *new_CCBRProgressFormatter_3_initWithCCBRProgressFormatter_(CCBRProgressFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRProgressFormatter_3, initWithCCBRProgressFormatter_, outer$)
}

CCBRProgressFormatter_3 *create_CCBRProgressFormatter_3_initWithCCBRProgressFormatter_(CCBRProgressFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRProgressFormatter_3, initWithCCBRProgressFormatter_, outer$)
}

@implementation CCBRProgressFormatter_4

- (instancetype __nonnull)initWithCCBRProgressFormatter:(CCBRProgressFormatter *)outer$ {
  CCBRProgressFormatter_4_initWithCCBRProgressFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventWriteEvent *)event {
  CCBRProgressFormatter_handleWriteWithCucumberApiEventWriteEvent_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRProgressFormatter:);
  methods[1].selector = @selector(receiveWithCucumberApiEventEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRProgressFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCucumberApiEventWriteEvent;", "LCCBRProgressFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/WriteEvent;>;" };
  static const J2ObjcClassInfo _CCBRProgressFormatter_4 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRProgressFormatter_4;
}

@end

void CCBRProgressFormatter_4_initWithCCBRProgressFormatter_(CCBRProgressFormatter_4 *self, CCBRProgressFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRProgressFormatter_4 *new_CCBRProgressFormatter_4_initWithCCBRProgressFormatter_(CCBRProgressFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRProgressFormatter_4, initWithCCBRProgressFormatter_, outer$)
}

CCBRProgressFormatter_4 *create_CCBRProgressFormatter_4_initWithCCBRProgressFormatter_(CCBRProgressFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRProgressFormatter_4, initWithCCBRProgressFormatter_, outer$)
}

@implementation CCBRProgressFormatter_5

- (instancetype __nonnull)initWithCCBRProgressFormatter:(CCBRProgressFormatter *)outer$ {
  CCBRProgressFormatter_5_initWithCCBRProgressFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestRunFinished *)event {
  CCBRProgressFormatter_handleTestRunFinished(this$0_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRProgressFormatter:);
  methods[1].selector = @selector(receiveWithCucumberApiEventEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRProgressFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCucumberApiEventTestRunFinished;", "LCCBRProgressFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestRunFinished;>;" };
  static const J2ObjcClassInfo _CCBRProgressFormatter_5 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRProgressFormatter_5;
}

@end

void CCBRProgressFormatter_5_initWithCCBRProgressFormatter_(CCBRProgressFormatter_5 *self, CCBRProgressFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRProgressFormatter_5 *new_CCBRProgressFormatter_5_initWithCCBRProgressFormatter_(CCBRProgressFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRProgressFormatter_5, initWithCCBRProgressFormatter_, outer$)
}

CCBRProgressFormatter_5 *create_CCBRProgressFormatter_5_initWithCCBRProgressFormatter_(CCBRProgressFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRProgressFormatter_5, initWithCCBRProgressFormatter_, outer$)
}
