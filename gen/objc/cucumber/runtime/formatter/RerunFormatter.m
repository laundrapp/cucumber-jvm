//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/formatter/RerunFormatter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "cucumber/api/Result.h"
#include "cucumber/api/TestCase.h"
#include "cucumber/api/event/EventHandler.h"
#include "cucumber/api/event/EventPublisher.h"
#include "cucumber/api/event/TestCaseFinished.h"
#include "cucumber/api/event/TestRunFinished.h"
#include "cucumber/api/formatter/NiceAppendable.h"
#include "cucumber/runtime/formatter/RerunFormatter.h"
#include "java/lang/Appendable.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface CucumberRuntimeFormatterRerunFormatter () {
 @public
  CucumberApiFormatterNiceAppendable *out_;
  id<JavaUtilMap> featureAndFailedLinesMapping_;
  jboolean isStrict_;
  id<CucumberApiEventEventHandler> testCaseFinishedHandler_;
  id<CucumberApiEventEventHandler> runFinishHandler_;
}

- (void)handeTestCaseFinishedWithCucumberApiEventTestCaseFinished:(CucumberApiEventTestCaseFinished *)event;

- (void)handleTestRunFinished;

- (void)recordTestFailedWithCucumberApiTestCase:(CucumberApiTestCase *)testCase;

- (void)reportFailedTestCases;

@end

J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterRerunFormatter, out_, CucumberApiFormatterNiceAppendable *)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterRerunFormatter, featureAndFailedLinesMapping_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterRerunFormatter, testCaseFinishedHandler_, id<CucumberApiEventEventHandler>)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterRerunFormatter, runFinishHandler_, id<CucumberApiEventEventHandler>)

__attribute__((unused)) static void CucumberRuntimeFormatterRerunFormatter_handeTestCaseFinishedWithCucumberApiEventTestCaseFinished_(CucumberRuntimeFormatterRerunFormatter *self, CucumberApiEventTestCaseFinished *event);

__attribute__((unused)) static void CucumberRuntimeFormatterRerunFormatter_handleTestRunFinished(CucumberRuntimeFormatterRerunFormatter *self);

__attribute__((unused)) static void CucumberRuntimeFormatterRerunFormatter_recordTestFailedWithCucumberApiTestCase_(CucumberRuntimeFormatterRerunFormatter *self, CucumberApiTestCase *testCase);

__attribute__((unused)) static void CucumberRuntimeFormatterRerunFormatter_reportFailedTestCases(CucumberRuntimeFormatterRerunFormatter *self);

@interface CucumberRuntimeFormatterRerunFormatter_1 : NSObject < CucumberApiEventEventHandler > {
 @public
  CucumberRuntimeFormatterRerunFormatter *this$0_;
}

- (instancetype __nonnull)initWithCucumberRuntimeFormatterRerunFormatter:(CucumberRuntimeFormatterRerunFormatter *)outer$;

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestCaseFinished *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberRuntimeFormatterRerunFormatter_1)

__attribute__((unused)) static void CucumberRuntimeFormatterRerunFormatter_1_initWithCucumberRuntimeFormatterRerunFormatter_(CucumberRuntimeFormatterRerunFormatter_1 *self, CucumberRuntimeFormatterRerunFormatter *outer$);

__attribute__((unused)) static CucumberRuntimeFormatterRerunFormatter_1 *new_CucumberRuntimeFormatterRerunFormatter_1_initWithCucumberRuntimeFormatterRerunFormatter_(CucumberRuntimeFormatterRerunFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberRuntimeFormatterRerunFormatter_1 *create_CucumberRuntimeFormatterRerunFormatter_1_initWithCucumberRuntimeFormatterRerunFormatter_(CucumberRuntimeFormatterRerunFormatter *outer$);

@interface CucumberRuntimeFormatterRerunFormatter_2 : NSObject < CucumberApiEventEventHandler > {
 @public
  CucumberRuntimeFormatterRerunFormatter *this$0_;
}

- (instancetype __nonnull)initWithCucumberRuntimeFormatterRerunFormatter:(CucumberRuntimeFormatterRerunFormatter *)outer$;

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestRunFinished *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberRuntimeFormatterRerunFormatter_2)

__attribute__((unused)) static void CucumberRuntimeFormatterRerunFormatter_2_initWithCucumberRuntimeFormatterRerunFormatter_(CucumberRuntimeFormatterRerunFormatter_2 *self, CucumberRuntimeFormatterRerunFormatter *outer$);

__attribute__((unused)) static CucumberRuntimeFormatterRerunFormatter_2 *new_CucumberRuntimeFormatterRerunFormatter_2_initWithCucumberRuntimeFormatterRerunFormatter_(CucumberRuntimeFormatterRerunFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberRuntimeFormatterRerunFormatter_2 *create_CucumberRuntimeFormatterRerunFormatter_2_initWithCucumberRuntimeFormatterRerunFormatter_(CucumberRuntimeFormatterRerunFormatter *outer$);

@implementation CucumberRuntimeFormatterRerunFormatter

- (instancetype __nonnull)initWithJavaLangAppendable:(id<JavaLangAppendable>)outArg {
  CucumberRuntimeFormatterRerunFormatter_initWithJavaLangAppendable_(self, outArg);
  return self;
}

- (void)setEventPublisherWithCucumberApiEventEventPublisher:(id<CucumberApiEventEventPublisher>)publisher {
  [((id<CucumberApiEventEventPublisher>) nil_chk(publisher)) registerHandlerForWithIOSClass:CucumberApiEventTestCaseFinished_class_() withCucumberApiEventEventHandler:testCaseFinishedHandler_];
  [publisher registerHandlerForWithIOSClass:CucumberApiEventTestRunFinished_class_() withCucumberApiEventEventHandler:runFinishHandler_];
}

- (void)setStrictWithBoolean:(jboolean)strict {
  isStrict_ = strict;
}

- (void)handeTestCaseFinishedWithCucumberApiEventTestCaseFinished:(CucumberApiEventTestCaseFinished *)event {
  CucumberRuntimeFormatterRerunFormatter_handeTestCaseFinishedWithCucumberApiEventTestCaseFinished_(self, event);
}

- (void)handleTestRunFinished {
  CucumberRuntimeFormatterRerunFormatter_handleTestRunFinished(self);
}

- (void)recordTestFailedWithCucumberApiTestCase:(CucumberApiTestCase *)testCase {
  CucumberRuntimeFormatterRerunFormatter_recordTestFailedWithCucumberApiTestCase_(self, testCase);
}

- (void)reportFailedTestCases {
  CucumberRuntimeFormatterRerunFormatter_reportFailedTestCases(self);
}

- (void)dealloc {
  RELEASE_(out_);
  RELEASE_(featureAndFailedLinesMapping_);
  RELEASE_(testCaseFinishedHandler_);
  RELEASE_(runFinishHandler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangAppendable:);
  methods[1].selector = @selector(setEventPublisherWithCucumberApiEventEventPublisher:);
  methods[2].selector = @selector(setStrictWithBoolean:);
  methods[3].selector = @selector(handeTestCaseFinishedWithCucumberApiEventTestCaseFinished:);
  methods[4].selector = @selector(handleTestRunFinished);
  methods[5].selector = @selector(recordTestFailedWithCucumberApiTestCase:);
  methods[6].selector = @selector(reportFailedTestCases);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "out_", "LCucumberApiFormatterNiceAppendable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "featureAndFailedLinesMapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 9, -1 },
    { "isStrict_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "testCaseFinishedHandler_", "LCucumberApiEventEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 10, -1 },
    { "runFinishHandler_", "LCucumberApiEventEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangAppendable;", "setEventPublisher", "LCucumberApiEventEventPublisher;", "setStrict", "Z", "handeTestCaseFinished", "LCucumberApiEventTestCaseFinished;", "recordTestFailed", "LCucumberApiTestCase;", "Ljava/util/Map<Ljava/lang/String;Ljava/util/ArrayList<Ljava/lang/Integer;>;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestCaseFinished;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestRunFinished;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeFormatterRerunFormatter = { "RerunFormatter", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x10, 7, 5, -1, -1, -1, -1, -1 };
  return &_CucumberRuntimeFormatterRerunFormatter;
}

@end

void CucumberRuntimeFormatterRerunFormatter_initWithJavaLangAppendable_(CucumberRuntimeFormatterRerunFormatter *self, id<JavaLangAppendable> outArg) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->featureAndFailedLinesMapping_, new_JavaUtilHashMap_init());
  self->isStrict_ = false;
  JreStrongAssignAndConsume(&self->testCaseFinishedHandler_, new_CucumberRuntimeFormatterRerunFormatter_1_initWithCucumberRuntimeFormatterRerunFormatter_(self));
  JreStrongAssignAndConsume(&self->runFinishHandler_, new_CucumberRuntimeFormatterRerunFormatter_2_initWithCucumberRuntimeFormatterRerunFormatter_(self));
  JreStrongAssignAndConsume(&self->out_, new_CucumberApiFormatterNiceAppendable_initWithJavaLangAppendable_(outArg));
}

CucumberRuntimeFormatterRerunFormatter *new_CucumberRuntimeFormatterRerunFormatter_initWithJavaLangAppendable_(id<JavaLangAppendable> outArg) {
  J2OBJC_NEW_IMPL(CucumberRuntimeFormatterRerunFormatter, initWithJavaLangAppendable_, outArg)
}

CucumberRuntimeFormatterRerunFormatter *create_CucumberRuntimeFormatterRerunFormatter_initWithJavaLangAppendable_(id<JavaLangAppendable> outArg) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeFormatterRerunFormatter, initWithJavaLangAppendable_, outArg)
}

void CucumberRuntimeFormatterRerunFormatter_handeTestCaseFinishedWithCucumberApiEventTestCaseFinished_(CucumberRuntimeFormatterRerunFormatter *self, CucumberApiEventTestCaseFinished *event) {
  if (![((CucumberApiResult *) nil_chk(((CucumberApiEventTestCaseFinished *) nil_chk(event))->result_)) isOkWithBoolean:self->isStrict_]) {
    CucumberRuntimeFormatterRerunFormatter_recordTestFailedWithCucumberApiTestCase_(self, event->testCase_);
  }
}

void CucumberRuntimeFormatterRerunFormatter_handleTestRunFinished(CucumberRuntimeFormatterRerunFormatter *self) {
  CucumberRuntimeFormatterRerunFormatter_reportFailedTestCases(self);
  [((CucumberApiFormatterNiceAppendable *) nil_chk(self->out_)) close];
}

void CucumberRuntimeFormatterRerunFormatter_recordTestFailedWithCucumberApiTestCase_(CucumberRuntimeFormatterRerunFormatter *self, CucumberApiTestCase *testCase) {
  NSString *path = [((CucumberApiTestCase *) nil_chk(testCase)) getUri];
  JavaUtilArrayList *failedTestCases = [((id<JavaUtilMap>) nil_chk(self->featureAndFailedLinesMapping_)) getWithId:path];
  if (failedTestCases == nil) {
    failedTestCases = create_JavaUtilArrayList_init();
    [((id<JavaUtilMap>) nil_chk(self->featureAndFailedLinesMapping_)) putWithId:path withId:failedTestCases];
  }
  [failedTestCases addWithId:JavaLangInteger_valueOfWithInt_([testCase getLine])];
}

void CucumberRuntimeFormatterRerunFormatter_reportFailedTestCases(CucumberRuntimeFormatterRerunFormatter *self) {
  id<JavaUtilSet> entries = [((id<JavaUtilMap>) nil_chk(self->featureAndFailedLinesMapping_)) entrySet];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk(entries)) {
    if (![((JavaUtilArrayList *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue])) isEmpty]) {
      [((CucumberApiFormatterNiceAppendable *) nil_chk(self->out_)) appendWithJavaLangCharSequence:[entry_ getKey]];
      for (JavaLangInteger * __strong line in nil_chk([entry_ getValue])) {
        [((CucumberApiFormatterNiceAppendable *) nil_chk([self->out_ appendWithJavaLangCharSequence:@":"])) appendWithJavaLangCharSequence:[((JavaLangInteger *) nil_chk(line)) description]];
      }
      [self->out_ println];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeFormatterRerunFormatter)

@implementation CucumberRuntimeFormatterRerunFormatter_1

- (instancetype __nonnull)initWithCucumberRuntimeFormatterRerunFormatter:(CucumberRuntimeFormatterRerunFormatter *)outer$ {
  CucumberRuntimeFormatterRerunFormatter_1_initWithCucumberRuntimeFormatterRerunFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestCaseFinished *)event {
  CucumberRuntimeFormatterRerunFormatter_handeTestCaseFinishedWithCucumberApiEventTestCaseFinished_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCucumberRuntimeFormatterRerunFormatter:);
  methods[1].selector = @selector(receiveWithCucumberApiEventEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCucumberRuntimeFormatterRerunFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCucumberApiEventTestCaseFinished;", "LCucumberRuntimeFormatterRerunFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestCaseFinished;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeFormatterRerunFormatter_1 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CucumberRuntimeFormatterRerunFormatter_1;
}

@end

void CucumberRuntimeFormatterRerunFormatter_1_initWithCucumberRuntimeFormatterRerunFormatter_(CucumberRuntimeFormatterRerunFormatter_1 *self, CucumberRuntimeFormatterRerunFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CucumberRuntimeFormatterRerunFormatter_1 *new_CucumberRuntimeFormatterRerunFormatter_1_initWithCucumberRuntimeFormatterRerunFormatter_(CucumberRuntimeFormatterRerunFormatter *outer$) {
  J2OBJC_NEW_IMPL(CucumberRuntimeFormatterRerunFormatter_1, initWithCucumberRuntimeFormatterRerunFormatter_, outer$)
}

CucumberRuntimeFormatterRerunFormatter_1 *create_CucumberRuntimeFormatterRerunFormatter_1_initWithCucumberRuntimeFormatterRerunFormatter_(CucumberRuntimeFormatterRerunFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeFormatterRerunFormatter_1, initWithCucumberRuntimeFormatterRerunFormatter_, outer$)
}

@implementation CucumberRuntimeFormatterRerunFormatter_2

- (instancetype __nonnull)initWithCucumberRuntimeFormatterRerunFormatter:(CucumberRuntimeFormatterRerunFormatter *)outer$ {
  CucumberRuntimeFormatterRerunFormatter_2_initWithCucumberRuntimeFormatterRerunFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestRunFinished *)event {
  CucumberRuntimeFormatterRerunFormatter_handleTestRunFinished(this$0_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCucumberRuntimeFormatterRerunFormatter:);
  methods[1].selector = @selector(receiveWithCucumberApiEventEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCucumberRuntimeFormatterRerunFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCucumberApiEventTestRunFinished;", "LCucumberRuntimeFormatterRerunFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestRunFinished;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeFormatterRerunFormatter_2 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CucumberRuntimeFormatterRerunFormatter_2;
}

@end

void CucumberRuntimeFormatterRerunFormatter_2_initWithCucumberRuntimeFormatterRerunFormatter_(CucumberRuntimeFormatterRerunFormatter_2 *self, CucumberRuntimeFormatterRerunFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CucumberRuntimeFormatterRerunFormatter_2 *new_CucumberRuntimeFormatterRerunFormatter_2_initWithCucumberRuntimeFormatterRerunFormatter_(CucumberRuntimeFormatterRerunFormatter *outer$) {
  J2OBJC_NEW_IMPL(CucumberRuntimeFormatterRerunFormatter_2, initWithCucumberRuntimeFormatterRerunFormatter_, outer$)
}

CucumberRuntimeFormatterRerunFormatter_2 *create_CucumberRuntimeFormatterRerunFormatter_2_initWithCucumberRuntimeFormatterRerunFormatter_(CucumberRuntimeFormatterRerunFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeFormatterRerunFormatter_2, initWithCucumberRuntimeFormatterRerunFormatter_, outer$)
}
