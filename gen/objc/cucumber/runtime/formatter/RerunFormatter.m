//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/formatter/RerunFormatter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "cucumber/api/Result.h"
#include "cucumber/api/TestCase.h"
#include "cucumber/api/event/EventHandler.h"
#include "cucumber/api/event/EventPublisher.h"
#include "cucumber/api/event/TestCaseFinished.h"
#include "cucumber/api/event/TestRunFinished.h"
#include "cucumber/api/formatter/NiceAppendable.h"
#include "cucumber/runtime/formatter/RerunFormatter.h"
#include "java/lang/Appendable.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface CCBRRerunFormatter () {
 @public
  CCBNiceAppendable *out_;
  id<JavaUtilMap> featureAndFailedLinesMapping_;
  jboolean isStrict_;
  id<CCBEventHandler> testCaseFinishedHandler_;
  id<CCBEventHandler> runFinishHandler_;
}

- (void)handeTestCaseFinishedWithCCBTestCaseFinished:(CCBTestCaseFinished *)event;

- (void)handleTestRunFinished;

- (void)recordTestFailedWithCCBTestCase:(CCBTestCase *)testCase;

- (void)reportFailedTestCases;

@end

J2OBJC_FIELD_SETTER(CCBRRerunFormatter, out_, CCBNiceAppendable *)
J2OBJC_FIELD_SETTER(CCBRRerunFormatter, featureAndFailedLinesMapping_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(CCBRRerunFormatter, testCaseFinishedHandler_, id<CCBEventHandler>)
J2OBJC_FIELD_SETTER(CCBRRerunFormatter, runFinishHandler_, id<CCBEventHandler>)

__attribute__((unused)) static void CCBRRerunFormatter_handeTestCaseFinishedWithCCBTestCaseFinished_(CCBRRerunFormatter *self, CCBTestCaseFinished *event);

__attribute__((unused)) static void CCBRRerunFormatter_handleTestRunFinished(CCBRRerunFormatter *self);

__attribute__((unused)) static void CCBRRerunFormatter_recordTestFailedWithCCBTestCase_(CCBRRerunFormatter *self, CCBTestCase *testCase);

__attribute__((unused)) static void CCBRRerunFormatter_reportFailedTestCases(CCBRRerunFormatter *self);

@interface CCBRRerunFormatter_1 : NSObject < CCBEventHandler > {
 @public
  CCBRRerunFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRRerunFormatter:(CCBRRerunFormatter *)outer$;

- (void)receiveWithCCBEvent:(CCBTestCaseFinished *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRRerunFormatter_1)

__attribute__((unused)) static void CCBRRerunFormatter_1_initWithCCBRRerunFormatter_(CCBRRerunFormatter_1 *self, CCBRRerunFormatter *outer$);

__attribute__((unused)) static CCBRRerunFormatter_1 *new_CCBRRerunFormatter_1_initWithCCBRRerunFormatter_(CCBRRerunFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRRerunFormatter_1 *create_CCBRRerunFormatter_1_initWithCCBRRerunFormatter_(CCBRRerunFormatter *outer$);

@interface CCBRRerunFormatter_2 : NSObject < CCBEventHandler > {
 @public
  CCBRRerunFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRRerunFormatter:(CCBRRerunFormatter *)outer$;

- (void)receiveWithCCBEvent:(CCBTestRunFinished *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRRerunFormatter_2)

__attribute__((unused)) static void CCBRRerunFormatter_2_initWithCCBRRerunFormatter_(CCBRRerunFormatter_2 *self, CCBRRerunFormatter *outer$);

__attribute__((unused)) static CCBRRerunFormatter_2 *new_CCBRRerunFormatter_2_initWithCCBRRerunFormatter_(CCBRRerunFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRRerunFormatter_2 *create_CCBRRerunFormatter_2_initWithCCBRRerunFormatter_(CCBRRerunFormatter *outer$);

@implementation CCBRRerunFormatter

- (instancetype __nonnull)initWithJavaLangAppendable:(id<JavaLangAppendable>)outArg {
  CCBRRerunFormatter_initWithJavaLangAppendable_(self, outArg);
  return self;
}

- (void)setEventPublisherWithCCBEventPublisher:(id<CCBEventPublisher>)publisher {
  [((id<CCBEventPublisher>) nil_chk(publisher)) registerHandlerForWithIOSClass:CCBTestCaseFinished_class_() withCCBEventHandler:testCaseFinishedHandler_];
  [publisher registerHandlerForWithIOSClass:CCBTestRunFinished_class_() withCCBEventHandler:runFinishHandler_];
}

- (void)setStrictWithBoolean:(jboolean)strict {
  isStrict_ = strict;
}

- (void)handeTestCaseFinishedWithCCBTestCaseFinished:(CCBTestCaseFinished *)event {
  CCBRRerunFormatter_handeTestCaseFinishedWithCCBTestCaseFinished_(self, event);
}

- (void)handleTestRunFinished {
  CCBRRerunFormatter_handleTestRunFinished(self);
}

- (void)recordTestFailedWithCCBTestCase:(CCBTestCase *)testCase {
  CCBRRerunFormatter_recordTestFailedWithCCBTestCase_(self, testCase);
}

- (void)reportFailedTestCases {
  CCBRRerunFormatter_reportFailedTestCases(self);
}

- (void)dealloc {
  RELEASE_(out_);
  RELEASE_(featureAndFailedLinesMapping_);
  RELEASE_(testCaseFinishedHandler_);
  RELEASE_(runFinishHandler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangAppendable:);
  methods[1].selector = @selector(setEventPublisherWithCCBEventPublisher:);
  methods[2].selector = @selector(setStrictWithBoolean:);
  methods[3].selector = @selector(handeTestCaseFinishedWithCCBTestCaseFinished:);
  methods[4].selector = @selector(handleTestRunFinished);
  methods[5].selector = @selector(recordTestFailedWithCCBTestCase:);
  methods[6].selector = @selector(reportFailedTestCases);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "out_", "LCCBNiceAppendable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "featureAndFailedLinesMapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 9, -1 },
    { "isStrict_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "testCaseFinishedHandler_", "LCCBEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 10, -1 },
    { "runFinishHandler_", "LCCBEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangAppendable;", "setEventPublisher", "LCCBEventPublisher;", "setStrict", "Z", "handeTestCaseFinished", "LCCBTestCaseFinished;", "recordTestFailed", "LCCBTestCase;", "Ljava/util/Map<Ljava/lang/String;Ljava/util/ArrayList<Ljava/lang/Integer;>;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestCaseFinished;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestRunFinished;>;" };
  static const J2ObjcClassInfo _CCBRRerunFormatter = { "RerunFormatter", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x10, 7, 5, -1, -1, -1, -1, -1 };
  return &_CCBRRerunFormatter;
}

@end

void CCBRRerunFormatter_initWithJavaLangAppendable_(CCBRRerunFormatter *self, id<JavaLangAppendable> outArg) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->featureAndFailedLinesMapping_, new_JavaUtilHashMap_init());
  self->isStrict_ = false;
  JreStrongAssignAndConsume(&self->testCaseFinishedHandler_, new_CCBRRerunFormatter_1_initWithCCBRRerunFormatter_(self));
  JreStrongAssignAndConsume(&self->runFinishHandler_, new_CCBRRerunFormatter_2_initWithCCBRRerunFormatter_(self));
  JreStrongAssignAndConsume(&self->out_, new_CCBNiceAppendable_initWithJavaLangAppendable_(outArg));
}

CCBRRerunFormatter *new_CCBRRerunFormatter_initWithJavaLangAppendable_(id<JavaLangAppendable> outArg) {
  J2OBJC_NEW_IMPL(CCBRRerunFormatter, initWithJavaLangAppendable_, outArg)
}

CCBRRerunFormatter *create_CCBRRerunFormatter_initWithJavaLangAppendable_(id<JavaLangAppendable> outArg) {
  J2OBJC_CREATE_IMPL(CCBRRerunFormatter, initWithJavaLangAppendable_, outArg)
}

void CCBRRerunFormatter_handeTestCaseFinishedWithCCBTestCaseFinished_(CCBRRerunFormatter *self, CCBTestCaseFinished *event) {
  if (![((CCBResult *) nil_chk(((CCBTestCaseFinished *) nil_chk(event))->result_)) isOkWithBoolean:self->isStrict_]) {
    CCBRRerunFormatter_recordTestFailedWithCCBTestCase_(self, event->testCase_);
  }
}

void CCBRRerunFormatter_handleTestRunFinished(CCBRRerunFormatter *self) {
  CCBRRerunFormatter_reportFailedTestCases(self);
  [((CCBNiceAppendable *) nil_chk(self->out_)) close];
}

void CCBRRerunFormatter_recordTestFailedWithCCBTestCase_(CCBRRerunFormatter *self, CCBTestCase *testCase) {
  NSString *path = [((CCBTestCase *) nil_chk(testCase)) getUri];
  JavaUtilArrayList *failedTestCases = [((id<JavaUtilMap>) nil_chk(self->featureAndFailedLinesMapping_)) getWithId:path];
  if (failedTestCases == nil) {
    failedTestCases = create_JavaUtilArrayList_init();
    [((id<JavaUtilMap>) nil_chk(self->featureAndFailedLinesMapping_)) putWithId:path withId:failedTestCases];
  }
  [failedTestCases addWithId:JavaLangInteger_valueOfWithInt_([testCase getLine])];
}

void CCBRRerunFormatter_reportFailedTestCases(CCBRRerunFormatter *self) {
  id<JavaUtilSet> entries = [((id<JavaUtilMap>) nil_chk(self->featureAndFailedLinesMapping_)) entrySet];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk(entries)) {
    if (![((JavaUtilArrayList *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue])) isEmpty]) {
      [((CCBNiceAppendable *) nil_chk(self->out_)) appendWithJavaLangCharSequence:[entry_ getKey]];
      for (JavaLangInteger * __strong line in nil_chk([entry_ getValue])) {
        [((CCBNiceAppendable *) nil_chk([self->out_ appendWithJavaLangCharSequence:@":"])) appendWithJavaLangCharSequence:[((JavaLangInteger *) nil_chk(line)) description]];
      }
      [self->out_ println];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRRerunFormatter)

@implementation CCBRRerunFormatter_1

- (instancetype __nonnull)initWithCCBRRerunFormatter:(CCBRRerunFormatter *)outer$ {
  CCBRRerunFormatter_1_initWithCCBRRerunFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCCBEvent:(CCBTestCaseFinished *)event {
  CCBRRerunFormatter_handeTestCaseFinishedWithCCBTestCaseFinished_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRRerunFormatter:);
  methods[1].selector = @selector(receiveWithCCBEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRRerunFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCCBTestCaseFinished;", "LCCBRRerunFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestCaseFinished;>;" };
  static const J2ObjcClassInfo _CCBRRerunFormatter_1 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRRerunFormatter_1;
}

@end

void CCBRRerunFormatter_1_initWithCCBRRerunFormatter_(CCBRRerunFormatter_1 *self, CCBRRerunFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRRerunFormatter_1 *new_CCBRRerunFormatter_1_initWithCCBRRerunFormatter_(CCBRRerunFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRRerunFormatter_1, initWithCCBRRerunFormatter_, outer$)
}

CCBRRerunFormatter_1 *create_CCBRRerunFormatter_1_initWithCCBRRerunFormatter_(CCBRRerunFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRRerunFormatter_1, initWithCCBRRerunFormatter_, outer$)
}

@implementation CCBRRerunFormatter_2

- (instancetype __nonnull)initWithCCBRRerunFormatter:(CCBRRerunFormatter *)outer$ {
  CCBRRerunFormatter_2_initWithCCBRRerunFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCCBEvent:(CCBTestRunFinished *)event {
  CCBRRerunFormatter_handleTestRunFinished(this$0_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRRerunFormatter:);
  methods[1].selector = @selector(receiveWithCCBEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRRerunFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCCBTestRunFinished;", "LCCBRRerunFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestRunFinished;>;" };
  static const J2ObjcClassInfo _CCBRRerunFormatter_2 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRRerunFormatter_2;
}

@end

void CCBRRerunFormatter_2_initWithCCBRRerunFormatter_(CCBRRerunFormatter_2 *self, CCBRRerunFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRRerunFormatter_2 *new_CCBRRerunFormatter_2_initWithCCBRRerunFormatter_(CCBRRerunFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRRerunFormatter_2, initWithCCBRRerunFormatter_, outer$)
}

CCBRRerunFormatter_2 *create_CCBRRerunFormatter_2_initWithCCBRRerunFormatter_(CCBRRerunFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRRerunFormatter_2, initWithCCBRRerunFormatter_, outer$)
}
