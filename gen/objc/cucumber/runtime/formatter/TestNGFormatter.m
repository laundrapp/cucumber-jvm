//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/formatter/TestNGFormatter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "cucumber/api/Result.h"
#include "cucumber/api/TestCase.h"
#include "cucumber/api/TestStep.h"
#include "cucumber/api/event/EventHandler.h"
#include "cucumber/api/event/EventPublisher.h"
#include "cucumber/api/event/TestCaseFinished.h"
#include "cucumber/api/event/TestCaseStarted.h"
#include "cucumber/api/event/TestRunFinished.h"
#include "cucumber/api/event/TestSourceRead.h"
#include "cucumber/api/event/TestStepFinished.h"
#include "cucumber/runtime/CucumberException.h"
#include "cucumber/runtime/formatter/TestNGFormatter.h"
#include "cucumber/runtime/formatter/TestSourcesModel.h"
#include "cucumber/runtime/io/URLOutputStream.h"
#include "cucumber/runtime/io/UTF8OutputStreamWriter.h"
#include "gherkin/ast/Feature.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/io/PrintWriter.h"
#include "java/io/StringWriter.h"
#include "java/io/Writer.h"
#include "java/lang/Long.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/net/URL.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "javax/xml/parsers/DocumentBuilder.h"
#include "javax/xml/parsers/DocumentBuilderFactory.h"
#include "javax/xml/parsers/ParserConfigurationException.h"
#include "javax/xml/transform/OutputKeys.h"
#include "javax/xml/transform/Transformer.h"
#include "javax/xml/transform/TransformerException.h"
#include "javax/xml/transform/TransformerFactory.h"
#include "javax/xml/transform/dom/DOMSource.h"
#include "javax/xml/transform/stream/StreamResult.h"
#include "org/w3c/dom/CDATASection.h"
#include "org/w3c/dom/Document.h"
#include "org/w3c/dom/Element.h"
#include "org/w3c/dom/NamedNodeMap.h"
#include "org/w3c/dom/Node.h"
#include "org/w3c/dom/NodeList.h"

@class CCBRTestNGFormatter_TestMethod;

@interface CCBRTestNGFormatter () {
 @public
  JavaIoWriter *writer_;
  id<OrgW3cDomDocument> document_;
  id<OrgW3cDomElement> results_;
  id<OrgW3cDomElement> suite_;
  id<OrgW3cDomElement> test_;
  id<OrgW3cDomElement> clazz_;
  id<OrgW3cDomElement> root_;
  CCBRTestNGFormatter_TestMethod *testMethod_;
  id<CCBEventHandler> testSourceReadHandler_;
  id<CCBEventHandler> caseStartedHandler_;
  id<CCBEventHandler> stepFinishedHandler_;
  id<CCBEventHandler> caseFinishedHandler_;
  id<CCBEventHandler> runFinishedHandler_;
}

- (void)handleTestSourceReadWithCCBTestSourceRead:(CCBTestSourceRead *)event;

- (void)handleTestCaseStartedWithCCBTestCaseStarted:(CCBTestCaseStarted *)event;

- (void)handleTestStepFinishedWithCCBTestStepFinished:(CCBTestStepFinished *)event;

- (void)handleTestCaseFinished;

- (void)finishReport;

- (jint)getElementsCountByAttributeWithOrgW3cDomNode:(id<OrgW3cDomNode>)node
                                        withNSString:(NSString *)attributeName
                                        withNSString:(NSString *)attributeValue;

- (NSString *)getTotalDurationWithOrgW3cDomNodeList:(id<OrgW3cDomNodeList>)testCaseNodes;

+ (void)closeQuietlyWithJavaIoCloseable:(id<JavaIoCloseable>)outArg;

@end

J2OBJC_FIELD_SETTER(CCBRTestNGFormatter, writer_, JavaIoWriter *)
J2OBJC_FIELD_SETTER(CCBRTestNGFormatter, document_, id<OrgW3cDomDocument>)
J2OBJC_FIELD_SETTER(CCBRTestNGFormatter, results_, id<OrgW3cDomElement>)
J2OBJC_FIELD_SETTER(CCBRTestNGFormatter, suite_, id<OrgW3cDomElement>)
J2OBJC_FIELD_SETTER(CCBRTestNGFormatter, test_, id<OrgW3cDomElement>)
J2OBJC_FIELD_SETTER(CCBRTestNGFormatter, clazz_, id<OrgW3cDomElement>)
J2OBJC_FIELD_SETTER(CCBRTestNGFormatter, root_, id<OrgW3cDomElement>)
J2OBJC_FIELD_SETTER(CCBRTestNGFormatter, testMethod_, CCBRTestNGFormatter_TestMethod *)
J2OBJC_FIELD_SETTER(CCBRTestNGFormatter, testSourceReadHandler_, id<CCBEventHandler>)
J2OBJC_FIELD_SETTER(CCBRTestNGFormatter, caseStartedHandler_, id<CCBEventHandler>)
J2OBJC_FIELD_SETTER(CCBRTestNGFormatter, stepFinishedHandler_, id<CCBEventHandler>)
J2OBJC_FIELD_SETTER(CCBRTestNGFormatter, caseFinishedHandler_, id<CCBEventHandler>)
J2OBJC_FIELD_SETTER(CCBRTestNGFormatter, runFinishedHandler_, id<CCBEventHandler>)

inline JavaTextSimpleDateFormat *CCBRTestNGFormatter_get_DATE_FORMAT(void);
static JavaTextSimpleDateFormat *CCBRTestNGFormatter_DATE_FORMAT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CCBRTestNGFormatter, DATE_FORMAT, JavaTextSimpleDateFormat *)

__attribute__((unused)) static void CCBRTestNGFormatter_handleTestSourceReadWithCCBTestSourceRead_(CCBRTestNGFormatter *self, CCBTestSourceRead *event);

__attribute__((unused)) static void CCBRTestNGFormatter_handleTestCaseStartedWithCCBTestCaseStarted_(CCBRTestNGFormatter *self, CCBTestCaseStarted *event);

__attribute__((unused)) static void CCBRTestNGFormatter_handleTestStepFinishedWithCCBTestStepFinished_(CCBRTestNGFormatter *self, CCBTestStepFinished *event);

__attribute__((unused)) static void CCBRTestNGFormatter_handleTestCaseFinished(CCBRTestNGFormatter *self);

__attribute__((unused)) static void CCBRTestNGFormatter_finishReport(CCBRTestNGFormatter *self);

__attribute__((unused)) static jint CCBRTestNGFormatter_getElementsCountByAttributeWithOrgW3cDomNode_withNSString_withNSString_(CCBRTestNGFormatter *self, id<OrgW3cDomNode> node, NSString *attributeName, NSString *attributeValue);

__attribute__((unused)) static NSString *CCBRTestNGFormatter_getTotalDurationWithOrgW3cDomNodeList_(CCBRTestNGFormatter *self, id<OrgW3cDomNodeList> testCaseNodes);

__attribute__((unused)) static void CCBRTestNGFormatter_closeQuietlyWithJavaIoCloseable_(id<JavaIoCloseable> outArg);

@interface CCBRTestNGFormatter_1 : NSObject < CCBEventHandler > {
 @public
  CCBRTestNGFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRTestNGFormatter:(CCBRTestNGFormatter *)outer$;

- (void)receiveWithCCBEvent:(CCBTestSourceRead *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRTestNGFormatter_1)

__attribute__((unused)) static void CCBRTestNGFormatter_1_initWithCCBRTestNGFormatter_(CCBRTestNGFormatter_1 *self, CCBRTestNGFormatter *outer$);

__attribute__((unused)) static CCBRTestNGFormatter_1 *new_CCBRTestNGFormatter_1_initWithCCBRTestNGFormatter_(CCBRTestNGFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRTestNGFormatter_1 *create_CCBRTestNGFormatter_1_initWithCCBRTestNGFormatter_(CCBRTestNGFormatter *outer$);

@interface CCBRTestNGFormatter_2 : NSObject < CCBEventHandler > {
 @public
  CCBRTestNGFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRTestNGFormatter:(CCBRTestNGFormatter *)outer$;

- (void)receiveWithCCBEvent:(CCBTestCaseStarted *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRTestNGFormatter_2)

__attribute__((unused)) static void CCBRTestNGFormatter_2_initWithCCBRTestNGFormatter_(CCBRTestNGFormatter_2 *self, CCBRTestNGFormatter *outer$);

__attribute__((unused)) static CCBRTestNGFormatter_2 *new_CCBRTestNGFormatter_2_initWithCCBRTestNGFormatter_(CCBRTestNGFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRTestNGFormatter_2 *create_CCBRTestNGFormatter_2_initWithCCBRTestNGFormatter_(CCBRTestNGFormatter *outer$);

@interface CCBRTestNGFormatter_3 : NSObject < CCBEventHandler > {
 @public
  CCBRTestNGFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRTestNGFormatter:(CCBRTestNGFormatter *)outer$;

- (void)receiveWithCCBEvent:(CCBTestStepFinished *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRTestNGFormatter_3)

__attribute__((unused)) static void CCBRTestNGFormatter_3_initWithCCBRTestNGFormatter_(CCBRTestNGFormatter_3 *self, CCBRTestNGFormatter *outer$);

__attribute__((unused)) static CCBRTestNGFormatter_3 *new_CCBRTestNGFormatter_3_initWithCCBRTestNGFormatter_(CCBRTestNGFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRTestNGFormatter_3 *create_CCBRTestNGFormatter_3_initWithCCBRTestNGFormatter_(CCBRTestNGFormatter *outer$);

@interface CCBRTestNGFormatter_4 : NSObject < CCBEventHandler > {
 @public
  CCBRTestNGFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRTestNGFormatter:(CCBRTestNGFormatter *)outer$;

- (void)receiveWithCCBEvent:(CCBTestCaseFinished *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRTestNGFormatter_4)

__attribute__((unused)) static void CCBRTestNGFormatter_4_initWithCCBRTestNGFormatter_(CCBRTestNGFormatter_4 *self, CCBRTestNGFormatter *outer$);

__attribute__((unused)) static CCBRTestNGFormatter_4 *new_CCBRTestNGFormatter_4_initWithCCBRTestNGFormatter_(CCBRTestNGFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRTestNGFormatter_4 *create_CCBRTestNGFormatter_4_initWithCCBRTestNGFormatter_(CCBRTestNGFormatter *outer$);

@interface CCBRTestNGFormatter_5 : NSObject < CCBEventHandler > {
 @public
  CCBRTestNGFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRTestNGFormatter:(CCBRTestNGFormatter *)outer$;

- (void)receiveWithCCBEvent:(CCBTestRunFinished *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRTestNGFormatter_5)

__attribute__((unused)) static void CCBRTestNGFormatter_5_initWithCCBRTestNGFormatter_(CCBRTestNGFormatter_5 *self, CCBRTestNGFormatter *outer$);

__attribute__((unused)) static CCBRTestNGFormatter_5 *new_CCBRTestNGFormatter_5_initWithCCBRTestNGFormatter_(CCBRTestNGFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRTestNGFormatter_5 *create_CCBRTestNGFormatter_5_initWithCCBRTestNGFormatter_(CCBRTestNGFormatter *outer$);

@interface CCBRTestNGFormatter_TestMethod : NSObject {
 @public
  id<JavaUtilList> steps_;
  id<JavaUtilList> results_;
  id<JavaUtilList> hooks_;
  CCBTestCase *scenario_;
}

- (instancetype __nonnull)initWithCCBTestCase:(CCBTestCase *)scenario;

- (void)startWithOrgW3cDomElement:(id<OrgW3cDomElement>)element;

- (NSString *)calculateElementNameWithCCBTestCase:(CCBTestCase *)testCase;

- (void)finishWithOrgW3cDomDocument:(id<OrgW3cDomDocument>)doc
               withOrgW3cDomElement:(id<OrgW3cDomElement>)element;

- (NSString *)calculateTotalDurationString;

- (void)addStepAndResultListingWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

- (id<OrgW3cDomElement>)createExceptionWithOrgW3cDomDocument:(id<OrgW3cDomDocument>)doc
                                                withNSString:(NSString *)clazz
                                                withNSString:(NSString *)message
                                                withNSString:(NSString *)stacktrace;

@end

J2OBJC_STATIC_INIT(CCBRTestNGFormatter_TestMethod)

J2OBJC_FIELD_SETTER(CCBRTestNGFormatter_TestMethod, steps_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CCBRTestNGFormatter_TestMethod, results_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CCBRTestNGFormatter_TestMethod, hooks_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CCBRTestNGFormatter_TestMethod, scenario_, CCBTestCase *)

inline NSString *CCBRTestNGFormatter_TestMethod_get_currentFeatureFile(void);
inline NSString *CCBRTestNGFormatter_TestMethod_set_currentFeatureFile(NSString *value);
static NSString *CCBRTestNGFormatter_TestMethod_currentFeatureFile;
J2OBJC_STATIC_FIELD_OBJ(CCBRTestNGFormatter_TestMethod, currentFeatureFile, NSString *)

inline jboolean CCBRTestNGFormatter_TestMethod_get_treatSkippedAsFailure(void);
inline jboolean CCBRTestNGFormatter_TestMethod_set_treatSkippedAsFailure(jboolean value);
inline jboolean *CCBRTestNGFormatter_TestMethod_getRef_treatSkippedAsFailure(void);
static jboolean CCBRTestNGFormatter_TestMethod_treatSkippedAsFailure = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(CCBRTestNGFormatter_TestMethod, treatSkippedAsFailure, jboolean)

inline NSString *CCBRTestNGFormatter_TestMethod_get_previousTestCaseName(void);
inline NSString *CCBRTestNGFormatter_TestMethod_set_previousTestCaseName(NSString *value);
static NSString *CCBRTestNGFormatter_TestMethod_previousTestCaseName;
J2OBJC_STATIC_FIELD_OBJ(CCBRTestNGFormatter_TestMethod, previousTestCaseName, NSString *)

inline jint CCBRTestNGFormatter_TestMethod_get_exampleNumber(void);
inline jint CCBRTestNGFormatter_TestMethod_set_exampleNumber(jint value);
inline jint *CCBRTestNGFormatter_TestMethod_getRef_exampleNumber(void);
static jint CCBRTestNGFormatter_TestMethod_exampleNumber;
J2OBJC_STATIC_FIELD_PRIMITIVE(CCBRTestNGFormatter_TestMethod, exampleNumber, jint)

inline CCBRTestSourcesModel *CCBRTestNGFormatter_TestMethod_get_testSources(void);
static CCBRTestSourcesModel *CCBRTestNGFormatter_TestMethod_testSources;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CCBRTestNGFormatter_TestMethod, testSources, CCBRTestSourcesModel *)

__attribute__((unused)) static void CCBRTestNGFormatter_TestMethod_initWithCCBTestCase_(CCBRTestNGFormatter_TestMethod *self, CCBTestCase *scenario);

__attribute__((unused)) static CCBRTestNGFormatter_TestMethod *new_CCBRTestNGFormatter_TestMethod_initWithCCBTestCase_(CCBTestCase *scenario) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRTestNGFormatter_TestMethod *create_CCBRTestNGFormatter_TestMethod_initWithCCBTestCase_(CCBTestCase *scenario);

__attribute__((unused)) static void CCBRTestNGFormatter_TestMethod_startWithOrgW3cDomElement_(CCBRTestNGFormatter_TestMethod *self, id<OrgW3cDomElement> element);

__attribute__((unused)) static NSString *CCBRTestNGFormatter_TestMethod_calculateElementNameWithCCBTestCase_(CCBRTestNGFormatter_TestMethod *self, CCBTestCase *testCase);

__attribute__((unused)) static NSString *CCBRTestNGFormatter_TestMethod_calculateTotalDurationString(CCBRTestNGFormatter_TestMethod *self);

__attribute__((unused)) static void CCBRTestNGFormatter_TestMethod_addStepAndResultListingWithJavaLangStringBuilder_(CCBRTestNGFormatter_TestMethod *self, JavaLangStringBuilder *sb);

__attribute__((unused)) static id<OrgW3cDomElement> CCBRTestNGFormatter_TestMethod_createExceptionWithOrgW3cDomDocument_withNSString_withNSString_withNSString_(CCBRTestNGFormatter_TestMethod *self, id<OrgW3cDomDocument> doc, NSString *clazz, NSString *message, NSString *stacktrace);

J2OBJC_TYPE_LITERAL_HEADER(CCBRTestNGFormatter_TestMethod)

J2OBJC_INITIALIZED_DEFN(CCBRTestNGFormatter)

@implementation CCBRTestNGFormatter

- (instancetype __nonnull)initWithJavaNetURL:(JavaNetURL *)url {
  CCBRTestNGFormatter_initWithJavaNetURL_(self, url);
  return self;
}

- (void)setEventPublisherWithCCBEventPublisher:(id<CCBEventPublisher>)publisher {
  [((id<CCBEventPublisher>) nil_chk(publisher)) registerHandlerForWithIOSClass:CCBTestSourceRead_class_() withCCBEventHandler:testSourceReadHandler_];
  [publisher registerHandlerForWithIOSClass:CCBTestCaseStarted_class_() withCCBEventHandler:caseStartedHandler_];
  [publisher registerHandlerForWithIOSClass:CCBTestCaseFinished_class_() withCCBEventHandler:caseFinishedHandler_];
  [publisher registerHandlerForWithIOSClass:CCBTestStepFinished_class_() withCCBEventHandler:stepFinishedHandler_];
  [publisher registerHandlerForWithIOSClass:CCBTestRunFinished_class_() withCCBEventHandler:runFinishedHandler_];
}

- (void)setStrictWithBoolean:(jboolean)strict {
  *JreLoadStaticRef(CCBRTestNGFormatter_TestMethod, treatSkippedAsFailure) = strict;
}

- (void)handleTestSourceReadWithCCBTestSourceRead:(CCBTestSourceRead *)event {
  CCBRTestNGFormatter_handleTestSourceReadWithCCBTestSourceRead_(self, event);
}

- (void)handleTestCaseStartedWithCCBTestCaseStarted:(CCBTestCaseStarted *)event {
  CCBRTestNGFormatter_handleTestCaseStartedWithCCBTestCaseStarted_(self, event);
}

- (void)handleTestStepFinishedWithCCBTestStepFinished:(CCBTestStepFinished *)event {
  CCBRTestNGFormatter_handleTestStepFinishedWithCCBTestStepFinished_(self, event);
}

- (void)handleTestCaseFinished {
  CCBRTestNGFormatter_handleTestCaseFinished(self);
}

- (void)finishReport {
  CCBRTestNGFormatter_finishReport(self);
}

- (jint)getElementsCountByAttributeWithOrgW3cDomNode:(id<OrgW3cDomNode>)node
                                        withNSString:(NSString *)attributeName
                                        withNSString:(NSString *)attributeValue {
  return CCBRTestNGFormatter_getElementsCountByAttributeWithOrgW3cDomNode_withNSString_withNSString_(self, node, attributeName, attributeValue);
}

- (NSString *)getTotalDurationWithOrgW3cDomNodeList:(id<OrgW3cDomNodeList>)testCaseNodes {
  return CCBRTestNGFormatter_getTotalDurationWithOrgW3cDomNodeList_(self, testCaseNodes);
}

+ (void)closeQuietlyWithJavaIoCloseable:(id<JavaIoCloseable>)outArg {
  CCBRTestNGFormatter_closeQuietlyWithJavaIoCloseable_(outArg);
}

- (void)dealloc {
  RELEASE_(writer_);
  RELEASE_(document_);
  RELEASE_(results_);
  RELEASE_(suite_);
  RELEASE_(test_);
  RELEASE_(clazz_);
  RELEASE_(root_);
  RELEASE_(testMethod_);
  RELEASE_(testSourceReadHandler_);
  RELEASE_(caseStartedHandler_);
  RELEASE_(stepFinishedHandler_);
  RELEASE_(caseFinishedHandler_);
  RELEASE_(runFinishedHandler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 16, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaNetURL:);
  methods[1].selector = @selector(setEventPublisherWithCCBEventPublisher:);
  methods[2].selector = @selector(setStrictWithBoolean:);
  methods[3].selector = @selector(handleTestSourceReadWithCCBTestSourceRead:);
  methods[4].selector = @selector(handleTestCaseStartedWithCCBTestCaseStarted:);
  methods[5].selector = @selector(handleTestStepFinishedWithCCBTestStepFinished:);
  methods[6].selector = @selector(handleTestCaseFinished);
  methods[7].selector = @selector(finishReport);
  methods[8].selector = @selector(getElementsCountByAttributeWithOrgW3cDomNode:withNSString:withNSString:);
  methods[9].selector = @selector(getTotalDurationWithOrgW3cDomNodeList:);
  methods[10].selector = @selector(closeQuietlyWithJavaIoCloseable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DATE_FORMAT", "LJavaTextSimpleDateFormat;", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "writer_", "LJavaIoWriter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "document_", "LOrgW3cDomDocument;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "results_", "LOrgW3cDomElement;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "suite_", "LOrgW3cDomElement;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "test_", "LOrgW3cDomElement;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "clazz_", "LOrgW3cDomElement;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "root_", "LOrgW3cDomElement;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "testMethod_", "LCCBRTestNGFormatter_TestMethod;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "testSourceReadHandler_", "LCCBEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 19, -1 },
    { "caseStartedHandler_", "LCCBEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 20, -1 },
    { "stepFinishedHandler_", "LCCBEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 21, -1 },
    { "caseFinishedHandler_", "LCCBEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 22, -1 },
    { "runFinishedHandler_", "LCCBEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 23, -1 },
  };
  static const void *ptrTable[] = { "LJavaNetURL;", "LJavaIoIOException;", "setEventPublisher", "LCCBEventPublisher;", "setStrict", "Z", "handleTestSourceRead", "LCCBTestSourceRead;", "handleTestCaseStarted", "LCCBTestCaseStarted;", "handleTestStepFinished", "LCCBTestStepFinished;", "getElementsCountByAttribute", "LOrgW3cDomNode;LNSString;LNSString;", "getTotalDuration", "LOrgW3cDomNodeList;", "closeQuietly", "LJavaIoCloseable;", &CCBRTestNGFormatter_DATE_FORMAT, "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestSourceRead;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestCaseStarted;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestStepFinished;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestCaseFinished;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestRunFinished;>;", "LCCBRTestNGFormatter_TestMethod;" };
  static const J2ObjcClassInfo _CCBRTestNGFormatter = { "TestNGFormatter", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x0, 11, 14, -1, 24, -1, -1, -1 };
  return &_CCBRTestNGFormatter;
}

+ (void)initialize {
  if (self == [CCBRTestNGFormatter class]) {
    JreStrongAssignAndConsume(&CCBRTestNGFormatter_DATE_FORMAT, new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyy-MM-dd'T'HH:mm:ss'Z'"));
    J2OBJC_SET_INITIALIZED(CCBRTestNGFormatter)
  }
}

@end

void CCBRTestNGFormatter_initWithJavaNetURL_(CCBRTestNGFormatter *self, JavaNetURL *url) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->testSourceReadHandler_, new_CCBRTestNGFormatter_1_initWithCCBRTestNGFormatter_(self));
  JreStrongAssignAndConsume(&self->caseStartedHandler_, new_CCBRTestNGFormatter_2_initWithCCBRTestNGFormatter_(self));
  JreStrongAssignAndConsume(&self->stepFinishedHandler_, new_CCBRTestNGFormatter_3_initWithCCBRTestNGFormatter_(self));
  JreStrongAssignAndConsume(&self->caseFinishedHandler_, new_CCBRTestNGFormatter_4_initWithCCBRTestNGFormatter_(self));
  JreStrongAssignAndConsume(&self->runFinishedHandler_, new_CCBRTestNGFormatter_5_initWithCCBRTestNGFormatter_(self));
  JreStrongAssignAndConsume(&self->writer_, new_CCBRUTF8OutputStreamWriter_initWithJavaIoOutputStream_(create_CCBRURLOutputStream_initWithJavaNetURL_(url)));
  *JreLoadStaticRef(CCBRTestNGFormatter_TestMethod, treatSkippedAsFailure) = false;
  JreStrongAssign(JreLoadStaticRef(CCBRTestNGFormatter_TestMethod, currentFeatureFile), nil);
  @try {
    JreStrongAssign(&self->document_, [((JavaxXmlParsersDocumentBuilder *) nil_chk([((JavaxXmlParsersDocumentBuilderFactory *) nil_chk(JavaxXmlParsersDocumentBuilderFactory_newInstance())) newDocumentBuilder])) newDocument]);
    JreStrongAssign(&self->results_, [((id<OrgW3cDomDocument>) nil_chk(self->document_)) createElementWithNSString:@"testng-results"]);
    JreStrongAssign(&self->suite_, [self->document_ createElementWithNSString:@"suite"]);
    JreStrongAssign(&self->test_, [self->document_ createElementWithNSString:@"test"]);
    [((id<OrgW3cDomElement>) nil_chk(self->suite_)) appendChildWithOrgW3cDomNode:self->test_];
    [((id<OrgW3cDomElement>) nil_chk(self->results_)) appendChildWithOrgW3cDomNode:self->suite_];
    [self->document_ appendChildWithOrgW3cDomNode:self->results_];
  }
  @catch (JavaxXmlParsersParserConfigurationException *e) {
    @throw create_CCBRCucumberException_initWithNSString_withJavaLangThrowable_(@"Error initializing DocumentBuilder.", e);
  }
}

CCBRTestNGFormatter *new_CCBRTestNGFormatter_initWithJavaNetURL_(JavaNetURL *url) {
  J2OBJC_NEW_IMPL(CCBRTestNGFormatter, initWithJavaNetURL_, url)
}

CCBRTestNGFormatter *create_CCBRTestNGFormatter_initWithJavaNetURL_(JavaNetURL *url) {
  J2OBJC_CREATE_IMPL(CCBRTestNGFormatter, initWithJavaNetURL_, url)
}

void CCBRTestNGFormatter_handleTestSourceReadWithCCBTestSourceRead_(CCBRTestNGFormatter *self, CCBTestSourceRead *event) {
  [((CCBRTestSourcesModel *) nil_chk(JreLoadStatic(CCBRTestNGFormatter_TestMethod, testSources))) addTestSourceReadEventWithNSString:((CCBTestSourceRead *) nil_chk(event))->uri_ withCCBTestSourceRead:event];
}

void CCBRTestNGFormatter_handleTestCaseStartedWithCCBTestCaseStarted_(CCBRTestNGFormatter *self, CCBTestCaseStarted *event) {
  if (JreLoadStatic(CCBRTestNGFormatter_TestMethod, currentFeatureFile) == nil || ![JreLoadStatic(CCBRTestNGFormatter_TestMethod, currentFeatureFile) isEqual:[((CCBTestCase *) nil_chk(((CCBTestCaseStarted *) nil_chk(event))->testCase_)) getUri]]) {
    JreStrongAssign(JreLoadStaticRef(CCBRTestNGFormatter_TestMethod, currentFeatureFile), [((CCBTestCase *) nil_chk(((CCBTestCaseStarted *) nil_chk(event))->testCase_)) getUri]);
    JreStrongAssign(JreLoadStaticRef(CCBRTestNGFormatter_TestMethod, previousTestCaseName), @"");
    *JreLoadStaticRef(CCBRTestNGFormatter_TestMethod, exampleNumber) = 1;
    JreStrongAssign(&self->clazz_, [((id<OrgW3cDomDocument>) nil_chk(self->document_)) createElementWithNSString:@"class"]);
    [((id<OrgW3cDomElement>) nil_chk(self->clazz_)) setAttributeWithNSString:@"name" withNSString:[((GherkinAstFeature *) nil_chk([((CCBRTestSourcesModel *) nil_chk(JreLoadStatic(CCBRTestNGFormatter_TestMethod, testSources))) getFeatureWithNSString:[event->testCase_ getUri]])) getName]];
    [((id<OrgW3cDomElement>) nil_chk(self->test_)) appendChildWithOrgW3cDomNode:self->clazz_];
  }
  JreStrongAssign(&self->root_, [((id<OrgW3cDomDocument>) nil_chk(self->document_)) createElementWithNSString:@"test-method"]);
  [((id<OrgW3cDomElement>) nil_chk(self->clazz_)) appendChildWithOrgW3cDomNode:self->root_];
  JreStrongAssignAndConsume(&self->testMethod_, new_CCBRTestNGFormatter_TestMethod_initWithCCBTestCase_(((CCBTestCaseStarted *) nil_chk(event))->testCase_));
  CCBRTestNGFormatter_TestMethod_startWithOrgW3cDomElement_(self->testMethod_, self->root_);
}

void CCBRTestNGFormatter_handleTestStepFinishedWithCCBTestStepFinished_(CCBRTestNGFormatter *self, CCBTestStepFinished *event) {
  if (![((CCBTestStep *) nil_chk(((CCBTestStepFinished *) nil_chk(event))->testStep_)) isHook]) {
    [((id<JavaUtilList>) nil_chk(((CCBRTestNGFormatter_TestMethod *) nil_chk(self->testMethod_))->steps_)) addWithId:event->testStep_];
    [((id<JavaUtilList>) nil_chk(((CCBRTestNGFormatter_TestMethod *) nil_chk(self->testMethod_))->results_)) addWithId:event->result_];
  }
  else {
    [((id<JavaUtilList>) nil_chk(((CCBRTestNGFormatter_TestMethod *) nil_chk(self->testMethod_))->hooks_)) addWithId:event->result_];
  }
}

void CCBRTestNGFormatter_handleTestCaseFinished(CCBRTestNGFormatter *self) {
  [((CCBRTestNGFormatter_TestMethod *) nil_chk(self->testMethod_)) finishWithOrgW3cDomDocument:self->document_ withOrgW3cDomElement:self->root_];
}

void CCBRTestNGFormatter_finishReport(CCBRTestNGFormatter *self) {
  @try {
    [((id<OrgW3cDomElement>) nil_chk(self->results_)) setAttributeWithNSString:@"total" withNSString:NSString_java_valueOfInt_(CCBRTestNGFormatter_getElementsCountByAttributeWithOrgW3cDomNode_withNSString_withNSString_(self, self->suite_, @"status", @".*"))];
    [self->results_ setAttributeWithNSString:@"passed" withNSString:NSString_java_valueOfInt_(CCBRTestNGFormatter_getElementsCountByAttributeWithOrgW3cDomNode_withNSString_withNSString_(self, self->suite_, @"status", @"PASS"))];
    [self->results_ setAttributeWithNSString:@"failed" withNSString:NSString_java_valueOfInt_(CCBRTestNGFormatter_getElementsCountByAttributeWithOrgW3cDomNode_withNSString_withNSString_(self, self->suite_, @"status", @"FAIL"))];
    [self->results_ setAttributeWithNSString:@"skipped" withNSString:NSString_java_valueOfInt_(CCBRTestNGFormatter_getElementsCountByAttributeWithOrgW3cDomNode_withNSString_withNSString_(self, self->suite_, @"status", @"SKIP"))];
    [((id<OrgW3cDomElement>) nil_chk(self->suite_)) setAttributeWithNSString:@"name" withNSString:[CCBRTestNGFormatter_class_() getName]];
    [self->suite_ setAttributeWithNSString:@"duration-ms" withNSString:CCBRTestNGFormatter_getTotalDurationWithOrgW3cDomNodeList_(self, [self->suite_ getElementsByTagNameWithNSString:@"test-method"])];
    [((id<OrgW3cDomElement>) nil_chk(self->test_)) setAttributeWithNSString:@"name" withNSString:[CCBRTestNGFormatter_class_() getName]];
    [self->test_ setAttributeWithNSString:@"duration-ms" withNSString:CCBRTestNGFormatter_getTotalDurationWithOrgW3cDomNodeList_(self, [self->suite_ getElementsByTagNameWithNSString:@"test-method"])];
    JavaxXmlTransformTransformer *transformer = [((JavaxXmlTransformTransformerFactory *) nil_chk(JavaxXmlTransformTransformerFactory_newInstance())) newTransformer];
    [((JavaxXmlTransformTransformer *) nil_chk(transformer)) setOutputPropertyWithNSString:JavaxXmlTransformOutputKeys_INDENT withNSString:@"yes"];
    JavaxXmlTransformStreamStreamResult *streamResult = create_JavaxXmlTransformStreamStreamResult_initWithJavaIoWriter_(self->writer_);
    JavaxXmlTransformDomDOMSource *domSource = create_JavaxXmlTransformDomDOMSource_initWithOrgW3cDomNode_(self->document_);
    [transformer transformWithJavaxXmlTransformSource:domSource withJavaxXmlTransformResult:streamResult];
    CCBRTestNGFormatter_closeQuietlyWithJavaIoCloseable_(self->writer_);
  }
  @catch (JavaxXmlTransformTransformerException *e) {
    @throw create_CCBRCucumberException_initWithNSString_withJavaLangThrowable_(@"Error transforming report.", e);
  }
}

jint CCBRTestNGFormatter_getElementsCountByAttributeWithOrgW3cDomNode_withNSString_withNSString_(CCBRTestNGFormatter *self, id<OrgW3cDomNode> node, NSString *attributeName, NSString *attributeValue) {
  jint count = 0;
  for (jint i = 0; i < [((id<OrgW3cDomNodeList>) nil_chk([((id<OrgW3cDomNode>) nil_chk(node)) getChildNodes])) getLength]; i++) {
    count += CCBRTestNGFormatter_getElementsCountByAttributeWithOrgW3cDomNode_withNSString_withNSString_(self, [((id<OrgW3cDomNodeList>) nil_chk([node getChildNodes])) itemWithInt:i], attributeName, attributeValue);
  }
  id<OrgW3cDomNamedNodeMap> attributes = [node getAttributes];
  if (attributes != nil) {
    id<OrgW3cDomNode> namedItem = [attributes getNamedItemWithNSString:attributeName];
    if (namedItem != nil && [((NSString *) nil_chk([namedItem getNodeValue])) java_matches:attributeValue]) {
      count++;
    }
  }
  return count;
}

NSString *CCBRTestNGFormatter_getTotalDurationWithOrgW3cDomNodeList_(CCBRTestNGFormatter *self, id<OrgW3cDomNodeList> testCaseNodes) {
  jlong totalDuration = 0;
  for (jint i = 0; i < [((id<OrgW3cDomNodeList>) nil_chk(testCaseNodes)) getLength]; i++) {
    @try {
      NSString *duration = [((id<OrgW3cDomNode>) nil_chk([((id<OrgW3cDomNamedNodeMap>) nil_chk([((id<OrgW3cDomNode>) nil_chk([testCaseNodes itemWithInt:i])) getAttributes])) getNamedItemWithNSString:@"duration-ms"])) getNodeValue];
      totalDuration += JavaLangLong_parseLongWithNSString_(duration);
    }
    @catch (JavaLangNumberFormatException *e) {
      @throw create_CCBRCucumberException_initWithJavaLangThrowable_(e);
    }
    @catch (JavaLangNullPointerException *e) {
      @throw create_CCBRCucumberException_initWithJavaLangThrowable_(e);
    }
  }
  return NSString_java_valueOfLong_(totalDuration);
}

void CCBRTestNGFormatter_closeQuietlyWithJavaIoCloseable_(id<JavaIoCloseable> outArg) {
  CCBRTestNGFormatter_initialize();
  @try {
    [((id<JavaIoCloseable>) nil_chk(outArg)) close];
  }
  @catch (JavaIoIOException *ignored) {
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRTestNGFormatter)

@implementation CCBRTestNGFormatter_1

- (instancetype __nonnull)initWithCCBRTestNGFormatter:(CCBRTestNGFormatter *)outer$ {
  CCBRTestNGFormatter_1_initWithCCBRTestNGFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCCBEvent:(CCBTestSourceRead *)event {
  CCBRTestNGFormatter_handleTestSourceReadWithCCBTestSourceRead_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRTestNGFormatter:);
  methods[1].selector = @selector(receiveWithCCBEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRTestNGFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCCBTestSourceRead;", "LCCBRTestNGFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestSourceRead;>;" };
  static const J2ObjcClassInfo _CCBRTestNGFormatter_1 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRTestNGFormatter_1;
}

@end

void CCBRTestNGFormatter_1_initWithCCBRTestNGFormatter_(CCBRTestNGFormatter_1 *self, CCBRTestNGFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRTestNGFormatter_1 *new_CCBRTestNGFormatter_1_initWithCCBRTestNGFormatter_(CCBRTestNGFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRTestNGFormatter_1, initWithCCBRTestNGFormatter_, outer$)
}

CCBRTestNGFormatter_1 *create_CCBRTestNGFormatter_1_initWithCCBRTestNGFormatter_(CCBRTestNGFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRTestNGFormatter_1, initWithCCBRTestNGFormatter_, outer$)
}

@implementation CCBRTestNGFormatter_2

- (instancetype __nonnull)initWithCCBRTestNGFormatter:(CCBRTestNGFormatter *)outer$ {
  CCBRTestNGFormatter_2_initWithCCBRTestNGFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCCBEvent:(CCBTestCaseStarted *)event {
  CCBRTestNGFormatter_handleTestCaseStartedWithCCBTestCaseStarted_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRTestNGFormatter:);
  methods[1].selector = @selector(receiveWithCCBEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRTestNGFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCCBTestCaseStarted;", "LCCBRTestNGFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestCaseStarted;>;" };
  static const J2ObjcClassInfo _CCBRTestNGFormatter_2 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRTestNGFormatter_2;
}

@end

void CCBRTestNGFormatter_2_initWithCCBRTestNGFormatter_(CCBRTestNGFormatter_2 *self, CCBRTestNGFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRTestNGFormatter_2 *new_CCBRTestNGFormatter_2_initWithCCBRTestNGFormatter_(CCBRTestNGFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRTestNGFormatter_2, initWithCCBRTestNGFormatter_, outer$)
}

CCBRTestNGFormatter_2 *create_CCBRTestNGFormatter_2_initWithCCBRTestNGFormatter_(CCBRTestNGFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRTestNGFormatter_2, initWithCCBRTestNGFormatter_, outer$)
}

@implementation CCBRTestNGFormatter_3

- (instancetype __nonnull)initWithCCBRTestNGFormatter:(CCBRTestNGFormatter *)outer$ {
  CCBRTestNGFormatter_3_initWithCCBRTestNGFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCCBEvent:(CCBTestStepFinished *)event {
  CCBRTestNGFormatter_handleTestStepFinishedWithCCBTestStepFinished_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRTestNGFormatter:);
  methods[1].selector = @selector(receiveWithCCBEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRTestNGFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCCBTestStepFinished;", "LCCBRTestNGFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestStepFinished;>;" };
  static const J2ObjcClassInfo _CCBRTestNGFormatter_3 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRTestNGFormatter_3;
}

@end

void CCBRTestNGFormatter_3_initWithCCBRTestNGFormatter_(CCBRTestNGFormatter_3 *self, CCBRTestNGFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRTestNGFormatter_3 *new_CCBRTestNGFormatter_3_initWithCCBRTestNGFormatter_(CCBRTestNGFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRTestNGFormatter_3, initWithCCBRTestNGFormatter_, outer$)
}

CCBRTestNGFormatter_3 *create_CCBRTestNGFormatter_3_initWithCCBRTestNGFormatter_(CCBRTestNGFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRTestNGFormatter_3, initWithCCBRTestNGFormatter_, outer$)
}

@implementation CCBRTestNGFormatter_4

- (instancetype __nonnull)initWithCCBRTestNGFormatter:(CCBRTestNGFormatter *)outer$ {
  CCBRTestNGFormatter_4_initWithCCBRTestNGFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCCBEvent:(CCBTestCaseFinished *)event {
  CCBRTestNGFormatter_handleTestCaseFinished(this$0_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRTestNGFormatter:);
  methods[1].selector = @selector(receiveWithCCBEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRTestNGFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCCBTestCaseFinished;", "LCCBRTestNGFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestCaseFinished;>;" };
  static const J2ObjcClassInfo _CCBRTestNGFormatter_4 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRTestNGFormatter_4;
}

@end

void CCBRTestNGFormatter_4_initWithCCBRTestNGFormatter_(CCBRTestNGFormatter_4 *self, CCBRTestNGFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRTestNGFormatter_4 *new_CCBRTestNGFormatter_4_initWithCCBRTestNGFormatter_(CCBRTestNGFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRTestNGFormatter_4, initWithCCBRTestNGFormatter_, outer$)
}

CCBRTestNGFormatter_4 *create_CCBRTestNGFormatter_4_initWithCCBRTestNGFormatter_(CCBRTestNGFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRTestNGFormatter_4, initWithCCBRTestNGFormatter_, outer$)
}

@implementation CCBRTestNGFormatter_5

- (instancetype __nonnull)initWithCCBRTestNGFormatter:(CCBRTestNGFormatter *)outer$ {
  CCBRTestNGFormatter_5_initWithCCBRTestNGFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCCBEvent:(CCBTestRunFinished *)event {
  CCBRTestNGFormatter_finishReport(this$0_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRTestNGFormatter:);
  methods[1].selector = @selector(receiveWithCCBEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRTestNGFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCCBTestRunFinished;", "LCCBRTestNGFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestRunFinished;>;" };
  static const J2ObjcClassInfo _CCBRTestNGFormatter_5 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRTestNGFormatter_5;
}

@end

void CCBRTestNGFormatter_5_initWithCCBRTestNGFormatter_(CCBRTestNGFormatter_5 *self, CCBRTestNGFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRTestNGFormatter_5 *new_CCBRTestNGFormatter_5_initWithCCBRTestNGFormatter_(CCBRTestNGFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRTestNGFormatter_5, initWithCCBRTestNGFormatter_, outer$)
}

CCBRTestNGFormatter_5 *create_CCBRTestNGFormatter_5_initWithCCBRTestNGFormatter_(CCBRTestNGFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRTestNGFormatter_5, initWithCCBRTestNGFormatter_, outer$)
}

J2OBJC_INITIALIZED_DEFN(CCBRTestNGFormatter_TestMethod)

@implementation CCBRTestNGFormatter_TestMethod

- (instancetype __nonnull)initWithCCBTestCase:(CCBTestCase *)scenario {
  CCBRTestNGFormatter_TestMethod_initWithCCBTestCase_(self, scenario);
  return self;
}

- (void)startWithOrgW3cDomElement:(id<OrgW3cDomElement>)element {
  CCBRTestNGFormatter_TestMethod_startWithOrgW3cDomElement_(self, element);
}

- (NSString *)calculateElementNameWithCCBTestCase:(CCBTestCase *)testCase {
  return CCBRTestNGFormatter_TestMethod_calculateElementNameWithCCBTestCase_(self, testCase);
}

- (void)finishWithOrgW3cDomDocument:(id<OrgW3cDomDocument>)doc
               withOrgW3cDomElement:(id<OrgW3cDomElement>)element {
  [((id<OrgW3cDomElement>) nil_chk(element)) setAttributeWithNSString:@"duration-ms" withNSString:CCBRTestNGFormatter_TestMethod_calculateTotalDurationString(self)];
  [element setAttributeWithNSString:@"finished-at" withNSString:[((JavaTextSimpleDateFormat *) nil_chk(JreLoadStatic(CCBRTestNGFormatter, DATE_FORMAT))) formatWithJavaUtilDate:create_JavaUtilDate_init()]];
  JavaLangStringBuilder *stringBuilder = create_JavaLangStringBuilder_init();
  CCBRTestNGFormatter_TestMethod_addStepAndResultListingWithJavaLangStringBuilder_(self, stringBuilder);
  CCBResult *skipped = nil;
  CCBResult *failed = nil;
  for (CCBResult * __strong result in nil_chk(results_)) {
    if ([((CCBResult *) nil_chk(result)) isWithCCBResult_Type:JreLoadEnum(CCBResult_Type, FAILED)] || [result isWithCCBResult_Type:JreLoadEnum(CCBResult_Type, AMBIGUOUS)]) {
      failed = result;
    }
    if ([result isWithCCBResult_Type:JreLoadEnum(CCBResult_Type, UNDEFINED)] || [result isWithCCBResult_Type:JreLoadEnum(CCBResult_Type, PENDING)]) {
      skipped = result;
    }
  }
  for (CCBResult * __strong result in nil_chk(hooks_)) {
    if (failed == nil && [((CCBResult *) nil_chk(result)) isWithCCBResult_Type:JreLoadEnum(CCBResult_Type, FAILED)]) {
      failed = result;
    }
  }
  if (failed != nil) {
    [element setAttributeWithNSString:@"status" withNSString:@"FAIL"];
    JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
    [((JavaLangThrowable *) nil_chk([failed getError])) printStackTraceWithJavaIoPrintWriter:create_JavaIoPrintWriter_initWithJavaIoWriter_(stringWriter)];
    id<OrgW3cDomElement> exception = CCBRTestNGFormatter_TestMethod_createExceptionWithOrgW3cDomDocument_withNSString_withNSString_withNSString_(self, doc, [[((JavaLangThrowable *) nil_chk([failed getError])) java_getClass] getName], [stringBuilder description], [stringWriter description]);
    [element appendChildWithOrgW3cDomNode:exception];
  }
  else if (skipped != nil) {
    if (CCBRTestNGFormatter_TestMethod_treatSkippedAsFailure) {
      [element setAttributeWithNSString:@"status" withNSString:@"FAIL"];
      id<OrgW3cDomElement> exception = CCBRTestNGFormatter_TestMethod_createExceptionWithOrgW3cDomDocument_withNSString_withNSString_withNSString_(self, doc, @"The scenario has pending or undefined step(s)", [stringBuilder description], @"The scenario has pending or undefined step(s)");
      [element appendChildWithOrgW3cDomNode:exception];
    }
    else {
      [element setAttributeWithNSString:@"status" withNSString:@"SKIP"];
    }
  }
  else {
    [element setAttributeWithNSString:@"status" withNSString:@"PASS"];
  }
}

- (NSString *)calculateTotalDurationString {
  return CCBRTestNGFormatter_TestMethod_calculateTotalDurationString(self);
}

- (void)addStepAndResultListingWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  CCBRTestNGFormatter_TestMethod_addStepAndResultListingWithJavaLangStringBuilder_(self, sb);
}

- (id<OrgW3cDomElement>)createExceptionWithOrgW3cDomDocument:(id<OrgW3cDomDocument>)doc
                                                withNSString:(NSString *)clazz
                                                withNSString:(NSString *)message
                                                withNSString:(NSString *)stacktrace {
  return CCBRTestNGFormatter_TestMethod_createExceptionWithOrgW3cDomDocument_withNSString_withNSString_withNSString_(self, doc, clazz, message, stacktrace);
}

- (void)dealloc {
  RELEASE_(steps_);
  RELEASE_(results_);
  RELEASE_(hooks_);
  RELEASE_(scenario_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 3, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgW3cDomElement;", 0x2, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBTestCase:);
  methods[1].selector = @selector(startWithOrgW3cDomElement:);
  methods[2].selector = @selector(calculateElementNameWithCCBTestCase:);
  methods[3].selector = @selector(finishWithOrgW3cDomDocument:withOrgW3cDomElement:);
  methods[4].selector = @selector(calculateTotalDurationString);
  methods[5].selector = @selector(addStepAndResultListingWithJavaLangStringBuilder:);
  methods[6].selector = @selector(createExceptionWithOrgW3cDomDocument:withNSString:withNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "currentFeatureFile", "LNSString;", .constantValue.asLong = 0, 0x8, -1, 10, -1, -1 },
    { "treatSkippedAsFailure", "Z", .constantValue.asLong = 0, 0x8, -1, 11, -1, -1 },
    { "previousTestCaseName", "LNSString;", .constantValue.asLong = 0, 0x8, -1, 12, -1, -1 },
    { "exampleNumber", "I", .constantValue.asLong = 0, 0x8, -1, 13, -1, -1 },
    { "testSources", "LCCBRTestSourcesModel;", .constantValue.asLong = 0, 0x18, -1, 14, -1, -1 },
    { "steps_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 15, -1 },
    { "results_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 16, -1 },
    { "hooks_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 16, -1 },
    { "scenario_", "LCCBTestCase;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LCCBTestCase;", "start", "LOrgW3cDomElement;", "calculateElementName", "finish", "LOrgW3cDomDocument;LOrgW3cDomElement;", "addStepAndResultListing", "LJavaLangStringBuilder;", "createException", "LOrgW3cDomDocument;LNSString;LNSString;LNSString;", &CCBRTestNGFormatter_TestMethod_currentFeatureFile, &CCBRTestNGFormatter_TestMethod_treatSkippedAsFailure, &CCBRTestNGFormatter_TestMethod_previousTestCaseName, &CCBRTestNGFormatter_TestMethod_exampleNumber, &CCBRTestNGFormatter_TestMethod_testSources, "Ljava/util/List<Lcucumber/api/TestStep;>;", "Ljava/util/List<Lcucumber/api/Result;>;", "LCCBRTestNGFormatter;" };
  static const J2ObjcClassInfo _CCBRTestNGFormatter_TestMethod = { "TestMethod", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0xa, 7, 9, 17, -1, -1, -1, -1 };
  return &_CCBRTestNGFormatter_TestMethod;
}

+ (void)initialize {
  if (self == [CCBRTestNGFormatter_TestMethod class]) {
    JreStrongAssignAndConsume(&CCBRTestNGFormatter_TestMethod_testSources, new_CCBRTestSourcesModel_init());
    J2OBJC_SET_INITIALIZED(CCBRTestNGFormatter_TestMethod)
  }
}

@end

void CCBRTestNGFormatter_TestMethod_initWithCCBTestCase_(CCBRTestNGFormatter_TestMethod *self, CCBTestCase *scenario) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->steps_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->results_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->hooks_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->scenario_, scenario);
}

CCBRTestNGFormatter_TestMethod *new_CCBRTestNGFormatter_TestMethod_initWithCCBTestCase_(CCBTestCase *scenario) {
  J2OBJC_NEW_IMPL(CCBRTestNGFormatter_TestMethod, initWithCCBTestCase_, scenario)
}

CCBRTestNGFormatter_TestMethod *create_CCBRTestNGFormatter_TestMethod_initWithCCBTestCase_(CCBTestCase *scenario) {
  J2OBJC_CREATE_IMPL(CCBRTestNGFormatter_TestMethod, initWithCCBTestCase_, scenario)
}

void CCBRTestNGFormatter_TestMethod_startWithOrgW3cDomElement_(CCBRTestNGFormatter_TestMethod *self, id<OrgW3cDomElement> element) {
  [((id<OrgW3cDomElement>) nil_chk(element)) setAttributeWithNSString:@"name" withNSString:CCBRTestNGFormatter_TestMethod_calculateElementNameWithCCBTestCase_(self, self->scenario_)];
  [element setAttributeWithNSString:@"started-at" withNSString:[((JavaTextSimpleDateFormat *) nil_chk(JreLoadStatic(CCBRTestNGFormatter, DATE_FORMAT))) formatWithJavaUtilDate:create_JavaUtilDate_init()]];
}

NSString *CCBRTestNGFormatter_TestMethod_calculateElementNameWithCCBTestCase_(CCBRTestNGFormatter_TestMethod *self, CCBTestCase *testCase) {
  NSString *testCaseName = [((CCBTestCase *) nil_chk(testCase)) getName];
  if ([((NSString *) nil_chk(testCaseName)) isEqual:CCBRTestNGFormatter_TestMethod_previousTestCaseName]) {
    return JreStrcat("$CI", testCaseName, '_', ++CCBRTestNGFormatter_TestMethod_exampleNumber);
  }
  else {
    JreStrongAssign(&CCBRTestNGFormatter_TestMethod_previousTestCaseName, testCaseName);
    CCBRTestNGFormatter_TestMethod_exampleNumber = 1;
    return testCaseName;
  }
}

NSString *CCBRTestNGFormatter_TestMethod_calculateTotalDurationString(CCBRTestNGFormatter_TestMethod *self) {
  jlong totalDurationNanos = 0;
  for (CCBResult * __strong r in nil_chk(self->results_)) {
    totalDurationNanos += [((CCBResult *) nil_chk(r)) getDuration] == nil ? 0 : [((JavaLangLong *) nil_chk([r getDuration])) longLongValue];
  }
  for (CCBResult * __strong r in nil_chk(self->hooks_)) {
    totalDurationNanos += [((CCBResult *) nil_chk(r)) getDuration] == nil ? 0 : [((JavaLangLong *) nil_chk([r getDuration])) longLongValue];
  }
  return NSString_java_valueOfLong_(totalDurationNanos / 1000000);
}

void CCBRTestNGFormatter_TestMethod_addStepAndResultListingWithJavaLangStringBuilder_(CCBRTestNGFormatter_TestMethod *self, JavaLangStringBuilder *sb) {
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(self->steps_)) size]; i++) {
    jint length = [((JavaLangStringBuilder *) nil_chk(sb)) java_length];
    NSString *resultStatus = @"not executed";
    if (i < [((id<JavaUtilList>) nil_chk(self->results_)) size]) {
      resultStatus = [((CCBResult_Type *) nil_chk([((CCBResult *) nil_chk([self->results_ getWithInt:i])) getStatus])) lowerCaseName];
    }
    [sb appendWithNSString:JreStrcat("$$", [((CCBRTestSourcesModel *) nil_chk(CCBRTestNGFormatter_TestMethod_testSources)) getKeywordFromSourceWithNSString:CCBRTestNGFormatter_TestMethod_currentFeatureFile withInt:[((CCBTestStep *) nil_chk([self->steps_ getWithInt:i])) getStepLine]], [((CCBTestStep *) nil_chk([self->steps_ getWithInt:i])) getStepText])];
    do {
      [sb appendWithNSString:@"."];
    }
    while ([sb java_length] - length < 76);
    [sb appendWithNSString:resultStatus];
    [sb appendWithNSString:@"\n"];
  }
}

id<OrgW3cDomElement> CCBRTestNGFormatter_TestMethod_createExceptionWithOrgW3cDomDocument_withNSString_withNSString_withNSString_(CCBRTestNGFormatter_TestMethod *self, id<OrgW3cDomDocument> doc, NSString *clazz, NSString *message, NSString *stacktrace) {
  id<OrgW3cDomElement> exceptionElement = [((id<OrgW3cDomDocument>) nil_chk(doc)) createElementWithNSString:@"exception"];
  [((id<OrgW3cDomElement>) nil_chk(exceptionElement)) setAttributeWithNSString:@"class" withNSString:clazz];
  if (message != nil) {
    id<OrgW3cDomElement> messageElement = [doc createElementWithNSString:@"message"];
    [((id<OrgW3cDomElement>) nil_chk(messageElement)) appendChildWithOrgW3cDomNode:[doc createCDATASectionWithNSString:message]];
    [exceptionElement appendChildWithOrgW3cDomNode:messageElement];
  }
  id<OrgW3cDomElement> stacktraceElement = [doc createElementWithNSString:@"full-stacktrace"];
  [((id<OrgW3cDomElement>) nil_chk(stacktraceElement)) appendChildWithOrgW3cDomNode:[doc createCDATASectionWithNSString:stacktrace]];
  [exceptionElement appendChildWithOrgW3cDomNode:stacktraceElement];
  return exceptionElement;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRTestNGFormatter_TestMethod)
