//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/formatter/HTMLFormatter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/gson/Gson.h"
#include "com/google/gson/GsonBuilder.h"
#include "cucumber/api/HookType.h"
#include "cucumber/api/Result.h"
#include "cucumber/api/TestCase.h"
#include "cucumber/api/TestStep.h"
#include "cucumber/api/event/EmbedEvent.h"
#include "cucumber/api/event/EventHandler.h"
#include "cucumber/api/event/EventPublisher.h"
#include "cucumber/api/event/TestCaseStarted.h"
#include "cucumber/api/event/TestRunFinished.h"
#include "cucumber/api/event/TestSourceRead.h"
#include "cucumber/api/event/TestStepFinished.h"
#include "cucumber/api/event/TestStepStarted.h"
#include "cucumber/api/event/WriteEvent.h"
#include "cucumber/api/formatter/NiceAppendable.h"
#include "cucumber/runtime/CucumberException.h"
#include "cucumber/runtime/formatter/HTMLFormatter.h"
#include "cucumber/runtime/formatter/TestSourcesModel.h"
#include "cucumber/runtime/io/URLOutputStream.h"
#include "gherkin/ast/Background.h"
#include "gherkin/ast/DataTable.h"
#include "gherkin/ast/DocString.h"
#include "gherkin/ast/Examples.h"
#include "gherkin/ast/Feature.h"
#include "gherkin/ast/Node.h"
#include "gherkin/ast/ScenarioDefinition.h"
#include "gherkin/ast/ScenarioOutline.h"
#include "gherkin/ast/Step.h"
#include "gherkin/ast/TableCell.h"
#include "gherkin/ast/TableRow.h"
#include "gherkin/ast/Tag.h"
#include "gherkin/pickles/Argument.h"
#include "gherkin/pickles/PickleCell.h"
#include "gherkin/pickles/PickleRow.h"
#include "gherkin/pickles/PickleString.h"
#include "gherkin/pickles/PickleTable.h"
#include "gherkin/pickles/PickleTag.h"
#include "java/io/Closeable.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/lang/StringBuilder.h"
#include "java/net/URL.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@protocol JavaUtilFunctionBiFunction;
@protocol JavaUtilFunctionFunction;

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface CCBRHTMLFormatter () {
 @public
  CCBRTestSourcesModel *testSources_;
  JavaNetURL *htmlReportDir_;
  CCBNiceAppendable *jsOut_;
  jboolean firstFeature_;
  NSString *currentFeatureFile_;
  id<JavaUtilMap> currentTestCaseMap_;
  GherkinAstScenarioOutline *currentScenarioOutline_;
  GherkinAstExamples *currentExamples_;
  jint embeddedIndex_;
  id<CCBEventHandler> testSourceReadHandler_;
  id<CCBEventHandler> caseStartedHandler_;
  id<CCBEventHandler> stepStartedHandler_;
  id<CCBEventHandler> stepFinishedHandler_;
  id<CCBEventHandler> embedEventhandler_;
  id<CCBEventHandler> writeEventhandler_;
  id<CCBEventHandler> runFinishedHandler_;
}

- (void)handleTestSourceReadWithCCBTestSourceRead:(CCBTestSourceRead *)event;

- (void)handleTestCaseStartedWithCCBTestCaseStarted:(CCBTestCaseStarted *)event;

- (void)handleTestStepStartedWithCCBTestStepStarted:(CCBTestStepStarted *)event;

- (void)handleTestStepFinishedWithCCBTestStepFinished:(CCBTestStepFinished *)event;

- (void)handleEmbedWithCCBEmbedEvent:(CCBEmbedEvent *)event;

- (void)handleWriteWithCCBWriteEvent:(CCBWriteEvent *)event;

- (void)finishReport;

- (void)handleStartOfFeatureWithCCBTestCase:(CCBTestCase *)testCase;

- (id<JavaUtilMap>)createFeatureWithCCBTestCase:(CCBTestCase *)testCase;

- (id<JavaUtilList>)createTagListWithJavaUtilList:(id<JavaUtilList>)tags;

- (void)handleScenarioOutlineWithCCBTestCase:(CCBTestCase *)testCase;

- (id<JavaUtilMap>)createScenarioOutlineWithGherkinAstScenarioOutline:(GherkinAstScenarioOutline *)scenarioOutline;

- (void)addOutlineStepsToReportWithGherkinAstScenarioOutline:(GherkinAstScenarioOutline *)scenarioOutline;

- (id<JavaUtilMap>)createDocStringMapWithGherkinAstDocString:(GherkinAstDocString *)docString;

- (id<JavaUtilList>)createDataTableListWithGherkinAstDataTable:(GherkinAstDataTable *)dataTable;

- (id<JavaUtilMap>)createRowMapWithGherkinAstTableRow:(GherkinAstTableRow *)row;

- (id<JavaUtilList>)createCellListWithGherkinAstTableRow:(GherkinAstTableRow *)row;

- (id<JavaUtilMap>)createExamplesWithGherkinAstExamples:(GherkinAstExamples *)examples;

- (id<JavaUtilMap>)createTestCaseWithCCBTestCase:(CCBTestCase *)testCase;

- (id<JavaUtilMap>)createBackgroundWithCCBTestCase:(CCBTestCase *)testCase;

- (jboolean)isFirstStepAfterBackgroundWithCCBTestStep:(CCBTestStep *)testStep;

- (id<JavaUtilMap>)createTestStepWithCCBTestStep:(CCBTestStep *)testStep;

- (id<JavaUtilMap>)createDocStringMapWithGherkinPicklesPickleString:(GherkinPicklesPickleString *)docString;

- (id<JavaUtilList>)createDataTableListWithGherkinPicklesPickleTable:(GherkinPicklesPickleTable *)dataTable;

- (id<JavaUtilMap>)createRowMapWithGherkinPicklesPickleRow:(GherkinPicklesPickleRow *)row;

- (id<JavaUtilList>)createCellListWithGherkinPicklesPickleRow:(GherkinPicklesPickleRow *)row;

- (id<JavaUtilMap>)createMatchMapWithCCBTestStep:(CCBTestStep *)testStep
                                   withCCBResult:(CCBResult *)result;

- (id<JavaUtilMap>)createResultMapWithCCBResult:(CCBResult *)result;

- (void)jsFunctionCallWithNSString:(NSString *)functionName
                 withNSObjectArray:(IOSObjectArray *)args;

- (void)copyReportFiles OBJC_METHOD_FAMILY_NONE;

- (JavaNetURL *)toUrlWithNSString:(NSString *)fileName;

+ (void)writeStreamToURLWithJavaIoInputStream:(JavaIoInputStream *)inArg
                               withJavaNetURL:(JavaNetURL *)url;

+ (void)writeBytesToURLWithByteArray:(IOSByteArray *)buf
                      withJavaNetURL:(JavaNetURL *)url;

+ (CCBNiceAppendable *)createJsOutWithJavaNetURL:(JavaNetURL *)htmlReportDir;

+ (JavaIoOutputStream *)createReportFileOutputStreamWithJavaNetURL:(JavaNetURL *)url;

+ (void)closeQuietlyWithJavaIoCloseable:(id<JavaIoCloseable>)outArg;

@end

J2OBJC_FIELD_SETTER(CCBRHTMLFormatter, testSources_, CCBRTestSourcesModel *)
J2OBJC_FIELD_SETTER(CCBRHTMLFormatter, htmlReportDir_, JavaNetURL *)
J2OBJC_FIELD_SETTER(CCBRHTMLFormatter, jsOut_, CCBNiceAppendable *)
J2OBJC_FIELD_SETTER(CCBRHTMLFormatter, currentFeatureFile_, NSString *)
J2OBJC_FIELD_SETTER(CCBRHTMLFormatter, currentTestCaseMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(CCBRHTMLFormatter, currentScenarioOutline_, GherkinAstScenarioOutline *)
J2OBJC_FIELD_SETTER(CCBRHTMLFormatter, currentExamples_, GherkinAstExamples *)
J2OBJC_FIELD_SETTER(CCBRHTMLFormatter, testSourceReadHandler_, id<CCBEventHandler>)
J2OBJC_FIELD_SETTER(CCBRHTMLFormatter, caseStartedHandler_, id<CCBEventHandler>)
J2OBJC_FIELD_SETTER(CCBRHTMLFormatter, stepStartedHandler_, id<CCBEventHandler>)
J2OBJC_FIELD_SETTER(CCBRHTMLFormatter, stepFinishedHandler_, id<CCBEventHandler>)
J2OBJC_FIELD_SETTER(CCBRHTMLFormatter, embedEventhandler_, id<CCBEventHandler>)
J2OBJC_FIELD_SETTER(CCBRHTMLFormatter, writeEventhandler_, id<CCBEventHandler>)
J2OBJC_FIELD_SETTER(CCBRHTMLFormatter, runFinishedHandler_, id<CCBEventHandler>)

inline ComGoogleGsonGson *CCBRHTMLFormatter_get_gson(void);
static ComGoogleGsonGson *CCBRHTMLFormatter_gson;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CCBRHTMLFormatter, gson, ComGoogleGsonGson *)

inline NSString *CCBRHTMLFormatter_get_JS_FORMATTER_VAR(void);
static NSString *CCBRHTMLFormatter_JS_FORMATTER_VAR = @"formatter";
J2OBJC_STATIC_FIELD_OBJ_FINAL(CCBRHTMLFormatter, JS_FORMATTER_VAR, NSString *)

inline NSString *CCBRHTMLFormatter_get_JS_REPORT_FILENAME(void);
static NSString *CCBRHTMLFormatter_JS_REPORT_FILENAME = @"report.js";
J2OBJC_STATIC_FIELD_OBJ_FINAL(CCBRHTMLFormatter, JS_REPORT_FILENAME, NSString *)

inline IOSObjectArray *CCBRHTMLFormatter_get_TEXT_ASSETS(void);
static IOSObjectArray *CCBRHTMLFormatter_TEXT_ASSETS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CCBRHTMLFormatter, TEXT_ASSETS, IOSObjectArray *)

inline id<JavaUtilMap> CCBRHTMLFormatter_get_MIME_TYPES_EXTENSIONS(void);
static id<JavaUtilMap> CCBRHTMLFormatter_MIME_TYPES_EXTENSIONS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CCBRHTMLFormatter, MIME_TYPES_EXTENSIONS, id<JavaUtilMap>)

__attribute__((unused)) static void CCBRHTMLFormatter_handleTestSourceReadWithCCBTestSourceRead_(CCBRHTMLFormatter *self, CCBTestSourceRead *event);

__attribute__((unused)) static void CCBRHTMLFormatter_handleTestCaseStartedWithCCBTestCaseStarted_(CCBRHTMLFormatter *self, CCBTestCaseStarted *event);

__attribute__((unused)) static void CCBRHTMLFormatter_handleTestStepStartedWithCCBTestStepStarted_(CCBRHTMLFormatter *self, CCBTestStepStarted *event);

__attribute__((unused)) static void CCBRHTMLFormatter_handleTestStepFinishedWithCCBTestStepFinished_(CCBRHTMLFormatter *self, CCBTestStepFinished *event);

__attribute__((unused)) static void CCBRHTMLFormatter_handleEmbedWithCCBEmbedEvent_(CCBRHTMLFormatter *self, CCBEmbedEvent *event);

__attribute__((unused)) static void CCBRHTMLFormatter_handleWriteWithCCBWriteEvent_(CCBRHTMLFormatter *self, CCBWriteEvent *event);

__attribute__((unused)) static void CCBRHTMLFormatter_finishReport(CCBRHTMLFormatter *self);

__attribute__((unused)) static void CCBRHTMLFormatter_handleStartOfFeatureWithCCBTestCase_(CCBRHTMLFormatter *self, CCBTestCase *testCase);

__attribute__((unused)) static id<JavaUtilMap> CCBRHTMLFormatter_createFeatureWithCCBTestCase_(CCBRHTMLFormatter *self, CCBTestCase *testCase);

__attribute__((unused)) static id<JavaUtilList> CCBRHTMLFormatter_createTagListWithJavaUtilList_(CCBRHTMLFormatter *self, id<JavaUtilList> tags);

__attribute__((unused)) static void CCBRHTMLFormatter_handleScenarioOutlineWithCCBTestCase_(CCBRHTMLFormatter *self, CCBTestCase *testCase);

__attribute__((unused)) static id<JavaUtilMap> CCBRHTMLFormatter_createScenarioOutlineWithGherkinAstScenarioOutline_(CCBRHTMLFormatter *self, GherkinAstScenarioOutline *scenarioOutline);

__attribute__((unused)) static void CCBRHTMLFormatter_addOutlineStepsToReportWithGherkinAstScenarioOutline_(CCBRHTMLFormatter *self, GherkinAstScenarioOutline *scenarioOutline);

__attribute__((unused)) static id<JavaUtilMap> CCBRHTMLFormatter_createDocStringMapWithGherkinAstDocString_(CCBRHTMLFormatter *self, GherkinAstDocString *docString);

__attribute__((unused)) static id<JavaUtilList> CCBRHTMLFormatter_createDataTableListWithGherkinAstDataTable_(CCBRHTMLFormatter *self, GherkinAstDataTable *dataTable);

__attribute__((unused)) static id<JavaUtilMap> CCBRHTMLFormatter_createRowMapWithGherkinAstTableRow_(CCBRHTMLFormatter *self, GherkinAstTableRow *row);

__attribute__((unused)) static id<JavaUtilList> CCBRHTMLFormatter_createCellListWithGherkinAstTableRow_(CCBRHTMLFormatter *self, GherkinAstTableRow *row);

__attribute__((unused)) static id<JavaUtilMap> CCBRHTMLFormatter_createExamplesWithGherkinAstExamples_(CCBRHTMLFormatter *self, GherkinAstExamples *examples);

__attribute__((unused)) static id<JavaUtilMap> CCBRHTMLFormatter_createTestCaseWithCCBTestCase_(CCBRHTMLFormatter *self, CCBTestCase *testCase);

__attribute__((unused)) static id<JavaUtilMap> CCBRHTMLFormatter_createBackgroundWithCCBTestCase_(CCBRHTMLFormatter *self, CCBTestCase *testCase);

__attribute__((unused)) static jboolean CCBRHTMLFormatter_isFirstStepAfterBackgroundWithCCBTestStep_(CCBRHTMLFormatter *self, CCBTestStep *testStep);

__attribute__((unused)) static id<JavaUtilMap> CCBRHTMLFormatter_createTestStepWithCCBTestStep_(CCBRHTMLFormatter *self, CCBTestStep *testStep);

__attribute__((unused)) static id<JavaUtilMap> CCBRHTMLFormatter_createDocStringMapWithGherkinPicklesPickleString_(CCBRHTMLFormatter *self, GherkinPicklesPickleString *docString);

__attribute__((unused)) static id<JavaUtilList> CCBRHTMLFormatter_createDataTableListWithGherkinPicklesPickleTable_(CCBRHTMLFormatter *self, GherkinPicklesPickleTable *dataTable);

__attribute__((unused)) static id<JavaUtilMap> CCBRHTMLFormatter_createRowMapWithGherkinPicklesPickleRow_(CCBRHTMLFormatter *self, GherkinPicklesPickleRow *row);

__attribute__((unused)) static id<JavaUtilList> CCBRHTMLFormatter_createCellListWithGherkinPicklesPickleRow_(CCBRHTMLFormatter *self, GherkinPicklesPickleRow *row);

__attribute__((unused)) static id<JavaUtilMap> CCBRHTMLFormatter_createMatchMapWithCCBTestStep_withCCBResult_(CCBRHTMLFormatter *self, CCBTestStep *testStep, CCBResult *result);

__attribute__((unused)) static id<JavaUtilMap> CCBRHTMLFormatter_createResultMapWithCCBResult_(CCBRHTMLFormatter *self, CCBResult *result);

__attribute__((unused)) static void CCBRHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(CCBRHTMLFormatter *self, NSString *functionName, IOSObjectArray *args);

__attribute__((unused)) static void CCBRHTMLFormatter_copyReportFiles(CCBRHTMLFormatter *self);

__attribute__((unused)) static JavaNetURL *CCBRHTMLFormatter_toUrlWithNSString_(CCBRHTMLFormatter *self, NSString *fileName);

__attribute__((unused)) static void CCBRHTMLFormatter_writeStreamToURLWithJavaIoInputStream_withJavaNetURL_(JavaIoInputStream *inArg, JavaNetURL *url);

__attribute__((unused)) static void CCBRHTMLFormatter_writeBytesToURLWithByteArray_withJavaNetURL_(IOSByteArray *buf, JavaNetURL *url);

__attribute__((unused)) static CCBNiceAppendable *CCBRHTMLFormatter_createJsOutWithJavaNetURL_(JavaNetURL *htmlReportDir);

__attribute__((unused)) static JavaIoOutputStream *CCBRHTMLFormatter_createReportFileOutputStreamWithJavaNetURL_(JavaNetURL *url);

__attribute__((unused)) static void CCBRHTMLFormatter_closeQuietlyWithJavaIoCloseable_(id<JavaIoCloseable> outArg);

@interface CCBRHTMLFormatter_1 : JavaUtilHashMap

- (instancetype __nonnull)init;

- (NSString *)computeIfAbsentWithId:(NSString *)arg0
       withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg1;

- (NSString *)getWithId:(id)arg0;

- (NSString *)removeWithId:(id)arg0;

- (NSString *)putIfAbsentWithId:(NSString *)arg0
                         withId:(NSString *)arg1;

- (NSString *)computeIfPresentWithId:(NSString *)arg0
      withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1;

- (NSString *)replaceWithId:(NSString *)arg0
                     withId:(NSString *)arg1;

- (NSString *)putWithId:(NSString *)arg0
                 withId:(NSString *)arg1;

- (NSString *)computeWithId:(NSString *)arg0
withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1;

- (NSString *)mergeWithId:(NSString *)arg0
                   withId:(NSString *)arg1
withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg2;

- (NSString *)getOrDefaultWithId:(id)arg0
                          withId:(NSString *)arg1;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRHTMLFormatter_1)

__attribute__((unused)) static void CCBRHTMLFormatter_1_init(CCBRHTMLFormatter_1 *self);

__attribute__((unused)) static CCBRHTMLFormatter_1 *new_CCBRHTMLFormatter_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRHTMLFormatter_1 *create_CCBRHTMLFormatter_1_init(void);

@interface CCBRHTMLFormatter_2 : NSObject < CCBEventHandler > {
 @public
  CCBRHTMLFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRHTMLFormatter:(CCBRHTMLFormatter *)outer$;

- (void)receiveWithCCBEvent:(CCBTestSourceRead *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRHTMLFormatter_2)

__attribute__((unused)) static void CCBRHTMLFormatter_2_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter_2 *self, CCBRHTMLFormatter *outer$);

__attribute__((unused)) static CCBRHTMLFormatter_2 *new_CCBRHTMLFormatter_2_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRHTMLFormatter_2 *create_CCBRHTMLFormatter_2_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter *outer$);

@interface CCBRHTMLFormatter_3 : NSObject < CCBEventHandler > {
 @public
  CCBRHTMLFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRHTMLFormatter:(CCBRHTMLFormatter *)outer$;

- (void)receiveWithCCBEvent:(CCBTestCaseStarted *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRHTMLFormatter_3)

__attribute__((unused)) static void CCBRHTMLFormatter_3_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter_3 *self, CCBRHTMLFormatter *outer$);

__attribute__((unused)) static CCBRHTMLFormatter_3 *new_CCBRHTMLFormatter_3_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRHTMLFormatter_3 *create_CCBRHTMLFormatter_3_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter *outer$);

@interface CCBRHTMLFormatter_4 : NSObject < CCBEventHandler > {
 @public
  CCBRHTMLFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRHTMLFormatter:(CCBRHTMLFormatter *)outer$;

- (void)receiveWithCCBEvent:(CCBTestStepStarted *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRHTMLFormatter_4)

__attribute__((unused)) static void CCBRHTMLFormatter_4_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter_4 *self, CCBRHTMLFormatter *outer$);

__attribute__((unused)) static CCBRHTMLFormatter_4 *new_CCBRHTMLFormatter_4_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRHTMLFormatter_4 *create_CCBRHTMLFormatter_4_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter *outer$);

@interface CCBRHTMLFormatter_5 : NSObject < CCBEventHandler > {
 @public
  CCBRHTMLFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRHTMLFormatter:(CCBRHTMLFormatter *)outer$;

- (void)receiveWithCCBEvent:(CCBTestStepFinished *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRHTMLFormatter_5)

__attribute__((unused)) static void CCBRHTMLFormatter_5_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter_5 *self, CCBRHTMLFormatter *outer$);

__attribute__((unused)) static CCBRHTMLFormatter_5 *new_CCBRHTMLFormatter_5_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRHTMLFormatter_5 *create_CCBRHTMLFormatter_5_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter *outer$);

@interface CCBRHTMLFormatter_6 : NSObject < CCBEventHandler > {
 @public
  CCBRHTMLFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRHTMLFormatter:(CCBRHTMLFormatter *)outer$;

- (void)receiveWithCCBEvent:(CCBEmbedEvent *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRHTMLFormatter_6)

__attribute__((unused)) static void CCBRHTMLFormatter_6_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter_6 *self, CCBRHTMLFormatter *outer$);

__attribute__((unused)) static CCBRHTMLFormatter_6 *new_CCBRHTMLFormatter_6_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRHTMLFormatter_6 *create_CCBRHTMLFormatter_6_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter *outer$);

@interface CCBRHTMLFormatter_7 : NSObject < CCBEventHandler > {
 @public
  CCBRHTMLFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRHTMLFormatter:(CCBRHTMLFormatter *)outer$;

- (void)receiveWithCCBEvent:(CCBWriteEvent *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRHTMLFormatter_7)

__attribute__((unused)) static void CCBRHTMLFormatter_7_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter_7 *self, CCBRHTMLFormatter *outer$);

__attribute__((unused)) static CCBRHTMLFormatter_7 *new_CCBRHTMLFormatter_7_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRHTMLFormatter_7 *create_CCBRHTMLFormatter_7_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter *outer$);

@interface CCBRHTMLFormatter_8 : NSObject < CCBEventHandler > {
 @public
  CCBRHTMLFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRHTMLFormatter:(CCBRHTMLFormatter *)outer$;

- (void)receiveWithCCBEvent:(CCBTestRunFinished *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRHTMLFormatter_8)

__attribute__((unused)) static void CCBRHTMLFormatter_8_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter_8 *self, CCBRHTMLFormatter *outer$);

__attribute__((unused)) static CCBRHTMLFormatter_8 *new_CCBRHTMLFormatter_8_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRHTMLFormatter_8 *create_CCBRHTMLFormatter_8_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter *outer$);

J2OBJC_INITIALIZED_DEFN(CCBRHTMLFormatter)

@implementation CCBRHTMLFormatter

- (instancetype __nonnull)initWithJavaNetURL:(JavaNetURL *)htmlReportDir {
  CCBRHTMLFormatter_initWithJavaNetURL_(self, htmlReportDir);
  return self;
}

- (instancetype __nonnull)initWithJavaNetURL:(JavaNetURL *)htmlReportDir
                       withCCBNiceAppendable:(CCBNiceAppendable *)jsOut {
  CCBRHTMLFormatter_initWithJavaNetURL_withCCBNiceAppendable_(self, htmlReportDir, jsOut);
  return self;
}

- (void)setEventPublisherWithCCBEventPublisher:(id<CCBEventPublisher>)publisher {
  [((id<CCBEventPublisher>) nil_chk(publisher)) registerHandlerForWithIOSClass:CCBTestSourceRead_class_() withCCBEventHandler:testSourceReadHandler_];
  [publisher registerHandlerForWithIOSClass:CCBTestCaseStarted_class_() withCCBEventHandler:caseStartedHandler_];
  [publisher registerHandlerForWithIOSClass:CCBTestStepStarted_class_() withCCBEventHandler:stepStartedHandler_];
  [publisher registerHandlerForWithIOSClass:CCBTestStepFinished_class_() withCCBEventHandler:stepFinishedHandler_];
  [publisher registerHandlerForWithIOSClass:CCBEmbedEvent_class_() withCCBEventHandler:embedEventhandler_];
  [publisher registerHandlerForWithIOSClass:CCBWriteEvent_class_() withCCBEventHandler:writeEventhandler_];
  [publisher registerHandlerForWithIOSClass:CCBTestRunFinished_class_() withCCBEventHandler:runFinishedHandler_];
}

- (void)handleTestSourceReadWithCCBTestSourceRead:(CCBTestSourceRead *)event {
  CCBRHTMLFormatter_handleTestSourceReadWithCCBTestSourceRead_(self, event);
}

- (void)handleTestCaseStartedWithCCBTestCaseStarted:(CCBTestCaseStarted *)event {
  CCBRHTMLFormatter_handleTestCaseStartedWithCCBTestCaseStarted_(self, event);
}

- (void)handleTestStepStartedWithCCBTestStepStarted:(CCBTestStepStarted *)event {
  CCBRHTMLFormatter_handleTestStepStartedWithCCBTestStepStarted_(self, event);
}

- (void)handleTestStepFinishedWithCCBTestStepFinished:(CCBTestStepFinished *)event {
  CCBRHTMLFormatter_handleTestStepFinishedWithCCBTestStepFinished_(self, event);
}

- (void)handleEmbedWithCCBEmbedEvent:(CCBEmbedEvent *)event {
  CCBRHTMLFormatter_handleEmbedWithCCBEmbedEvent_(self, event);
}

- (void)handleWriteWithCCBWriteEvent:(CCBWriteEvent *)event {
  CCBRHTMLFormatter_handleWriteWithCCBWriteEvent_(self, event);
}

- (void)finishReport {
  CCBRHTMLFormatter_finishReport(self);
}

- (void)handleStartOfFeatureWithCCBTestCase:(CCBTestCase *)testCase {
  CCBRHTMLFormatter_handleStartOfFeatureWithCCBTestCase_(self, testCase);
}

- (id<JavaUtilMap>)createFeatureWithCCBTestCase:(CCBTestCase *)testCase {
  return CCBRHTMLFormatter_createFeatureWithCCBTestCase_(self, testCase);
}

- (id<JavaUtilList>)createTagListWithJavaUtilList:(id<JavaUtilList>)tags {
  return CCBRHTMLFormatter_createTagListWithJavaUtilList_(self, tags);
}

- (void)handleScenarioOutlineWithCCBTestCase:(CCBTestCase *)testCase {
  CCBRHTMLFormatter_handleScenarioOutlineWithCCBTestCase_(self, testCase);
}

- (id<JavaUtilMap>)createScenarioOutlineWithGherkinAstScenarioOutline:(GherkinAstScenarioOutline *)scenarioOutline {
  return CCBRHTMLFormatter_createScenarioOutlineWithGherkinAstScenarioOutline_(self, scenarioOutline);
}

- (void)addOutlineStepsToReportWithGherkinAstScenarioOutline:(GherkinAstScenarioOutline *)scenarioOutline {
  CCBRHTMLFormatter_addOutlineStepsToReportWithGherkinAstScenarioOutline_(self, scenarioOutline);
}

- (id<JavaUtilMap>)createDocStringMapWithGherkinAstDocString:(GherkinAstDocString *)docString {
  return CCBRHTMLFormatter_createDocStringMapWithGherkinAstDocString_(self, docString);
}

- (id<JavaUtilList>)createDataTableListWithGherkinAstDataTable:(GherkinAstDataTable *)dataTable {
  return CCBRHTMLFormatter_createDataTableListWithGherkinAstDataTable_(self, dataTable);
}

- (id<JavaUtilMap>)createRowMapWithGherkinAstTableRow:(GherkinAstTableRow *)row {
  return CCBRHTMLFormatter_createRowMapWithGherkinAstTableRow_(self, row);
}

- (id<JavaUtilList>)createCellListWithGherkinAstTableRow:(GherkinAstTableRow *)row {
  return CCBRHTMLFormatter_createCellListWithGherkinAstTableRow_(self, row);
}

- (id<JavaUtilMap>)createExamplesWithGherkinAstExamples:(GherkinAstExamples *)examples {
  return CCBRHTMLFormatter_createExamplesWithGherkinAstExamples_(self, examples);
}

- (id<JavaUtilMap>)createTestCaseWithCCBTestCase:(CCBTestCase *)testCase {
  return CCBRHTMLFormatter_createTestCaseWithCCBTestCase_(self, testCase);
}

- (id<JavaUtilMap>)createBackgroundWithCCBTestCase:(CCBTestCase *)testCase {
  return CCBRHTMLFormatter_createBackgroundWithCCBTestCase_(self, testCase);
}

- (jboolean)isFirstStepAfterBackgroundWithCCBTestStep:(CCBTestStep *)testStep {
  return CCBRHTMLFormatter_isFirstStepAfterBackgroundWithCCBTestStep_(self, testStep);
}

- (id<JavaUtilMap>)createTestStepWithCCBTestStep:(CCBTestStep *)testStep {
  return CCBRHTMLFormatter_createTestStepWithCCBTestStep_(self, testStep);
}

- (id<JavaUtilMap>)createDocStringMapWithGherkinPicklesPickleString:(GherkinPicklesPickleString *)docString {
  return CCBRHTMLFormatter_createDocStringMapWithGherkinPicklesPickleString_(self, docString);
}

- (id<JavaUtilList>)createDataTableListWithGherkinPicklesPickleTable:(GherkinPicklesPickleTable *)dataTable {
  return CCBRHTMLFormatter_createDataTableListWithGherkinPicklesPickleTable_(self, dataTable);
}

- (id<JavaUtilMap>)createRowMapWithGherkinPicklesPickleRow:(GherkinPicklesPickleRow *)row {
  return CCBRHTMLFormatter_createRowMapWithGherkinPicklesPickleRow_(self, row);
}

- (id<JavaUtilList>)createCellListWithGherkinPicklesPickleRow:(GherkinPicklesPickleRow *)row {
  return CCBRHTMLFormatter_createCellListWithGherkinPicklesPickleRow_(self, row);
}

- (id<JavaUtilMap>)createMatchMapWithCCBTestStep:(CCBTestStep *)testStep
                                   withCCBResult:(CCBResult *)result {
  return CCBRHTMLFormatter_createMatchMapWithCCBTestStep_withCCBResult_(self, testStep, result);
}

- (id<JavaUtilMap>)createResultMapWithCCBResult:(CCBResult *)result {
  return CCBRHTMLFormatter_createResultMapWithCCBResult_(self, result);
}

- (void)jsFunctionCallWithNSString:(NSString *)functionName
                 withNSObjectArray:(IOSObjectArray *)args {
  CCBRHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, functionName, args);
}

- (void)copyReportFiles {
  CCBRHTMLFormatter_copyReportFiles(self);
}

- (JavaNetURL *)toUrlWithNSString:(NSString *)fileName {
  return CCBRHTMLFormatter_toUrlWithNSString_(self, fileName);
}

+ (void)writeStreamToURLWithJavaIoInputStream:(JavaIoInputStream *)inArg
                               withJavaNetURL:(JavaNetURL *)url {
  CCBRHTMLFormatter_writeStreamToURLWithJavaIoInputStream_withJavaNetURL_(inArg, url);
}

+ (void)writeBytesToURLWithByteArray:(IOSByteArray *)buf
                      withJavaNetURL:(JavaNetURL *)url {
  CCBRHTMLFormatter_writeBytesToURLWithByteArray_withJavaNetURL_(buf, url);
}

+ (CCBNiceAppendable *)createJsOutWithJavaNetURL:(JavaNetURL *)htmlReportDir {
  return CCBRHTMLFormatter_createJsOutWithJavaNetURL_(htmlReportDir);
}

+ (JavaIoOutputStream *)createReportFileOutputStreamWithJavaNetURL:(JavaNetURL *)url {
  return CCBRHTMLFormatter_createReportFileOutputStreamWithJavaNetURL_(url);
}

+ (void)closeQuietlyWithJavaIoCloseable:(id<JavaIoCloseable>)outArg {
  CCBRHTMLFormatter_closeQuietlyWithJavaIoCloseable_(outArg);
}

- (void)dealloc {
  RELEASE_(testSources_);
  RELEASE_(htmlReportDir_);
  RELEASE_(jsOut_);
  RELEASE_(currentFeatureFile_);
  RELEASE_(currentTestCaseMap_);
  RELEASE_(currentScenarioOutline_);
  RELEASE_(currentExamples_);
  RELEASE_(testSourceReadHandler_);
  RELEASE_(caseStartedHandler_);
  RELEASE_(stepStartedHandler_);
  RELEASE_(stepFinishedHandler_);
  RELEASE_(embedEventhandler_);
  RELEASE_(writeEventhandler_);
  RELEASE_(runFinishedHandler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 17, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 18, 17, -1, 19, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 20, 21, -1, 22, -1, -1 },
    { NULL, "V", 0x2, 23, 17, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 24, 25, -1, 26, -1, -1 },
    { NULL, "V", 0x2, 27, 25, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 28, 29, -1, 30, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 31, 32, -1, 33, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 34, 35, -1, 36, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 37, 35, -1, 38, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 39, 40, -1, 41, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 42, 17, -1, 19, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 43, 17, -1, 19, -1, -1 },
    { NULL, "Z", 0x2, 44, 45, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 46, 45, -1, 47, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 28, 48, -1, 49, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 31, 50, -1, 51, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 34, 52, -1, 53, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 37, 52, -1, 54, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 55, 56, -1, 57, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 58, 59, -1, 60, -1, -1 },
    { NULL, "V", 0x82, 61, 62, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetURL;", 0x2, 63, 64, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 65, 66, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 67, 68, 69, -1, -1, -1 },
    { NULL, "LCCBNiceAppendable;", 0xa, 70, 0, -1, -1, -1, -1 },
    { NULL, "LJavaIoOutputStream;", 0xa, 71, 0, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 72, 73, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaNetURL:);
  methods[1].selector = @selector(initWithJavaNetURL:withCCBNiceAppendable:);
  methods[2].selector = @selector(setEventPublisherWithCCBEventPublisher:);
  methods[3].selector = @selector(handleTestSourceReadWithCCBTestSourceRead:);
  methods[4].selector = @selector(handleTestCaseStartedWithCCBTestCaseStarted:);
  methods[5].selector = @selector(handleTestStepStartedWithCCBTestStepStarted:);
  methods[6].selector = @selector(handleTestStepFinishedWithCCBTestStepFinished:);
  methods[7].selector = @selector(handleEmbedWithCCBEmbedEvent:);
  methods[8].selector = @selector(handleWriteWithCCBWriteEvent:);
  methods[9].selector = @selector(finishReport);
  methods[10].selector = @selector(handleStartOfFeatureWithCCBTestCase:);
  methods[11].selector = @selector(createFeatureWithCCBTestCase:);
  methods[12].selector = @selector(createTagListWithJavaUtilList:);
  methods[13].selector = @selector(handleScenarioOutlineWithCCBTestCase:);
  methods[14].selector = @selector(createScenarioOutlineWithGherkinAstScenarioOutline:);
  methods[15].selector = @selector(addOutlineStepsToReportWithGherkinAstScenarioOutline:);
  methods[16].selector = @selector(createDocStringMapWithGherkinAstDocString:);
  methods[17].selector = @selector(createDataTableListWithGherkinAstDataTable:);
  methods[18].selector = @selector(createRowMapWithGherkinAstTableRow:);
  methods[19].selector = @selector(createCellListWithGherkinAstTableRow:);
  methods[20].selector = @selector(createExamplesWithGherkinAstExamples:);
  methods[21].selector = @selector(createTestCaseWithCCBTestCase:);
  methods[22].selector = @selector(createBackgroundWithCCBTestCase:);
  methods[23].selector = @selector(isFirstStepAfterBackgroundWithCCBTestStep:);
  methods[24].selector = @selector(createTestStepWithCCBTestStep:);
  methods[25].selector = @selector(createDocStringMapWithGherkinPicklesPickleString:);
  methods[26].selector = @selector(createDataTableListWithGherkinPicklesPickleTable:);
  methods[27].selector = @selector(createRowMapWithGherkinPicklesPickleRow:);
  methods[28].selector = @selector(createCellListWithGherkinPicklesPickleRow:);
  methods[29].selector = @selector(createMatchMapWithCCBTestStep:withCCBResult:);
  methods[30].selector = @selector(createResultMapWithCCBResult:);
  methods[31].selector = @selector(jsFunctionCallWithNSString:withNSObjectArray:);
  methods[32].selector = @selector(copyReportFiles);
  methods[33].selector = @selector(toUrlWithNSString:);
  methods[34].selector = @selector(writeStreamToURLWithJavaIoInputStream:withJavaNetURL:);
  methods[35].selector = @selector(writeBytesToURLWithByteArray:withJavaNetURL:);
  methods[36].selector = @selector(createJsOutWithJavaNetURL:);
  methods[37].selector = @selector(createReportFileOutputStreamWithJavaNetURL:);
  methods[38].selector = @selector(closeQuietlyWithJavaIoCloseable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "gson", "LComGoogleGsonGson;", .constantValue.asLong = 0, 0x1a, -1, 74, -1, -1 },
    { "JS_FORMATTER_VAR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 75, -1, -1 },
    { "JS_REPORT_FILENAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 76, -1, -1 },
    { "TEXT_ASSETS", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 77, -1, -1 },
    { "MIME_TYPES_EXTENSIONS", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 78, 79, -1 },
    { "testSources_", "LCCBRTestSourcesModel;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "htmlReportDir_", "LJavaNetURL;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "jsOut_", "LCCBNiceAppendable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "firstFeature_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentFeatureFile_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentTestCaseMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 80, -1 },
    { "currentScenarioOutline_", "LGherkinAstScenarioOutline;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentExamples_", "LGherkinAstExamples;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "embeddedIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "testSourceReadHandler_", "LCCBEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 81, -1 },
    { "caseStartedHandler_", "LCCBEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 82, -1 },
    { "stepStartedHandler_", "LCCBEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 83, -1 },
    { "stepFinishedHandler_", "LCCBEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 84, -1 },
    { "embedEventhandler_", "LCCBEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 85, -1 },
    { "writeEventhandler_", "LCCBEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 86, -1 },
    { "runFinishedHandler_", "LCCBEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 87, -1 },
  };
  static const void *ptrTable[] = { "LJavaNetURL;", "LJavaNetURL;LCCBNiceAppendable;", "setEventPublisher", "LCCBEventPublisher;", "handleTestSourceRead", "LCCBTestSourceRead;", "handleTestCaseStarted", "LCCBTestCaseStarted;", "handleTestStepStarted", "LCCBTestStepStarted;", "handleTestStepFinished", "LCCBTestStepFinished;", "handleEmbed", "LCCBEmbedEvent;", "handleWrite", "LCCBWriteEvent;", "handleStartOfFeature", "LCCBTestCase;", "createFeature", "(Lcucumber/api/TestCase;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "createTagList", "LJavaUtilList;", "(Ljava/util/List<Lgherkin/ast/Tag;>;)Ljava/util/List<Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;>;", "handleScenarioOutline", "createScenarioOutline", "LGherkinAstScenarioOutline;", "(Lgherkin/ast/ScenarioOutline;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "addOutlineStepsToReport", "createDocStringMap", "LGherkinAstDocString;", "(Lgherkin/ast/DocString;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "createDataTableList", "LGherkinAstDataTable;", "(Lgherkin/ast/DataTable;)Ljava/util/List<Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;>;", "createRowMap", "LGherkinAstTableRow;", "(Lgherkin/ast/TableRow;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "createCellList", "(Lgherkin/ast/TableRow;)Ljava/util/List<Ljava/lang/String;>;", "createExamples", "LGherkinAstExamples;", "(Lgherkin/ast/Examples;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "createTestCase", "createBackground", "isFirstStepAfterBackground", "LCCBTestStep;", "createTestStep", "(Lcucumber/api/TestStep;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LGherkinPicklesPickleString;", "(Lgherkin/pickles/PickleString;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LGherkinPicklesPickleTable;", "(Lgherkin/pickles/PickleTable;)Ljava/util/List<Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;>;", "LGherkinPicklesPickleRow;", "(Lgherkin/pickles/PickleRow;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "(Lgherkin/pickles/PickleRow;)Ljava/util/List<Ljava/lang/String;>;", "createMatchMap", "LCCBTestStep;LCCBResult;", "(Lcucumber/api/TestStep;Lcucumber/api/Result;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "createResultMap", "LCCBResult;", "(Lcucumber/api/Result;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "jsFunctionCall", "LNSString;[LNSObject;", "toUrl", "LNSString;", "writeStreamToURL", "LJavaIoInputStream;LJavaNetURL;", "writeBytesToURL", "[BLJavaNetURL;", "LCCBRCucumberException;", "createJsOut", "createReportFileOutputStream", "closeQuietly", "LJavaIoCloseable;", &CCBRHTMLFormatter_gson, &CCBRHTMLFormatter_JS_FORMATTER_VAR, &CCBRHTMLFormatter_JS_REPORT_FILENAME, &CCBRHTMLFormatter_TEXT_ASSETS, &CCBRHTMLFormatter_MIME_TYPES_EXTENSIONS, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestSourceRead;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestCaseStarted;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestStepStarted;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestStepFinished;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/EmbedEvent;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/WriteEvent;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestRunFinished;>;" };
  static const J2ObjcClassInfo _CCBRHTMLFormatter = { "HTMLFormatter", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x10, 39, 21, -1, -1, -1, -1, -1 };
  return &_CCBRHTMLFormatter;
}

+ (void)initialize {
  if (self == [CCBRHTMLFormatter class]) {
    JreStrongAssign(&CCBRHTMLFormatter_gson, [((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() setPrettyPrinting])) create]);
    JreStrongAssignAndConsume(&CCBRHTMLFormatter_TEXT_ASSETS, [IOSObjectArray newArrayWithObjects:(id[]){ @"/cucumber/formatter/formatter.js", @"/cucumber/formatter/index.html", @"/cucumber/formatter/jquery-1.8.2.min.js", @"/cucumber/formatter/style.css" } count:4 type:NSString_class_()]);
    JreStrongAssignAndConsume(&CCBRHTMLFormatter_MIME_TYPES_EXTENSIONS, new_CCBRHTMLFormatter_1_init());
    J2OBJC_SET_INITIALIZED(CCBRHTMLFormatter)
  }
}

@end

void CCBRHTMLFormatter_initWithJavaNetURL_(CCBRHTMLFormatter *self, JavaNetURL *htmlReportDir) {
  CCBRHTMLFormatter_initWithJavaNetURL_withCCBNiceAppendable_(self, htmlReportDir, CCBRHTMLFormatter_createJsOutWithJavaNetURL_(htmlReportDir));
}

CCBRHTMLFormatter *new_CCBRHTMLFormatter_initWithJavaNetURL_(JavaNetURL *htmlReportDir) {
  J2OBJC_NEW_IMPL(CCBRHTMLFormatter, initWithJavaNetURL_, htmlReportDir)
}

CCBRHTMLFormatter *create_CCBRHTMLFormatter_initWithJavaNetURL_(JavaNetURL *htmlReportDir) {
  J2OBJC_CREATE_IMPL(CCBRHTMLFormatter, initWithJavaNetURL_, htmlReportDir)
}

void CCBRHTMLFormatter_initWithJavaNetURL_withCCBNiceAppendable_(CCBRHTMLFormatter *self, JavaNetURL *htmlReportDir, CCBNiceAppendable *jsOut) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->testSources_, new_CCBRTestSourcesModel_init());
  self->firstFeature_ = true;
  JreStrongAssignAndConsume(&self->testSourceReadHandler_, new_CCBRHTMLFormatter_2_initWithCCBRHTMLFormatter_(self));
  JreStrongAssignAndConsume(&self->caseStartedHandler_, new_CCBRHTMLFormatter_3_initWithCCBRHTMLFormatter_(self));
  JreStrongAssignAndConsume(&self->stepStartedHandler_, new_CCBRHTMLFormatter_4_initWithCCBRHTMLFormatter_(self));
  JreStrongAssignAndConsume(&self->stepFinishedHandler_, new_CCBRHTMLFormatter_5_initWithCCBRHTMLFormatter_(self));
  JreStrongAssignAndConsume(&self->embedEventhandler_, new_CCBRHTMLFormatter_6_initWithCCBRHTMLFormatter_(self));
  JreStrongAssignAndConsume(&self->writeEventhandler_, new_CCBRHTMLFormatter_7_initWithCCBRHTMLFormatter_(self));
  JreStrongAssignAndConsume(&self->runFinishedHandler_, new_CCBRHTMLFormatter_8_initWithCCBRHTMLFormatter_(self));
  JreStrongAssign(&self->htmlReportDir_, htmlReportDir);
  JreStrongAssign(&self->jsOut_, jsOut);
}

CCBRHTMLFormatter *new_CCBRHTMLFormatter_initWithJavaNetURL_withCCBNiceAppendable_(JavaNetURL *htmlReportDir, CCBNiceAppendable *jsOut) {
  J2OBJC_NEW_IMPL(CCBRHTMLFormatter, initWithJavaNetURL_withCCBNiceAppendable_, htmlReportDir, jsOut)
}

CCBRHTMLFormatter *create_CCBRHTMLFormatter_initWithJavaNetURL_withCCBNiceAppendable_(JavaNetURL *htmlReportDir, CCBNiceAppendable *jsOut) {
  J2OBJC_CREATE_IMPL(CCBRHTMLFormatter, initWithJavaNetURL_withCCBNiceAppendable_, htmlReportDir, jsOut)
}

void CCBRHTMLFormatter_handleTestSourceReadWithCCBTestSourceRead_(CCBRHTMLFormatter *self, CCBTestSourceRead *event) {
  [((CCBRTestSourcesModel *) nil_chk(self->testSources_)) addTestSourceReadEventWithNSString:((CCBTestSourceRead *) nil_chk(event))->uri_ withCCBTestSourceRead:event];
}

void CCBRHTMLFormatter_handleTestCaseStartedWithCCBTestCaseStarted_(CCBRHTMLFormatter *self, CCBTestCaseStarted *event) {
  if (self->firstFeature_) {
    [((CCBNiceAppendable *) nil_chk([((CCBNiceAppendable *) nil_chk([((CCBNiceAppendable *) nil_chk([((CCBNiceAppendable *) nil_chk(self->jsOut_)) appendWithJavaLangCharSequence:@"$(document).ready(function() {"])) appendWithJavaLangCharSequence:@"var "])) appendWithJavaLangCharSequence:CCBRHTMLFormatter_JS_FORMATTER_VAR])) appendWithJavaLangCharSequence:@" = new CucumberHTML.DOMFormatter($('.cucumber-report'));"];
    self->firstFeature_ = false;
  }
  CCBRHTMLFormatter_handleStartOfFeatureWithCCBTestCase_(self, ((CCBTestCaseStarted *) nil_chk(event))->testCase_);
  CCBRHTMLFormatter_handleScenarioOutlineWithCCBTestCase_(self, event->testCase_);
  JreStrongAssign(&self->currentTestCaseMap_, CCBRHTMLFormatter_createTestCaseWithCCBTestCase_(self, event->testCase_));
  if ([((CCBRTestSourcesModel *) nil_chk(self->testSources_)) hasBackgroundWithNSString:self->currentFeatureFile_ withInt:[((CCBTestCase *) nil_chk(event->testCase_)) getLine]]) {
    CCBRHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, @"background", [IOSObjectArray arrayWithObjects:(id[]){ CCBRHTMLFormatter_createBackgroundWithCCBTestCase_(self, event->testCase_) } count:1 type:NSObject_class_()]);
  }
  else {
    CCBRHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, @"scenario", [IOSObjectArray arrayWithObjects:(id[]){ self->currentTestCaseMap_ } count:1 type:NSObject_class_()]);
    JreStrongAssign(&self->currentTestCaseMap_, nil);
  }
}

void CCBRHTMLFormatter_handleTestStepStartedWithCCBTestStepStarted_(CCBRHTMLFormatter *self, CCBTestStepStarted *event) {
  if (![((CCBTestStep *) nil_chk(((CCBTestStepStarted *) nil_chk(event))->testStep_)) isHook]) {
    if (CCBRHTMLFormatter_isFirstStepAfterBackgroundWithCCBTestStep_(self, event->testStep_)) {
      CCBRHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, @"scenario", [IOSObjectArray arrayWithObjects:(id[]){ self->currentTestCaseMap_ } count:1 type:NSObject_class_()]);
      JreStrongAssign(&self->currentTestCaseMap_, nil);
    }
    CCBRHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, @"step", [IOSObjectArray arrayWithObjects:(id[]){ CCBRHTMLFormatter_createTestStepWithCCBTestStep_(self, event->testStep_) } count:1 type:NSObject_class_()]);
  }
}

void CCBRHTMLFormatter_handleTestStepFinishedWithCCBTestStepFinished_(CCBRHTMLFormatter *self, CCBTestStepFinished *event) {
  if (![((CCBTestStep *) nil_chk(((CCBTestStepFinished *) nil_chk(event))->testStep_)) isHook]) {
    CCBRHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, @"match", [IOSObjectArray arrayWithObjects:(id[]){ CCBRHTMLFormatter_createMatchMapWithCCBTestStep_withCCBResult_(self, event->testStep_, event->result_) } count:1 type:NSObject_class_()]);
    CCBRHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, @"result", [IOSObjectArray arrayWithObjects:(id[]){ CCBRHTMLFormatter_createResultMapWithCCBResult_(self, event->result_) } count:1 type:NSObject_class_()]);
  }
  else {
    CCBRHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, [((CCBHookType *) nil_chk([event->testStep_ getHookType])) description], [IOSObjectArray arrayWithObjects:(id[]){ CCBRHTMLFormatter_createResultMapWithCCBResult_(self, event->result_) } count:1 type:NSObject_class_()]);
  }
}

void CCBRHTMLFormatter_handleEmbedWithCCBEmbedEvent_(CCBRHTMLFormatter *self, CCBEmbedEvent *event) {
  NSString *mimeType = ((CCBEmbedEvent *) nil_chk(event))->mimeType_;
  if ([((NSString *) nil_chk(mimeType)) java_hasPrefix:@"text/"]) {
    CCBRHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, @"embedding", [IOSObjectArray arrayWithObjects:(id[]){ mimeType, [NSString java_stringWithBytes:event->data_] } count:2 type:NSObject_class_()]);
  }
  else {
    NSString *extension = [((id<JavaUtilMap>) nil_chk(CCBRHTMLFormatter_MIME_TYPES_EXTENSIONS)) getWithId:mimeType];
    if (extension != nil) {
      JavaLangStringBuilder *fileName = [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([create_JavaLangStringBuilder_initWithNSString_(@"embedded") appendWithInt:self->embeddedIndex_++])) appendWithNSString:@"."])) appendWithNSString:extension];
      CCBRHTMLFormatter_writeBytesToURLWithByteArray_withJavaNetURL_(event->data_, CCBRHTMLFormatter_toUrlWithNSString_(self, [((JavaLangStringBuilder *) nil_chk(fileName)) description]));
      CCBRHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, @"embedding", [IOSObjectArray arrayWithObjects:(id[]){ mimeType, fileName } count:2 type:NSObject_class_()]);
    }
  }
}

void CCBRHTMLFormatter_handleWriteWithCCBWriteEvent_(CCBRHTMLFormatter *self, CCBWriteEvent *event) {
  CCBRHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, @"write", [IOSObjectArray arrayWithObjects:(id[]){ ((CCBWriteEvent *) nil_chk(event))->text_ } count:1 type:NSObject_class_()]);
}

void CCBRHTMLFormatter_finishReport(CCBRHTMLFormatter *self) {
  if (!self->firstFeature_) {
    [((CCBNiceAppendable *) nil_chk(self->jsOut_)) appendWithJavaLangCharSequence:@"});"];
    CCBRHTMLFormatter_copyReportFiles(self);
  }
  [((CCBNiceAppendable *) nil_chk(self->jsOut_)) close];
}

void CCBRHTMLFormatter_handleStartOfFeatureWithCCBTestCase_(CCBRHTMLFormatter *self, CCBTestCase *testCase) {
  if (self->currentFeatureFile_ == nil || ![self->currentFeatureFile_ isEqual:[((CCBTestCase *) nil_chk(testCase)) getUri]]) {
    JreStrongAssign(&self->currentFeatureFile_, [((CCBTestCase *) nil_chk(testCase)) getUri]);
    CCBRHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, @"uri", [IOSObjectArray arrayWithObjects:(id[]){ self->currentFeatureFile_ } count:1 type:NSObject_class_()]);
    CCBRHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, @"feature", [IOSObjectArray arrayWithObjects:(id[]){ CCBRHTMLFormatter_createFeatureWithCCBTestCase_(self, testCase) } count:1 type:NSObject_class_()]);
  }
}

id<JavaUtilMap> CCBRHTMLFormatter_createFeatureWithCCBTestCase_(CCBRHTMLFormatter *self, CCBTestCase *testCase) {
  id<JavaUtilMap> featureMap = create_JavaUtilHashMap_init();
  GherkinAstFeature *feature = [((CCBRTestSourcesModel *) nil_chk(self->testSources_)) getFeatureWithNSString:[((CCBTestCase *) nil_chk(testCase)) getUri]];
  if (feature != nil) {
    [featureMap putWithId:@"keyword" withId:[feature getKeyword]];
    [featureMap putWithId:@"name" withId:[feature getName]];
    [featureMap putWithId:@"description" withId:[feature getDescription] != nil ? [feature getDescription] : @""];
    if (![((id<JavaUtilList>) nil_chk([feature getTags])) isEmpty]) {
      [featureMap putWithId:@"tags" withId:CCBRHTMLFormatter_createTagListWithJavaUtilList_(self, [feature getTags])];
    }
  }
  return featureMap;
}

id<JavaUtilList> CCBRHTMLFormatter_createTagListWithJavaUtilList_(CCBRHTMLFormatter *self, id<JavaUtilList> tags) {
  id<JavaUtilList> tagList = create_JavaUtilArrayList_init();
  for (GherkinAstTag * __strong tag in nil_chk(tags)) {
    id<JavaUtilMap> tagMap = create_JavaUtilHashMap_init();
    [tagMap putWithId:@"name" withId:[((GherkinAstTag *) nil_chk(tag)) getName]];
    [tagList addWithId:tagMap];
  }
  return tagList;
}

void CCBRHTMLFormatter_handleScenarioOutlineWithCCBTestCase_(CCBRHTMLFormatter *self, CCBTestCase *testCase) {
  CCBRTestSourcesModel_AstNode *astNode = [((CCBRTestSourcesModel *) nil_chk(self->testSources_)) getAstNodeWithNSString:self->currentFeatureFile_ withInt:[((CCBTestCase *) nil_chk(testCase)) getLine]];
  if (CCBRTestSourcesModel_isScenarioOutlineScenarioWithCCBRTestSourcesModel_AstNode_(astNode)) {
    GherkinAstScenarioOutline *scenarioOutline = (GherkinAstScenarioOutline *) cast_chk(CCBRTestSourcesModel_getScenarioDefinitionWithCCBRTestSourcesModel_AstNode_(astNode), [GherkinAstScenarioOutline class]);
    if (self->currentScenarioOutline_ == nil || ![self->currentScenarioOutline_ isEqual:scenarioOutline]) {
      JreStrongAssign(&self->currentScenarioOutline_, scenarioOutline);
      CCBRHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, @"scenarioOutline", [IOSObjectArray arrayWithObjects:(id[]){ CCBRHTMLFormatter_createScenarioOutlineWithGherkinAstScenarioOutline_(self, self->currentScenarioOutline_) } count:1 type:NSObject_class_()]);
      CCBRHTMLFormatter_addOutlineStepsToReportWithGherkinAstScenarioOutline_(self, scenarioOutline);
    }
    GherkinAstExamples *examples = (GherkinAstExamples *) cast_chk(((CCBRTestSourcesModel_AstNode *) nil_chk(((CCBRTestSourcesModel_AstNode *) nil_chk(astNode))->parent_))->node_, [GherkinAstExamples class]);
    if (self->currentExamples_ == nil || ![self->currentExamples_ isEqual:examples]) {
      JreStrongAssign(&self->currentExamples_, examples);
      CCBRHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, @"examples", [IOSObjectArray arrayWithObjects:(id[]){ CCBRHTMLFormatter_createExamplesWithGherkinAstExamples_(self, self->currentExamples_) } count:1 type:NSObject_class_()]);
    }
  }
  else {
    JreStrongAssign(&self->currentScenarioOutline_, nil);
    JreStrongAssign(&self->currentExamples_, nil);
  }
}

id<JavaUtilMap> CCBRHTMLFormatter_createScenarioOutlineWithGherkinAstScenarioOutline_(CCBRHTMLFormatter *self, GherkinAstScenarioOutline *scenarioOutline) {
  id<JavaUtilMap> scenarioOutlineMap = create_JavaUtilHashMap_init();
  [scenarioOutlineMap putWithId:@"name" withId:[((GherkinAstScenarioOutline *) nil_chk(scenarioOutline)) getName]];
  [scenarioOutlineMap putWithId:@"keyword" withId:[scenarioOutline getKeyword]];
  [scenarioOutlineMap putWithId:@"description" withId:[scenarioOutline getDescription] != nil ? [scenarioOutline getDescription] : @""];
  if (![((id<JavaUtilList>) nil_chk([scenarioOutline getTags])) isEmpty]) {
    [scenarioOutlineMap putWithId:@"tags" withId:CCBRHTMLFormatter_createTagListWithJavaUtilList_(self, [scenarioOutline getTags])];
  }
  return scenarioOutlineMap;
}

void CCBRHTMLFormatter_addOutlineStepsToReportWithGherkinAstScenarioOutline_(CCBRHTMLFormatter *self, GherkinAstScenarioOutline *scenarioOutline) {
  for (GherkinAstStep * __strong step in nil_chk([((GherkinAstScenarioOutline *) nil_chk(scenarioOutline)) getSteps])) {
    id<JavaUtilMap> stepMap = create_JavaUtilHashMap_init();
    [stepMap putWithId:@"name" withId:[((GherkinAstStep *) nil_chk(step)) getText]];
    [stepMap putWithId:@"keyword" withId:[step getKeyword]];
    if ([step getArgument] != nil) {
      GherkinAstNode *argument = [step getArgument];
      if ([argument isKindOfClass:[GherkinAstDocString class]]) {
        [stepMap putWithId:@"doc_string" withId:CCBRHTMLFormatter_createDocStringMapWithGherkinAstDocString_(self, (GherkinAstDocString *) cast_chk(argument, [GherkinAstDocString class]))];
      }
      else if ([argument isKindOfClass:[GherkinAstDataTable class]]) {
        [stepMap putWithId:@"rows" withId:CCBRHTMLFormatter_createDataTableListWithGherkinAstDataTable_(self, (GherkinAstDataTable *) cast_chk(argument, [GherkinAstDataTable class]))];
      }
    }
    CCBRHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, @"step", [IOSObjectArray arrayWithObjects:(id[]){ stepMap } count:1 type:NSObject_class_()]);
  }
}

id<JavaUtilMap> CCBRHTMLFormatter_createDocStringMapWithGherkinAstDocString_(CCBRHTMLFormatter *self, GherkinAstDocString *docString) {
  id<JavaUtilMap> docStringMap = create_JavaUtilHashMap_init();
  [docStringMap putWithId:@"value" withId:[((GherkinAstDocString *) nil_chk(docString)) getContent]];
  return docStringMap;
}

id<JavaUtilList> CCBRHTMLFormatter_createDataTableListWithGherkinAstDataTable_(CCBRHTMLFormatter *self, GherkinAstDataTable *dataTable) {
  id<JavaUtilList> rowList = create_JavaUtilArrayList_init();
  for (GherkinAstTableRow * __strong row in nil_chk([((GherkinAstDataTable *) nil_chk(dataTable)) getRows])) {
    [rowList addWithId:CCBRHTMLFormatter_createRowMapWithGherkinAstTableRow_(self, row)];
  }
  return rowList;
}

id<JavaUtilMap> CCBRHTMLFormatter_createRowMapWithGherkinAstTableRow_(CCBRHTMLFormatter *self, GherkinAstTableRow *row) {
  id<JavaUtilMap> rowMap = create_JavaUtilHashMap_init();
  [rowMap putWithId:@"cells" withId:CCBRHTMLFormatter_createCellListWithGherkinAstTableRow_(self, row)];
  return rowMap;
}

id<JavaUtilList> CCBRHTMLFormatter_createCellListWithGherkinAstTableRow_(CCBRHTMLFormatter *self, GherkinAstTableRow *row) {
  id<JavaUtilList> cells = create_JavaUtilArrayList_init();
  for (GherkinAstTableCell * __strong cell in nil_chk([((GherkinAstTableRow *) nil_chk(row)) getCells])) {
    [cells addWithId:[((GherkinAstTableCell *) nil_chk(cell)) getValue]];
  }
  return cells;
}

id<JavaUtilMap> CCBRHTMLFormatter_createExamplesWithGherkinAstExamples_(CCBRHTMLFormatter *self, GherkinAstExamples *examples) {
  id<JavaUtilMap> examplesMap = create_JavaUtilHashMap_init();
  [examplesMap putWithId:@"name" withId:[((GherkinAstExamples *) nil_chk(examples)) getName]];
  [examplesMap putWithId:@"keyword" withId:[examples getKeyword]];
  [examplesMap putWithId:@"description" withId:[examples getDescription] != nil ? [examples getDescription] : @""];
  id<JavaUtilList> rowList = create_JavaUtilArrayList_init();
  [rowList addWithId:CCBRHTMLFormatter_createRowMapWithGherkinAstTableRow_(self, [examples getTableHeader])];
  for (GherkinAstTableRow * __strong row in nil_chk([examples getTableBody])) {
    [rowList addWithId:CCBRHTMLFormatter_createRowMapWithGherkinAstTableRow_(self, row)];
  }
  [examplesMap putWithId:@"rows" withId:rowList];
  if (![((id<JavaUtilList>) nil_chk([examples getTags])) isEmpty]) {
    [examplesMap putWithId:@"tags" withId:CCBRHTMLFormatter_createTagListWithJavaUtilList_(self, [examples getTags])];
  }
  return examplesMap;
}

id<JavaUtilMap> CCBRHTMLFormatter_createTestCaseWithCCBTestCase_(CCBRHTMLFormatter *self, CCBTestCase *testCase) {
  id<JavaUtilMap> testCaseMap = create_JavaUtilHashMap_init();
  [testCaseMap putWithId:@"name" withId:[((CCBTestCase *) nil_chk(testCase)) getName]];
  CCBRTestSourcesModel_AstNode *astNode = [((CCBRTestSourcesModel *) nil_chk(self->testSources_)) getAstNodeWithNSString:self->currentFeatureFile_ withInt:[testCase getLine]];
  if (astNode != nil) {
    GherkinAstScenarioDefinition *scenarioDefinition = CCBRTestSourcesModel_getScenarioDefinitionWithCCBRTestSourcesModel_AstNode_(astNode);
    [testCaseMap putWithId:@"keyword" withId:[((GherkinAstScenarioDefinition *) nil_chk(scenarioDefinition)) getKeyword]];
    [testCaseMap putWithId:@"description" withId:[scenarioDefinition getDescription] != nil ? [scenarioDefinition getDescription] : @""];
  }
  if (![((id<JavaUtilList>) nil_chk([testCase getTags])) isEmpty]) {
    id<JavaUtilList> tagList = create_JavaUtilArrayList_init();
    for (GherkinPicklesPickleTag * __strong tag in nil_chk([testCase getTags])) {
      id<JavaUtilMap> tagMap = create_JavaUtilHashMap_init();
      [tagMap putWithId:@"name" withId:[((GherkinPicklesPickleTag *) nil_chk(tag)) getName]];
      [tagList addWithId:tagMap];
    }
    [testCaseMap putWithId:@"tags" withId:tagList];
  }
  return testCaseMap;
}

id<JavaUtilMap> CCBRHTMLFormatter_createBackgroundWithCCBTestCase_(CCBRHTMLFormatter *self, CCBTestCase *testCase) {
  CCBRTestSourcesModel_AstNode *astNode = [((CCBRTestSourcesModel *) nil_chk(self->testSources_)) getAstNodeWithNSString:self->currentFeatureFile_ withInt:[((CCBTestCase *) nil_chk(testCase)) getLine]];
  if (astNode != nil) {
    GherkinAstBackground *background = CCBRTestSourcesModel_getBackgroundForTestCaseWithCCBRTestSourcesModel_AstNode_(astNode);
    id<JavaUtilMap> testCaseMap = create_JavaUtilHashMap_init();
    [testCaseMap putWithId:@"name" withId:[((GherkinAstBackground *) nil_chk(background)) getName]];
    [testCaseMap putWithId:@"keyword" withId:[background getKeyword]];
    [testCaseMap putWithId:@"description" withId:[background getDescription] != nil ? [background getDescription] : @""];
    return testCaseMap;
  }
  return nil;
}

jboolean CCBRHTMLFormatter_isFirstStepAfterBackgroundWithCCBTestStep_(CCBRHTMLFormatter *self, CCBTestStep *testStep) {
  CCBRTestSourcesModel_AstNode *astNode = [((CCBRTestSourcesModel *) nil_chk(self->testSources_)) getAstNodeWithNSString:self->currentFeatureFile_ withInt:[((CCBTestStep *) nil_chk(testStep)) getStepLine]];
  if (astNode != nil) {
    if (self->currentTestCaseMap_ != nil && !CCBRTestSourcesModel_isBackgroundStepWithCCBRTestSourcesModel_AstNode_(astNode)) {
      return true;
    }
  }
  return false;
}

id<JavaUtilMap> CCBRHTMLFormatter_createTestStepWithCCBTestStep_(CCBRHTMLFormatter *self, CCBTestStep *testStep) {
  id<JavaUtilMap> stepMap = create_JavaUtilHashMap_init();
  [stepMap putWithId:@"name" withId:[((CCBTestStep *) nil_chk(testStep)) getStepText]];
  if (![((id<JavaUtilList>) nil_chk([testStep getStepArgument])) isEmpty]) {
    id<GherkinPicklesArgument> argument = [((id<JavaUtilList>) nil_chk([testStep getStepArgument])) getWithInt:0];
    if ([argument isKindOfClass:[GherkinPicklesPickleString class]]) {
      [stepMap putWithId:@"doc_string" withId:CCBRHTMLFormatter_createDocStringMapWithGherkinPicklesPickleString_(self, (GherkinPicklesPickleString *) cast_chk(argument, [GherkinPicklesPickleString class]))];
    }
    else if ([argument isKindOfClass:[GherkinPicklesPickleTable class]]) {
      [stepMap putWithId:@"rows" withId:CCBRHTMLFormatter_createDataTableListWithGherkinPicklesPickleTable_(self, (GherkinPicklesPickleTable *) cast_chk(argument, [GherkinPicklesPickleTable class]))];
    }
  }
  CCBRTestSourcesModel_AstNode *astNode = [((CCBRTestSourcesModel *) nil_chk(self->testSources_)) getAstNodeWithNSString:self->currentFeatureFile_ withInt:[testStep getStepLine]];
  if (astNode != nil) {
    GherkinAstStep *step = (GherkinAstStep *) cast_chk(astNode->node_, [GherkinAstStep class]);
    [stepMap putWithId:@"keyword" withId:[((GherkinAstStep *) nil_chk(step)) getKeyword]];
  }
  return stepMap;
}

id<JavaUtilMap> CCBRHTMLFormatter_createDocStringMapWithGherkinPicklesPickleString_(CCBRHTMLFormatter *self, GherkinPicklesPickleString *docString) {
  id<JavaUtilMap> docStringMap = create_JavaUtilHashMap_init();
  [docStringMap putWithId:@"value" withId:[((GherkinPicklesPickleString *) nil_chk(docString)) getContent]];
  return docStringMap;
}

id<JavaUtilList> CCBRHTMLFormatter_createDataTableListWithGherkinPicklesPickleTable_(CCBRHTMLFormatter *self, GherkinPicklesPickleTable *dataTable) {
  id<JavaUtilList> rowList = create_JavaUtilArrayList_init();
  for (GherkinPicklesPickleRow * __strong row in nil_chk([((GherkinPicklesPickleTable *) nil_chk(dataTable)) getRows])) {
    [rowList addWithId:CCBRHTMLFormatter_createRowMapWithGherkinPicklesPickleRow_(self, row)];
  }
  return rowList;
}

id<JavaUtilMap> CCBRHTMLFormatter_createRowMapWithGherkinPicklesPickleRow_(CCBRHTMLFormatter *self, GherkinPicklesPickleRow *row) {
  id<JavaUtilMap> rowMap = create_JavaUtilHashMap_init();
  [rowMap putWithId:@"cells" withId:CCBRHTMLFormatter_createCellListWithGherkinPicklesPickleRow_(self, row)];
  return rowMap;
}

id<JavaUtilList> CCBRHTMLFormatter_createCellListWithGherkinPicklesPickleRow_(CCBRHTMLFormatter *self, GherkinPicklesPickleRow *row) {
  id<JavaUtilList> cells = create_JavaUtilArrayList_init();
  for (GherkinPicklesPickleCell * __strong cell in nil_chk([((GherkinPicklesPickleRow *) nil_chk(row)) getCells])) {
    [cells addWithId:[((GherkinPicklesPickleCell *) nil_chk(cell)) getValue]];
  }
  return cells;
}

id<JavaUtilMap> CCBRHTMLFormatter_createMatchMapWithCCBTestStep_withCCBResult_(CCBRHTMLFormatter *self, CCBTestStep *testStep, CCBResult *result) {
  id<JavaUtilMap> matchMap = create_JavaUtilHashMap_init();
  if (![((CCBResult *) nil_chk(result)) isWithCCBResult_Type:JreLoadEnum(CCBResult_Type, UNDEFINED)]) {
    [matchMap putWithId:@"location" withId:[((CCBTestStep *) nil_chk(testStep)) getCodeLocation]];
  }
  return matchMap;
}

id<JavaUtilMap> CCBRHTMLFormatter_createResultMapWithCCBResult_(CCBRHTMLFormatter *self, CCBResult *result) {
  id<JavaUtilMap> resultMap = create_JavaUtilHashMap_init();
  [resultMap putWithId:@"status" withId:[((CCBResult_Type *) nil_chk([((CCBResult *) nil_chk(result)) getStatus])) lowerCaseName]];
  if ([result getErrorMessage] != nil) {
    [resultMap putWithId:@"error_message" withId:[result getErrorMessage]];
  }
  return resultMap;
}

void CCBRHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(CCBRHTMLFormatter *self, NSString *functionName, IOSObjectArray *args) {
  CCBNiceAppendable *out = [((CCBNiceAppendable *) nil_chk([((CCBNiceAppendable *) nil_chk([((CCBNiceAppendable *) nil_chk(self->jsOut_)) appendWithJavaLangCharSequence:JreStrcat("$C", CCBRHTMLFormatter_JS_FORMATTER_VAR, '.')])) appendWithJavaLangCharSequence:functionName])) appendWithJavaLangCharSequence:@"("];
  jboolean comma = false;
  {
    IOSObjectArray *a__ = args;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id arg = *b__++;
      if (comma) {
        [((CCBNiceAppendable *) nil_chk(out)) appendWithJavaLangCharSequence:@", "];
      }
      NSString *stringArg = [((ComGoogleGsonGson *) nil_chk(CCBRHTMLFormatter_gson)) toJsonWithId:arg];
      [((CCBNiceAppendable *) nil_chk(out)) appendWithJavaLangCharSequence:stringArg];
      comma = true;
    }
  }
  [((CCBNiceAppendable *) nil_chk([((CCBNiceAppendable *) nil_chk(out)) appendWithJavaLangCharSequence:@");"])) println];
}

void CCBRHTMLFormatter_copyReportFiles(CCBRHTMLFormatter *self) {
  if (self->htmlReportDir_ == nil) {
    return;
  }
  {
    IOSObjectArray *a__ = CCBRHTMLFormatter_TEXT_ASSETS;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *textAsset = *b__++;
      JavaIoInputStream *textAssetStream = [[self java_getClass] getResourceAsStream:textAsset];
      if (textAssetStream == nil) {
        @throw create_CCBRCucumberException_initWithNSString_(JreStrcat("$$$", @"Couldn't find ", textAsset, @". Is cucumber-html on your classpath? Make sure you have the right version."));
      }
      NSString *fileName = [create_JavaIoFile_initWithNSString_(textAsset) getName];
      CCBRHTMLFormatter_writeStreamToURLWithJavaIoInputStream_withJavaNetURL_(textAssetStream, CCBRHTMLFormatter_toUrlWithNSString_(self, fileName));
    }
  }
}

JavaNetURL *CCBRHTMLFormatter_toUrlWithNSString_(CCBRHTMLFormatter *self, NSString *fileName) {
  @try {
    return create_JavaNetURL_initWithJavaNetURL_withNSString_(self->htmlReportDir_, fileName);
  }
  @catch (JavaIoIOException *e) {
    @throw create_CCBRCucumberException_initWithJavaLangThrowable_(e);
  }
}

void CCBRHTMLFormatter_writeStreamToURLWithJavaIoInputStream_withJavaNetURL_(JavaIoInputStream *inArg, JavaNetURL *url) {
  CCBRHTMLFormatter_initialize();
  JavaIoOutputStream *out = CCBRHTMLFormatter_createReportFileOutputStreamWithJavaNetURL_(url);
  IOSByteArray *buffer = [IOSByteArray arrayWithLength:16 * 1024];
  @try {
    jint len = [((JavaIoInputStream *) nil_chk(inArg)) readWithByteArray:buffer];
    while (len != -1) {
      [((JavaIoOutputStream *) nil_chk(out)) writeWithByteArray:buffer withInt:0 withInt:len];
      len = [inArg readWithByteArray:buffer];
    }
  }
  @catch (JavaIoIOException *e) {
    @throw create_CCBRCucumberException_initWithNSString_withJavaLangThrowable_(@"Unable to write to report file item: ", e);
  }
  @finally {
    CCBRHTMLFormatter_closeQuietlyWithJavaIoCloseable_(out);
  }
}

void CCBRHTMLFormatter_writeBytesToURLWithByteArray_withJavaNetURL_(IOSByteArray *buf, JavaNetURL *url) {
  CCBRHTMLFormatter_initialize();
  JavaIoOutputStream *out = CCBRHTMLFormatter_createReportFileOutputStreamWithJavaNetURL_(url);
  @try {
    [((JavaIoOutputStream *) nil_chk(out)) writeWithByteArray:buf];
  }
  @catch (JavaIoIOException *e) {
    @throw create_CCBRCucumberException_initWithNSString_withJavaLangThrowable_(@"Unable to write to report file item: ", e);
  }
  @finally {
    CCBRHTMLFormatter_closeQuietlyWithJavaIoCloseable_(out);
  }
}

CCBNiceAppendable *CCBRHTMLFormatter_createJsOutWithJavaNetURL_(JavaNetURL *htmlReportDir) {
  CCBRHTMLFormatter_initialize();
  @try {
    return create_CCBNiceAppendable_initWithJavaLangAppendable_(create_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(CCBRHTMLFormatter_createReportFileOutputStreamWithJavaNetURL_(create_JavaNetURL_initWithJavaNetURL_withNSString_(htmlReportDir, CCBRHTMLFormatter_JS_REPORT_FILENAME)), @"UTF-8"));
  }
  @catch (JavaIoIOException *e) {
    @throw create_CCBRCucumberException_initWithJavaLangThrowable_(e);
  }
}

JavaIoOutputStream *CCBRHTMLFormatter_createReportFileOutputStreamWithJavaNetURL_(JavaNetURL *url) {
  CCBRHTMLFormatter_initialize();
  @try {
    return create_CCBRURLOutputStream_initWithJavaNetURL_(url);
  }
  @catch (JavaIoIOException *e) {
    @throw create_CCBRCucumberException_initWithJavaLangThrowable_(e);
  }
}

void CCBRHTMLFormatter_closeQuietlyWithJavaIoCloseable_(id<JavaIoCloseable> outArg) {
  CCBRHTMLFormatter_initialize();
  @try {
    [((id<JavaIoCloseable>) nil_chk(outArg)) close];
  }
  @catch (JavaIoIOException *ignored) {
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRHTMLFormatter)

@implementation CCBRHTMLFormatter_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CCBRHTMLFormatter_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LCCBRHTMLFormatter;", "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _CCBRHTMLFormatter_1 = { "", "cucumber.runtime.formatter", ptrTable, methods, NULL, 7, 0x8018, 1, 0, 0, -1, -1, 1, -1 };
  return &_CCBRHTMLFormatter_1;
}

@end

void CCBRHTMLFormatter_1_init(CCBRHTMLFormatter_1 *self) {
  JavaUtilHashMap_init(self);
  {
    [self putWithId:@"image/bmp" withId:@"bmp"];
    [self putWithId:@"image/gif" withId:@"gif"];
    [self putWithId:@"image/jpeg" withId:@"jpg"];
    [self putWithId:@"image/png" withId:@"png"];
    [self putWithId:@"image/svg+xml" withId:@"svg"];
    [self putWithId:@"video/ogg" withId:@"ogg"];
  }
}

CCBRHTMLFormatter_1 *new_CCBRHTMLFormatter_1_init() {
  J2OBJC_NEW_IMPL(CCBRHTMLFormatter_1, init)
}

CCBRHTMLFormatter_1 *create_CCBRHTMLFormatter_1_init() {
  J2OBJC_CREATE_IMPL(CCBRHTMLFormatter_1, init)
}

@implementation CCBRHTMLFormatter_2

- (instancetype __nonnull)initWithCCBRHTMLFormatter:(CCBRHTMLFormatter *)outer$ {
  CCBRHTMLFormatter_2_initWithCCBRHTMLFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCCBEvent:(CCBTestSourceRead *)event {
  CCBRHTMLFormatter_handleTestSourceReadWithCCBTestSourceRead_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRHTMLFormatter:);
  methods[1].selector = @selector(receiveWithCCBEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRHTMLFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCCBTestSourceRead;", "LCCBRHTMLFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestSourceRead;>;" };
  static const J2ObjcClassInfo _CCBRHTMLFormatter_2 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRHTMLFormatter_2;
}

@end

void CCBRHTMLFormatter_2_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter_2 *self, CCBRHTMLFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRHTMLFormatter_2 *new_CCBRHTMLFormatter_2_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRHTMLFormatter_2, initWithCCBRHTMLFormatter_, outer$)
}

CCBRHTMLFormatter_2 *create_CCBRHTMLFormatter_2_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRHTMLFormatter_2, initWithCCBRHTMLFormatter_, outer$)
}

@implementation CCBRHTMLFormatter_3

- (instancetype __nonnull)initWithCCBRHTMLFormatter:(CCBRHTMLFormatter *)outer$ {
  CCBRHTMLFormatter_3_initWithCCBRHTMLFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCCBEvent:(CCBTestCaseStarted *)event {
  CCBRHTMLFormatter_handleTestCaseStartedWithCCBTestCaseStarted_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRHTMLFormatter:);
  methods[1].selector = @selector(receiveWithCCBEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRHTMLFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCCBTestCaseStarted;", "LCCBRHTMLFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestCaseStarted;>;" };
  static const J2ObjcClassInfo _CCBRHTMLFormatter_3 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRHTMLFormatter_3;
}

@end

void CCBRHTMLFormatter_3_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter_3 *self, CCBRHTMLFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRHTMLFormatter_3 *new_CCBRHTMLFormatter_3_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRHTMLFormatter_3, initWithCCBRHTMLFormatter_, outer$)
}

CCBRHTMLFormatter_3 *create_CCBRHTMLFormatter_3_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRHTMLFormatter_3, initWithCCBRHTMLFormatter_, outer$)
}

@implementation CCBRHTMLFormatter_4

- (instancetype __nonnull)initWithCCBRHTMLFormatter:(CCBRHTMLFormatter *)outer$ {
  CCBRHTMLFormatter_4_initWithCCBRHTMLFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCCBEvent:(CCBTestStepStarted *)event {
  CCBRHTMLFormatter_handleTestStepStartedWithCCBTestStepStarted_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRHTMLFormatter:);
  methods[1].selector = @selector(receiveWithCCBEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRHTMLFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCCBTestStepStarted;", "LCCBRHTMLFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestStepStarted;>;" };
  static const J2ObjcClassInfo _CCBRHTMLFormatter_4 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRHTMLFormatter_4;
}

@end

void CCBRHTMLFormatter_4_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter_4 *self, CCBRHTMLFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRHTMLFormatter_4 *new_CCBRHTMLFormatter_4_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRHTMLFormatter_4, initWithCCBRHTMLFormatter_, outer$)
}

CCBRHTMLFormatter_4 *create_CCBRHTMLFormatter_4_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRHTMLFormatter_4, initWithCCBRHTMLFormatter_, outer$)
}

@implementation CCBRHTMLFormatter_5

- (instancetype __nonnull)initWithCCBRHTMLFormatter:(CCBRHTMLFormatter *)outer$ {
  CCBRHTMLFormatter_5_initWithCCBRHTMLFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCCBEvent:(CCBTestStepFinished *)event {
  CCBRHTMLFormatter_handleTestStepFinishedWithCCBTestStepFinished_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRHTMLFormatter:);
  methods[1].selector = @selector(receiveWithCCBEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRHTMLFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCCBTestStepFinished;", "LCCBRHTMLFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestStepFinished;>;" };
  static const J2ObjcClassInfo _CCBRHTMLFormatter_5 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRHTMLFormatter_5;
}

@end

void CCBRHTMLFormatter_5_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter_5 *self, CCBRHTMLFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRHTMLFormatter_5 *new_CCBRHTMLFormatter_5_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRHTMLFormatter_5, initWithCCBRHTMLFormatter_, outer$)
}

CCBRHTMLFormatter_5 *create_CCBRHTMLFormatter_5_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRHTMLFormatter_5, initWithCCBRHTMLFormatter_, outer$)
}

@implementation CCBRHTMLFormatter_6

- (instancetype __nonnull)initWithCCBRHTMLFormatter:(CCBRHTMLFormatter *)outer$ {
  CCBRHTMLFormatter_6_initWithCCBRHTMLFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCCBEvent:(CCBEmbedEvent *)event {
  CCBRHTMLFormatter_handleEmbedWithCCBEmbedEvent_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRHTMLFormatter:);
  methods[1].selector = @selector(receiveWithCCBEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRHTMLFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCCBEmbedEvent;", "LCCBRHTMLFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/EmbedEvent;>;" };
  static const J2ObjcClassInfo _CCBRHTMLFormatter_6 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRHTMLFormatter_6;
}

@end

void CCBRHTMLFormatter_6_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter_6 *self, CCBRHTMLFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRHTMLFormatter_6 *new_CCBRHTMLFormatter_6_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRHTMLFormatter_6, initWithCCBRHTMLFormatter_, outer$)
}

CCBRHTMLFormatter_6 *create_CCBRHTMLFormatter_6_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRHTMLFormatter_6, initWithCCBRHTMLFormatter_, outer$)
}

@implementation CCBRHTMLFormatter_7

- (instancetype __nonnull)initWithCCBRHTMLFormatter:(CCBRHTMLFormatter *)outer$ {
  CCBRHTMLFormatter_7_initWithCCBRHTMLFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCCBEvent:(CCBWriteEvent *)event {
  CCBRHTMLFormatter_handleWriteWithCCBWriteEvent_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRHTMLFormatter:);
  methods[1].selector = @selector(receiveWithCCBEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRHTMLFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCCBWriteEvent;", "LCCBRHTMLFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/WriteEvent;>;" };
  static const J2ObjcClassInfo _CCBRHTMLFormatter_7 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRHTMLFormatter_7;
}

@end

void CCBRHTMLFormatter_7_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter_7 *self, CCBRHTMLFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRHTMLFormatter_7 *new_CCBRHTMLFormatter_7_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRHTMLFormatter_7, initWithCCBRHTMLFormatter_, outer$)
}

CCBRHTMLFormatter_7 *create_CCBRHTMLFormatter_7_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRHTMLFormatter_7, initWithCCBRHTMLFormatter_, outer$)
}

@implementation CCBRHTMLFormatter_8

- (instancetype __nonnull)initWithCCBRHTMLFormatter:(CCBRHTMLFormatter *)outer$ {
  CCBRHTMLFormatter_8_initWithCCBRHTMLFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCCBEvent:(CCBTestRunFinished *)event {
  CCBRHTMLFormatter_finishReport(this$0_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRHTMLFormatter:);
  methods[1].selector = @selector(receiveWithCCBEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRHTMLFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCCBTestRunFinished;", "LCCBRHTMLFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestRunFinished;>;" };
  static const J2ObjcClassInfo _CCBRHTMLFormatter_8 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRHTMLFormatter_8;
}

@end

void CCBRHTMLFormatter_8_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter_8 *self, CCBRHTMLFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRHTMLFormatter_8 *new_CCBRHTMLFormatter_8_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRHTMLFormatter_8, initWithCCBRHTMLFormatter_, outer$)
}

CCBRHTMLFormatter_8 *create_CCBRHTMLFormatter_8_initWithCCBRHTMLFormatter_(CCBRHTMLFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRHTMLFormatter_8, initWithCCBRHTMLFormatter_, outer$)
}
