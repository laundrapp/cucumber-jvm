//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/formatter/HTMLFormatter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/gson/Gson.h"
#include "com/google/gson/GsonBuilder.h"
#include "cucumber/api/HookType.h"
#include "cucumber/api/Result.h"
#include "cucumber/api/TestCase.h"
#include "cucumber/api/TestStep.h"
#include "cucumber/api/event/EmbedEvent.h"
#include "cucumber/api/event/EventHandler.h"
#include "cucumber/api/event/EventPublisher.h"
#include "cucumber/api/event/TestCaseStarted.h"
#include "cucumber/api/event/TestRunFinished.h"
#include "cucumber/api/event/TestSourceRead.h"
#include "cucumber/api/event/TestStepFinished.h"
#include "cucumber/api/event/TestStepStarted.h"
#include "cucumber/api/event/WriteEvent.h"
#include "cucumber/api/formatter/NiceAppendable.h"
#include "cucumber/runtime/CucumberException.h"
#include "cucumber/runtime/formatter/HTMLFormatter.h"
#include "cucumber/runtime/formatter/TestSourcesModel.h"
#include "cucumber/runtime/io/URLOutputStream.h"
#include "gherkin/ast/Background.h"
#include "gherkin/ast/DataTable.h"
#include "gherkin/ast/DocString.h"
#include "gherkin/ast/Examples.h"
#include "gherkin/ast/Feature.h"
#include "gherkin/ast/Node.h"
#include "gherkin/ast/ScenarioDefinition.h"
#include "gherkin/ast/ScenarioOutline.h"
#include "gherkin/ast/Step.h"
#include "gherkin/ast/TableCell.h"
#include "gherkin/ast/TableRow.h"
#include "gherkin/ast/Tag.h"
#include "gherkin/pickles/Argument.h"
#include "gherkin/pickles/PickleCell.h"
#include "gherkin/pickles/PickleRow.h"
#include "gherkin/pickles/PickleString.h"
#include "gherkin/pickles/PickleTable.h"
#include "gherkin/pickles/PickleTag.h"
#include "java/io/Closeable.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/lang/StringBuilder.h"
#include "java/net/URL.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@protocol JavaUtilFunctionBiFunction;
@protocol JavaUtilFunctionFunction;

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface CucumberRuntimeFormatterHTMLFormatter () {
 @public
  CucumberRuntimeFormatterTestSourcesModel *testSources_;
  JavaNetURL *htmlReportDir_;
  CucumberApiFormatterNiceAppendable *jsOut_;
  jboolean firstFeature_;
  NSString *currentFeatureFile_;
  id<JavaUtilMap> currentTestCaseMap_;
  GherkinAstScenarioOutline *currentScenarioOutline_;
  GherkinAstExamples *currentExamples_;
  jint embeddedIndex_;
  id<CucumberApiEventEventHandler> testSourceReadHandler_;
  id<CucumberApiEventEventHandler> caseStartedHandler_;
  id<CucumberApiEventEventHandler> stepStartedHandler_;
  id<CucumberApiEventEventHandler> stepFinishedHandler_;
  id<CucumberApiEventEventHandler> embedEventhandler_;
  id<CucumberApiEventEventHandler> writeEventhandler_;
  id<CucumberApiEventEventHandler> runFinishedHandler_;
}

- (void)handleTestSourceReadWithCucumberApiEventTestSourceRead:(CucumberApiEventTestSourceRead *)event;

- (void)handleTestCaseStartedWithCucumberApiEventTestCaseStarted:(CucumberApiEventTestCaseStarted *)event;

- (void)handleTestStepStartedWithCucumberApiEventTestStepStarted:(CucumberApiEventTestStepStarted *)event;

- (void)handleTestStepFinishedWithCucumberApiEventTestStepFinished:(CucumberApiEventTestStepFinished *)event;

- (void)handleEmbedWithCucumberApiEventEmbedEvent:(CucumberApiEventEmbedEvent *)event;

- (void)handleWriteWithCucumberApiEventWriteEvent:(CucumberApiEventWriteEvent *)event;

- (void)finishReport;

- (void)handleStartOfFeatureWithCucumberApiTestCase:(CucumberApiTestCase *)testCase;

- (id<JavaUtilMap>)createFeatureWithCucumberApiTestCase:(CucumberApiTestCase *)testCase;

- (id<JavaUtilList>)createTagListWithJavaUtilList:(id<JavaUtilList>)tags;

- (void)handleScenarioOutlineWithCucumberApiTestCase:(CucumberApiTestCase *)testCase;

- (id<JavaUtilMap>)createScenarioOutlineWithGherkinAstScenarioOutline:(GherkinAstScenarioOutline *)scenarioOutline;

- (void)addOutlineStepsToReportWithGherkinAstScenarioOutline:(GherkinAstScenarioOutline *)scenarioOutline;

- (id<JavaUtilMap>)createDocStringMapWithGherkinAstDocString:(GherkinAstDocString *)docString;

- (id<JavaUtilList>)createDataTableListWithGherkinAstDataTable:(GherkinAstDataTable *)dataTable;

- (id<JavaUtilMap>)createRowMapWithGherkinAstTableRow:(GherkinAstTableRow *)row;

- (id<JavaUtilList>)createCellListWithGherkinAstTableRow:(GherkinAstTableRow *)row;

- (id<JavaUtilMap>)createExamplesWithGherkinAstExamples:(GherkinAstExamples *)examples;

- (id<JavaUtilMap>)createTestCaseWithCucumberApiTestCase:(CucumberApiTestCase *)testCase;

- (id<JavaUtilMap>)createBackgroundWithCucumberApiTestCase:(CucumberApiTestCase *)testCase;

- (jboolean)isFirstStepAfterBackgroundWithCucumberApiTestStep:(CucumberApiTestStep *)testStep;

- (id<JavaUtilMap>)createTestStepWithCucumberApiTestStep:(CucumberApiTestStep *)testStep;

- (id<JavaUtilMap>)createDocStringMapWithGherkinPicklesPickleString:(GherkinPicklesPickleString *)docString;

- (id<JavaUtilList>)createDataTableListWithGherkinPicklesPickleTable:(GherkinPicklesPickleTable *)dataTable;

- (id<JavaUtilMap>)createRowMapWithGherkinPicklesPickleRow:(GherkinPicklesPickleRow *)row;

- (id<JavaUtilList>)createCellListWithGherkinPicklesPickleRow:(GherkinPicklesPickleRow *)row;

- (id<JavaUtilMap>)createMatchMapWithCucumberApiTestStep:(CucumberApiTestStep *)testStep
                                   withCucumberApiResult:(CucumberApiResult *)result;

- (id<JavaUtilMap>)createResultMapWithCucumberApiResult:(CucumberApiResult *)result;

- (void)jsFunctionCallWithNSString:(NSString *)functionName
                 withNSObjectArray:(IOSObjectArray *)args;

- (void)copyReportFiles OBJC_METHOD_FAMILY_NONE;

- (JavaNetURL *)toUrlWithNSString:(NSString *)fileName;

+ (void)writeStreamToURLWithJavaIoInputStream:(JavaIoInputStream *)inArg
                               withJavaNetURL:(JavaNetURL *)url;

+ (void)writeBytesToURLWithByteArray:(IOSByteArray *)buf
                      withJavaNetURL:(JavaNetURL *)url;

+ (CucumberApiFormatterNiceAppendable *)createJsOutWithJavaNetURL:(JavaNetURL *)htmlReportDir;

+ (JavaIoOutputStream *)createReportFileOutputStreamWithJavaNetURL:(JavaNetURL *)url;

+ (void)closeQuietlyWithJavaIoCloseable:(id<JavaIoCloseable>)outArg;

@end

J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterHTMLFormatter, testSources_, CucumberRuntimeFormatterTestSourcesModel *)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterHTMLFormatter, htmlReportDir_, JavaNetURL *)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterHTMLFormatter, jsOut_, CucumberApiFormatterNiceAppendable *)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterHTMLFormatter, currentFeatureFile_, NSString *)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterHTMLFormatter, currentTestCaseMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterHTMLFormatter, currentScenarioOutline_, GherkinAstScenarioOutline *)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterHTMLFormatter, currentExamples_, GherkinAstExamples *)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterHTMLFormatter, testSourceReadHandler_, id<CucumberApiEventEventHandler>)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterHTMLFormatter, caseStartedHandler_, id<CucumberApiEventEventHandler>)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterHTMLFormatter, stepStartedHandler_, id<CucumberApiEventEventHandler>)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterHTMLFormatter, stepFinishedHandler_, id<CucumberApiEventEventHandler>)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterHTMLFormatter, embedEventhandler_, id<CucumberApiEventEventHandler>)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterHTMLFormatter, writeEventhandler_, id<CucumberApiEventEventHandler>)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterHTMLFormatter, runFinishedHandler_, id<CucumberApiEventEventHandler>)

inline ComGoogleGsonGson *CucumberRuntimeFormatterHTMLFormatter_get_gson(void);
static ComGoogleGsonGson *CucumberRuntimeFormatterHTMLFormatter_gson;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CucumberRuntimeFormatterHTMLFormatter, gson, ComGoogleGsonGson *)

inline NSString *CucumberRuntimeFormatterHTMLFormatter_get_JS_FORMATTER_VAR(void);
static NSString *CucumberRuntimeFormatterHTMLFormatter_JS_FORMATTER_VAR = @"formatter";
J2OBJC_STATIC_FIELD_OBJ_FINAL(CucumberRuntimeFormatterHTMLFormatter, JS_FORMATTER_VAR, NSString *)

inline NSString *CucumberRuntimeFormatterHTMLFormatter_get_JS_REPORT_FILENAME(void);
static NSString *CucumberRuntimeFormatterHTMLFormatter_JS_REPORT_FILENAME = @"report.js";
J2OBJC_STATIC_FIELD_OBJ_FINAL(CucumberRuntimeFormatterHTMLFormatter, JS_REPORT_FILENAME, NSString *)

inline IOSObjectArray *CucumberRuntimeFormatterHTMLFormatter_get_TEXT_ASSETS(void);
static IOSObjectArray *CucumberRuntimeFormatterHTMLFormatter_TEXT_ASSETS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CucumberRuntimeFormatterHTMLFormatter, TEXT_ASSETS, IOSObjectArray *)

inline id<JavaUtilMap> CucumberRuntimeFormatterHTMLFormatter_get_MIME_TYPES_EXTENSIONS(void);
static id<JavaUtilMap> CucumberRuntimeFormatterHTMLFormatter_MIME_TYPES_EXTENSIONS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CucumberRuntimeFormatterHTMLFormatter, MIME_TYPES_EXTENSIONS, id<JavaUtilMap>)

__attribute__((unused)) static void CucumberRuntimeFormatterHTMLFormatter_handleTestSourceReadWithCucumberApiEventTestSourceRead_(CucumberRuntimeFormatterHTMLFormatter *self, CucumberApiEventTestSourceRead *event);

__attribute__((unused)) static void CucumberRuntimeFormatterHTMLFormatter_handleTestCaseStartedWithCucumberApiEventTestCaseStarted_(CucumberRuntimeFormatterHTMLFormatter *self, CucumberApiEventTestCaseStarted *event);

__attribute__((unused)) static void CucumberRuntimeFormatterHTMLFormatter_handleTestStepStartedWithCucumberApiEventTestStepStarted_(CucumberRuntimeFormatterHTMLFormatter *self, CucumberApiEventTestStepStarted *event);

__attribute__((unused)) static void CucumberRuntimeFormatterHTMLFormatter_handleTestStepFinishedWithCucumberApiEventTestStepFinished_(CucumberRuntimeFormatterHTMLFormatter *self, CucumberApiEventTestStepFinished *event);

__attribute__((unused)) static void CucumberRuntimeFormatterHTMLFormatter_handleEmbedWithCucumberApiEventEmbedEvent_(CucumberRuntimeFormatterHTMLFormatter *self, CucumberApiEventEmbedEvent *event);

__attribute__((unused)) static void CucumberRuntimeFormatterHTMLFormatter_handleWriteWithCucumberApiEventWriteEvent_(CucumberRuntimeFormatterHTMLFormatter *self, CucumberApiEventWriteEvent *event);

__attribute__((unused)) static void CucumberRuntimeFormatterHTMLFormatter_finishReport(CucumberRuntimeFormatterHTMLFormatter *self);

__attribute__((unused)) static void CucumberRuntimeFormatterHTMLFormatter_handleStartOfFeatureWithCucumberApiTestCase_(CucumberRuntimeFormatterHTMLFormatter *self, CucumberApiTestCase *testCase);

__attribute__((unused)) static id<JavaUtilMap> CucumberRuntimeFormatterHTMLFormatter_createFeatureWithCucumberApiTestCase_(CucumberRuntimeFormatterHTMLFormatter *self, CucumberApiTestCase *testCase);

__attribute__((unused)) static id<JavaUtilList> CucumberRuntimeFormatterHTMLFormatter_createTagListWithJavaUtilList_(CucumberRuntimeFormatterHTMLFormatter *self, id<JavaUtilList> tags);

__attribute__((unused)) static void CucumberRuntimeFormatterHTMLFormatter_handleScenarioOutlineWithCucumberApiTestCase_(CucumberRuntimeFormatterHTMLFormatter *self, CucumberApiTestCase *testCase);

__attribute__((unused)) static id<JavaUtilMap> CucumberRuntimeFormatterHTMLFormatter_createScenarioOutlineWithGherkinAstScenarioOutline_(CucumberRuntimeFormatterHTMLFormatter *self, GherkinAstScenarioOutline *scenarioOutline);

__attribute__((unused)) static void CucumberRuntimeFormatterHTMLFormatter_addOutlineStepsToReportWithGherkinAstScenarioOutline_(CucumberRuntimeFormatterHTMLFormatter *self, GherkinAstScenarioOutline *scenarioOutline);

__attribute__((unused)) static id<JavaUtilMap> CucumberRuntimeFormatterHTMLFormatter_createDocStringMapWithGherkinAstDocString_(CucumberRuntimeFormatterHTMLFormatter *self, GherkinAstDocString *docString);

__attribute__((unused)) static id<JavaUtilList> CucumberRuntimeFormatterHTMLFormatter_createDataTableListWithGherkinAstDataTable_(CucumberRuntimeFormatterHTMLFormatter *self, GherkinAstDataTable *dataTable);

__attribute__((unused)) static id<JavaUtilMap> CucumberRuntimeFormatterHTMLFormatter_createRowMapWithGherkinAstTableRow_(CucumberRuntimeFormatterHTMLFormatter *self, GherkinAstTableRow *row);

__attribute__((unused)) static id<JavaUtilList> CucumberRuntimeFormatterHTMLFormatter_createCellListWithGherkinAstTableRow_(CucumberRuntimeFormatterHTMLFormatter *self, GherkinAstTableRow *row);

__attribute__((unused)) static id<JavaUtilMap> CucumberRuntimeFormatterHTMLFormatter_createExamplesWithGherkinAstExamples_(CucumberRuntimeFormatterHTMLFormatter *self, GherkinAstExamples *examples);

__attribute__((unused)) static id<JavaUtilMap> CucumberRuntimeFormatterHTMLFormatter_createTestCaseWithCucumberApiTestCase_(CucumberRuntimeFormatterHTMLFormatter *self, CucumberApiTestCase *testCase);

__attribute__((unused)) static id<JavaUtilMap> CucumberRuntimeFormatterHTMLFormatter_createBackgroundWithCucumberApiTestCase_(CucumberRuntimeFormatterHTMLFormatter *self, CucumberApiTestCase *testCase);

__attribute__((unused)) static jboolean CucumberRuntimeFormatterHTMLFormatter_isFirstStepAfterBackgroundWithCucumberApiTestStep_(CucumberRuntimeFormatterHTMLFormatter *self, CucumberApiTestStep *testStep);

__attribute__((unused)) static id<JavaUtilMap> CucumberRuntimeFormatterHTMLFormatter_createTestStepWithCucumberApiTestStep_(CucumberRuntimeFormatterHTMLFormatter *self, CucumberApiTestStep *testStep);

__attribute__((unused)) static id<JavaUtilMap> CucumberRuntimeFormatterHTMLFormatter_createDocStringMapWithGherkinPicklesPickleString_(CucumberRuntimeFormatterHTMLFormatter *self, GherkinPicklesPickleString *docString);

__attribute__((unused)) static id<JavaUtilList> CucumberRuntimeFormatterHTMLFormatter_createDataTableListWithGherkinPicklesPickleTable_(CucumberRuntimeFormatterHTMLFormatter *self, GherkinPicklesPickleTable *dataTable);

__attribute__((unused)) static id<JavaUtilMap> CucumberRuntimeFormatterHTMLFormatter_createRowMapWithGherkinPicklesPickleRow_(CucumberRuntimeFormatterHTMLFormatter *self, GherkinPicklesPickleRow *row);

__attribute__((unused)) static id<JavaUtilList> CucumberRuntimeFormatterHTMLFormatter_createCellListWithGherkinPicklesPickleRow_(CucumberRuntimeFormatterHTMLFormatter *self, GherkinPicklesPickleRow *row);

__attribute__((unused)) static id<JavaUtilMap> CucumberRuntimeFormatterHTMLFormatter_createMatchMapWithCucumberApiTestStep_withCucumberApiResult_(CucumberRuntimeFormatterHTMLFormatter *self, CucumberApiTestStep *testStep, CucumberApiResult *result);

__attribute__((unused)) static id<JavaUtilMap> CucumberRuntimeFormatterHTMLFormatter_createResultMapWithCucumberApiResult_(CucumberRuntimeFormatterHTMLFormatter *self, CucumberApiResult *result);

__attribute__((unused)) static void CucumberRuntimeFormatterHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(CucumberRuntimeFormatterHTMLFormatter *self, NSString *functionName, IOSObjectArray *args);

__attribute__((unused)) static void CucumberRuntimeFormatterHTMLFormatter_copyReportFiles(CucumberRuntimeFormatterHTMLFormatter *self);

__attribute__((unused)) static JavaNetURL *CucumberRuntimeFormatterHTMLFormatter_toUrlWithNSString_(CucumberRuntimeFormatterHTMLFormatter *self, NSString *fileName);

__attribute__((unused)) static void CucumberRuntimeFormatterHTMLFormatter_writeStreamToURLWithJavaIoInputStream_withJavaNetURL_(JavaIoInputStream *inArg, JavaNetURL *url);

__attribute__((unused)) static void CucumberRuntimeFormatterHTMLFormatter_writeBytesToURLWithByteArray_withJavaNetURL_(IOSByteArray *buf, JavaNetURL *url);

__attribute__((unused)) static CucumberApiFormatterNiceAppendable *CucumberRuntimeFormatterHTMLFormatter_createJsOutWithJavaNetURL_(JavaNetURL *htmlReportDir);

__attribute__((unused)) static JavaIoOutputStream *CucumberRuntimeFormatterHTMLFormatter_createReportFileOutputStreamWithJavaNetURL_(JavaNetURL *url);

__attribute__((unused)) static void CucumberRuntimeFormatterHTMLFormatter_closeQuietlyWithJavaIoCloseable_(id<JavaIoCloseable> outArg);

@interface CucumberRuntimeFormatterHTMLFormatter_1 : JavaUtilHashMap

- (instancetype __nonnull)init;

- (NSString *)computeIfAbsentWithId:(NSString *)arg0
       withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg1;

- (NSString *)getWithId:(id)arg0;

- (NSString *)removeWithId:(id)arg0;

- (NSString *)putIfAbsentWithId:(NSString *)arg0
                         withId:(NSString *)arg1;

- (NSString *)computeIfPresentWithId:(NSString *)arg0
      withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1;

- (NSString *)replaceWithId:(NSString *)arg0
                     withId:(NSString *)arg1;

- (NSString *)putWithId:(NSString *)arg0
                 withId:(NSString *)arg1;

- (NSString *)computeWithId:(NSString *)arg0
withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1;

- (NSString *)mergeWithId:(NSString *)arg0
                   withId:(NSString *)arg1
withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg2;

- (NSString *)getOrDefaultWithId:(id)arg0
                          withId:(NSString *)arg1;

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberRuntimeFormatterHTMLFormatter_1)

__attribute__((unused)) static void CucumberRuntimeFormatterHTMLFormatter_1_init(CucumberRuntimeFormatterHTMLFormatter_1 *self);

__attribute__((unused)) static CucumberRuntimeFormatterHTMLFormatter_1 *new_CucumberRuntimeFormatterHTMLFormatter_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberRuntimeFormatterHTMLFormatter_1 *create_CucumberRuntimeFormatterHTMLFormatter_1_init(void);

@interface CucumberRuntimeFormatterHTMLFormatter_2 : NSObject < CucumberApiEventEventHandler > {
 @public
  CucumberRuntimeFormatterHTMLFormatter *this$0_;
}

- (instancetype __nonnull)initWithCucumberRuntimeFormatterHTMLFormatter:(CucumberRuntimeFormatterHTMLFormatter *)outer$;

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestSourceRead *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberRuntimeFormatterHTMLFormatter_2)

__attribute__((unused)) static void CucumberRuntimeFormatterHTMLFormatter_2_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter_2 *self, CucumberRuntimeFormatterHTMLFormatter *outer$);

__attribute__((unused)) static CucumberRuntimeFormatterHTMLFormatter_2 *new_CucumberRuntimeFormatterHTMLFormatter_2_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberRuntimeFormatterHTMLFormatter_2 *create_CucumberRuntimeFormatterHTMLFormatter_2_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter *outer$);

@interface CucumberRuntimeFormatterHTMLFormatter_3 : NSObject < CucumberApiEventEventHandler > {
 @public
  CucumberRuntimeFormatterHTMLFormatter *this$0_;
}

- (instancetype __nonnull)initWithCucumberRuntimeFormatterHTMLFormatter:(CucumberRuntimeFormatterHTMLFormatter *)outer$;

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestCaseStarted *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberRuntimeFormatterHTMLFormatter_3)

__attribute__((unused)) static void CucumberRuntimeFormatterHTMLFormatter_3_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter_3 *self, CucumberRuntimeFormatterHTMLFormatter *outer$);

__attribute__((unused)) static CucumberRuntimeFormatterHTMLFormatter_3 *new_CucumberRuntimeFormatterHTMLFormatter_3_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberRuntimeFormatterHTMLFormatter_3 *create_CucumberRuntimeFormatterHTMLFormatter_3_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter *outer$);

@interface CucumberRuntimeFormatterHTMLFormatter_4 : NSObject < CucumberApiEventEventHandler > {
 @public
  CucumberRuntimeFormatterHTMLFormatter *this$0_;
}

- (instancetype __nonnull)initWithCucumberRuntimeFormatterHTMLFormatter:(CucumberRuntimeFormatterHTMLFormatter *)outer$;

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestStepStarted *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberRuntimeFormatterHTMLFormatter_4)

__attribute__((unused)) static void CucumberRuntimeFormatterHTMLFormatter_4_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter_4 *self, CucumberRuntimeFormatterHTMLFormatter *outer$);

__attribute__((unused)) static CucumberRuntimeFormatterHTMLFormatter_4 *new_CucumberRuntimeFormatterHTMLFormatter_4_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberRuntimeFormatterHTMLFormatter_4 *create_CucumberRuntimeFormatterHTMLFormatter_4_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter *outer$);

@interface CucumberRuntimeFormatterHTMLFormatter_5 : NSObject < CucumberApiEventEventHandler > {
 @public
  CucumberRuntimeFormatterHTMLFormatter *this$0_;
}

- (instancetype __nonnull)initWithCucumberRuntimeFormatterHTMLFormatter:(CucumberRuntimeFormatterHTMLFormatter *)outer$;

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestStepFinished *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberRuntimeFormatterHTMLFormatter_5)

__attribute__((unused)) static void CucumberRuntimeFormatterHTMLFormatter_5_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter_5 *self, CucumberRuntimeFormatterHTMLFormatter *outer$);

__attribute__((unused)) static CucumberRuntimeFormatterHTMLFormatter_5 *new_CucumberRuntimeFormatterHTMLFormatter_5_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberRuntimeFormatterHTMLFormatter_5 *create_CucumberRuntimeFormatterHTMLFormatter_5_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter *outer$);

@interface CucumberRuntimeFormatterHTMLFormatter_6 : NSObject < CucumberApiEventEventHandler > {
 @public
  CucumberRuntimeFormatterHTMLFormatter *this$0_;
}

- (instancetype __nonnull)initWithCucumberRuntimeFormatterHTMLFormatter:(CucumberRuntimeFormatterHTMLFormatter *)outer$;

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventEmbedEvent *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberRuntimeFormatterHTMLFormatter_6)

__attribute__((unused)) static void CucumberRuntimeFormatterHTMLFormatter_6_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter_6 *self, CucumberRuntimeFormatterHTMLFormatter *outer$);

__attribute__((unused)) static CucumberRuntimeFormatterHTMLFormatter_6 *new_CucumberRuntimeFormatterHTMLFormatter_6_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberRuntimeFormatterHTMLFormatter_6 *create_CucumberRuntimeFormatterHTMLFormatter_6_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter *outer$);

@interface CucumberRuntimeFormatterHTMLFormatter_7 : NSObject < CucumberApiEventEventHandler > {
 @public
  CucumberRuntimeFormatterHTMLFormatter *this$0_;
}

- (instancetype __nonnull)initWithCucumberRuntimeFormatterHTMLFormatter:(CucumberRuntimeFormatterHTMLFormatter *)outer$;

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventWriteEvent *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberRuntimeFormatterHTMLFormatter_7)

__attribute__((unused)) static void CucumberRuntimeFormatterHTMLFormatter_7_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter_7 *self, CucumberRuntimeFormatterHTMLFormatter *outer$);

__attribute__((unused)) static CucumberRuntimeFormatterHTMLFormatter_7 *new_CucumberRuntimeFormatterHTMLFormatter_7_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberRuntimeFormatterHTMLFormatter_7 *create_CucumberRuntimeFormatterHTMLFormatter_7_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter *outer$);

@interface CucumberRuntimeFormatterHTMLFormatter_8 : NSObject < CucumberApiEventEventHandler > {
 @public
  CucumberRuntimeFormatterHTMLFormatter *this$0_;
}

- (instancetype __nonnull)initWithCucumberRuntimeFormatterHTMLFormatter:(CucumberRuntimeFormatterHTMLFormatter *)outer$;

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestRunFinished *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberRuntimeFormatterHTMLFormatter_8)

__attribute__((unused)) static void CucumberRuntimeFormatterHTMLFormatter_8_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter_8 *self, CucumberRuntimeFormatterHTMLFormatter *outer$);

__attribute__((unused)) static CucumberRuntimeFormatterHTMLFormatter_8 *new_CucumberRuntimeFormatterHTMLFormatter_8_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberRuntimeFormatterHTMLFormatter_8 *create_CucumberRuntimeFormatterHTMLFormatter_8_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter *outer$);

J2OBJC_INITIALIZED_DEFN(CucumberRuntimeFormatterHTMLFormatter)

@implementation CucumberRuntimeFormatterHTMLFormatter

- (instancetype __nonnull)initWithJavaNetURL:(JavaNetURL *)htmlReportDir {
  CucumberRuntimeFormatterHTMLFormatter_initWithJavaNetURL_(self, htmlReportDir);
  return self;
}

- (instancetype __nonnull)initWithJavaNetURL:(JavaNetURL *)htmlReportDir
      withCucumberApiFormatterNiceAppendable:(CucumberApiFormatterNiceAppendable *)jsOut {
  CucumberRuntimeFormatterHTMLFormatter_initWithJavaNetURL_withCucumberApiFormatterNiceAppendable_(self, htmlReportDir, jsOut);
  return self;
}

- (void)setEventPublisherWithCucumberApiEventEventPublisher:(id<CucumberApiEventEventPublisher>)publisher {
  [((id<CucumberApiEventEventPublisher>) nil_chk(publisher)) registerHandlerForWithIOSClass:CucumberApiEventTestSourceRead_class_() withCucumberApiEventEventHandler:testSourceReadHandler_];
  [publisher registerHandlerForWithIOSClass:CucumberApiEventTestCaseStarted_class_() withCucumberApiEventEventHandler:caseStartedHandler_];
  [publisher registerHandlerForWithIOSClass:CucumberApiEventTestStepStarted_class_() withCucumberApiEventEventHandler:stepStartedHandler_];
  [publisher registerHandlerForWithIOSClass:CucumberApiEventTestStepFinished_class_() withCucumberApiEventEventHandler:stepFinishedHandler_];
  [publisher registerHandlerForWithIOSClass:CucumberApiEventEmbedEvent_class_() withCucumberApiEventEventHandler:embedEventhandler_];
  [publisher registerHandlerForWithIOSClass:CucumberApiEventWriteEvent_class_() withCucumberApiEventEventHandler:writeEventhandler_];
  [publisher registerHandlerForWithIOSClass:CucumberApiEventTestRunFinished_class_() withCucumberApiEventEventHandler:runFinishedHandler_];
}

- (void)handleTestSourceReadWithCucumberApiEventTestSourceRead:(CucumberApiEventTestSourceRead *)event {
  CucumberRuntimeFormatterHTMLFormatter_handleTestSourceReadWithCucumberApiEventTestSourceRead_(self, event);
}

- (void)handleTestCaseStartedWithCucumberApiEventTestCaseStarted:(CucumberApiEventTestCaseStarted *)event {
  CucumberRuntimeFormatterHTMLFormatter_handleTestCaseStartedWithCucumberApiEventTestCaseStarted_(self, event);
}

- (void)handleTestStepStartedWithCucumberApiEventTestStepStarted:(CucumberApiEventTestStepStarted *)event {
  CucumberRuntimeFormatterHTMLFormatter_handleTestStepStartedWithCucumberApiEventTestStepStarted_(self, event);
}

- (void)handleTestStepFinishedWithCucumberApiEventTestStepFinished:(CucumberApiEventTestStepFinished *)event {
  CucumberRuntimeFormatterHTMLFormatter_handleTestStepFinishedWithCucumberApiEventTestStepFinished_(self, event);
}

- (void)handleEmbedWithCucumberApiEventEmbedEvent:(CucumberApiEventEmbedEvent *)event {
  CucumberRuntimeFormatterHTMLFormatter_handleEmbedWithCucumberApiEventEmbedEvent_(self, event);
}

- (void)handleWriteWithCucumberApiEventWriteEvent:(CucumberApiEventWriteEvent *)event {
  CucumberRuntimeFormatterHTMLFormatter_handleWriteWithCucumberApiEventWriteEvent_(self, event);
}

- (void)finishReport {
  CucumberRuntimeFormatterHTMLFormatter_finishReport(self);
}

- (void)handleStartOfFeatureWithCucumberApiTestCase:(CucumberApiTestCase *)testCase {
  CucumberRuntimeFormatterHTMLFormatter_handleStartOfFeatureWithCucumberApiTestCase_(self, testCase);
}

- (id<JavaUtilMap>)createFeatureWithCucumberApiTestCase:(CucumberApiTestCase *)testCase {
  return CucumberRuntimeFormatterHTMLFormatter_createFeatureWithCucumberApiTestCase_(self, testCase);
}

- (id<JavaUtilList>)createTagListWithJavaUtilList:(id<JavaUtilList>)tags {
  return CucumberRuntimeFormatterHTMLFormatter_createTagListWithJavaUtilList_(self, tags);
}

- (void)handleScenarioOutlineWithCucumberApiTestCase:(CucumberApiTestCase *)testCase {
  CucumberRuntimeFormatterHTMLFormatter_handleScenarioOutlineWithCucumberApiTestCase_(self, testCase);
}

- (id<JavaUtilMap>)createScenarioOutlineWithGherkinAstScenarioOutline:(GherkinAstScenarioOutline *)scenarioOutline {
  return CucumberRuntimeFormatterHTMLFormatter_createScenarioOutlineWithGherkinAstScenarioOutline_(self, scenarioOutline);
}

- (void)addOutlineStepsToReportWithGherkinAstScenarioOutline:(GherkinAstScenarioOutline *)scenarioOutline {
  CucumberRuntimeFormatterHTMLFormatter_addOutlineStepsToReportWithGherkinAstScenarioOutline_(self, scenarioOutline);
}

- (id<JavaUtilMap>)createDocStringMapWithGherkinAstDocString:(GherkinAstDocString *)docString {
  return CucumberRuntimeFormatterHTMLFormatter_createDocStringMapWithGherkinAstDocString_(self, docString);
}

- (id<JavaUtilList>)createDataTableListWithGherkinAstDataTable:(GherkinAstDataTable *)dataTable {
  return CucumberRuntimeFormatterHTMLFormatter_createDataTableListWithGherkinAstDataTable_(self, dataTable);
}

- (id<JavaUtilMap>)createRowMapWithGherkinAstTableRow:(GherkinAstTableRow *)row {
  return CucumberRuntimeFormatterHTMLFormatter_createRowMapWithGherkinAstTableRow_(self, row);
}

- (id<JavaUtilList>)createCellListWithGherkinAstTableRow:(GherkinAstTableRow *)row {
  return CucumberRuntimeFormatterHTMLFormatter_createCellListWithGherkinAstTableRow_(self, row);
}

- (id<JavaUtilMap>)createExamplesWithGherkinAstExamples:(GherkinAstExamples *)examples {
  return CucumberRuntimeFormatterHTMLFormatter_createExamplesWithGherkinAstExamples_(self, examples);
}

- (id<JavaUtilMap>)createTestCaseWithCucumberApiTestCase:(CucumberApiTestCase *)testCase {
  return CucumberRuntimeFormatterHTMLFormatter_createTestCaseWithCucumberApiTestCase_(self, testCase);
}

- (id<JavaUtilMap>)createBackgroundWithCucumberApiTestCase:(CucumberApiTestCase *)testCase {
  return CucumberRuntimeFormatterHTMLFormatter_createBackgroundWithCucumberApiTestCase_(self, testCase);
}

- (jboolean)isFirstStepAfterBackgroundWithCucumberApiTestStep:(CucumberApiTestStep *)testStep {
  return CucumberRuntimeFormatterHTMLFormatter_isFirstStepAfterBackgroundWithCucumberApiTestStep_(self, testStep);
}

- (id<JavaUtilMap>)createTestStepWithCucumberApiTestStep:(CucumberApiTestStep *)testStep {
  return CucumberRuntimeFormatterHTMLFormatter_createTestStepWithCucumberApiTestStep_(self, testStep);
}

- (id<JavaUtilMap>)createDocStringMapWithGherkinPicklesPickleString:(GherkinPicklesPickleString *)docString {
  return CucumberRuntimeFormatterHTMLFormatter_createDocStringMapWithGherkinPicklesPickleString_(self, docString);
}

- (id<JavaUtilList>)createDataTableListWithGherkinPicklesPickleTable:(GherkinPicklesPickleTable *)dataTable {
  return CucumberRuntimeFormatterHTMLFormatter_createDataTableListWithGherkinPicklesPickleTable_(self, dataTable);
}

- (id<JavaUtilMap>)createRowMapWithGherkinPicklesPickleRow:(GherkinPicklesPickleRow *)row {
  return CucumberRuntimeFormatterHTMLFormatter_createRowMapWithGherkinPicklesPickleRow_(self, row);
}

- (id<JavaUtilList>)createCellListWithGherkinPicklesPickleRow:(GherkinPicklesPickleRow *)row {
  return CucumberRuntimeFormatterHTMLFormatter_createCellListWithGherkinPicklesPickleRow_(self, row);
}

- (id<JavaUtilMap>)createMatchMapWithCucumberApiTestStep:(CucumberApiTestStep *)testStep
                                   withCucumberApiResult:(CucumberApiResult *)result {
  return CucumberRuntimeFormatterHTMLFormatter_createMatchMapWithCucumberApiTestStep_withCucumberApiResult_(self, testStep, result);
}

- (id<JavaUtilMap>)createResultMapWithCucumberApiResult:(CucumberApiResult *)result {
  return CucumberRuntimeFormatterHTMLFormatter_createResultMapWithCucumberApiResult_(self, result);
}

- (void)jsFunctionCallWithNSString:(NSString *)functionName
                 withNSObjectArray:(IOSObjectArray *)args {
  CucumberRuntimeFormatterHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, functionName, args);
}

- (void)copyReportFiles {
  CucumberRuntimeFormatterHTMLFormatter_copyReportFiles(self);
}

- (JavaNetURL *)toUrlWithNSString:(NSString *)fileName {
  return CucumberRuntimeFormatterHTMLFormatter_toUrlWithNSString_(self, fileName);
}

+ (void)writeStreamToURLWithJavaIoInputStream:(JavaIoInputStream *)inArg
                               withJavaNetURL:(JavaNetURL *)url {
  CucumberRuntimeFormatterHTMLFormatter_writeStreamToURLWithJavaIoInputStream_withJavaNetURL_(inArg, url);
}

+ (void)writeBytesToURLWithByteArray:(IOSByteArray *)buf
                      withJavaNetURL:(JavaNetURL *)url {
  CucumberRuntimeFormatterHTMLFormatter_writeBytesToURLWithByteArray_withJavaNetURL_(buf, url);
}

+ (CucumberApiFormatterNiceAppendable *)createJsOutWithJavaNetURL:(JavaNetURL *)htmlReportDir {
  return CucumberRuntimeFormatterHTMLFormatter_createJsOutWithJavaNetURL_(htmlReportDir);
}

+ (JavaIoOutputStream *)createReportFileOutputStreamWithJavaNetURL:(JavaNetURL *)url {
  return CucumberRuntimeFormatterHTMLFormatter_createReportFileOutputStreamWithJavaNetURL_(url);
}

+ (void)closeQuietlyWithJavaIoCloseable:(id<JavaIoCloseable>)outArg {
  CucumberRuntimeFormatterHTMLFormatter_closeQuietlyWithJavaIoCloseable_(outArg);
}

- (void)dealloc {
  RELEASE_(testSources_);
  RELEASE_(htmlReportDir_);
  RELEASE_(jsOut_);
  RELEASE_(currentFeatureFile_);
  RELEASE_(currentTestCaseMap_);
  RELEASE_(currentScenarioOutline_);
  RELEASE_(currentExamples_);
  RELEASE_(testSourceReadHandler_);
  RELEASE_(caseStartedHandler_);
  RELEASE_(stepStartedHandler_);
  RELEASE_(stepFinishedHandler_);
  RELEASE_(embedEventhandler_);
  RELEASE_(writeEventhandler_);
  RELEASE_(runFinishedHandler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 17, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 18, 17, -1, 19, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 20, 21, -1, 22, -1, -1 },
    { NULL, "V", 0x2, 23, 17, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 24, 25, -1, 26, -1, -1 },
    { NULL, "V", 0x2, 27, 25, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 28, 29, -1, 30, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 31, 32, -1, 33, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 34, 35, -1, 36, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 37, 35, -1, 38, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 39, 40, -1, 41, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 42, 17, -1, 19, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 43, 17, -1, 19, -1, -1 },
    { NULL, "Z", 0x2, 44, 45, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 46, 45, -1, 47, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 28, 48, -1, 49, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 31, 50, -1, 51, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 34, 52, -1, 53, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 37, 52, -1, 54, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 55, 56, -1, 57, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 58, 59, -1, 60, -1, -1 },
    { NULL, "V", 0x82, 61, 62, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetURL;", 0x2, 63, 64, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 65, 66, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 67, 68, 69, -1, -1, -1 },
    { NULL, "LCucumberApiFormatterNiceAppendable;", 0xa, 70, 0, -1, -1, -1, -1 },
    { NULL, "LJavaIoOutputStream;", 0xa, 71, 0, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 72, 73, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaNetURL:);
  methods[1].selector = @selector(initWithJavaNetURL:withCucumberApiFormatterNiceAppendable:);
  methods[2].selector = @selector(setEventPublisherWithCucumberApiEventEventPublisher:);
  methods[3].selector = @selector(handleTestSourceReadWithCucumberApiEventTestSourceRead:);
  methods[4].selector = @selector(handleTestCaseStartedWithCucumberApiEventTestCaseStarted:);
  methods[5].selector = @selector(handleTestStepStartedWithCucumberApiEventTestStepStarted:);
  methods[6].selector = @selector(handleTestStepFinishedWithCucumberApiEventTestStepFinished:);
  methods[7].selector = @selector(handleEmbedWithCucumberApiEventEmbedEvent:);
  methods[8].selector = @selector(handleWriteWithCucumberApiEventWriteEvent:);
  methods[9].selector = @selector(finishReport);
  methods[10].selector = @selector(handleStartOfFeatureWithCucumberApiTestCase:);
  methods[11].selector = @selector(createFeatureWithCucumberApiTestCase:);
  methods[12].selector = @selector(createTagListWithJavaUtilList:);
  methods[13].selector = @selector(handleScenarioOutlineWithCucumberApiTestCase:);
  methods[14].selector = @selector(createScenarioOutlineWithGherkinAstScenarioOutline:);
  methods[15].selector = @selector(addOutlineStepsToReportWithGherkinAstScenarioOutline:);
  methods[16].selector = @selector(createDocStringMapWithGherkinAstDocString:);
  methods[17].selector = @selector(createDataTableListWithGherkinAstDataTable:);
  methods[18].selector = @selector(createRowMapWithGherkinAstTableRow:);
  methods[19].selector = @selector(createCellListWithGherkinAstTableRow:);
  methods[20].selector = @selector(createExamplesWithGherkinAstExamples:);
  methods[21].selector = @selector(createTestCaseWithCucumberApiTestCase:);
  methods[22].selector = @selector(createBackgroundWithCucumberApiTestCase:);
  methods[23].selector = @selector(isFirstStepAfterBackgroundWithCucumberApiTestStep:);
  methods[24].selector = @selector(createTestStepWithCucumberApiTestStep:);
  methods[25].selector = @selector(createDocStringMapWithGherkinPicklesPickleString:);
  methods[26].selector = @selector(createDataTableListWithGherkinPicklesPickleTable:);
  methods[27].selector = @selector(createRowMapWithGherkinPicklesPickleRow:);
  methods[28].selector = @selector(createCellListWithGherkinPicklesPickleRow:);
  methods[29].selector = @selector(createMatchMapWithCucumberApiTestStep:withCucumberApiResult:);
  methods[30].selector = @selector(createResultMapWithCucumberApiResult:);
  methods[31].selector = @selector(jsFunctionCallWithNSString:withNSObjectArray:);
  methods[32].selector = @selector(copyReportFiles);
  methods[33].selector = @selector(toUrlWithNSString:);
  methods[34].selector = @selector(writeStreamToURLWithJavaIoInputStream:withJavaNetURL:);
  methods[35].selector = @selector(writeBytesToURLWithByteArray:withJavaNetURL:);
  methods[36].selector = @selector(createJsOutWithJavaNetURL:);
  methods[37].selector = @selector(createReportFileOutputStreamWithJavaNetURL:);
  methods[38].selector = @selector(closeQuietlyWithJavaIoCloseable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "gson", "LComGoogleGsonGson;", .constantValue.asLong = 0, 0x1a, -1, 74, -1, -1 },
    { "JS_FORMATTER_VAR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 75, -1, -1 },
    { "JS_REPORT_FILENAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 76, -1, -1 },
    { "TEXT_ASSETS", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 77, -1, -1 },
    { "MIME_TYPES_EXTENSIONS", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 78, 79, -1 },
    { "testSources_", "LCucumberRuntimeFormatterTestSourcesModel;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "htmlReportDir_", "LJavaNetURL;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "jsOut_", "LCucumberApiFormatterNiceAppendable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "firstFeature_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentFeatureFile_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentTestCaseMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 80, -1 },
    { "currentScenarioOutline_", "LGherkinAstScenarioOutline;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentExamples_", "LGherkinAstExamples;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "embeddedIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "testSourceReadHandler_", "LCucumberApiEventEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 81, -1 },
    { "caseStartedHandler_", "LCucumberApiEventEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 82, -1 },
    { "stepStartedHandler_", "LCucumberApiEventEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 83, -1 },
    { "stepFinishedHandler_", "LCucumberApiEventEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 84, -1 },
    { "embedEventhandler_", "LCucumberApiEventEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 85, -1 },
    { "writeEventhandler_", "LCucumberApiEventEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 86, -1 },
    { "runFinishedHandler_", "LCucumberApiEventEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 87, -1 },
  };
  static const void *ptrTable[] = { "LJavaNetURL;", "LJavaNetURL;LCucumberApiFormatterNiceAppendable;", "setEventPublisher", "LCucumberApiEventEventPublisher;", "handleTestSourceRead", "LCucumberApiEventTestSourceRead;", "handleTestCaseStarted", "LCucumberApiEventTestCaseStarted;", "handleTestStepStarted", "LCucumberApiEventTestStepStarted;", "handleTestStepFinished", "LCucumberApiEventTestStepFinished;", "handleEmbed", "LCucumberApiEventEmbedEvent;", "handleWrite", "LCucumberApiEventWriteEvent;", "handleStartOfFeature", "LCucumberApiTestCase;", "createFeature", "(Lcucumber/api/TestCase;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "createTagList", "LJavaUtilList;", "(Ljava/util/List<Lgherkin/ast/Tag;>;)Ljava/util/List<Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;>;", "handleScenarioOutline", "createScenarioOutline", "LGherkinAstScenarioOutline;", "(Lgherkin/ast/ScenarioOutline;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "addOutlineStepsToReport", "createDocStringMap", "LGherkinAstDocString;", "(Lgherkin/ast/DocString;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "createDataTableList", "LGherkinAstDataTable;", "(Lgherkin/ast/DataTable;)Ljava/util/List<Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;>;", "createRowMap", "LGherkinAstTableRow;", "(Lgherkin/ast/TableRow;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "createCellList", "(Lgherkin/ast/TableRow;)Ljava/util/List<Ljava/lang/String;>;", "createExamples", "LGherkinAstExamples;", "(Lgherkin/ast/Examples;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "createTestCase", "createBackground", "isFirstStepAfterBackground", "LCucumberApiTestStep;", "createTestStep", "(Lcucumber/api/TestStep;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LGherkinPicklesPickleString;", "(Lgherkin/pickles/PickleString;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LGherkinPicklesPickleTable;", "(Lgherkin/pickles/PickleTable;)Ljava/util/List<Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;>;", "LGherkinPicklesPickleRow;", "(Lgherkin/pickles/PickleRow;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "(Lgherkin/pickles/PickleRow;)Ljava/util/List<Ljava/lang/String;>;", "createMatchMap", "LCucumberApiTestStep;LCucumberApiResult;", "(Lcucumber/api/TestStep;Lcucumber/api/Result;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "createResultMap", "LCucumberApiResult;", "(Lcucumber/api/Result;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "jsFunctionCall", "LNSString;[LNSObject;", "toUrl", "LNSString;", "writeStreamToURL", "LJavaIoInputStream;LJavaNetURL;", "writeBytesToURL", "[BLJavaNetURL;", "LCucumberRuntimeCucumberException;", "createJsOut", "createReportFileOutputStream", "closeQuietly", "LJavaIoCloseable;", &CucumberRuntimeFormatterHTMLFormatter_gson, &CucumberRuntimeFormatterHTMLFormatter_JS_FORMATTER_VAR, &CucumberRuntimeFormatterHTMLFormatter_JS_REPORT_FILENAME, &CucumberRuntimeFormatterHTMLFormatter_TEXT_ASSETS, &CucumberRuntimeFormatterHTMLFormatter_MIME_TYPES_EXTENSIONS, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestSourceRead;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestCaseStarted;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestStepStarted;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestStepFinished;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/EmbedEvent;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/WriteEvent;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestRunFinished;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeFormatterHTMLFormatter = { "HTMLFormatter", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x10, 39, 21, -1, -1, -1, -1, -1 };
  return &_CucumberRuntimeFormatterHTMLFormatter;
}

+ (void)initialize {
  if (self == [CucumberRuntimeFormatterHTMLFormatter class]) {
    JreStrongAssign(&CucumberRuntimeFormatterHTMLFormatter_gson, [((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() setPrettyPrinting])) create]);
    JreStrongAssignAndConsume(&CucumberRuntimeFormatterHTMLFormatter_TEXT_ASSETS, [IOSObjectArray newArrayWithObjects:(id[]){ @"/cucumber/formatter/formatter.js", @"/cucumber/formatter/index.html", @"/cucumber/formatter/jquery-1.8.2.min.js", @"/cucumber/formatter/style.css" } count:4 type:NSString_class_()]);
    JreStrongAssignAndConsume(&CucumberRuntimeFormatterHTMLFormatter_MIME_TYPES_EXTENSIONS, new_CucumberRuntimeFormatterHTMLFormatter_1_init());
    J2OBJC_SET_INITIALIZED(CucumberRuntimeFormatterHTMLFormatter)
  }
}

@end

void CucumberRuntimeFormatterHTMLFormatter_initWithJavaNetURL_(CucumberRuntimeFormatterHTMLFormatter *self, JavaNetURL *htmlReportDir) {
  CucumberRuntimeFormatterHTMLFormatter_initWithJavaNetURL_withCucumberApiFormatterNiceAppendable_(self, htmlReportDir, CucumberRuntimeFormatterHTMLFormatter_createJsOutWithJavaNetURL_(htmlReportDir));
}

CucumberRuntimeFormatterHTMLFormatter *new_CucumberRuntimeFormatterHTMLFormatter_initWithJavaNetURL_(JavaNetURL *htmlReportDir) {
  J2OBJC_NEW_IMPL(CucumberRuntimeFormatterHTMLFormatter, initWithJavaNetURL_, htmlReportDir)
}

CucumberRuntimeFormatterHTMLFormatter *create_CucumberRuntimeFormatterHTMLFormatter_initWithJavaNetURL_(JavaNetURL *htmlReportDir) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeFormatterHTMLFormatter, initWithJavaNetURL_, htmlReportDir)
}

void CucumberRuntimeFormatterHTMLFormatter_initWithJavaNetURL_withCucumberApiFormatterNiceAppendable_(CucumberRuntimeFormatterHTMLFormatter *self, JavaNetURL *htmlReportDir, CucumberApiFormatterNiceAppendable *jsOut) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->testSources_, new_CucumberRuntimeFormatterTestSourcesModel_init());
  self->firstFeature_ = true;
  JreStrongAssignAndConsume(&self->testSourceReadHandler_, new_CucumberRuntimeFormatterHTMLFormatter_2_initWithCucumberRuntimeFormatterHTMLFormatter_(self));
  JreStrongAssignAndConsume(&self->caseStartedHandler_, new_CucumberRuntimeFormatterHTMLFormatter_3_initWithCucumberRuntimeFormatterHTMLFormatter_(self));
  JreStrongAssignAndConsume(&self->stepStartedHandler_, new_CucumberRuntimeFormatterHTMLFormatter_4_initWithCucumberRuntimeFormatterHTMLFormatter_(self));
  JreStrongAssignAndConsume(&self->stepFinishedHandler_, new_CucumberRuntimeFormatterHTMLFormatter_5_initWithCucumberRuntimeFormatterHTMLFormatter_(self));
  JreStrongAssignAndConsume(&self->embedEventhandler_, new_CucumberRuntimeFormatterHTMLFormatter_6_initWithCucumberRuntimeFormatterHTMLFormatter_(self));
  JreStrongAssignAndConsume(&self->writeEventhandler_, new_CucumberRuntimeFormatterHTMLFormatter_7_initWithCucumberRuntimeFormatterHTMLFormatter_(self));
  JreStrongAssignAndConsume(&self->runFinishedHandler_, new_CucumberRuntimeFormatterHTMLFormatter_8_initWithCucumberRuntimeFormatterHTMLFormatter_(self));
  JreStrongAssign(&self->htmlReportDir_, htmlReportDir);
  JreStrongAssign(&self->jsOut_, jsOut);
}

CucumberRuntimeFormatterHTMLFormatter *new_CucumberRuntimeFormatterHTMLFormatter_initWithJavaNetURL_withCucumberApiFormatterNiceAppendable_(JavaNetURL *htmlReportDir, CucumberApiFormatterNiceAppendable *jsOut) {
  J2OBJC_NEW_IMPL(CucumberRuntimeFormatterHTMLFormatter, initWithJavaNetURL_withCucumberApiFormatterNiceAppendable_, htmlReportDir, jsOut)
}

CucumberRuntimeFormatterHTMLFormatter *create_CucumberRuntimeFormatterHTMLFormatter_initWithJavaNetURL_withCucumberApiFormatterNiceAppendable_(JavaNetURL *htmlReportDir, CucumberApiFormatterNiceAppendable *jsOut) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeFormatterHTMLFormatter, initWithJavaNetURL_withCucumberApiFormatterNiceAppendable_, htmlReportDir, jsOut)
}

void CucumberRuntimeFormatterHTMLFormatter_handleTestSourceReadWithCucumberApiEventTestSourceRead_(CucumberRuntimeFormatterHTMLFormatter *self, CucumberApiEventTestSourceRead *event) {
  [((CucumberRuntimeFormatterTestSourcesModel *) nil_chk(self->testSources_)) addTestSourceReadEventWithNSString:((CucumberApiEventTestSourceRead *) nil_chk(event))->uri_ withCucumberApiEventTestSourceRead:event];
}

void CucumberRuntimeFormatterHTMLFormatter_handleTestCaseStartedWithCucumberApiEventTestCaseStarted_(CucumberRuntimeFormatterHTMLFormatter *self, CucumberApiEventTestCaseStarted *event) {
  if (self->firstFeature_) {
    [((CucumberApiFormatterNiceAppendable *) nil_chk([((CucumberApiFormatterNiceAppendable *) nil_chk([((CucumberApiFormatterNiceAppendable *) nil_chk([((CucumberApiFormatterNiceAppendable *) nil_chk(self->jsOut_)) appendWithJavaLangCharSequence:@"$(document).ready(function() {"])) appendWithJavaLangCharSequence:@"var "])) appendWithJavaLangCharSequence:CucumberRuntimeFormatterHTMLFormatter_JS_FORMATTER_VAR])) appendWithJavaLangCharSequence:@" = new CucumberHTML.DOMFormatter($('.cucumber-report'));"];
    self->firstFeature_ = false;
  }
  CucumberRuntimeFormatterHTMLFormatter_handleStartOfFeatureWithCucumberApiTestCase_(self, ((CucumberApiEventTestCaseStarted *) nil_chk(event))->testCase_);
  CucumberRuntimeFormatterHTMLFormatter_handleScenarioOutlineWithCucumberApiTestCase_(self, event->testCase_);
  JreStrongAssign(&self->currentTestCaseMap_, CucumberRuntimeFormatterHTMLFormatter_createTestCaseWithCucumberApiTestCase_(self, event->testCase_));
  if ([((CucumberRuntimeFormatterTestSourcesModel *) nil_chk(self->testSources_)) hasBackgroundWithNSString:self->currentFeatureFile_ withInt:[((CucumberApiTestCase *) nil_chk(event->testCase_)) getLine]]) {
    CucumberRuntimeFormatterHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, @"background", [IOSObjectArray arrayWithObjects:(id[]){ CucumberRuntimeFormatterHTMLFormatter_createBackgroundWithCucumberApiTestCase_(self, event->testCase_) } count:1 type:NSObject_class_()]);
  }
  else {
    CucumberRuntimeFormatterHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, @"scenario", [IOSObjectArray arrayWithObjects:(id[]){ self->currentTestCaseMap_ } count:1 type:NSObject_class_()]);
    JreStrongAssign(&self->currentTestCaseMap_, nil);
  }
}

void CucumberRuntimeFormatterHTMLFormatter_handleTestStepStartedWithCucumberApiEventTestStepStarted_(CucumberRuntimeFormatterHTMLFormatter *self, CucumberApiEventTestStepStarted *event) {
  if (![((CucumberApiTestStep *) nil_chk(((CucumberApiEventTestStepStarted *) nil_chk(event))->testStep_)) isHook]) {
    if (CucumberRuntimeFormatterHTMLFormatter_isFirstStepAfterBackgroundWithCucumberApiTestStep_(self, event->testStep_)) {
      CucumberRuntimeFormatterHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, @"scenario", [IOSObjectArray arrayWithObjects:(id[]){ self->currentTestCaseMap_ } count:1 type:NSObject_class_()]);
      JreStrongAssign(&self->currentTestCaseMap_, nil);
    }
    CucumberRuntimeFormatterHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, @"step", [IOSObjectArray arrayWithObjects:(id[]){ CucumberRuntimeFormatterHTMLFormatter_createTestStepWithCucumberApiTestStep_(self, event->testStep_) } count:1 type:NSObject_class_()]);
  }
}

void CucumberRuntimeFormatterHTMLFormatter_handleTestStepFinishedWithCucumberApiEventTestStepFinished_(CucumberRuntimeFormatterHTMLFormatter *self, CucumberApiEventTestStepFinished *event) {
  if (![((CucumberApiTestStep *) nil_chk(((CucumberApiEventTestStepFinished *) nil_chk(event))->testStep_)) isHook]) {
    CucumberRuntimeFormatterHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, @"match", [IOSObjectArray arrayWithObjects:(id[]){ CucumberRuntimeFormatterHTMLFormatter_createMatchMapWithCucumberApiTestStep_withCucumberApiResult_(self, event->testStep_, event->result_) } count:1 type:NSObject_class_()]);
    CucumberRuntimeFormatterHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, @"result", [IOSObjectArray arrayWithObjects:(id[]){ CucumberRuntimeFormatterHTMLFormatter_createResultMapWithCucumberApiResult_(self, event->result_) } count:1 type:NSObject_class_()]);
  }
  else {
    CucumberRuntimeFormatterHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, [((CucumberApiHookType *) nil_chk([event->testStep_ getHookType])) description], [IOSObjectArray arrayWithObjects:(id[]){ CucumberRuntimeFormatterHTMLFormatter_createResultMapWithCucumberApiResult_(self, event->result_) } count:1 type:NSObject_class_()]);
  }
}

void CucumberRuntimeFormatterHTMLFormatter_handleEmbedWithCucumberApiEventEmbedEvent_(CucumberRuntimeFormatterHTMLFormatter *self, CucumberApiEventEmbedEvent *event) {
  NSString *mimeType = ((CucumberApiEventEmbedEvent *) nil_chk(event))->mimeType_;
  if ([((NSString *) nil_chk(mimeType)) java_hasPrefix:@"text/"]) {
    CucumberRuntimeFormatterHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, @"embedding", [IOSObjectArray arrayWithObjects:(id[]){ mimeType, [NSString java_stringWithBytes:event->data_] } count:2 type:NSObject_class_()]);
  }
  else {
    NSString *extension = [((id<JavaUtilMap>) nil_chk(CucumberRuntimeFormatterHTMLFormatter_MIME_TYPES_EXTENSIONS)) getWithId:mimeType];
    if (extension != nil) {
      JavaLangStringBuilder *fileName = [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([create_JavaLangStringBuilder_initWithNSString_(@"embedded") appendWithInt:self->embeddedIndex_++])) appendWithNSString:@"."])) appendWithNSString:extension];
      CucumberRuntimeFormatterHTMLFormatter_writeBytesToURLWithByteArray_withJavaNetURL_(event->data_, CucumberRuntimeFormatterHTMLFormatter_toUrlWithNSString_(self, [((JavaLangStringBuilder *) nil_chk(fileName)) description]));
      CucumberRuntimeFormatterHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, @"embedding", [IOSObjectArray arrayWithObjects:(id[]){ mimeType, fileName } count:2 type:NSObject_class_()]);
    }
  }
}

void CucumberRuntimeFormatterHTMLFormatter_handleWriteWithCucumberApiEventWriteEvent_(CucumberRuntimeFormatterHTMLFormatter *self, CucumberApiEventWriteEvent *event) {
  CucumberRuntimeFormatterHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, @"write", [IOSObjectArray arrayWithObjects:(id[]){ ((CucumberApiEventWriteEvent *) nil_chk(event))->text_ } count:1 type:NSObject_class_()]);
}

void CucumberRuntimeFormatterHTMLFormatter_finishReport(CucumberRuntimeFormatterHTMLFormatter *self) {
  if (!self->firstFeature_) {
    [((CucumberApiFormatterNiceAppendable *) nil_chk(self->jsOut_)) appendWithJavaLangCharSequence:@"});"];
    CucumberRuntimeFormatterHTMLFormatter_copyReportFiles(self);
  }
  [((CucumberApiFormatterNiceAppendable *) nil_chk(self->jsOut_)) close];
}

void CucumberRuntimeFormatterHTMLFormatter_handleStartOfFeatureWithCucumberApiTestCase_(CucumberRuntimeFormatterHTMLFormatter *self, CucumberApiTestCase *testCase) {
  if (self->currentFeatureFile_ == nil || ![self->currentFeatureFile_ isEqual:[((CucumberApiTestCase *) nil_chk(testCase)) getUri]]) {
    JreStrongAssign(&self->currentFeatureFile_, [((CucumberApiTestCase *) nil_chk(testCase)) getUri]);
    CucumberRuntimeFormatterHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, @"uri", [IOSObjectArray arrayWithObjects:(id[]){ self->currentFeatureFile_ } count:1 type:NSObject_class_()]);
    CucumberRuntimeFormatterHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, @"feature", [IOSObjectArray arrayWithObjects:(id[]){ CucumberRuntimeFormatterHTMLFormatter_createFeatureWithCucumberApiTestCase_(self, testCase) } count:1 type:NSObject_class_()]);
  }
}

id<JavaUtilMap> CucumberRuntimeFormatterHTMLFormatter_createFeatureWithCucumberApiTestCase_(CucumberRuntimeFormatterHTMLFormatter *self, CucumberApiTestCase *testCase) {
  id<JavaUtilMap> featureMap = create_JavaUtilHashMap_init();
  GherkinAstFeature *feature = [((CucumberRuntimeFormatterTestSourcesModel *) nil_chk(self->testSources_)) getFeatureWithNSString:[((CucumberApiTestCase *) nil_chk(testCase)) getUri]];
  if (feature != nil) {
    [featureMap putWithId:@"keyword" withId:[feature getKeyword]];
    [featureMap putWithId:@"name" withId:[feature getName]];
    [featureMap putWithId:@"description" withId:[feature getDescription] != nil ? [feature getDescription] : @""];
    if (![((id<JavaUtilList>) nil_chk([feature getTags])) isEmpty]) {
      [featureMap putWithId:@"tags" withId:CucumberRuntimeFormatterHTMLFormatter_createTagListWithJavaUtilList_(self, [feature getTags])];
    }
  }
  return featureMap;
}

id<JavaUtilList> CucumberRuntimeFormatterHTMLFormatter_createTagListWithJavaUtilList_(CucumberRuntimeFormatterHTMLFormatter *self, id<JavaUtilList> tags) {
  id<JavaUtilList> tagList = create_JavaUtilArrayList_init();
  for (GherkinAstTag * __strong tag in nil_chk(tags)) {
    id<JavaUtilMap> tagMap = create_JavaUtilHashMap_init();
    [tagMap putWithId:@"name" withId:[((GherkinAstTag *) nil_chk(tag)) getName]];
    [tagList addWithId:tagMap];
  }
  return tagList;
}

void CucumberRuntimeFormatterHTMLFormatter_handleScenarioOutlineWithCucumberApiTestCase_(CucumberRuntimeFormatterHTMLFormatter *self, CucumberApiTestCase *testCase) {
  CucumberRuntimeFormatterTestSourcesModel_AstNode *astNode = [((CucumberRuntimeFormatterTestSourcesModel *) nil_chk(self->testSources_)) getAstNodeWithNSString:self->currentFeatureFile_ withInt:[((CucumberApiTestCase *) nil_chk(testCase)) getLine]];
  if (CucumberRuntimeFormatterTestSourcesModel_isScenarioOutlineScenarioWithCucumberRuntimeFormatterTestSourcesModel_AstNode_(astNode)) {
    GherkinAstScenarioOutline *scenarioOutline = (GherkinAstScenarioOutline *) cast_chk(CucumberRuntimeFormatterTestSourcesModel_getScenarioDefinitionWithCucumberRuntimeFormatterTestSourcesModel_AstNode_(astNode), [GherkinAstScenarioOutline class]);
    if (self->currentScenarioOutline_ == nil || ![self->currentScenarioOutline_ isEqual:scenarioOutline]) {
      JreStrongAssign(&self->currentScenarioOutline_, scenarioOutline);
      CucumberRuntimeFormatterHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, @"scenarioOutline", [IOSObjectArray arrayWithObjects:(id[]){ CucumberRuntimeFormatterHTMLFormatter_createScenarioOutlineWithGherkinAstScenarioOutline_(self, self->currentScenarioOutline_) } count:1 type:NSObject_class_()]);
      CucumberRuntimeFormatterHTMLFormatter_addOutlineStepsToReportWithGherkinAstScenarioOutline_(self, scenarioOutline);
    }
    GherkinAstExamples *examples = (GherkinAstExamples *) cast_chk(((CucumberRuntimeFormatterTestSourcesModel_AstNode *) nil_chk(((CucumberRuntimeFormatterTestSourcesModel_AstNode *) nil_chk(astNode))->parent_))->node_, [GherkinAstExamples class]);
    if (self->currentExamples_ == nil || ![self->currentExamples_ isEqual:examples]) {
      JreStrongAssign(&self->currentExamples_, examples);
      CucumberRuntimeFormatterHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, @"examples", [IOSObjectArray arrayWithObjects:(id[]){ CucumberRuntimeFormatterHTMLFormatter_createExamplesWithGherkinAstExamples_(self, self->currentExamples_) } count:1 type:NSObject_class_()]);
    }
  }
  else {
    JreStrongAssign(&self->currentScenarioOutline_, nil);
    JreStrongAssign(&self->currentExamples_, nil);
  }
}

id<JavaUtilMap> CucumberRuntimeFormatterHTMLFormatter_createScenarioOutlineWithGherkinAstScenarioOutline_(CucumberRuntimeFormatterHTMLFormatter *self, GherkinAstScenarioOutline *scenarioOutline) {
  id<JavaUtilMap> scenarioOutlineMap = create_JavaUtilHashMap_init();
  [scenarioOutlineMap putWithId:@"name" withId:[((GherkinAstScenarioOutline *) nil_chk(scenarioOutline)) getName]];
  [scenarioOutlineMap putWithId:@"keyword" withId:[scenarioOutline getKeyword]];
  [scenarioOutlineMap putWithId:@"description" withId:[scenarioOutline getDescription] != nil ? [scenarioOutline getDescription] : @""];
  if (![((id<JavaUtilList>) nil_chk([scenarioOutline getTags])) isEmpty]) {
    [scenarioOutlineMap putWithId:@"tags" withId:CucumberRuntimeFormatterHTMLFormatter_createTagListWithJavaUtilList_(self, [scenarioOutline getTags])];
  }
  return scenarioOutlineMap;
}

void CucumberRuntimeFormatterHTMLFormatter_addOutlineStepsToReportWithGherkinAstScenarioOutline_(CucumberRuntimeFormatterHTMLFormatter *self, GherkinAstScenarioOutline *scenarioOutline) {
  for (GherkinAstStep * __strong step in nil_chk([((GherkinAstScenarioOutline *) nil_chk(scenarioOutline)) getSteps])) {
    id<JavaUtilMap> stepMap = create_JavaUtilHashMap_init();
    [stepMap putWithId:@"name" withId:[((GherkinAstStep *) nil_chk(step)) getText]];
    [stepMap putWithId:@"keyword" withId:[step getKeyword]];
    if ([step getArgument] != nil) {
      GherkinAstNode *argument = [step getArgument];
      if ([argument isKindOfClass:[GherkinAstDocString class]]) {
        [stepMap putWithId:@"doc_string" withId:CucumberRuntimeFormatterHTMLFormatter_createDocStringMapWithGherkinAstDocString_(self, (GherkinAstDocString *) cast_chk(argument, [GherkinAstDocString class]))];
      }
      else if ([argument isKindOfClass:[GherkinAstDataTable class]]) {
        [stepMap putWithId:@"rows" withId:CucumberRuntimeFormatterHTMLFormatter_createDataTableListWithGherkinAstDataTable_(self, (GherkinAstDataTable *) cast_chk(argument, [GherkinAstDataTable class]))];
      }
    }
    CucumberRuntimeFormatterHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(self, @"step", [IOSObjectArray arrayWithObjects:(id[]){ stepMap } count:1 type:NSObject_class_()]);
  }
}

id<JavaUtilMap> CucumberRuntimeFormatterHTMLFormatter_createDocStringMapWithGherkinAstDocString_(CucumberRuntimeFormatterHTMLFormatter *self, GherkinAstDocString *docString) {
  id<JavaUtilMap> docStringMap = create_JavaUtilHashMap_init();
  [docStringMap putWithId:@"value" withId:[((GherkinAstDocString *) nil_chk(docString)) getContent]];
  return docStringMap;
}

id<JavaUtilList> CucumberRuntimeFormatterHTMLFormatter_createDataTableListWithGherkinAstDataTable_(CucumberRuntimeFormatterHTMLFormatter *self, GherkinAstDataTable *dataTable) {
  id<JavaUtilList> rowList = create_JavaUtilArrayList_init();
  for (GherkinAstTableRow * __strong row in nil_chk([((GherkinAstDataTable *) nil_chk(dataTable)) getRows])) {
    [rowList addWithId:CucumberRuntimeFormatterHTMLFormatter_createRowMapWithGherkinAstTableRow_(self, row)];
  }
  return rowList;
}

id<JavaUtilMap> CucumberRuntimeFormatterHTMLFormatter_createRowMapWithGherkinAstTableRow_(CucumberRuntimeFormatterHTMLFormatter *self, GherkinAstTableRow *row) {
  id<JavaUtilMap> rowMap = create_JavaUtilHashMap_init();
  [rowMap putWithId:@"cells" withId:CucumberRuntimeFormatterHTMLFormatter_createCellListWithGherkinAstTableRow_(self, row)];
  return rowMap;
}

id<JavaUtilList> CucumberRuntimeFormatterHTMLFormatter_createCellListWithGherkinAstTableRow_(CucumberRuntimeFormatterHTMLFormatter *self, GherkinAstTableRow *row) {
  id<JavaUtilList> cells = create_JavaUtilArrayList_init();
  for (GherkinAstTableCell * __strong cell in nil_chk([((GherkinAstTableRow *) nil_chk(row)) getCells])) {
    [cells addWithId:[((GherkinAstTableCell *) nil_chk(cell)) getValue]];
  }
  return cells;
}

id<JavaUtilMap> CucumberRuntimeFormatterHTMLFormatter_createExamplesWithGherkinAstExamples_(CucumberRuntimeFormatterHTMLFormatter *self, GherkinAstExamples *examples) {
  id<JavaUtilMap> examplesMap = create_JavaUtilHashMap_init();
  [examplesMap putWithId:@"name" withId:[((GherkinAstExamples *) nil_chk(examples)) getName]];
  [examplesMap putWithId:@"keyword" withId:[examples getKeyword]];
  [examplesMap putWithId:@"description" withId:[examples getDescription] != nil ? [examples getDescription] : @""];
  id<JavaUtilList> rowList = create_JavaUtilArrayList_init();
  [rowList addWithId:CucumberRuntimeFormatterHTMLFormatter_createRowMapWithGherkinAstTableRow_(self, [examples getTableHeader])];
  for (GherkinAstTableRow * __strong row in nil_chk([examples getTableBody])) {
    [rowList addWithId:CucumberRuntimeFormatterHTMLFormatter_createRowMapWithGherkinAstTableRow_(self, row)];
  }
  [examplesMap putWithId:@"rows" withId:rowList];
  if (![((id<JavaUtilList>) nil_chk([examples getTags])) isEmpty]) {
    [examplesMap putWithId:@"tags" withId:CucumberRuntimeFormatterHTMLFormatter_createTagListWithJavaUtilList_(self, [examples getTags])];
  }
  return examplesMap;
}

id<JavaUtilMap> CucumberRuntimeFormatterHTMLFormatter_createTestCaseWithCucumberApiTestCase_(CucumberRuntimeFormatterHTMLFormatter *self, CucumberApiTestCase *testCase) {
  id<JavaUtilMap> testCaseMap = create_JavaUtilHashMap_init();
  [testCaseMap putWithId:@"name" withId:[((CucumberApiTestCase *) nil_chk(testCase)) getName]];
  CucumberRuntimeFormatterTestSourcesModel_AstNode *astNode = [((CucumberRuntimeFormatterTestSourcesModel *) nil_chk(self->testSources_)) getAstNodeWithNSString:self->currentFeatureFile_ withInt:[testCase getLine]];
  if (astNode != nil) {
    GherkinAstScenarioDefinition *scenarioDefinition = CucumberRuntimeFormatterTestSourcesModel_getScenarioDefinitionWithCucumberRuntimeFormatterTestSourcesModel_AstNode_(astNode);
    [testCaseMap putWithId:@"keyword" withId:[((GherkinAstScenarioDefinition *) nil_chk(scenarioDefinition)) getKeyword]];
    [testCaseMap putWithId:@"description" withId:[scenarioDefinition getDescription] != nil ? [scenarioDefinition getDescription] : @""];
  }
  if (![((id<JavaUtilList>) nil_chk([testCase getTags])) isEmpty]) {
    id<JavaUtilList> tagList = create_JavaUtilArrayList_init();
    for (GherkinPicklesPickleTag * __strong tag in nil_chk([testCase getTags])) {
      id<JavaUtilMap> tagMap = create_JavaUtilHashMap_init();
      [tagMap putWithId:@"name" withId:[((GherkinPicklesPickleTag *) nil_chk(tag)) getName]];
      [tagList addWithId:tagMap];
    }
    [testCaseMap putWithId:@"tags" withId:tagList];
  }
  return testCaseMap;
}

id<JavaUtilMap> CucumberRuntimeFormatterHTMLFormatter_createBackgroundWithCucumberApiTestCase_(CucumberRuntimeFormatterHTMLFormatter *self, CucumberApiTestCase *testCase) {
  CucumberRuntimeFormatterTestSourcesModel_AstNode *astNode = [((CucumberRuntimeFormatterTestSourcesModel *) nil_chk(self->testSources_)) getAstNodeWithNSString:self->currentFeatureFile_ withInt:[((CucumberApiTestCase *) nil_chk(testCase)) getLine]];
  if (astNode != nil) {
    GherkinAstBackground *background = CucumberRuntimeFormatterTestSourcesModel_getBackgroundForTestCaseWithCucumberRuntimeFormatterTestSourcesModel_AstNode_(astNode);
    id<JavaUtilMap> testCaseMap = create_JavaUtilHashMap_init();
    [testCaseMap putWithId:@"name" withId:[((GherkinAstBackground *) nil_chk(background)) getName]];
    [testCaseMap putWithId:@"keyword" withId:[background getKeyword]];
    [testCaseMap putWithId:@"description" withId:[background getDescription] != nil ? [background getDescription] : @""];
    return testCaseMap;
  }
  return nil;
}

jboolean CucumberRuntimeFormatterHTMLFormatter_isFirstStepAfterBackgroundWithCucumberApiTestStep_(CucumberRuntimeFormatterHTMLFormatter *self, CucumberApiTestStep *testStep) {
  CucumberRuntimeFormatterTestSourcesModel_AstNode *astNode = [((CucumberRuntimeFormatterTestSourcesModel *) nil_chk(self->testSources_)) getAstNodeWithNSString:self->currentFeatureFile_ withInt:[((CucumberApiTestStep *) nil_chk(testStep)) getStepLine]];
  if (astNode != nil) {
    if (self->currentTestCaseMap_ != nil && !CucumberRuntimeFormatterTestSourcesModel_isBackgroundStepWithCucumberRuntimeFormatterTestSourcesModel_AstNode_(astNode)) {
      return true;
    }
  }
  return false;
}

id<JavaUtilMap> CucumberRuntimeFormatterHTMLFormatter_createTestStepWithCucumberApiTestStep_(CucumberRuntimeFormatterHTMLFormatter *self, CucumberApiTestStep *testStep) {
  id<JavaUtilMap> stepMap = create_JavaUtilHashMap_init();
  [stepMap putWithId:@"name" withId:[((CucumberApiTestStep *) nil_chk(testStep)) getStepText]];
  if (![((id<JavaUtilList>) nil_chk([testStep getStepArgument])) isEmpty]) {
    id<GherkinPicklesArgument> argument = [((id<JavaUtilList>) nil_chk([testStep getStepArgument])) getWithInt:0];
    if ([argument isKindOfClass:[GherkinPicklesPickleString class]]) {
      [stepMap putWithId:@"doc_string" withId:CucumberRuntimeFormatterHTMLFormatter_createDocStringMapWithGherkinPicklesPickleString_(self, (GherkinPicklesPickleString *) cast_chk(argument, [GherkinPicklesPickleString class]))];
    }
    else if ([argument isKindOfClass:[GherkinPicklesPickleTable class]]) {
      [stepMap putWithId:@"rows" withId:CucumberRuntimeFormatterHTMLFormatter_createDataTableListWithGherkinPicklesPickleTable_(self, (GherkinPicklesPickleTable *) cast_chk(argument, [GherkinPicklesPickleTable class]))];
    }
  }
  CucumberRuntimeFormatterTestSourcesModel_AstNode *astNode = [((CucumberRuntimeFormatterTestSourcesModel *) nil_chk(self->testSources_)) getAstNodeWithNSString:self->currentFeatureFile_ withInt:[testStep getStepLine]];
  if (astNode != nil) {
    GherkinAstStep *step = (GherkinAstStep *) cast_chk(astNode->node_, [GherkinAstStep class]);
    [stepMap putWithId:@"keyword" withId:[((GherkinAstStep *) nil_chk(step)) getKeyword]];
  }
  return stepMap;
}

id<JavaUtilMap> CucumberRuntimeFormatterHTMLFormatter_createDocStringMapWithGherkinPicklesPickleString_(CucumberRuntimeFormatterHTMLFormatter *self, GherkinPicklesPickleString *docString) {
  id<JavaUtilMap> docStringMap = create_JavaUtilHashMap_init();
  [docStringMap putWithId:@"value" withId:[((GherkinPicklesPickleString *) nil_chk(docString)) getContent]];
  return docStringMap;
}

id<JavaUtilList> CucumberRuntimeFormatterHTMLFormatter_createDataTableListWithGherkinPicklesPickleTable_(CucumberRuntimeFormatterHTMLFormatter *self, GherkinPicklesPickleTable *dataTable) {
  id<JavaUtilList> rowList = create_JavaUtilArrayList_init();
  for (GherkinPicklesPickleRow * __strong row in nil_chk([((GherkinPicklesPickleTable *) nil_chk(dataTable)) getRows])) {
    [rowList addWithId:CucumberRuntimeFormatterHTMLFormatter_createRowMapWithGherkinPicklesPickleRow_(self, row)];
  }
  return rowList;
}

id<JavaUtilMap> CucumberRuntimeFormatterHTMLFormatter_createRowMapWithGherkinPicklesPickleRow_(CucumberRuntimeFormatterHTMLFormatter *self, GherkinPicklesPickleRow *row) {
  id<JavaUtilMap> rowMap = create_JavaUtilHashMap_init();
  [rowMap putWithId:@"cells" withId:CucumberRuntimeFormatterHTMLFormatter_createCellListWithGherkinPicklesPickleRow_(self, row)];
  return rowMap;
}

id<JavaUtilList> CucumberRuntimeFormatterHTMLFormatter_createCellListWithGherkinPicklesPickleRow_(CucumberRuntimeFormatterHTMLFormatter *self, GherkinPicklesPickleRow *row) {
  id<JavaUtilList> cells = create_JavaUtilArrayList_init();
  for (GherkinPicklesPickleCell * __strong cell in nil_chk([((GherkinPicklesPickleRow *) nil_chk(row)) getCells])) {
    [cells addWithId:[((GherkinPicklesPickleCell *) nil_chk(cell)) getValue]];
  }
  return cells;
}

id<JavaUtilMap> CucumberRuntimeFormatterHTMLFormatter_createMatchMapWithCucumberApiTestStep_withCucumberApiResult_(CucumberRuntimeFormatterHTMLFormatter *self, CucumberApiTestStep *testStep, CucumberApiResult *result) {
  id<JavaUtilMap> matchMap = create_JavaUtilHashMap_init();
  if (![((CucumberApiResult *) nil_chk(result)) isWithCucumberApiResult_Type:JreLoadEnum(CucumberApiResult_Type, UNDEFINED)]) {
    [matchMap putWithId:@"location" withId:[((CucumberApiTestStep *) nil_chk(testStep)) getCodeLocation]];
  }
  return matchMap;
}

id<JavaUtilMap> CucumberRuntimeFormatterHTMLFormatter_createResultMapWithCucumberApiResult_(CucumberRuntimeFormatterHTMLFormatter *self, CucumberApiResult *result) {
  id<JavaUtilMap> resultMap = create_JavaUtilHashMap_init();
  [resultMap putWithId:@"status" withId:[((CucumberApiResult_Type *) nil_chk([((CucumberApiResult *) nil_chk(result)) getStatus])) lowerCaseName]];
  if ([result getErrorMessage] != nil) {
    [resultMap putWithId:@"error_message" withId:[result getErrorMessage]];
  }
  return resultMap;
}

void CucumberRuntimeFormatterHTMLFormatter_jsFunctionCallWithNSString_withNSObjectArray_(CucumberRuntimeFormatterHTMLFormatter *self, NSString *functionName, IOSObjectArray *args) {
  CucumberApiFormatterNiceAppendable *out = [((CucumberApiFormatterNiceAppendable *) nil_chk([((CucumberApiFormatterNiceAppendable *) nil_chk([((CucumberApiFormatterNiceAppendable *) nil_chk(self->jsOut_)) appendWithJavaLangCharSequence:JreStrcat("$C", CucumberRuntimeFormatterHTMLFormatter_JS_FORMATTER_VAR, '.')])) appendWithJavaLangCharSequence:functionName])) appendWithJavaLangCharSequence:@"("];
  jboolean comma = false;
  {
    IOSObjectArray *a__ = args;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id arg = *b__++;
      if (comma) {
        [((CucumberApiFormatterNiceAppendable *) nil_chk(out)) appendWithJavaLangCharSequence:@", "];
      }
      NSString *stringArg = [((ComGoogleGsonGson *) nil_chk(CucumberRuntimeFormatterHTMLFormatter_gson)) toJsonWithId:arg];
      [((CucumberApiFormatterNiceAppendable *) nil_chk(out)) appendWithJavaLangCharSequence:stringArg];
      comma = true;
    }
  }
  [((CucumberApiFormatterNiceAppendable *) nil_chk([((CucumberApiFormatterNiceAppendable *) nil_chk(out)) appendWithJavaLangCharSequence:@");"])) println];
}

void CucumberRuntimeFormatterHTMLFormatter_copyReportFiles(CucumberRuntimeFormatterHTMLFormatter *self) {
  if (self->htmlReportDir_ == nil) {
    return;
  }
  {
    IOSObjectArray *a__ = CucumberRuntimeFormatterHTMLFormatter_TEXT_ASSETS;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *textAsset = *b__++;
      JavaIoInputStream *textAssetStream = [[self java_getClass] getResourceAsStream:textAsset];
      if (textAssetStream == nil) {
        @throw create_CucumberRuntimeCucumberException_initWithNSString_(JreStrcat("$$$", @"Couldn't find ", textAsset, @". Is cucumber-html on your classpath? Make sure you have the right version."));
      }
      NSString *fileName = [create_JavaIoFile_initWithNSString_(textAsset) getName];
      CucumberRuntimeFormatterHTMLFormatter_writeStreamToURLWithJavaIoInputStream_withJavaNetURL_(textAssetStream, CucumberRuntimeFormatterHTMLFormatter_toUrlWithNSString_(self, fileName));
    }
  }
}

JavaNetURL *CucumberRuntimeFormatterHTMLFormatter_toUrlWithNSString_(CucumberRuntimeFormatterHTMLFormatter *self, NSString *fileName) {
  @try {
    return create_JavaNetURL_initWithJavaNetURL_withNSString_(self->htmlReportDir_, fileName);
  }
  @catch (JavaIoIOException *e) {
    @throw create_CucumberRuntimeCucumberException_initWithJavaLangThrowable_(e);
  }
}

void CucumberRuntimeFormatterHTMLFormatter_writeStreamToURLWithJavaIoInputStream_withJavaNetURL_(JavaIoInputStream *inArg, JavaNetURL *url) {
  CucumberRuntimeFormatterHTMLFormatter_initialize();
  JavaIoOutputStream *out = CucumberRuntimeFormatterHTMLFormatter_createReportFileOutputStreamWithJavaNetURL_(url);
  IOSByteArray *buffer = [IOSByteArray arrayWithLength:16 * 1024];
  @try {
    jint len = [((JavaIoInputStream *) nil_chk(inArg)) readWithByteArray:buffer];
    while (len != -1) {
      [((JavaIoOutputStream *) nil_chk(out)) writeWithByteArray:buffer withInt:0 withInt:len];
      len = [inArg readWithByteArray:buffer];
    }
  }
  @catch (JavaIoIOException *e) {
    @throw create_CucumberRuntimeCucumberException_initWithNSString_withJavaLangThrowable_(@"Unable to write to report file item: ", e);
  }
  @finally {
    CucumberRuntimeFormatterHTMLFormatter_closeQuietlyWithJavaIoCloseable_(out);
  }
}

void CucumberRuntimeFormatterHTMLFormatter_writeBytesToURLWithByteArray_withJavaNetURL_(IOSByteArray *buf, JavaNetURL *url) {
  CucumberRuntimeFormatterHTMLFormatter_initialize();
  JavaIoOutputStream *out = CucumberRuntimeFormatterHTMLFormatter_createReportFileOutputStreamWithJavaNetURL_(url);
  @try {
    [((JavaIoOutputStream *) nil_chk(out)) writeWithByteArray:buf];
  }
  @catch (JavaIoIOException *e) {
    @throw create_CucumberRuntimeCucumberException_initWithNSString_withJavaLangThrowable_(@"Unable to write to report file item: ", e);
  }
  @finally {
    CucumberRuntimeFormatterHTMLFormatter_closeQuietlyWithJavaIoCloseable_(out);
  }
}

CucumberApiFormatterNiceAppendable *CucumberRuntimeFormatterHTMLFormatter_createJsOutWithJavaNetURL_(JavaNetURL *htmlReportDir) {
  CucumberRuntimeFormatterHTMLFormatter_initialize();
  @try {
    return create_CucumberApiFormatterNiceAppendable_initWithJavaLangAppendable_(create_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(CucumberRuntimeFormatterHTMLFormatter_createReportFileOutputStreamWithJavaNetURL_(create_JavaNetURL_initWithJavaNetURL_withNSString_(htmlReportDir, CucumberRuntimeFormatterHTMLFormatter_JS_REPORT_FILENAME)), @"UTF-8"));
  }
  @catch (JavaIoIOException *e) {
    @throw create_CucumberRuntimeCucumberException_initWithJavaLangThrowable_(e);
  }
}

JavaIoOutputStream *CucumberRuntimeFormatterHTMLFormatter_createReportFileOutputStreamWithJavaNetURL_(JavaNetURL *url) {
  CucumberRuntimeFormatterHTMLFormatter_initialize();
  @try {
    return create_CucumberRuntimeIoURLOutputStream_initWithJavaNetURL_(url);
  }
  @catch (JavaIoIOException *e) {
    @throw create_CucumberRuntimeCucumberException_initWithJavaLangThrowable_(e);
  }
}

void CucumberRuntimeFormatterHTMLFormatter_closeQuietlyWithJavaIoCloseable_(id<JavaIoCloseable> outArg) {
  CucumberRuntimeFormatterHTMLFormatter_initialize();
  @try {
    [((id<JavaIoCloseable>) nil_chk(outArg)) close];
  }
  @catch (JavaIoIOException *ignored) {
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeFormatterHTMLFormatter)

@implementation CucumberRuntimeFormatterHTMLFormatter_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CucumberRuntimeFormatterHTMLFormatter_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LCucumberRuntimeFormatterHTMLFormatter;", "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeFormatterHTMLFormatter_1 = { "", "cucumber.runtime.formatter", ptrTable, methods, NULL, 7, 0x8018, 1, 0, 0, -1, -1, 1, -1 };
  return &_CucumberRuntimeFormatterHTMLFormatter_1;
}

@end

void CucumberRuntimeFormatterHTMLFormatter_1_init(CucumberRuntimeFormatterHTMLFormatter_1 *self) {
  JavaUtilHashMap_init(self);
  {
    [self putWithId:@"image/bmp" withId:@"bmp"];
    [self putWithId:@"image/gif" withId:@"gif"];
    [self putWithId:@"image/jpeg" withId:@"jpg"];
    [self putWithId:@"image/png" withId:@"png"];
    [self putWithId:@"image/svg+xml" withId:@"svg"];
    [self putWithId:@"video/ogg" withId:@"ogg"];
  }
}

CucumberRuntimeFormatterHTMLFormatter_1 *new_CucumberRuntimeFormatterHTMLFormatter_1_init() {
  J2OBJC_NEW_IMPL(CucumberRuntimeFormatterHTMLFormatter_1, init)
}

CucumberRuntimeFormatterHTMLFormatter_1 *create_CucumberRuntimeFormatterHTMLFormatter_1_init() {
  J2OBJC_CREATE_IMPL(CucumberRuntimeFormatterHTMLFormatter_1, init)
}

@implementation CucumberRuntimeFormatterHTMLFormatter_2

- (instancetype __nonnull)initWithCucumberRuntimeFormatterHTMLFormatter:(CucumberRuntimeFormatterHTMLFormatter *)outer$ {
  CucumberRuntimeFormatterHTMLFormatter_2_initWithCucumberRuntimeFormatterHTMLFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestSourceRead *)event {
  CucumberRuntimeFormatterHTMLFormatter_handleTestSourceReadWithCucumberApiEventTestSourceRead_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCucumberRuntimeFormatterHTMLFormatter:);
  methods[1].selector = @selector(receiveWithCucumberApiEventEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCucumberRuntimeFormatterHTMLFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCucumberApiEventTestSourceRead;", "LCucumberRuntimeFormatterHTMLFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestSourceRead;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeFormatterHTMLFormatter_2 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CucumberRuntimeFormatterHTMLFormatter_2;
}

@end

void CucumberRuntimeFormatterHTMLFormatter_2_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter_2 *self, CucumberRuntimeFormatterHTMLFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CucumberRuntimeFormatterHTMLFormatter_2 *new_CucumberRuntimeFormatterHTMLFormatter_2_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter *outer$) {
  J2OBJC_NEW_IMPL(CucumberRuntimeFormatterHTMLFormatter_2, initWithCucumberRuntimeFormatterHTMLFormatter_, outer$)
}

CucumberRuntimeFormatterHTMLFormatter_2 *create_CucumberRuntimeFormatterHTMLFormatter_2_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeFormatterHTMLFormatter_2, initWithCucumberRuntimeFormatterHTMLFormatter_, outer$)
}

@implementation CucumberRuntimeFormatterHTMLFormatter_3

- (instancetype __nonnull)initWithCucumberRuntimeFormatterHTMLFormatter:(CucumberRuntimeFormatterHTMLFormatter *)outer$ {
  CucumberRuntimeFormatterHTMLFormatter_3_initWithCucumberRuntimeFormatterHTMLFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestCaseStarted *)event {
  CucumberRuntimeFormatterHTMLFormatter_handleTestCaseStartedWithCucumberApiEventTestCaseStarted_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCucumberRuntimeFormatterHTMLFormatter:);
  methods[1].selector = @selector(receiveWithCucumberApiEventEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCucumberRuntimeFormatterHTMLFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCucumberApiEventTestCaseStarted;", "LCucumberRuntimeFormatterHTMLFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestCaseStarted;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeFormatterHTMLFormatter_3 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CucumberRuntimeFormatterHTMLFormatter_3;
}

@end

void CucumberRuntimeFormatterHTMLFormatter_3_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter_3 *self, CucumberRuntimeFormatterHTMLFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CucumberRuntimeFormatterHTMLFormatter_3 *new_CucumberRuntimeFormatterHTMLFormatter_3_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter *outer$) {
  J2OBJC_NEW_IMPL(CucumberRuntimeFormatterHTMLFormatter_3, initWithCucumberRuntimeFormatterHTMLFormatter_, outer$)
}

CucumberRuntimeFormatterHTMLFormatter_3 *create_CucumberRuntimeFormatterHTMLFormatter_3_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeFormatterHTMLFormatter_3, initWithCucumberRuntimeFormatterHTMLFormatter_, outer$)
}

@implementation CucumberRuntimeFormatterHTMLFormatter_4

- (instancetype __nonnull)initWithCucumberRuntimeFormatterHTMLFormatter:(CucumberRuntimeFormatterHTMLFormatter *)outer$ {
  CucumberRuntimeFormatterHTMLFormatter_4_initWithCucumberRuntimeFormatterHTMLFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestStepStarted *)event {
  CucumberRuntimeFormatterHTMLFormatter_handleTestStepStartedWithCucumberApiEventTestStepStarted_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCucumberRuntimeFormatterHTMLFormatter:);
  methods[1].selector = @selector(receiveWithCucumberApiEventEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCucumberRuntimeFormatterHTMLFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCucumberApiEventTestStepStarted;", "LCucumberRuntimeFormatterHTMLFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestStepStarted;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeFormatterHTMLFormatter_4 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CucumberRuntimeFormatterHTMLFormatter_4;
}

@end

void CucumberRuntimeFormatterHTMLFormatter_4_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter_4 *self, CucumberRuntimeFormatterHTMLFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CucumberRuntimeFormatterHTMLFormatter_4 *new_CucumberRuntimeFormatterHTMLFormatter_4_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter *outer$) {
  J2OBJC_NEW_IMPL(CucumberRuntimeFormatterHTMLFormatter_4, initWithCucumberRuntimeFormatterHTMLFormatter_, outer$)
}

CucumberRuntimeFormatterHTMLFormatter_4 *create_CucumberRuntimeFormatterHTMLFormatter_4_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeFormatterHTMLFormatter_4, initWithCucumberRuntimeFormatterHTMLFormatter_, outer$)
}

@implementation CucumberRuntimeFormatterHTMLFormatter_5

- (instancetype __nonnull)initWithCucumberRuntimeFormatterHTMLFormatter:(CucumberRuntimeFormatterHTMLFormatter *)outer$ {
  CucumberRuntimeFormatterHTMLFormatter_5_initWithCucumberRuntimeFormatterHTMLFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestStepFinished *)event {
  CucumberRuntimeFormatterHTMLFormatter_handleTestStepFinishedWithCucumberApiEventTestStepFinished_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCucumberRuntimeFormatterHTMLFormatter:);
  methods[1].selector = @selector(receiveWithCucumberApiEventEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCucumberRuntimeFormatterHTMLFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCucumberApiEventTestStepFinished;", "LCucumberRuntimeFormatterHTMLFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestStepFinished;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeFormatterHTMLFormatter_5 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CucumberRuntimeFormatterHTMLFormatter_5;
}

@end

void CucumberRuntimeFormatterHTMLFormatter_5_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter_5 *self, CucumberRuntimeFormatterHTMLFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CucumberRuntimeFormatterHTMLFormatter_5 *new_CucumberRuntimeFormatterHTMLFormatter_5_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter *outer$) {
  J2OBJC_NEW_IMPL(CucumberRuntimeFormatterHTMLFormatter_5, initWithCucumberRuntimeFormatterHTMLFormatter_, outer$)
}

CucumberRuntimeFormatterHTMLFormatter_5 *create_CucumberRuntimeFormatterHTMLFormatter_5_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeFormatterHTMLFormatter_5, initWithCucumberRuntimeFormatterHTMLFormatter_, outer$)
}

@implementation CucumberRuntimeFormatterHTMLFormatter_6

- (instancetype __nonnull)initWithCucumberRuntimeFormatterHTMLFormatter:(CucumberRuntimeFormatterHTMLFormatter *)outer$ {
  CucumberRuntimeFormatterHTMLFormatter_6_initWithCucumberRuntimeFormatterHTMLFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventEmbedEvent *)event {
  CucumberRuntimeFormatterHTMLFormatter_handleEmbedWithCucumberApiEventEmbedEvent_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCucumberRuntimeFormatterHTMLFormatter:);
  methods[1].selector = @selector(receiveWithCucumberApiEventEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCucumberRuntimeFormatterHTMLFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCucumberApiEventEmbedEvent;", "LCucumberRuntimeFormatterHTMLFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/EmbedEvent;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeFormatterHTMLFormatter_6 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CucumberRuntimeFormatterHTMLFormatter_6;
}

@end

void CucumberRuntimeFormatterHTMLFormatter_6_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter_6 *self, CucumberRuntimeFormatterHTMLFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CucumberRuntimeFormatterHTMLFormatter_6 *new_CucumberRuntimeFormatterHTMLFormatter_6_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter *outer$) {
  J2OBJC_NEW_IMPL(CucumberRuntimeFormatterHTMLFormatter_6, initWithCucumberRuntimeFormatterHTMLFormatter_, outer$)
}

CucumberRuntimeFormatterHTMLFormatter_6 *create_CucumberRuntimeFormatterHTMLFormatter_6_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeFormatterHTMLFormatter_6, initWithCucumberRuntimeFormatterHTMLFormatter_, outer$)
}

@implementation CucumberRuntimeFormatterHTMLFormatter_7

- (instancetype __nonnull)initWithCucumberRuntimeFormatterHTMLFormatter:(CucumberRuntimeFormatterHTMLFormatter *)outer$ {
  CucumberRuntimeFormatterHTMLFormatter_7_initWithCucumberRuntimeFormatterHTMLFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventWriteEvent *)event {
  CucumberRuntimeFormatterHTMLFormatter_handleWriteWithCucumberApiEventWriteEvent_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCucumberRuntimeFormatterHTMLFormatter:);
  methods[1].selector = @selector(receiveWithCucumberApiEventEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCucumberRuntimeFormatterHTMLFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCucumberApiEventWriteEvent;", "LCucumberRuntimeFormatterHTMLFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/WriteEvent;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeFormatterHTMLFormatter_7 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CucumberRuntimeFormatterHTMLFormatter_7;
}

@end

void CucumberRuntimeFormatterHTMLFormatter_7_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter_7 *self, CucumberRuntimeFormatterHTMLFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CucumberRuntimeFormatterHTMLFormatter_7 *new_CucumberRuntimeFormatterHTMLFormatter_7_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter *outer$) {
  J2OBJC_NEW_IMPL(CucumberRuntimeFormatterHTMLFormatter_7, initWithCucumberRuntimeFormatterHTMLFormatter_, outer$)
}

CucumberRuntimeFormatterHTMLFormatter_7 *create_CucumberRuntimeFormatterHTMLFormatter_7_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeFormatterHTMLFormatter_7, initWithCucumberRuntimeFormatterHTMLFormatter_, outer$)
}

@implementation CucumberRuntimeFormatterHTMLFormatter_8

- (instancetype __nonnull)initWithCucumberRuntimeFormatterHTMLFormatter:(CucumberRuntimeFormatterHTMLFormatter *)outer$ {
  CucumberRuntimeFormatterHTMLFormatter_8_initWithCucumberRuntimeFormatterHTMLFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestRunFinished *)event {
  CucumberRuntimeFormatterHTMLFormatter_finishReport(this$0_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCucumberRuntimeFormatterHTMLFormatter:);
  methods[1].selector = @selector(receiveWithCucumberApiEventEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCucumberRuntimeFormatterHTMLFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCucumberApiEventTestRunFinished;", "LCucumberRuntimeFormatterHTMLFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestRunFinished;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeFormatterHTMLFormatter_8 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CucumberRuntimeFormatterHTMLFormatter_8;
}

@end

void CucumberRuntimeFormatterHTMLFormatter_8_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter_8 *self, CucumberRuntimeFormatterHTMLFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CucumberRuntimeFormatterHTMLFormatter_8 *new_CucumberRuntimeFormatterHTMLFormatter_8_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter *outer$) {
  J2OBJC_NEW_IMPL(CucumberRuntimeFormatterHTMLFormatter_8, initWithCucumberRuntimeFormatterHTMLFormatter_, outer$)
}

CucumberRuntimeFormatterHTMLFormatter_8 *create_CucumberRuntimeFormatterHTMLFormatter_8_initWithCucumberRuntimeFormatterHTMLFormatter_(CucumberRuntimeFormatterHTMLFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeFormatterHTMLFormatter_8, initWithCucumberRuntimeFormatterHTMLFormatter_, outer$)
}
