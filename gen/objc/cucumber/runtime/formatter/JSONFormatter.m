//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/formatter/JSONFormatter.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/gson/Gson.h"
#include "com/google/gson/GsonBuilder.h"
#include "cucumber/api/HookType.h"
#include "cucumber/api/Result.h"
#include "cucumber/api/TestCase.h"
#include "cucumber/api/TestStep.h"
#include "cucumber/api/event/EmbedEvent.h"
#include "cucumber/api/event/EventHandler.h"
#include "cucumber/api/event/EventPublisher.h"
#include "cucumber/api/event/TestCaseStarted.h"
#include "cucumber/api/event/TestRunFinished.h"
#include "cucumber/api/event/TestSourceRead.h"
#include "cucumber/api/event/TestStepFinished.h"
#include "cucumber/api/event/TestStepStarted.h"
#include "cucumber/api/event/WriteEvent.h"
#include "cucumber/api/formatter/NiceAppendable.h"
#include "cucumber/runtime/Argument.h"
#include "cucumber/runtime/formatter/JSONFormatter.h"
#include "cucumber/runtime/formatter/TestSourcesModel.h"
#include "gherkin/ast/Background.h"
#include "gherkin/ast/DocString.h"
#include "gherkin/ast/Feature.h"
#include "gherkin/ast/Location.h"
#include "gherkin/ast/Node.h"
#include "gherkin/ast/ScenarioDefinition.h"
#include "gherkin/ast/Step.h"
#include "gherkin/pickles/Argument.h"
#include "gherkin/pickles/PickleCell.h"
#include "gherkin/pickles/PickleLocation.h"
#include "gherkin/pickles/PickleRow.h"
#include "gherkin/pickles/PickleString.h"
#include "gherkin/pickles/PickleTable.h"
#include "gherkin/pickles/PickleTag.h"
#include "java/lang/Appendable.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/util/ArrayList.h"
#include "java/util/Base64.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@interface CCBRJSONFormatter () {
 @public
  NSString *currentFeatureFile_;
  id<JavaUtilList> featureMaps_;
  id<JavaUtilList> currentElementsList_;
  id<JavaUtilMap> currentElementMap_;
  id<JavaUtilMap> currentTestCaseMap_;
  id<JavaUtilList> currentStepsList_;
  id<JavaUtilMap> currentStepOrHookMap_;
  ComGoogleGsonGson *gson_;
  CCBNiceAppendable *out_;
  CCBRTestSourcesModel *testSources_;
  id<CCBEventHandler> testSourceReadHandler_;
  id<CCBEventHandler> caseStartedHandler_;
  id<CCBEventHandler> stepStartedHandler_;
  id<CCBEventHandler> stepFinishedHandler_;
  id<CCBEventHandler> runFinishedHandler_;
  id<CCBEventHandler> writeEventhandler_;
  id<CCBEventHandler> embedEventhandler_;
}

- (void)handleTestSourceReadWithCCBTestSourceRead:(CCBTestSourceRead *)event;

- (void)handleTestCaseStartedWithCCBTestCaseStarted:(CCBTestCaseStarted *)event;

- (void)handleTestStepStartedWithCCBTestStepStarted:(CCBTestStepStarted *)event;

- (void)handleWriteWithCCBWriteEvent:(CCBWriteEvent *)event;

- (void)handleEmbedWithCCBEmbedEvent:(CCBEmbedEvent *)event;

- (void)handleTestStepFinishedWithCCBTestStepFinished:(CCBTestStepFinished *)event;

- (void)finishReport;

- (id<JavaUtilMap>)createFeatureMapWithCCBTestCase:(CCBTestCase *)testCase;

- (id<JavaUtilMap>)createTestCaseWithCCBTestCase:(CCBTestCase *)testCase;

- (id<JavaUtilMap>)createBackgroundWithCCBTestCase:(CCBTestCase *)testCase;

- (jboolean)isFirstStepAfterBackgroundWithCCBTestStep:(CCBTestStep *)testStep;

- (id<JavaUtilMap>)createTestStepWithCCBTestStep:(CCBTestStep *)testStep;

- (id<JavaUtilMap>)createDocStringMapWithGherkinPicklesArgument:(id<GherkinPicklesArgument>)argument
                               withCCBRTestSourcesModel_AstNode:(CCBRTestSourcesModel_AstNode *)astNode;

- (id<JavaUtilList>)createDataTableListWithGherkinPicklesArgument:(id<GherkinPicklesArgument>)argument;

- (id<JavaUtilList>)createCellListWithGherkinPicklesPickleRow:(GherkinPicklesPickleRow *)row;

- (id<JavaUtilMap>)createHookStepWithCCBTestStep:(CCBTestStep *)testStep;

- (void)addHookStepToTestCaseMapWithJavaUtilMap:(id<JavaUtilMap>)currentStepOrHookMap
                                withCCBHookType:(CCBHookType *)hookType;

- (void)addOutputToHookMapWithNSString:(NSString *)text;

- (void)addEmbeddingToHookMapWithByteArray:(IOSByteArray *)data
                              withNSString:(NSString *)mimeType;

- (id<JavaUtilMap>)createEmbeddingMapWithByteArray:(IOSByteArray *)data
                                      withNSString:(NSString *)mimeType;

- (id<JavaUtilMap>)createMatchMapWithCCBTestStep:(CCBTestStep *)testStep
                                   withCCBResult:(CCBResult *)result;

- (id<JavaUtilMap>)createResultMapWithCCBResult:(CCBResult *)result;

@end

J2OBJC_FIELD_SETTER(CCBRJSONFormatter, currentFeatureFile_, NSString *)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, featureMaps_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, currentElementsList_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, currentElementMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, currentTestCaseMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, currentStepsList_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, currentStepOrHookMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, gson_, ComGoogleGsonGson *)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, out_, CCBNiceAppendable *)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, testSources_, CCBRTestSourcesModel *)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, testSourceReadHandler_, id<CCBEventHandler>)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, caseStartedHandler_, id<CCBEventHandler>)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, stepStartedHandler_, id<CCBEventHandler>)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, stepFinishedHandler_, id<CCBEventHandler>)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, runFinishedHandler_, id<CCBEventHandler>)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, writeEventhandler_, id<CCBEventHandler>)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, embedEventhandler_, id<CCBEventHandler>)

__attribute__((unused)) static void CCBRJSONFormatter_handleTestSourceReadWithCCBTestSourceRead_(CCBRJSONFormatter *self, CCBTestSourceRead *event);

__attribute__((unused)) static void CCBRJSONFormatter_handleTestCaseStartedWithCCBTestCaseStarted_(CCBRJSONFormatter *self, CCBTestCaseStarted *event);

__attribute__((unused)) static void CCBRJSONFormatter_handleTestStepStartedWithCCBTestStepStarted_(CCBRJSONFormatter *self, CCBTestStepStarted *event);

__attribute__((unused)) static void CCBRJSONFormatter_handleWriteWithCCBWriteEvent_(CCBRJSONFormatter *self, CCBWriteEvent *event);

__attribute__((unused)) static void CCBRJSONFormatter_handleEmbedWithCCBEmbedEvent_(CCBRJSONFormatter *self, CCBEmbedEvent *event);

__attribute__((unused)) static void CCBRJSONFormatter_handleTestStepFinishedWithCCBTestStepFinished_(CCBRJSONFormatter *self, CCBTestStepFinished *event);

__attribute__((unused)) static void CCBRJSONFormatter_finishReport(CCBRJSONFormatter *self);

__attribute__((unused)) static id<JavaUtilMap> CCBRJSONFormatter_createFeatureMapWithCCBTestCase_(CCBRJSONFormatter *self, CCBTestCase *testCase);

__attribute__((unused)) static id<JavaUtilMap> CCBRJSONFormatter_createTestCaseWithCCBTestCase_(CCBRJSONFormatter *self, CCBTestCase *testCase);

__attribute__((unused)) static id<JavaUtilMap> CCBRJSONFormatter_createBackgroundWithCCBTestCase_(CCBRJSONFormatter *self, CCBTestCase *testCase);

__attribute__((unused)) static jboolean CCBRJSONFormatter_isFirstStepAfterBackgroundWithCCBTestStep_(CCBRJSONFormatter *self, CCBTestStep *testStep);

__attribute__((unused)) static id<JavaUtilMap> CCBRJSONFormatter_createTestStepWithCCBTestStep_(CCBRJSONFormatter *self, CCBTestStep *testStep);

__attribute__((unused)) static id<JavaUtilMap> CCBRJSONFormatter_createDocStringMapWithGherkinPicklesArgument_withCCBRTestSourcesModel_AstNode_(CCBRJSONFormatter *self, id<GherkinPicklesArgument> argument, CCBRTestSourcesModel_AstNode *astNode);

__attribute__((unused)) static id<JavaUtilList> CCBRJSONFormatter_createDataTableListWithGherkinPicklesArgument_(CCBRJSONFormatter *self, id<GherkinPicklesArgument> argument);

__attribute__((unused)) static id<JavaUtilList> CCBRJSONFormatter_createCellListWithGherkinPicklesPickleRow_(CCBRJSONFormatter *self, GherkinPicklesPickleRow *row);

__attribute__((unused)) static id<JavaUtilMap> CCBRJSONFormatter_createHookStepWithCCBTestStep_(CCBRJSONFormatter *self, CCBTestStep *testStep);

__attribute__((unused)) static void CCBRJSONFormatter_addHookStepToTestCaseMapWithJavaUtilMap_withCCBHookType_(CCBRJSONFormatter *self, id<JavaUtilMap> currentStepOrHookMap, CCBHookType *hookType);

__attribute__((unused)) static void CCBRJSONFormatter_addOutputToHookMapWithNSString_(CCBRJSONFormatter *self, NSString *text);

__attribute__((unused)) static void CCBRJSONFormatter_addEmbeddingToHookMapWithByteArray_withNSString_(CCBRJSONFormatter *self, IOSByteArray *data, NSString *mimeType);

__attribute__((unused)) static id<JavaUtilMap> CCBRJSONFormatter_createEmbeddingMapWithByteArray_withNSString_(CCBRJSONFormatter *self, IOSByteArray *data, NSString *mimeType);

__attribute__((unused)) static id<JavaUtilMap> CCBRJSONFormatter_createMatchMapWithCCBTestStep_withCCBResult_(CCBRJSONFormatter *self, CCBTestStep *testStep, CCBResult *result);

__attribute__((unused)) static id<JavaUtilMap> CCBRJSONFormatter_createResultMapWithCCBResult_(CCBRJSONFormatter *self, CCBResult *result);

@interface CCBRJSONFormatter_1 : NSObject < CCBEventHandler > {
 @public
  CCBRJSONFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRJSONFormatter:(CCBRJSONFormatter *)outer$;

- (void)receiveWithCCBEvent:(CCBTestSourceRead *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRJSONFormatter_1)

__attribute__((unused)) static void CCBRJSONFormatter_1_initWithCCBRJSONFormatter_(CCBRJSONFormatter_1 *self, CCBRJSONFormatter *outer$);

__attribute__((unused)) static CCBRJSONFormatter_1 *new_CCBRJSONFormatter_1_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRJSONFormatter_1 *create_CCBRJSONFormatter_1_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$);

@interface CCBRJSONFormatter_2 : NSObject < CCBEventHandler > {
 @public
  CCBRJSONFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRJSONFormatter:(CCBRJSONFormatter *)outer$;

- (void)receiveWithCCBEvent:(CCBTestCaseStarted *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRJSONFormatter_2)

__attribute__((unused)) static void CCBRJSONFormatter_2_initWithCCBRJSONFormatter_(CCBRJSONFormatter_2 *self, CCBRJSONFormatter *outer$);

__attribute__((unused)) static CCBRJSONFormatter_2 *new_CCBRJSONFormatter_2_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRJSONFormatter_2 *create_CCBRJSONFormatter_2_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$);

@interface CCBRJSONFormatter_3 : NSObject < CCBEventHandler > {
 @public
  CCBRJSONFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRJSONFormatter:(CCBRJSONFormatter *)outer$;

- (void)receiveWithCCBEvent:(CCBTestStepStarted *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRJSONFormatter_3)

__attribute__((unused)) static void CCBRJSONFormatter_3_initWithCCBRJSONFormatter_(CCBRJSONFormatter_3 *self, CCBRJSONFormatter *outer$);

__attribute__((unused)) static CCBRJSONFormatter_3 *new_CCBRJSONFormatter_3_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRJSONFormatter_3 *create_CCBRJSONFormatter_3_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$);

@interface CCBRJSONFormatter_4 : NSObject < CCBEventHandler > {
 @public
  CCBRJSONFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRJSONFormatter:(CCBRJSONFormatter *)outer$;

- (void)receiveWithCCBEvent:(CCBTestStepFinished *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRJSONFormatter_4)

__attribute__((unused)) static void CCBRJSONFormatter_4_initWithCCBRJSONFormatter_(CCBRJSONFormatter_4 *self, CCBRJSONFormatter *outer$);

__attribute__((unused)) static CCBRJSONFormatter_4 *new_CCBRJSONFormatter_4_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRJSONFormatter_4 *create_CCBRJSONFormatter_4_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$);

@interface CCBRJSONFormatter_5 : NSObject < CCBEventHandler > {
 @public
  CCBRJSONFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRJSONFormatter:(CCBRJSONFormatter *)outer$;

- (void)receiveWithCCBEvent:(CCBTestRunFinished *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRJSONFormatter_5)

__attribute__((unused)) static void CCBRJSONFormatter_5_initWithCCBRJSONFormatter_(CCBRJSONFormatter_5 *self, CCBRJSONFormatter *outer$);

__attribute__((unused)) static CCBRJSONFormatter_5 *new_CCBRJSONFormatter_5_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRJSONFormatter_5 *create_CCBRJSONFormatter_5_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$);

@interface CCBRJSONFormatter_6 : NSObject < CCBEventHandler > {
 @public
  CCBRJSONFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRJSONFormatter:(CCBRJSONFormatter *)outer$;

- (void)receiveWithCCBEvent:(CCBWriteEvent *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRJSONFormatter_6)

__attribute__((unused)) static void CCBRJSONFormatter_6_initWithCCBRJSONFormatter_(CCBRJSONFormatter_6 *self, CCBRJSONFormatter *outer$);

__attribute__((unused)) static CCBRJSONFormatter_6 *new_CCBRJSONFormatter_6_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRJSONFormatter_6 *create_CCBRJSONFormatter_6_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$);

@interface CCBRJSONFormatter_7 : NSObject < CCBEventHandler > {
 @public
  CCBRJSONFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRJSONFormatter:(CCBRJSONFormatter *)outer$;

- (void)receiveWithCCBEvent:(CCBEmbedEvent *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRJSONFormatter_7)

__attribute__((unused)) static void CCBRJSONFormatter_7_initWithCCBRJSONFormatter_(CCBRJSONFormatter_7 *self, CCBRJSONFormatter *outer$);

__attribute__((unused)) static CCBRJSONFormatter_7 *new_CCBRJSONFormatter_7_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRJSONFormatter_7 *create_CCBRJSONFormatter_7_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$);

@implementation CCBRJSONFormatter

- (instancetype __nonnull)initWithJavaLangAppendable:(id<JavaLangAppendable>)outArg {
  CCBRJSONFormatter_initWithJavaLangAppendable_(self, outArg);
  return self;
}

- (void)setEventPublisherWithCCBEventPublisher:(id<CCBEventPublisher>)publisher {
  [((id<CCBEventPublisher>) nil_chk(publisher)) registerHandlerForWithIOSClass:CCBTestSourceRead_class_() withCCBEventHandler:testSourceReadHandler_];
  [publisher registerHandlerForWithIOSClass:CCBTestCaseStarted_class_() withCCBEventHandler:caseStartedHandler_];
  [publisher registerHandlerForWithIOSClass:CCBTestStepStarted_class_() withCCBEventHandler:stepStartedHandler_];
  [publisher registerHandlerForWithIOSClass:CCBTestStepFinished_class_() withCCBEventHandler:stepFinishedHandler_];
  [publisher registerHandlerForWithIOSClass:CCBWriteEvent_class_() withCCBEventHandler:writeEventhandler_];
  [publisher registerHandlerForWithIOSClass:CCBEmbedEvent_class_() withCCBEventHandler:embedEventhandler_];
  [publisher registerHandlerForWithIOSClass:CCBTestRunFinished_class_() withCCBEventHandler:runFinishedHandler_];
}

- (void)handleTestSourceReadWithCCBTestSourceRead:(CCBTestSourceRead *)event {
  CCBRJSONFormatter_handleTestSourceReadWithCCBTestSourceRead_(self, event);
}

- (void)handleTestCaseStartedWithCCBTestCaseStarted:(CCBTestCaseStarted *)event {
  CCBRJSONFormatter_handleTestCaseStartedWithCCBTestCaseStarted_(self, event);
}

- (void)handleTestStepStartedWithCCBTestStepStarted:(CCBTestStepStarted *)event {
  CCBRJSONFormatter_handleTestStepStartedWithCCBTestStepStarted_(self, event);
}

- (void)handleWriteWithCCBWriteEvent:(CCBWriteEvent *)event {
  CCBRJSONFormatter_handleWriteWithCCBWriteEvent_(self, event);
}

- (void)handleEmbedWithCCBEmbedEvent:(CCBEmbedEvent *)event {
  CCBRJSONFormatter_handleEmbedWithCCBEmbedEvent_(self, event);
}

- (void)handleTestStepFinishedWithCCBTestStepFinished:(CCBTestStepFinished *)event {
  CCBRJSONFormatter_handleTestStepFinishedWithCCBTestStepFinished_(self, event);
}

- (void)finishReport {
  CCBRJSONFormatter_finishReport(self);
}

- (id<JavaUtilMap>)createFeatureMapWithCCBTestCase:(CCBTestCase *)testCase {
  return CCBRJSONFormatter_createFeatureMapWithCCBTestCase_(self, testCase);
}

- (id<JavaUtilMap>)createTestCaseWithCCBTestCase:(CCBTestCase *)testCase {
  return CCBRJSONFormatter_createTestCaseWithCCBTestCase_(self, testCase);
}

- (id<JavaUtilMap>)createBackgroundWithCCBTestCase:(CCBTestCase *)testCase {
  return CCBRJSONFormatter_createBackgroundWithCCBTestCase_(self, testCase);
}

- (jboolean)isFirstStepAfterBackgroundWithCCBTestStep:(CCBTestStep *)testStep {
  return CCBRJSONFormatter_isFirstStepAfterBackgroundWithCCBTestStep_(self, testStep);
}

- (id<JavaUtilMap>)createTestStepWithCCBTestStep:(CCBTestStep *)testStep {
  return CCBRJSONFormatter_createTestStepWithCCBTestStep_(self, testStep);
}

- (id<JavaUtilMap>)createDocStringMapWithGherkinPicklesArgument:(id<GherkinPicklesArgument>)argument
                               withCCBRTestSourcesModel_AstNode:(CCBRTestSourcesModel_AstNode *)astNode {
  return CCBRJSONFormatter_createDocStringMapWithGherkinPicklesArgument_withCCBRTestSourcesModel_AstNode_(self, argument, astNode);
}

- (id<JavaUtilList>)createDataTableListWithGherkinPicklesArgument:(id<GherkinPicklesArgument>)argument {
  return CCBRJSONFormatter_createDataTableListWithGherkinPicklesArgument_(self, argument);
}

- (id<JavaUtilList>)createCellListWithGherkinPicklesPickleRow:(GherkinPicklesPickleRow *)row {
  return CCBRJSONFormatter_createCellListWithGherkinPicklesPickleRow_(self, row);
}

- (id<JavaUtilMap>)createHookStepWithCCBTestStep:(CCBTestStep *)testStep {
  return CCBRJSONFormatter_createHookStepWithCCBTestStep_(self, testStep);
}

- (void)addHookStepToTestCaseMapWithJavaUtilMap:(id<JavaUtilMap>)currentStepOrHookMap
                                withCCBHookType:(CCBHookType *)hookType {
  CCBRJSONFormatter_addHookStepToTestCaseMapWithJavaUtilMap_withCCBHookType_(self, currentStepOrHookMap, hookType);
}

- (void)addOutputToHookMapWithNSString:(NSString *)text {
  CCBRJSONFormatter_addOutputToHookMapWithNSString_(self, text);
}

- (void)addEmbeddingToHookMapWithByteArray:(IOSByteArray *)data
                              withNSString:(NSString *)mimeType {
  CCBRJSONFormatter_addEmbeddingToHookMapWithByteArray_withNSString_(self, data, mimeType);
}

- (id<JavaUtilMap>)createEmbeddingMapWithByteArray:(IOSByteArray *)data
                                      withNSString:(NSString *)mimeType {
  return CCBRJSONFormatter_createEmbeddingMapWithByteArray_withNSString_(self, data, mimeType);
}

- (id<JavaUtilMap>)createMatchMapWithCCBTestStep:(CCBTestStep *)testStep
                                   withCCBResult:(CCBResult *)result {
  return CCBRJSONFormatter_createMatchMapWithCCBTestStep_withCCBResult_(self, testStep, result);
}

- (id<JavaUtilMap>)createResultMapWithCCBResult:(CCBResult *)result {
  return CCBRJSONFormatter_createResultMapWithCCBResult_(self, result);
}

- (void)dealloc {
  RELEASE_(currentFeatureFile_);
  RELEASE_(featureMaps_);
  RELEASE_(currentElementsList_);
  RELEASE_(currentElementMap_);
  RELEASE_(currentTestCaseMap_);
  RELEASE_(currentStepsList_);
  RELEASE_(currentStepOrHookMap_);
  RELEASE_(gson_);
  RELEASE_(out_);
  RELEASE_(testSources_);
  RELEASE_(testSourceReadHandler_);
  RELEASE_(caseStartedHandler_);
  RELEASE_(stepStartedHandler_);
  RELEASE_(stepFinishedHandler_);
  RELEASE_(runFinishedHandler_);
  RELEASE_(writeEventhandler_);
  RELEASE_(embedEventhandler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 15, 16, -1, 17, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 18, 16, -1, 17, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 19, 16, -1, 17, -1, -1 },
    { NULL, "Z", 0x2, 20, 21, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 22, 21, -1, 23, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 24, 25, -1, 26, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 27, 28, -1, 29, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 30, 31, -1, 32, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 33, 21, -1, 23, -1, -1 },
    { NULL, "V", 0x2, 34, 35, -1, 36, -1, -1 },
    { NULL, "V", 0x2, 37, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 39, 40, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 41, 40, -1, 42, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 43, 44, -1, 45, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 46, 47, -1, 48, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangAppendable:);
  methods[1].selector = @selector(setEventPublisherWithCCBEventPublisher:);
  methods[2].selector = @selector(handleTestSourceReadWithCCBTestSourceRead:);
  methods[3].selector = @selector(handleTestCaseStartedWithCCBTestCaseStarted:);
  methods[4].selector = @selector(handleTestStepStartedWithCCBTestStepStarted:);
  methods[5].selector = @selector(handleWriteWithCCBWriteEvent:);
  methods[6].selector = @selector(handleEmbedWithCCBEmbedEvent:);
  methods[7].selector = @selector(handleTestStepFinishedWithCCBTestStepFinished:);
  methods[8].selector = @selector(finishReport);
  methods[9].selector = @selector(createFeatureMapWithCCBTestCase:);
  methods[10].selector = @selector(createTestCaseWithCCBTestCase:);
  methods[11].selector = @selector(createBackgroundWithCCBTestCase:);
  methods[12].selector = @selector(isFirstStepAfterBackgroundWithCCBTestStep:);
  methods[13].selector = @selector(createTestStepWithCCBTestStep:);
  methods[14].selector = @selector(createDocStringMapWithGherkinPicklesArgument:withCCBRTestSourcesModel_AstNode:);
  methods[15].selector = @selector(createDataTableListWithGherkinPicklesArgument:);
  methods[16].selector = @selector(createCellListWithGherkinPicklesPickleRow:);
  methods[17].selector = @selector(createHookStepWithCCBTestStep:);
  methods[18].selector = @selector(addHookStepToTestCaseMapWithJavaUtilMap:withCCBHookType:);
  methods[19].selector = @selector(addOutputToHookMapWithNSString:);
  methods[20].selector = @selector(addEmbeddingToHookMapWithByteArray:withNSString:);
  methods[21].selector = @selector(createEmbeddingMapWithByteArray:withNSString:);
  methods[22].selector = @selector(createMatchMapWithCCBTestStep:withCCBResult:);
  methods[23].selector = @selector(createResultMapWithCCBResult:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "currentFeatureFile_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "featureMaps_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 49, -1 },
    { "currentElementsList_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 49, -1 },
    { "currentElementMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 50, -1 },
    { "currentTestCaseMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 50, -1 },
    { "currentStepsList_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 49, -1 },
    { "currentStepOrHookMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 50, -1 },
    { "gson_", "LComGoogleGsonGson;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "out_", "LCCBNiceAppendable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "testSources_", "LCCBRTestSourcesModel;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "testSourceReadHandler_", "LCCBEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 51, -1 },
    { "caseStartedHandler_", "LCCBEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 52, -1 },
    { "stepStartedHandler_", "LCCBEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 53, -1 },
    { "stepFinishedHandler_", "LCCBEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 54, -1 },
    { "runFinishedHandler_", "LCCBEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 55, -1 },
    { "writeEventhandler_", "LCCBEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 56, -1 },
    { "embedEventhandler_", "LCCBEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 57, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangAppendable;", "setEventPublisher", "LCCBEventPublisher;", "handleTestSourceRead", "LCCBTestSourceRead;", "handleTestCaseStarted", "LCCBTestCaseStarted;", "handleTestStepStarted", "LCCBTestStepStarted;", "handleWrite", "LCCBWriteEvent;", "handleEmbed", "LCCBEmbedEvent;", "handleTestStepFinished", "LCCBTestStepFinished;", "createFeatureMap", "LCCBTestCase;", "(Lcucumber/api/TestCase;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "createTestCase", "createBackground", "isFirstStepAfterBackground", "LCCBTestStep;", "createTestStep", "(Lcucumber/api/TestStep;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "createDocStringMap", "LGherkinPicklesArgument;LCCBRTestSourcesModel_AstNode;", "(Lgherkin/pickles/Argument;Lcucumber/runtime/formatter/TestSourcesModel$AstNode;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "createDataTableList", "LGherkinPicklesArgument;", "(Lgherkin/pickles/Argument;)Ljava/util/List<Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;>;", "createCellList", "LGherkinPicklesPickleRow;", "(Lgherkin/pickles/PickleRow;)Ljava/util/List<Ljava/lang/String;>;", "createHookStep", "addHookStepToTestCaseMap", "LJavaUtilMap;LCCBHookType;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lcucumber/api/HookType;)V", "addOutputToHookMap", "LNSString;", "addEmbeddingToHookMap", "[BLNSString;", "createEmbeddingMap", "([BLjava/lang/String;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "createMatchMap", "LCCBTestStep;LCCBResult;", "(Lcucumber/api/TestStep;Lcucumber/api/Result;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "createResultMap", "LCCBResult;", "(Lcucumber/api/Result;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "Ljava/util/List<Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestSourceRead;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestCaseStarted;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestStepStarted;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestStepFinished;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestRunFinished;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/WriteEvent;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/EmbedEvent;>;" };
  static const J2ObjcClassInfo _CCBRJSONFormatter = { "JSONFormatter", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x10, 24, 17, -1, -1, -1, -1, -1 };
  return &_CCBRJSONFormatter;
}

@end

void CCBRJSONFormatter_initWithJavaLangAppendable_(CCBRJSONFormatter *self, id<JavaLangAppendable> outArg) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->featureMaps_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->gson_, [((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() setPrettyPrinting])) create]);
  JreStrongAssignAndConsume(&self->testSources_, new_CCBRTestSourcesModel_init());
  JreStrongAssignAndConsume(&self->testSourceReadHandler_, new_CCBRJSONFormatter_1_initWithCCBRJSONFormatter_(self));
  JreStrongAssignAndConsume(&self->caseStartedHandler_, new_CCBRJSONFormatter_2_initWithCCBRJSONFormatter_(self));
  JreStrongAssignAndConsume(&self->stepStartedHandler_, new_CCBRJSONFormatter_3_initWithCCBRJSONFormatter_(self));
  JreStrongAssignAndConsume(&self->stepFinishedHandler_, new_CCBRJSONFormatter_4_initWithCCBRJSONFormatter_(self));
  JreStrongAssignAndConsume(&self->runFinishedHandler_, new_CCBRJSONFormatter_5_initWithCCBRJSONFormatter_(self));
  JreStrongAssignAndConsume(&self->writeEventhandler_, new_CCBRJSONFormatter_6_initWithCCBRJSONFormatter_(self));
  JreStrongAssignAndConsume(&self->embedEventhandler_, new_CCBRJSONFormatter_7_initWithCCBRJSONFormatter_(self));
  JreStrongAssignAndConsume(&self->out_, new_CCBNiceAppendable_initWithJavaLangAppendable_(outArg));
}

CCBRJSONFormatter *new_CCBRJSONFormatter_initWithJavaLangAppendable_(id<JavaLangAppendable> outArg) {
  J2OBJC_NEW_IMPL(CCBRJSONFormatter, initWithJavaLangAppendable_, outArg)
}

CCBRJSONFormatter *create_CCBRJSONFormatter_initWithJavaLangAppendable_(id<JavaLangAppendable> outArg) {
  J2OBJC_CREATE_IMPL(CCBRJSONFormatter, initWithJavaLangAppendable_, outArg)
}

void CCBRJSONFormatter_handleTestSourceReadWithCCBTestSourceRead_(CCBRJSONFormatter *self, CCBTestSourceRead *event) {
  [((CCBRTestSourcesModel *) nil_chk(self->testSources_)) addTestSourceReadEventWithNSString:((CCBTestSourceRead *) nil_chk(event))->uri_ withCCBTestSourceRead:event];
}

void CCBRJSONFormatter_handleTestCaseStartedWithCCBTestCaseStarted_(CCBRJSONFormatter *self, CCBTestCaseStarted *event) {
  if (self->currentFeatureFile_ == nil || ![self->currentFeatureFile_ isEqual:[((CCBTestCase *) nil_chk(((CCBTestCaseStarted *) nil_chk(event))->testCase_)) getUri]]) {
    JreStrongAssign(&self->currentFeatureFile_, [((CCBTestCase *) nil_chk(((CCBTestCaseStarted *) nil_chk(event))->testCase_)) getUri]);
    id<JavaUtilMap> currentFeatureMap = CCBRJSONFormatter_createFeatureMapWithCCBTestCase_(self, event->testCase_);
    [((id<JavaUtilList>) nil_chk(self->featureMaps_)) addWithId:currentFeatureMap];
    JreStrongAssign(&self->currentElementsList_, (id<JavaUtilList>) cast_check([((id<JavaUtilMap>) nil_chk(currentFeatureMap)) getWithId:@"elements"], JavaUtilList_class_()));
  }
  JreStrongAssign(&self->currentTestCaseMap_, CCBRJSONFormatter_createTestCaseWithCCBTestCase_(self, ((CCBTestCaseStarted *) nil_chk(event))->testCase_));
  if ([((CCBRTestSourcesModel *) nil_chk(self->testSources_)) hasBackgroundWithNSString:self->currentFeatureFile_ withInt:[((CCBTestCase *) nil_chk(event->testCase_)) getLine]]) {
    JreStrongAssign(&self->currentElementMap_, CCBRJSONFormatter_createBackgroundWithCCBTestCase_(self, event->testCase_));
    [((id<JavaUtilList>) nil_chk(self->currentElementsList_)) addWithId:self->currentElementMap_];
  }
  else {
    JreStrongAssign(&self->currentElementMap_, self->currentTestCaseMap_);
  }
  [((id<JavaUtilList>) nil_chk(self->currentElementsList_)) addWithId:self->currentTestCaseMap_];
  JreStrongAssign(&self->currentStepsList_, (id<JavaUtilList>) cast_check([((id<JavaUtilMap>) nil_chk(self->currentElementMap_)) getWithId:@"steps"], JavaUtilList_class_()));
}

void CCBRJSONFormatter_handleTestStepStartedWithCCBTestStepStarted_(CCBRJSONFormatter *self, CCBTestStepStarted *event) {
  if (![((CCBTestStep *) nil_chk(((CCBTestStepStarted *) nil_chk(event))->testStep_)) isHook]) {
    if (CCBRJSONFormatter_isFirstStepAfterBackgroundWithCCBTestStep_(self, event->testStep_)) {
      JreStrongAssign(&self->currentElementMap_, self->currentTestCaseMap_);
      JreStrongAssign(&self->currentStepsList_, (id<JavaUtilList>) cast_check([((id<JavaUtilMap>) nil_chk(self->currentElementMap_)) getWithId:@"steps"], JavaUtilList_class_()));
    }
    JreStrongAssign(&self->currentStepOrHookMap_, CCBRJSONFormatter_createTestStepWithCCBTestStep_(self, event->testStep_));
    [((id<JavaUtilList>) nil_chk(self->currentStepsList_)) addWithId:self->currentStepOrHookMap_];
  }
  else {
    JreStrongAssign(&self->currentStepOrHookMap_, CCBRJSONFormatter_createHookStepWithCCBTestStep_(self, event->testStep_));
    CCBRJSONFormatter_addHookStepToTestCaseMapWithJavaUtilMap_withCCBHookType_(self, self->currentStepOrHookMap_, [event->testStep_ getHookType]);
  }
}

void CCBRJSONFormatter_handleWriteWithCCBWriteEvent_(CCBRJSONFormatter *self, CCBWriteEvent *event) {
  CCBRJSONFormatter_addOutputToHookMapWithNSString_(self, ((CCBWriteEvent *) nil_chk(event))->text_);
}

void CCBRJSONFormatter_handleEmbedWithCCBEmbedEvent_(CCBRJSONFormatter *self, CCBEmbedEvent *event) {
  CCBRJSONFormatter_addEmbeddingToHookMapWithByteArray_withNSString_(self, ((CCBEmbedEvent *) nil_chk(event))->data_, event->mimeType_);
}

void CCBRJSONFormatter_handleTestStepFinishedWithCCBTestStepFinished_(CCBRJSONFormatter *self, CCBTestStepFinished *event) {
  [((id<JavaUtilMap>) nil_chk(self->currentStepOrHookMap_)) putWithId:@"match" withId:CCBRJSONFormatter_createMatchMapWithCCBTestStep_withCCBResult_(self, ((CCBTestStepFinished *) nil_chk(event))->testStep_, event->result_)];
  [((id<JavaUtilMap>) nil_chk(self->currentStepOrHookMap_)) putWithId:@"result" withId:CCBRJSONFormatter_createResultMapWithCCBResult_(self, event->result_)];
}

void CCBRJSONFormatter_finishReport(CCBRJSONFormatter *self) {
  [((CCBNiceAppendable *) nil_chk(self->out_)) appendWithJavaLangCharSequence:[((ComGoogleGsonGson *) nil_chk(self->gson_)) toJsonWithId:self->featureMaps_]];
  [self->out_ close];
}

id<JavaUtilMap> CCBRJSONFormatter_createFeatureMapWithCCBTestCase_(CCBRJSONFormatter *self, CCBTestCase *testCase) {
  id<JavaUtilMap> featureMap = create_JavaUtilHashMap_init();
  [featureMap putWithId:@"uri" withId:[((CCBTestCase *) nil_chk(testCase)) getUri]];
  [featureMap putWithId:@"elements" withId:create_JavaUtilArrayList_init()];
  GherkinAstFeature *feature = [((CCBRTestSourcesModel *) nil_chk(self->testSources_)) getFeatureWithNSString:[testCase getUri]];
  if (feature != nil) {
    [featureMap putWithId:@"keyword" withId:[feature getKeyword]];
    [featureMap putWithId:@"name" withId:[feature getName]];
    [featureMap putWithId:@"description" withId:[feature getDescription] != nil ? [feature getDescription] : @""];
    [featureMap putWithId:@"line" withId:JavaLangInteger_valueOfWithInt_([((GherkinAstLocation *) nil_chk([feature getLocation])) getLine])];
    [featureMap putWithId:@"id" withId:CCBRTestSourcesModel_convertToIdWithNSString_([feature getName])];
    [featureMap putWithId:@"tags" withId:[feature getTags]];
  }
  return featureMap;
}

id<JavaUtilMap> CCBRJSONFormatter_createTestCaseWithCCBTestCase_(CCBRJSONFormatter *self, CCBTestCase *testCase) {
  id<JavaUtilMap> testCaseMap = create_JavaUtilHashMap_init();
  [testCaseMap putWithId:@"name" withId:[((CCBTestCase *) nil_chk(testCase)) getName]];
  [testCaseMap putWithId:@"line" withId:JavaLangInteger_valueOfWithInt_([testCase getLine])];
  [testCaseMap putWithId:@"type" withId:@"scenario"];
  CCBRTestSourcesModel_AstNode *astNode = [((CCBRTestSourcesModel *) nil_chk(self->testSources_)) getAstNodeWithNSString:self->currentFeatureFile_ withInt:[testCase getLine]];
  if (astNode != nil) {
    [testCaseMap putWithId:@"id" withId:CCBRTestSourcesModel_calculateIdWithCCBRTestSourcesModel_AstNode_(astNode)];
    GherkinAstScenarioDefinition *scenarioDefinition = CCBRTestSourcesModel_getScenarioDefinitionWithCCBRTestSourcesModel_AstNode_(astNode);
    [testCaseMap putWithId:@"keyword" withId:[((GherkinAstScenarioDefinition *) nil_chk(scenarioDefinition)) getKeyword]];
    [testCaseMap putWithId:@"description" withId:[scenarioDefinition getDescription] != nil ? [scenarioDefinition getDescription] : @""];
  }
  [testCaseMap putWithId:@"steps" withId:create_JavaUtilArrayList_init()];
  if (![((id<JavaUtilList>) nil_chk([testCase getTags])) isEmpty]) {
    id<JavaUtilList> tagList = create_JavaUtilArrayList_init();
    for (GherkinPicklesPickleTag * __strong tag in nil_chk([testCase getTags])) {
      id<JavaUtilMap> tagMap = create_JavaUtilHashMap_init();
      [tagMap putWithId:@"name" withId:[((GherkinPicklesPickleTag *) nil_chk(tag)) getName]];
      [tagList addWithId:tagMap];
    }
    [testCaseMap putWithId:@"tags" withId:tagList];
  }
  return testCaseMap;
}

id<JavaUtilMap> CCBRJSONFormatter_createBackgroundWithCCBTestCase_(CCBRJSONFormatter *self, CCBTestCase *testCase) {
  CCBRTestSourcesModel_AstNode *astNode = [((CCBRTestSourcesModel *) nil_chk(self->testSources_)) getAstNodeWithNSString:self->currentFeatureFile_ withInt:[((CCBTestCase *) nil_chk(testCase)) getLine]];
  if (astNode != nil) {
    GherkinAstBackground *background = CCBRTestSourcesModel_getBackgroundForTestCaseWithCCBRTestSourcesModel_AstNode_(astNode);
    id<JavaUtilMap> testCaseMap = create_JavaUtilHashMap_init();
    [testCaseMap putWithId:@"name" withId:[((GherkinAstBackground *) nil_chk(background)) getName]];
    [testCaseMap putWithId:@"line" withId:JavaLangInteger_valueOfWithInt_([((GherkinAstLocation *) nil_chk([background getLocation])) getLine])];
    [testCaseMap putWithId:@"type" withId:@"background"];
    [testCaseMap putWithId:@"keyword" withId:[background getKeyword]];
    [testCaseMap putWithId:@"description" withId:[background getDescription] != nil ? [background getDescription] : @""];
    [testCaseMap putWithId:@"steps" withId:create_JavaUtilArrayList_init()];
    return testCaseMap;
  }
  return nil;
}

jboolean CCBRJSONFormatter_isFirstStepAfterBackgroundWithCCBTestStep_(CCBRJSONFormatter *self, CCBTestStep *testStep) {
  CCBRTestSourcesModel_AstNode *astNode = [((CCBRTestSourcesModel *) nil_chk(self->testSources_)) getAstNodeWithNSString:self->currentFeatureFile_ withInt:[((CCBTestStep *) nil_chk(testStep)) getStepLine]];
  if (astNode != nil) {
    if (self->currentElementMap_ != self->currentTestCaseMap_ && !CCBRTestSourcesModel_isBackgroundStepWithCCBRTestSourcesModel_AstNode_(astNode)) {
      return true;
    }
  }
  return false;
}

id<JavaUtilMap> CCBRJSONFormatter_createTestStepWithCCBTestStep_(CCBRJSONFormatter *self, CCBTestStep *testStep) {
  id<JavaUtilMap> stepMap = create_JavaUtilHashMap_init();
  [stepMap putWithId:@"name" withId:[((CCBTestStep *) nil_chk(testStep)) getStepText]];
  [stepMap putWithId:@"line" withId:JavaLangInteger_valueOfWithInt_([testStep getStepLine])];
  CCBRTestSourcesModel_AstNode *astNode = [((CCBRTestSourcesModel *) nil_chk(self->testSources_)) getAstNodeWithNSString:self->currentFeatureFile_ withInt:[testStep getStepLine]];
  if (![((id<JavaUtilList>) nil_chk([testStep getStepArgument])) isEmpty]) {
    id<GherkinPicklesArgument> argument = [((id<JavaUtilList>) nil_chk([testStep getStepArgument])) getWithInt:0];
    if ([argument isKindOfClass:[GherkinPicklesPickleString class]]) {
      [stepMap putWithId:@"doc_string" withId:CCBRJSONFormatter_createDocStringMapWithGherkinPicklesArgument_withCCBRTestSourcesModel_AstNode_(self, argument, astNode)];
    }
    else if ([argument isKindOfClass:[GherkinPicklesPickleTable class]]) {
      [stepMap putWithId:@"rows" withId:CCBRJSONFormatter_createDataTableListWithGherkinPicklesArgument_(self, argument)];
    }
  }
  if (astNode != nil) {
    GherkinAstStep *step = (GherkinAstStep *) cast_chk(astNode->node_, [GherkinAstStep class]);
    [stepMap putWithId:@"keyword" withId:[((GherkinAstStep *) nil_chk(step)) getKeyword]];
  }
  return stepMap;
}

id<JavaUtilMap> CCBRJSONFormatter_createDocStringMapWithGherkinPicklesArgument_withCCBRTestSourcesModel_AstNode_(CCBRJSONFormatter *self, id<GherkinPicklesArgument> argument, CCBRTestSourcesModel_AstNode *astNode) {
  id<JavaUtilMap> docStringMap = create_JavaUtilHashMap_init();
  GherkinPicklesPickleString *docString = ((GherkinPicklesPickleString *) cast_chk(argument, [GherkinPicklesPickleString class]));
  [docStringMap putWithId:@"value" withId:[((GherkinPicklesPickleString *) nil_chk(docString)) getContent]];
  [docStringMap putWithId:@"line" withId:JavaLangInteger_valueOfWithInt_([((GherkinPicklesPickleLocation *) nil_chk([docString getLocation])) getLine])];
  if (astNode != nil) {
    [docStringMap putWithId:@"content_type" withId:[((GherkinAstDocString *) nil_chk(((GherkinAstDocString *) cast_chk([((GherkinAstStep *) nil_chk(((GherkinAstStep *) cast_chk(astNode->node_, [GherkinAstStep class])))) getArgument], [GherkinAstDocString class])))) getContentType]];
  }
  return docStringMap;
}

id<JavaUtilList> CCBRJSONFormatter_createDataTableListWithGherkinPicklesArgument_(CCBRJSONFormatter *self, id<GherkinPicklesArgument> argument) {
  id<JavaUtilList> rowList = create_JavaUtilArrayList_init();
  for (GherkinPicklesPickleRow * __strong row in nil_chk([((GherkinPicklesPickleTable *) nil_chk(((GherkinPicklesPickleTable *) cast_chk(argument, [GherkinPicklesPickleTable class])))) getRows])) {
    id<JavaUtilMap> rowMap = create_JavaUtilHashMap_init();
    [rowMap putWithId:@"cells" withId:CCBRJSONFormatter_createCellListWithGherkinPicklesPickleRow_(self, row)];
    [rowList addWithId:rowMap];
  }
  return rowList;
}

id<JavaUtilList> CCBRJSONFormatter_createCellListWithGherkinPicklesPickleRow_(CCBRJSONFormatter *self, GherkinPicklesPickleRow *row) {
  id<JavaUtilList> cells = create_JavaUtilArrayList_init();
  for (GherkinPicklesPickleCell * __strong cell in nil_chk([((GherkinPicklesPickleRow *) nil_chk(row)) getCells])) {
    [cells addWithId:[((GherkinPicklesPickleCell *) nil_chk(cell)) getValue]];
  }
  return cells;
}

id<JavaUtilMap> CCBRJSONFormatter_createHookStepWithCCBTestStep_(CCBRJSONFormatter *self, CCBTestStep *testStep) {
  return create_JavaUtilHashMap_init();
}

void CCBRJSONFormatter_addHookStepToTestCaseMapWithJavaUtilMap_withCCBHookType_(CCBRJSONFormatter *self, id<JavaUtilMap> currentStepOrHookMap, CCBHookType *hookType) {
  if (![((id<JavaUtilMap>) nil_chk(self->currentTestCaseMap_)) containsKeyWithId:[((CCBHookType *) nil_chk(hookType)) description]]) {
    [((id<JavaUtilMap>) nil_chk(self->currentTestCaseMap_)) putWithId:[hookType description] withId:create_JavaUtilArrayList_init()];
  }
  [((id<JavaUtilList>) nil_chk(((id<JavaUtilList>) cast_check([((id<JavaUtilMap>) nil_chk(self->currentTestCaseMap_)) getWithId:[hookType description]], JavaUtilList_class_())))) addWithId:currentStepOrHookMap];
}

void CCBRJSONFormatter_addOutputToHookMapWithNSString_(CCBRJSONFormatter *self, NSString *text) {
  if (![((id<JavaUtilMap>) nil_chk(self->currentStepOrHookMap_)) containsKeyWithId:@"output"]) {
    [((id<JavaUtilMap>) nil_chk(self->currentStepOrHookMap_)) putWithId:@"output" withId:create_JavaUtilArrayList_init()];
  }
  [((id<JavaUtilList>) nil_chk(((id<JavaUtilList>) cast_check([((id<JavaUtilMap>) nil_chk(self->currentStepOrHookMap_)) getWithId:@"output"], JavaUtilList_class_())))) addWithId:text];
}

void CCBRJSONFormatter_addEmbeddingToHookMapWithByteArray_withNSString_(CCBRJSONFormatter *self, IOSByteArray *data, NSString *mimeType) {
  if (![((id<JavaUtilMap>) nil_chk(self->currentStepOrHookMap_)) containsKeyWithId:@"embeddings"]) {
    [((id<JavaUtilMap>) nil_chk(self->currentStepOrHookMap_)) putWithId:@"embeddings" withId:create_JavaUtilArrayList_init()];
  }
  id<JavaUtilMap> embedMap = CCBRJSONFormatter_createEmbeddingMapWithByteArray_withNSString_(self, data, mimeType);
  [((id<JavaUtilList>) nil_chk(((id<JavaUtilList>) cast_check([((id<JavaUtilMap>) nil_chk(self->currentStepOrHookMap_)) getWithId:@"embeddings"], JavaUtilList_class_())))) addWithId:embedMap];
}

id<JavaUtilMap> CCBRJSONFormatter_createEmbeddingMapWithByteArray_withNSString_(CCBRJSONFormatter *self, IOSByteArray *data, NSString *mimeType) {
  id<JavaUtilMap> embedMap = create_JavaUtilHashMap_init();
  [embedMap putWithId:@"mime_type" withId:mimeType];
  [embedMap putWithId:@"data" withId:[((JavaUtilBase64_Encoder *) nil_chk(JavaUtilBase64_getEncoder())) encodeWithByteArray:data]];
  return embedMap;
}

id<JavaUtilMap> CCBRJSONFormatter_createMatchMapWithCCBTestStep_withCCBResult_(CCBRJSONFormatter *self, CCBTestStep *testStep, CCBResult *result) {
  id<JavaUtilMap> matchMap = create_JavaUtilHashMap_init();
  if (![((id<JavaUtilList>) nil_chk([((CCBTestStep *) nil_chk(testStep)) getDefinitionArgument])) isEmpty]) {
    id<JavaUtilList> argumentList = create_JavaUtilArrayList_init();
    for (CCBRArgument * __strong argument in nil_chk([testStep getDefinitionArgument])) {
      id<JavaUtilMap> argumentMap = create_JavaUtilHashMap_init();
      [argumentMap putWithId:@"val" withId:[((CCBRArgument *) nil_chk(argument)) getVal]];
      [argumentMap putWithId:@"offset" withId:[argument getOffset]];
      [argumentList addWithId:argumentMap];
    }
    [matchMap putWithId:@"arguments" withId:argumentList];
  }
  if (![((CCBResult *) nil_chk(result)) isWithCCBResult_Type:JreLoadEnum(CCBResult_Type, UNDEFINED)]) {
    [matchMap putWithId:@"location" withId:[testStep getCodeLocation]];
  }
  return matchMap;
}

id<JavaUtilMap> CCBRJSONFormatter_createResultMapWithCCBResult_(CCBRJSONFormatter *self, CCBResult *result) {
  id<JavaUtilMap> resultMap = create_JavaUtilHashMap_init();
  [resultMap putWithId:@"status" withId:[((CCBResult_Type *) nil_chk([((CCBResult *) nil_chk(result)) getStatus])) lowerCaseName]];
  if ([result getErrorMessage] != nil) {
    [resultMap putWithId:@"error_message" withId:[result getErrorMessage]];
  }
  if ([result getDuration] != nil && [((JavaLangLong *) nil_chk([result getDuration])) longLongValue] != 0) {
    [resultMap putWithId:@"duration" withId:[result getDuration]];
  }
  return resultMap;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRJSONFormatter)

@implementation CCBRJSONFormatter_1

- (instancetype __nonnull)initWithCCBRJSONFormatter:(CCBRJSONFormatter *)outer$ {
  CCBRJSONFormatter_1_initWithCCBRJSONFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCCBEvent:(CCBTestSourceRead *)event {
  CCBRJSONFormatter_handleTestSourceReadWithCCBTestSourceRead_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRJSONFormatter:);
  methods[1].selector = @selector(receiveWithCCBEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRJSONFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCCBTestSourceRead;", "LCCBRJSONFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestSourceRead;>;" };
  static const J2ObjcClassInfo _CCBRJSONFormatter_1 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRJSONFormatter_1;
}

@end

void CCBRJSONFormatter_1_initWithCCBRJSONFormatter_(CCBRJSONFormatter_1 *self, CCBRJSONFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRJSONFormatter_1 *new_CCBRJSONFormatter_1_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRJSONFormatter_1, initWithCCBRJSONFormatter_, outer$)
}

CCBRJSONFormatter_1 *create_CCBRJSONFormatter_1_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRJSONFormatter_1, initWithCCBRJSONFormatter_, outer$)
}

@implementation CCBRJSONFormatter_2

- (instancetype __nonnull)initWithCCBRJSONFormatter:(CCBRJSONFormatter *)outer$ {
  CCBRJSONFormatter_2_initWithCCBRJSONFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCCBEvent:(CCBTestCaseStarted *)event {
  CCBRJSONFormatter_handleTestCaseStartedWithCCBTestCaseStarted_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRJSONFormatter:);
  methods[1].selector = @selector(receiveWithCCBEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRJSONFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCCBTestCaseStarted;", "LCCBRJSONFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestCaseStarted;>;" };
  static const J2ObjcClassInfo _CCBRJSONFormatter_2 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRJSONFormatter_2;
}

@end

void CCBRJSONFormatter_2_initWithCCBRJSONFormatter_(CCBRJSONFormatter_2 *self, CCBRJSONFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRJSONFormatter_2 *new_CCBRJSONFormatter_2_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRJSONFormatter_2, initWithCCBRJSONFormatter_, outer$)
}

CCBRJSONFormatter_2 *create_CCBRJSONFormatter_2_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRJSONFormatter_2, initWithCCBRJSONFormatter_, outer$)
}

@implementation CCBRJSONFormatter_3

- (instancetype __nonnull)initWithCCBRJSONFormatter:(CCBRJSONFormatter *)outer$ {
  CCBRJSONFormatter_3_initWithCCBRJSONFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCCBEvent:(CCBTestStepStarted *)event {
  CCBRJSONFormatter_handleTestStepStartedWithCCBTestStepStarted_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRJSONFormatter:);
  methods[1].selector = @selector(receiveWithCCBEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRJSONFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCCBTestStepStarted;", "LCCBRJSONFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestStepStarted;>;" };
  static const J2ObjcClassInfo _CCBRJSONFormatter_3 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRJSONFormatter_3;
}

@end

void CCBRJSONFormatter_3_initWithCCBRJSONFormatter_(CCBRJSONFormatter_3 *self, CCBRJSONFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRJSONFormatter_3 *new_CCBRJSONFormatter_3_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRJSONFormatter_3, initWithCCBRJSONFormatter_, outer$)
}

CCBRJSONFormatter_3 *create_CCBRJSONFormatter_3_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRJSONFormatter_3, initWithCCBRJSONFormatter_, outer$)
}

@implementation CCBRJSONFormatter_4

- (instancetype __nonnull)initWithCCBRJSONFormatter:(CCBRJSONFormatter *)outer$ {
  CCBRJSONFormatter_4_initWithCCBRJSONFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCCBEvent:(CCBTestStepFinished *)event {
  CCBRJSONFormatter_handleTestStepFinishedWithCCBTestStepFinished_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRJSONFormatter:);
  methods[1].selector = @selector(receiveWithCCBEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRJSONFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCCBTestStepFinished;", "LCCBRJSONFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestStepFinished;>;" };
  static const J2ObjcClassInfo _CCBRJSONFormatter_4 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRJSONFormatter_4;
}

@end

void CCBRJSONFormatter_4_initWithCCBRJSONFormatter_(CCBRJSONFormatter_4 *self, CCBRJSONFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRJSONFormatter_4 *new_CCBRJSONFormatter_4_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRJSONFormatter_4, initWithCCBRJSONFormatter_, outer$)
}

CCBRJSONFormatter_4 *create_CCBRJSONFormatter_4_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRJSONFormatter_4, initWithCCBRJSONFormatter_, outer$)
}

@implementation CCBRJSONFormatter_5

- (instancetype __nonnull)initWithCCBRJSONFormatter:(CCBRJSONFormatter *)outer$ {
  CCBRJSONFormatter_5_initWithCCBRJSONFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCCBEvent:(CCBTestRunFinished *)event {
  CCBRJSONFormatter_finishReport(this$0_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRJSONFormatter:);
  methods[1].selector = @selector(receiveWithCCBEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRJSONFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCCBTestRunFinished;", "LCCBRJSONFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestRunFinished;>;" };
  static const J2ObjcClassInfo _CCBRJSONFormatter_5 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRJSONFormatter_5;
}

@end

void CCBRJSONFormatter_5_initWithCCBRJSONFormatter_(CCBRJSONFormatter_5 *self, CCBRJSONFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRJSONFormatter_5 *new_CCBRJSONFormatter_5_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRJSONFormatter_5, initWithCCBRJSONFormatter_, outer$)
}

CCBRJSONFormatter_5 *create_CCBRJSONFormatter_5_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRJSONFormatter_5, initWithCCBRJSONFormatter_, outer$)
}

@implementation CCBRJSONFormatter_6

- (instancetype __nonnull)initWithCCBRJSONFormatter:(CCBRJSONFormatter *)outer$ {
  CCBRJSONFormatter_6_initWithCCBRJSONFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCCBEvent:(CCBWriteEvent *)event {
  CCBRJSONFormatter_handleWriteWithCCBWriteEvent_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRJSONFormatter:);
  methods[1].selector = @selector(receiveWithCCBEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRJSONFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCCBWriteEvent;", "LCCBRJSONFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/WriteEvent;>;" };
  static const J2ObjcClassInfo _CCBRJSONFormatter_6 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRJSONFormatter_6;
}

@end

void CCBRJSONFormatter_6_initWithCCBRJSONFormatter_(CCBRJSONFormatter_6 *self, CCBRJSONFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRJSONFormatter_6 *new_CCBRJSONFormatter_6_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRJSONFormatter_6, initWithCCBRJSONFormatter_, outer$)
}

CCBRJSONFormatter_6 *create_CCBRJSONFormatter_6_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRJSONFormatter_6, initWithCCBRJSONFormatter_, outer$)
}

@implementation CCBRJSONFormatter_7

- (instancetype __nonnull)initWithCCBRJSONFormatter:(CCBRJSONFormatter *)outer$ {
  CCBRJSONFormatter_7_initWithCCBRJSONFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCCBEvent:(CCBEmbedEvent *)event {
  CCBRJSONFormatter_handleEmbedWithCCBEmbedEvent_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRJSONFormatter:);
  methods[1].selector = @selector(receiveWithCCBEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRJSONFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCCBEmbedEvent;", "LCCBRJSONFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/EmbedEvent;>;" };
  static const J2ObjcClassInfo _CCBRJSONFormatter_7 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRJSONFormatter_7;
}

@end

void CCBRJSONFormatter_7_initWithCCBRJSONFormatter_(CCBRJSONFormatter_7 *self, CCBRJSONFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRJSONFormatter_7 *new_CCBRJSONFormatter_7_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRJSONFormatter_7, initWithCCBRJSONFormatter_, outer$)
}

CCBRJSONFormatter_7 *create_CCBRJSONFormatter_7_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRJSONFormatter_7, initWithCCBRJSONFormatter_, outer$)
}
