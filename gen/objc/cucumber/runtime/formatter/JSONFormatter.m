//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/formatter/JSONFormatter.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/gson/Gson.h"
#include "com/google/gson/GsonBuilder.h"
#include "cucumber/api/Argument.h"
#include "cucumber/api/HookTestStep.h"
#include "cucumber/api/HookType.h"
#include "cucumber/api/PickleStepTestStep.h"
#include "cucumber/api/Result.h"
#include "cucumber/api/TestCase.h"
#include "cucumber/api/TestStep.h"
#include "cucumber/api/event/EmbedEvent.h"
#include "cucumber/api/event/EventHandler.h"
#include "cucumber/api/event/EventPublisher.h"
#include "cucumber/api/event/TestCaseStarted.h"
#include "cucumber/api/event/TestRunFinished.h"
#include "cucumber/api/event/TestSourceRead.h"
#include "cucumber/api/event/TestStepFinished.h"
#include "cucumber/api/event/TestStepStarted.h"
#include "cucumber/api/event/WriteEvent.h"
#include "cucumber/api/formatter/NiceAppendable.h"
#include "cucumber/runtime/formatter/JSONFormatter.h"
#include "cucumber/runtime/formatter/TestSourcesModel.h"
#include "gherkin/ast/Background.h"
#include "gherkin/ast/DocString.h"
#include "gherkin/ast/Feature.h"
#include "gherkin/ast/Location.h"
#include "gherkin/ast/Node.h"
#include "gherkin/ast/ScenarioDefinition.h"
#include "gherkin/ast/Step.h"
#include "gherkin/pickles/Argument.h"
#include "gherkin/pickles/PickleCell.h"
#include "gherkin/pickles/PickleLocation.h"
#include "gherkin/pickles/PickleRow.h"
#include "gherkin/pickles/PickleString.h"
#include "gherkin/pickles/PickleTable.h"
#include "gherkin/pickles/PickleTag.h"
#include "java/lang/Appendable.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/util/ArrayList.h"
#include "java/util/Base64.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@interface CCBRJSONFormatter () {
 @public
  NSString *currentFeatureFile_;
  id<JavaUtilList> featureMaps_;
  id<JavaUtilList> currentElementsList_;
  id<JavaUtilMap> currentElementMap_;
  id<JavaUtilMap> currentTestCaseMap_;
  id<JavaUtilList> currentStepsList_;
  id<JavaUtilMap> currentStepOrHookMap_;
  id<JavaUtilMap> currentBeforeStepHookList_;
  ComGoogleGsonGson *gson_;
  CucumberApiFormatterNiceAppendable *out_;
  CCBRTestSourcesModel *testSources_;
  id<CucumberApiEventEventHandler> testSourceReadHandler_;
  id<CucumberApiEventEventHandler> caseStartedHandler_;
  id<CucumberApiEventEventHandler> stepStartedHandler_;
  id<CucumberApiEventEventHandler> stepFinishedHandler_;
  id<CucumberApiEventEventHandler> runFinishedHandler_;
  id<CucumberApiEventEventHandler> writeEventhandler_;
  id<CucumberApiEventEventHandler> embedEventhandler_;
}

- (void)handleTestSourceReadWithCucumberApiEventTestSourceRead:(CucumberApiEventTestSourceRead *)event;

- (void)handleTestCaseStartedWithCucumberApiEventTestCaseStarted:(CucumberApiEventTestCaseStarted *)event;

- (void)handleTestStepStartedWithCucumberApiEventTestStepStarted:(CucumberApiEventTestStepStarted *)event;

- (void)handleWriteWithCucumberApiEventWriteEvent:(CucumberApiEventWriteEvent *)event;

- (void)handleEmbedWithCucumberApiEventEmbedEvent:(CucumberApiEventEmbedEvent *)event;

- (void)handleTestStepFinishedWithCucumberApiEventTestStepFinished:(CucumberApiEventTestStepFinished *)event;

- (void)finishReport;

- (id<JavaUtilMap>)createFeatureMapWithCucumberApiTestCase:(id<CucumberApiTestCase>)testCase;

- (id<JavaUtilMap>)createTestCaseWithCucumberApiTestCase:(id<CucumberApiTestCase>)testCase;

- (id<JavaUtilMap>)createBackgroundWithCucumberApiTestCase:(id<CucumberApiTestCase>)testCase;

- (jboolean)isFirstStepAfterBackgroundWithCucumberApiPickleStepTestStep:(id<CucumberApiPickleStepTestStep>)testStep;

- (id<JavaUtilMap>)createTestStepWithCucumberApiPickleStepTestStep:(id<CucumberApiPickleStepTestStep>)testStep;

- (id<JavaUtilMap>)createDocStringMapWithGHKArgument:(id<GHKArgument>)argument
                    withCCBRTestSourcesModel_AstNode:(CCBRTestSourcesModel_AstNode *)astNode;

- (id<JavaUtilList>)createDataTableListWithGHKArgument:(id<GHKArgument>)argument;

- (id<JavaUtilList>)createCellListWithGHKPickleRow:(GHKPickleRow *)row;

- (id<JavaUtilMap>)createHookStepWithCucumberApiHookTestStep:(id<CucumberApiHookTestStep>)hookTestStep;

- (void)addHookStepToTestCaseMapWithJavaUtilMap:(id<JavaUtilMap>)currentStepOrHookMap
                        withCucumberApiHookType:(CucumberApiHookType *)hookType;

- (void)addOutputToHookMapWithNSString:(NSString *)text;

- (void)addEmbeddingToHookMapWithByteArray:(IOSByteArray *)data
                              withNSString:(NSString *)mimeType;

- (id<JavaUtilMap>)createEmbeddingMapWithByteArray:(IOSByteArray *)data
                                      withNSString:(NSString *)mimeType;

- (id<JavaUtilMap>)createMatchMapWithCucumberApiTestStep:(id<CucumberApiTestStep>)step
                                   withCucumberApiResult:(CucumberApiResult *)result;

- (id<JavaUtilMap>)createResultMapWithCucumberApiResult:(CucumberApiResult *)result;

@end

J2OBJC_FIELD_SETTER(CCBRJSONFormatter, currentFeatureFile_, NSString *)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, featureMaps_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, currentElementsList_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, currentElementMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, currentTestCaseMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, currentStepsList_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, currentStepOrHookMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, currentBeforeStepHookList_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, gson_, ComGoogleGsonGson *)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, out_, CucumberApiFormatterNiceAppendable *)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, testSources_, CCBRTestSourcesModel *)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, testSourceReadHandler_, id<CucumberApiEventEventHandler>)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, caseStartedHandler_, id<CucumberApiEventEventHandler>)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, stepStartedHandler_, id<CucumberApiEventEventHandler>)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, stepFinishedHandler_, id<CucumberApiEventEventHandler>)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, runFinishedHandler_, id<CucumberApiEventEventHandler>)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, writeEventhandler_, id<CucumberApiEventEventHandler>)
J2OBJC_FIELD_SETTER(CCBRJSONFormatter, embedEventhandler_, id<CucumberApiEventEventHandler>)

__attribute__((unused)) static void CCBRJSONFormatter_handleTestSourceReadWithCucumberApiEventTestSourceRead_(CCBRJSONFormatter *self, CucumberApiEventTestSourceRead *event);

__attribute__((unused)) static void CCBRJSONFormatter_handleTestCaseStartedWithCucumberApiEventTestCaseStarted_(CCBRJSONFormatter *self, CucumberApiEventTestCaseStarted *event);

__attribute__((unused)) static void CCBRJSONFormatter_handleTestStepStartedWithCucumberApiEventTestStepStarted_(CCBRJSONFormatter *self, CucumberApiEventTestStepStarted *event);

__attribute__((unused)) static void CCBRJSONFormatter_handleWriteWithCucumberApiEventWriteEvent_(CCBRJSONFormatter *self, CucumberApiEventWriteEvent *event);

__attribute__((unused)) static void CCBRJSONFormatter_handleEmbedWithCucumberApiEventEmbedEvent_(CCBRJSONFormatter *self, CucumberApiEventEmbedEvent *event);

__attribute__((unused)) static void CCBRJSONFormatter_handleTestStepFinishedWithCucumberApiEventTestStepFinished_(CCBRJSONFormatter *self, CucumberApiEventTestStepFinished *event);

__attribute__((unused)) static void CCBRJSONFormatter_finishReport(CCBRJSONFormatter *self);

__attribute__((unused)) static id<JavaUtilMap> CCBRJSONFormatter_createFeatureMapWithCucumberApiTestCase_(CCBRJSONFormatter *self, id<CucumberApiTestCase> testCase);

__attribute__((unused)) static id<JavaUtilMap> CCBRJSONFormatter_createTestCaseWithCucumberApiTestCase_(CCBRJSONFormatter *self, id<CucumberApiTestCase> testCase);

__attribute__((unused)) static id<JavaUtilMap> CCBRJSONFormatter_createBackgroundWithCucumberApiTestCase_(CCBRJSONFormatter *self, id<CucumberApiTestCase> testCase);

__attribute__((unused)) static jboolean CCBRJSONFormatter_isFirstStepAfterBackgroundWithCucumberApiPickleStepTestStep_(CCBRJSONFormatter *self, id<CucumberApiPickleStepTestStep> testStep);

__attribute__((unused)) static id<JavaUtilMap> CCBRJSONFormatter_createTestStepWithCucumberApiPickleStepTestStep_(CCBRJSONFormatter *self, id<CucumberApiPickleStepTestStep> testStep);

__attribute__((unused)) static id<JavaUtilMap> CCBRJSONFormatter_createDocStringMapWithGHKArgument_withCCBRTestSourcesModel_AstNode_(CCBRJSONFormatter *self, id<GHKArgument> argument, CCBRTestSourcesModel_AstNode *astNode);

__attribute__((unused)) static id<JavaUtilList> CCBRJSONFormatter_createDataTableListWithGHKArgument_(CCBRJSONFormatter *self, id<GHKArgument> argument);

__attribute__((unused)) static id<JavaUtilList> CCBRJSONFormatter_createCellListWithGHKPickleRow_(CCBRJSONFormatter *self, GHKPickleRow *row);

__attribute__((unused)) static id<JavaUtilMap> CCBRJSONFormatter_createHookStepWithCucumberApiHookTestStep_(CCBRJSONFormatter *self, id<CucumberApiHookTestStep> hookTestStep);

__attribute__((unused)) static void CCBRJSONFormatter_addHookStepToTestCaseMapWithJavaUtilMap_withCucumberApiHookType_(CCBRJSONFormatter *self, id<JavaUtilMap> currentStepOrHookMap, CucumberApiHookType *hookType);

__attribute__((unused)) static void CCBRJSONFormatter_addOutputToHookMapWithNSString_(CCBRJSONFormatter *self, NSString *text);

__attribute__((unused)) static void CCBRJSONFormatter_addEmbeddingToHookMapWithByteArray_withNSString_(CCBRJSONFormatter *self, IOSByteArray *data, NSString *mimeType);

__attribute__((unused)) static id<JavaUtilMap> CCBRJSONFormatter_createEmbeddingMapWithByteArray_withNSString_(CCBRJSONFormatter *self, IOSByteArray *data, NSString *mimeType);

__attribute__((unused)) static id<JavaUtilMap> CCBRJSONFormatter_createMatchMapWithCucumberApiTestStep_withCucumberApiResult_(CCBRJSONFormatter *self, id<CucumberApiTestStep> step, CucumberApiResult *result);

__attribute__((unused)) static id<JavaUtilMap> CCBRJSONFormatter_createResultMapWithCucumberApiResult_(CCBRJSONFormatter *self, CucumberApiResult *result);

@interface CCBRJSONFormatter_1 : NSObject < CucumberApiEventEventHandler > {
 @public
  CCBRJSONFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRJSONFormatter:(CCBRJSONFormatter *)outer$;

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestSourceRead *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRJSONFormatter_1)

__attribute__((unused)) static void CCBRJSONFormatter_1_initWithCCBRJSONFormatter_(CCBRJSONFormatter_1 *self, CCBRJSONFormatter *outer$);

__attribute__((unused)) static CCBRJSONFormatter_1 *new_CCBRJSONFormatter_1_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRJSONFormatter_1 *create_CCBRJSONFormatter_1_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$);

@interface CCBRJSONFormatter_2 : NSObject < CucumberApiEventEventHandler > {
 @public
  CCBRJSONFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRJSONFormatter:(CCBRJSONFormatter *)outer$;

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestCaseStarted *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRJSONFormatter_2)

__attribute__((unused)) static void CCBRJSONFormatter_2_initWithCCBRJSONFormatter_(CCBRJSONFormatter_2 *self, CCBRJSONFormatter *outer$);

__attribute__((unused)) static CCBRJSONFormatter_2 *new_CCBRJSONFormatter_2_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRJSONFormatter_2 *create_CCBRJSONFormatter_2_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$);

@interface CCBRJSONFormatter_3 : NSObject < CucumberApiEventEventHandler > {
 @public
  CCBRJSONFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRJSONFormatter:(CCBRJSONFormatter *)outer$;

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestStepStarted *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRJSONFormatter_3)

__attribute__((unused)) static void CCBRJSONFormatter_3_initWithCCBRJSONFormatter_(CCBRJSONFormatter_3 *self, CCBRJSONFormatter *outer$);

__attribute__((unused)) static CCBRJSONFormatter_3 *new_CCBRJSONFormatter_3_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRJSONFormatter_3 *create_CCBRJSONFormatter_3_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$);

@interface CCBRJSONFormatter_4 : NSObject < CucumberApiEventEventHandler > {
 @public
  CCBRJSONFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRJSONFormatter:(CCBRJSONFormatter *)outer$;

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestStepFinished *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRJSONFormatter_4)

__attribute__((unused)) static void CCBRJSONFormatter_4_initWithCCBRJSONFormatter_(CCBRJSONFormatter_4 *self, CCBRJSONFormatter *outer$);

__attribute__((unused)) static CCBRJSONFormatter_4 *new_CCBRJSONFormatter_4_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRJSONFormatter_4 *create_CCBRJSONFormatter_4_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$);

@interface CCBRJSONFormatter_5 : NSObject < CucumberApiEventEventHandler > {
 @public
  CCBRJSONFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRJSONFormatter:(CCBRJSONFormatter *)outer$;

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestRunFinished *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRJSONFormatter_5)

__attribute__((unused)) static void CCBRJSONFormatter_5_initWithCCBRJSONFormatter_(CCBRJSONFormatter_5 *self, CCBRJSONFormatter *outer$);

__attribute__((unused)) static CCBRJSONFormatter_5 *new_CCBRJSONFormatter_5_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRJSONFormatter_5 *create_CCBRJSONFormatter_5_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$);

@interface CCBRJSONFormatter_6 : NSObject < CucumberApiEventEventHandler > {
 @public
  CCBRJSONFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRJSONFormatter:(CCBRJSONFormatter *)outer$;

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventWriteEvent *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRJSONFormatter_6)

__attribute__((unused)) static void CCBRJSONFormatter_6_initWithCCBRJSONFormatter_(CCBRJSONFormatter_6 *self, CCBRJSONFormatter *outer$);

__attribute__((unused)) static CCBRJSONFormatter_6 *new_CCBRJSONFormatter_6_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRJSONFormatter_6 *create_CCBRJSONFormatter_6_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$);

@interface CCBRJSONFormatter_7 : NSObject < CucumberApiEventEventHandler > {
 @public
  CCBRJSONFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRJSONFormatter:(CCBRJSONFormatter *)outer$;

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventEmbedEvent *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRJSONFormatter_7)

__attribute__((unused)) static void CCBRJSONFormatter_7_initWithCCBRJSONFormatter_(CCBRJSONFormatter_7 *self, CCBRJSONFormatter *outer$);

__attribute__((unused)) static CCBRJSONFormatter_7 *new_CCBRJSONFormatter_7_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRJSONFormatter_7 *create_CCBRJSONFormatter_7_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$);

@implementation CCBRJSONFormatter

- (instancetype __nonnull)initWithJavaLangAppendable:(id<JavaLangAppendable>)outArg {
  CCBRJSONFormatter_initWithJavaLangAppendable_(self, outArg);
  return self;
}

- (void)setEventPublisherWithCucumberApiEventEventPublisher:(id<CucumberApiEventEventPublisher>)publisher {
  [((id<CucumberApiEventEventPublisher>) nil_chk(publisher)) registerHandlerForWithIOSClass:CucumberApiEventTestSourceRead_class_() withCucumberApiEventEventHandler:testSourceReadHandler_];
  [publisher registerHandlerForWithIOSClass:CucumberApiEventTestCaseStarted_class_() withCucumberApiEventEventHandler:caseStartedHandler_];
  [publisher registerHandlerForWithIOSClass:CucumberApiEventTestStepStarted_class_() withCucumberApiEventEventHandler:stepStartedHandler_];
  [publisher registerHandlerForWithIOSClass:CucumberApiEventTestStepFinished_class_() withCucumberApiEventEventHandler:stepFinishedHandler_];
  [publisher registerHandlerForWithIOSClass:CucumberApiEventWriteEvent_class_() withCucumberApiEventEventHandler:writeEventhandler_];
  [publisher registerHandlerForWithIOSClass:CucumberApiEventEmbedEvent_class_() withCucumberApiEventEventHandler:embedEventhandler_];
  [publisher registerHandlerForWithIOSClass:CucumberApiEventTestRunFinished_class_() withCucumberApiEventEventHandler:runFinishedHandler_];
}

- (void)handleTestSourceReadWithCucumberApiEventTestSourceRead:(CucumberApiEventTestSourceRead *)event {
  CCBRJSONFormatter_handleTestSourceReadWithCucumberApiEventTestSourceRead_(self, event);
}

- (void)handleTestCaseStartedWithCucumberApiEventTestCaseStarted:(CucumberApiEventTestCaseStarted *)event {
  CCBRJSONFormatter_handleTestCaseStartedWithCucumberApiEventTestCaseStarted_(self, event);
}

- (void)handleTestStepStartedWithCucumberApiEventTestStepStarted:(CucumberApiEventTestStepStarted *)event {
  CCBRJSONFormatter_handleTestStepStartedWithCucumberApiEventTestStepStarted_(self, event);
}

- (void)handleWriteWithCucumberApiEventWriteEvent:(CucumberApiEventWriteEvent *)event {
  CCBRJSONFormatter_handleWriteWithCucumberApiEventWriteEvent_(self, event);
}

- (void)handleEmbedWithCucumberApiEventEmbedEvent:(CucumberApiEventEmbedEvent *)event {
  CCBRJSONFormatter_handleEmbedWithCucumberApiEventEmbedEvent_(self, event);
}

- (void)handleTestStepFinishedWithCucumberApiEventTestStepFinished:(CucumberApiEventTestStepFinished *)event {
  CCBRJSONFormatter_handleTestStepFinishedWithCucumberApiEventTestStepFinished_(self, event);
}

- (void)finishReport {
  CCBRJSONFormatter_finishReport(self);
}

- (id<JavaUtilMap>)createFeatureMapWithCucumberApiTestCase:(id<CucumberApiTestCase>)testCase {
  return CCBRJSONFormatter_createFeatureMapWithCucumberApiTestCase_(self, testCase);
}

- (id<JavaUtilMap>)createTestCaseWithCucumberApiTestCase:(id<CucumberApiTestCase>)testCase {
  return CCBRJSONFormatter_createTestCaseWithCucumberApiTestCase_(self, testCase);
}

- (id<JavaUtilMap>)createBackgroundWithCucumberApiTestCase:(id<CucumberApiTestCase>)testCase {
  return CCBRJSONFormatter_createBackgroundWithCucumberApiTestCase_(self, testCase);
}

- (jboolean)isFirstStepAfterBackgroundWithCucumberApiPickleStepTestStep:(id<CucumberApiPickleStepTestStep>)testStep {
  return CCBRJSONFormatter_isFirstStepAfterBackgroundWithCucumberApiPickleStepTestStep_(self, testStep);
}

- (id<JavaUtilMap>)createTestStepWithCucumberApiPickleStepTestStep:(id<CucumberApiPickleStepTestStep>)testStep {
  return CCBRJSONFormatter_createTestStepWithCucumberApiPickleStepTestStep_(self, testStep);
}

- (id<JavaUtilMap>)createDocStringMapWithGHKArgument:(id<GHKArgument>)argument
                    withCCBRTestSourcesModel_AstNode:(CCBRTestSourcesModel_AstNode *)astNode {
  return CCBRJSONFormatter_createDocStringMapWithGHKArgument_withCCBRTestSourcesModel_AstNode_(self, argument, astNode);
}

- (id<JavaUtilList>)createDataTableListWithGHKArgument:(id<GHKArgument>)argument {
  return CCBRJSONFormatter_createDataTableListWithGHKArgument_(self, argument);
}

- (id<JavaUtilList>)createCellListWithGHKPickleRow:(GHKPickleRow *)row {
  return CCBRJSONFormatter_createCellListWithGHKPickleRow_(self, row);
}

- (id<JavaUtilMap>)createHookStepWithCucumberApiHookTestStep:(id<CucumberApiHookTestStep>)hookTestStep {
  return CCBRJSONFormatter_createHookStepWithCucumberApiHookTestStep_(self, hookTestStep);
}

- (void)addHookStepToTestCaseMapWithJavaUtilMap:(id<JavaUtilMap>)currentStepOrHookMap
                        withCucumberApiHookType:(CucumberApiHookType *)hookType {
  CCBRJSONFormatter_addHookStepToTestCaseMapWithJavaUtilMap_withCucumberApiHookType_(self, currentStepOrHookMap, hookType);
}

- (void)addOutputToHookMapWithNSString:(NSString *)text {
  CCBRJSONFormatter_addOutputToHookMapWithNSString_(self, text);
}

- (void)addEmbeddingToHookMapWithByteArray:(IOSByteArray *)data
                              withNSString:(NSString *)mimeType {
  CCBRJSONFormatter_addEmbeddingToHookMapWithByteArray_withNSString_(self, data, mimeType);
}

- (id<JavaUtilMap>)createEmbeddingMapWithByteArray:(IOSByteArray *)data
                                      withNSString:(NSString *)mimeType {
  return CCBRJSONFormatter_createEmbeddingMapWithByteArray_withNSString_(self, data, mimeType);
}

- (id<JavaUtilMap>)createMatchMapWithCucumberApiTestStep:(id<CucumberApiTestStep>)step
                                   withCucumberApiResult:(CucumberApiResult *)result {
  return CCBRJSONFormatter_createMatchMapWithCucumberApiTestStep_withCucumberApiResult_(self, step, result);
}

- (id<JavaUtilMap>)createResultMapWithCucumberApiResult:(CucumberApiResult *)result {
  return CCBRJSONFormatter_createResultMapWithCucumberApiResult_(self, result);
}

- (void)dealloc {
  RELEASE_(currentFeatureFile_);
  RELEASE_(featureMaps_);
  RELEASE_(currentElementsList_);
  RELEASE_(currentElementMap_);
  RELEASE_(currentTestCaseMap_);
  RELEASE_(currentStepsList_);
  RELEASE_(currentStepOrHookMap_);
  RELEASE_(currentBeforeStepHookList_);
  RELEASE_(gson_);
  RELEASE_(out_);
  RELEASE_(testSources_);
  RELEASE_(testSourceReadHandler_);
  RELEASE_(caseStartedHandler_);
  RELEASE_(stepStartedHandler_);
  RELEASE_(stepFinishedHandler_);
  RELEASE_(runFinishedHandler_);
  RELEASE_(writeEventhandler_);
  RELEASE_(embedEventhandler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 15, 16, -1, 17, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 18, 16, -1, 17, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 19, 16, -1, 17, -1, -1 },
    { NULL, "Z", 0x2, 20, 21, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 22, 21, -1, 23, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 24, 25, -1, 26, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 27, 28, -1, 29, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 30, 31, -1, 32, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 33, 34, -1, 35, -1, -1 },
    { NULL, "V", 0x2, 36, 37, -1, 38, -1, -1 },
    { NULL, "V", 0x2, 39, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 41, 42, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 43, 42, -1, 44, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 45, 46, -1, 47, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 48, 49, -1, 50, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangAppendable:);
  methods[1].selector = @selector(setEventPublisherWithCucumberApiEventEventPublisher:);
  methods[2].selector = @selector(handleTestSourceReadWithCucumberApiEventTestSourceRead:);
  methods[3].selector = @selector(handleTestCaseStartedWithCucumberApiEventTestCaseStarted:);
  methods[4].selector = @selector(handleTestStepStartedWithCucumberApiEventTestStepStarted:);
  methods[5].selector = @selector(handleWriteWithCucumberApiEventWriteEvent:);
  methods[6].selector = @selector(handleEmbedWithCucumberApiEventEmbedEvent:);
  methods[7].selector = @selector(handleTestStepFinishedWithCucumberApiEventTestStepFinished:);
  methods[8].selector = @selector(finishReport);
  methods[9].selector = @selector(createFeatureMapWithCucumberApiTestCase:);
  methods[10].selector = @selector(createTestCaseWithCucumberApiTestCase:);
  methods[11].selector = @selector(createBackgroundWithCucumberApiTestCase:);
  methods[12].selector = @selector(isFirstStepAfterBackgroundWithCucumberApiPickleStepTestStep:);
  methods[13].selector = @selector(createTestStepWithCucumberApiPickleStepTestStep:);
  methods[14].selector = @selector(createDocStringMapWithGHKArgument:withCCBRTestSourcesModel_AstNode:);
  methods[15].selector = @selector(createDataTableListWithGHKArgument:);
  methods[16].selector = @selector(createCellListWithGHKPickleRow:);
  methods[17].selector = @selector(createHookStepWithCucumberApiHookTestStep:);
  methods[18].selector = @selector(addHookStepToTestCaseMapWithJavaUtilMap:withCucumberApiHookType:);
  methods[19].selector = @selector(addOutputToHookMapWithNSString:);
  methods[20].selector = @selector(addEmbeddingToHookMapWithByteArray:withNSString:);
  methods[21].selector = @selector(createEmbeddingMapWithByteArray:withNSString:);
  methods[22].selector = @selector(createMatchMapWithCucumberApiTestStep:withCucumberApiResult:);
  methods[23].selector = @selector(createResultMapWithCucumberApiResult:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "currentFeatureFile_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "featureMaps_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 51, -1 },
    { "currentElementsList_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 51, -1 },
    { "currentElementMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 52, -1 },
    { "currentTestCaseMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 52, -1 },
    { "currentStepsList_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 51, -1 },
    { "currentStepOrHookMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 52, -1 },
    { "currentBeforeStepHookList_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 52, -1 },
    { "gson_", "LComGoogleGsonGson;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "out_", "LCucumberApiFormatterNiceAppendable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "testSources_", "LCCBRTestSourcesModel;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "testSourceReadHandler_", "LCucumberApiEventEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 53, -1 },
    { "caseStartedHandler_", "LCucumberApiEventEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 54, -1 },
    { "stepStartedHandler_", "LCucumberApiEventEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 55, -1 },
    { "stepFinishedHandler_", "LCucumberApiEventEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 56, -1 },
    { "runFinishedHandler_", "LCucumberApiEventEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 57, -1 },
    { "writeEventhandler_", "LCucumberApiEventEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 58, -1 },
    { "embedEventhandler_", "LCucumberApiEventEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 59, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangAppendable;", "setEventPublisher", "LCucumberApiEventEventPublisher;", "handleTestSourceRead", "LCucumberApiEventTestSourceRead;", "handleTestCaseStarted", "LCucumberApiEventTestCaseStarted;", "handleTestStepStarted", "LCucumberApiEventTestStepStarted;", "handleWrite", "LCucumberApiEventWriteEvent;", "handleEmbed", "LCucumberApiEventEmbedEvent;", "handleTestStepFinished", "LCucumberApiEventTestStepFinished;", "createFeatureMap", "LCucumberApiTestCase;", "(Lcucumber/api/TestCase;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "createTestCase", "createBackground", "isFirstStepAfterBackground", "LCucumberApiPickleStepTestStep;", "createTestStep", "(Lcucumber/api/PickleStepTestStep;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "createDocStringMap", "LGHKArgument;LCCBRTestSourcesModel_AstNode;", "(Lgherkin/pickles/Argument;Lcucumber/runtime/formatter/TestSourcesModel$AstNode;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "createDataTableList", "LGHKArgument;", "(Lgherkin/pickles/Argument;)Ljava/util/List<Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;>;", "createCellList", "LGHKPickleRow;", "(Lgherkin/pickles/PickleRow;)Ljava/util/List<Ljava/lang/String;>;", "createHookStep", "LCucumberApiHookTestStep;", "(Lcucumber/api/HookTestStep;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "addHookStepToTestCaseMap", "LJavaUtilMap;LCucumberApiHookType;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lcucumber/api/HookType;)V", "addOutputToHookMap", "LNSString;", "addEmbeddingToHookMap", "[BLNSString;", "createEmbeddingMap", "([BLjava/lang/String;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "createMatchMap", "LCucumberApiTestStep;LCucumberApiResult;", "(Lcucumber/api/TestStep;Lcucumber/api/Result;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "createResultMap", "LCucumberApiResult;", "(Lcucumber/api/Result;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "Ljava/util/List<Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestSourceRead;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestCaseStarted;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestStepStarted;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestStepFinished;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestRunFinished;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/WriteEvent;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/EmbedEvent;>;" };
  static const J2ObjcClassInfo _CCBRJSONFormatter = { "JSONFormatter", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x10, 24, 18, -1, -1, -1, -1, -1 };
  return &_CCBRJSONFormatter;
}

@end

void CCBRJSONFormatter_initWithJavaLangAppendable_(CCBRJSONFormatter *self, id<JavaLangAppendable> outArg) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->featureMaps_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->currentBeforeStepHookList_, new_JavaUtilHashMap_init());
  JreStrongAssign(&self->gson_, [((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() setPrettyPrinting])) create]);
  JreStrongAssignAndConsume(&self->testSources_, new_CCBRTestSourcesModel_init());
  JreStrongAssignAndConsume(&self->testSourceReadHandler_, new_CCBRJSONFormatter_1_initWithCCBRJSONFormatter_(self));
  JreStrongAssignAndConsume(&self->caseStartedHandler_, new_CCBRJSONFormatter_2_initWithCCBRJSONFormatter_(self));
  JreStrongAssignAndConsume(&self->stepStartedHandler_, new_CCBRJSONFormatter_3_initWithCCBRJSONFormatter_(self));
  JreStrongAssignAndConsume(&self->stepFinishedHandler_, new_CCBRJSONFormatter_4_initWithCCBRJSONFormatter_(self));
  JreStrongAssignAndConsume(&self->runFinishedHandler_, new_CCBRJSONFormatter_5_initWithCCBRJSONFormatter_(self));
  JreStrongAssignAndConsume(&self->writeEventhandler_, new_CCBRJSONFormatter_6_initWithCCBRJSONFormatter_(self));
  JreStrongAssignAndConsume(&self->embedEventhandler_, new_CCBRJSONFormatter_7_initWithCCBRJSONFormatter_(self));
  JreStrongAssignAndConsume(&self->out_, new_CucumberApiFormatterNiceAppendable_initWithJavaLangAppendable_(outArg));
}

CCBRJSONFormatter *new_CCBRJSONFormatter_initWithJavaLangAppendable_(id<JavaLangAppendable> outArg) {
  J2OBJC_NEW_IMPL(CCBRJSONFormatter, initWithJavaLangAppendable_, outArg)
}

CCBRJSONFormatter *create_CCBRJSONFormatter_initWithJavaLangAppendable_(id<JavaLangAppendable> outArg) {
  J2OBJC_CREATE_IMPL(CCBRJSONFormatter, initWithJavaLangAppendable_, outArg)
}

void CCBRJSONFormatter_handleTestSourceReadWithCucumberApiEventTestSourceRead_(CCBRJSONFormatter *self, CucumberApiEventTestSourceRead *event) {
  [((CCBRTestSourcesModel *) nil_chk(self->testSources_)) addTestSourceReadEventWithNSString:((CucumberApiEventTestSourceRead *) nil_chk(event))->uri_ withCucumberApiEventTestSourceRead:event];
}

void CCBRJSONFormatter_handleTestCaseStartedWithCucumberApiEventTestCaseStarted_(CCBRJSONFormatter *self, CucumberApiEventTestCaseStarted *event) {
  if (self->currentFeatureFile_ == nil || ![self->currentFeatureFile_ isEqual:[((id<CucumberApiTestCase>) nil_chk(((CucumberApiEventTestCaseStarted *) nil_chk(event))->testCase_)) getUri]]) {
    JreStrongAssign(&self->currentFeatureFile_, [((id<CucumberApiTestCase>) nil_chk(((CucumberApiEventTestCaseStarted *) nil_chk(event))->testCase_)) getUri]);
    id<JavaUtilMap> currentFeatureMap = CCBRJSONFormatter_createFeatureMapWithCucumberApiTestCase_(self, event->testCase_);
    [((id<JavaUtilList>) nil_chk(self->featureMaps_)) addWithId:currentFeatureMap];
    JreStrongAssign(&self->currentElementsList_, (id<JavaUtilList>) cast_check([((id<JavaUtilMap>) nil_chk(currentFeatureMap)) getWithId:@"elements"], JavaUtilList_class_()));
  }
  JreStrongAssign(&self->currentTestCaseMap_, CCBRJSONFormatter_createTestCaseWithCucumberApiTestCase_(self, ((CucumberApiEventTestCaseStarted *) nil_chk(event))->testCase_));
  if ([((CCBRTestSourcesModel *) nil_chk(self->testSources_)) hasBackgroundWithNSString:self->currentFeatureFile_ withInt:[((id<CucumberApiTestCase>) nil_chk(event->testCase_)) getLine]]) {
    JreStrongAssign(&self->currentElementMap_, CCBRJSONFormatter_createBackgroundWithCucumberApiTestCase_(self, event->testCase_));
    [((id<JavaUtilList>) nil_chk(self->currentElementsList_)) addWithId:self->currentElementMap_];
  }
  else {
    JreStrongAssign(&self->currentElementMap_, self->currentTestCaseMap_);
  }
  [((id<JavaUtilList>) nil_chk(self->currentElementsList_)) addWithId:self->currentTestCaseMap_];
  JreStrongAssign(&self->currentStepsList_, (id<JavaUtilList>) cast_check([((id<JavaUtilMap>) nil_chk(self->currentElementMap_)) getWithId:@"steps"], JavaUtilList_class_()));
}

void CCBRJSONFormatter_handleTestStepStartedWithCucumberApiEventTestStepStarted_(CCBRJSONFormatter *self, CucumberApiEventTestStepStarted *event) {
  if ([CucumberApiPickleStepTestStep_class_() isInstance:((CucumberApiEventTestStepStarted *) nil_chk(event))->testStep_]) {
    id<CucumberApiPickleStepTestStep> testStep = (id<CucumberApiPickleStepTestStep>) cast_check(event->testStep_, CucumberApiPickleStepTestStep_class_());
    if (CCBRJSONFormatter_isFirstStepAfterBackgroundWithCucumberApiPickleStepTestStep_(self, testStep)) {
      JreStrongAssign(&self->currentElementMap_, self->currentTestCaseMap_);
      JreStrongAssign(&self->currentStepsList_, (id<JavaUtilList>) cast_check([((id<JavaUtilMap>) nil_chk(self->currentElementMap_)) getWithId:@"steps"], JavaUtilList_class_()));
    }
    JreStrongAssign(&self->currentStepOrHookMap_, CCBRJSONFormatter_createTestStepWithCucumberApiPickleStepTestStep_(self, testStep));
    if ([((id<JavaUtilMap>) nil_chk(self->currentBeforeStepHookList_)) containsKeyWithId:[((CucumberApiHookType *) nil_chk(JreLoadEnum(CucumberApiHookType, Before))) description]]) {
      [((id<JavaUtilMap>) nil_chk(self->currentStepOrHookMap_)) putWithId:[JreLoadEnum(CucumberApiHookType, Before) description] withId:[((id<JavaUtilMap>) nil_chk(self->currentBeforeStepHookList_)) getWithId:[JreLoadEnum(CucumberApiHookType, Before) description]]];
      [((id<JavaUtilMap>) nil_chk(self->currentBeforeStepHookList_)) clear];
    }
    [((id<JavaUtilList>) nil_chk(self->currentStepsList_)) addWithId:self->currentStepOrHookMap_];
  }
  else if ([CucumberApiHookTestStep_class_() isInstance:event->testStep_]) {
    id<CucumberApiHookTestStep> hookTestStep = (id<CucumberApiHookTestStep>) cast_check(event->testStep_, CucumberApiHookTestStep_class_());
    JreStrongAssign(&self->currentStepOrHookMap_, CCBRJSONFormatter_createHookStepWithCucumberApiHookTestStep_(self, hookTestStep));
    CCBRJSONFormatter_addHookStepToTestCaseMapWithJavaUtilMap_withCucumberApiHookType_(self, self->currentStepOrHookMap_, [((id<CucumberApiHookTestStep>) nil_chk(hookTestStep)) getHookType]);
  }
  else {
    @throw create_JavaLangIllegalStateException_init();
  }
}

void CCBRJSONFormatter_handleWriteWithCucumberApiEventWriteEvent_(CCBRJSONFormatter *self, CucumberApiEventWriteEvent *event) {
  CCBRJSONFormatter_addOutputToHookMapWithNSString_(self, ((CucumberApiEventWriteEvent *) nil_chk(event))->text_);
}

void CCBRJSONFormatter_handleEmbedWithCucumberApiEventEmbedEvent_(CCBRJSONFormatter *self, CucumberApiEventEmbedEvent *event) {
  CCBRJSONFormatter_addEmbeddingToHookMapWithByteArray_withNSString_(self, ((CucumberApiEventEmbedEvent *) nil_chk(event))->data_, event->mimeType_);
}

void CCBRJSONFormatter_handleTestStepFinishedWithCucumberApiEventTestStepFinished_(CCBRJSONFormatter *self, CucumberApiEventTestStepFinished *event) {
  [((id<JavaUtilMap>) nil_chk(self->currentStepOrHookMap_)) putWithId:@"match" withId:CCBRJSONFormatter_createMatchMapWithCucumberApiTestStep_withCucumberApiResult_(self, ((CucumberApiEventTestStepFinished *) nil_chk(event))->testStep_, event->result_)];
  [((id<JavaUtilMap>) nil_chk(self->currentStepOrHookMap_)) putWithId:@"result" withId:CCBRJSONFormatter_createResultMapWithCucumberApiResult_(self, event->result_)];
}

void CCBRJSONFormatter_finishReport(CCBRJSONFormatter *self) {
  [((CucumberApiFormatterNiceAppendable *) nil_chk(self->out_)) appendWithJavaLangCharSequence:[((ComGoogleGsonGson *) nil_chk(self->gson_)) toJsonWithId:self->featureMaps_]];
  [self->out_ close];
}

id<JavaUtilMap> CCBRJSONFormatter_createFeatureMapWithCucumberApiTestCase_(CCBRJSONFormatter *self, id<CucumberApiTestCase> testCase) {
  id<JavaUtilMap> featureMap = create_JavaUtilHashMap_init();
  [featureMap putWithId:@"uri" withId:[((id<CucumberApiTestCase>) nil_chk(testCase)) getUri]];
  [featureMap putWithId:@"elements" withId:create_JavaUtilArrayList_init()];
  GHKAFeature *feature = [((CCBRTestSourcesModel *) nil_chk(self->testSources_)) getFeatureWithNSString:[testCase getUri]];
  if (feature != nil) {
    [featureMap putWithId:@"keyword" withId:[feature getKeyword]];
    [featureMap putWithId:@"name" withId:[feature getName]];
    [featureMap putWithId:@"description" withId:[feature getDescription] != nil ? [feature getDescription] : @""];
    [featureMap putWithId:@"line" withId:JavaLangInteger_valueOfWithInt_([((GHKALocation *) nil_chk([feature getLocation])) getLine])];
    [featureMap putWithId:@"id" withId:CCBRTestSourcesModel_convertToIdWithNSString_([feature getName])];
    [featureMap putWithId:@"tags" withId:[feature getTags]];
  }
  return featureMap;
}

id<JavaUtilMap> CCBRJSONFormatter_createTestCaseWithCucumberApiTestCase_(CCBRJSONFormatter *self, id<CucumberApiTestCase> testCase) {
  id<JavaUtilMap> testCaseMap = create_JavaUtilHashMap_init();
  [testCaseMap putWithId:@"name" withId:[((id<CucumberApiTestCase>) nil_chk(testCase)) getName]];
  [testCaseMap putWithId:@"line" withId:JavaLangInteger_valueOfWithInt_([testCase getLine])];
  [testCaseMap putWithId:@"type" withId:@"scenario"];
  CCBRTestSourcesModel_AstNode *astNode = [((CCBRTestSourcesModel *) nil_chk(self->testSources_)) getAstNodeWithNSString:self->currentFeatureFile_ withInt:[testCase getLine]];
  if (astNode != nil) {
    [testCaseMap putWithId:@"id" withId:CCBRTestSourcesModel_calculateIdWithCCBRTestSourcesModel_AstNode_(astNode)];
    GHKAScenarioDefinition *scenarioDefinition = CCBRTestSourcesModel_getScenarioDefinitionWithCCBRTestSourcesModel_AstNode_(astNode);
    [testCaseMap putWithId:@"keyword" withId:[((GHKAScenarioDefinition *) nil_chk(scenarioDefinition)) getKeyword]];
    [testCaseMap putWithId:@"description" withId:[scenarioDefinition getDescription] != nil ? [scenarioDefinition getDescription] : @""];
  }
  [testCaseMap putWithId:@"steps" withId:create_JavaUtilArrayList_init()];
  if (![((id<JavaUtilList>) nil_chk([testCase getTags])) isEmpty]) {
    id<JavaUtilList> tagList = create_JavaUtilArrayList_init();
    for (GHKPickleTag * __strong tag in nil_chk([testCase getTags])) {
      id<JavaUtilMap> tagMap = create_JavaUtilHashMap_init();
      [tagMap putWithId:@"name" withId:[((GHKPickleTag *) nil_chk(tag)) getName]];
      [tagList addWithId:tagMap];
    }
    [testCaseMap putWithId:@"tags" withId:tagList];
  }
  return testCaseMap;
}

id<JavaUtilMap> CCBRJSONFormatter_createBackgroundWithCucumberApiTestCase_(CCBRJSONFormatter *self, id<CucumberApiTestCase> testCase) {
  CCBRTestSourcesModel_AstNode *astNode = [((CCBRTestSourcesModel *) nil_chk(self->testSources_)) getAstNodeWithNSString:self->currentFeatureFile_ withInt:[((id<CucumberApiTestCase>) nil_chk(testCase)) getLine]];
  if (astNode != nil) {
    GHKABackground *background = CCBRTestSourcesModel_getBackgroundForTestCaseWithCCBRTestSourcesModel_AstNode_(astNode);
    id<JavaUtilMap> testCaseMap = create_JavaUtilHashMap_init();
    [testCaseMap putWithId:@"name" withId:[((GHKABackground *) nil_chk(background)) getName]];
    [testCaseMap putWithId:@"line" withId:JavaLangInteger_valueOfWithInt_([((GHKALocation *) nil_chk([background getLocation])) getLine])];
    [testCaseMap putWithId:@"type" withId:@"background"];
    [testCaseMap putWithId:@"keyword" withId:[background getKeyword]];
    [testCaseMap putWithId:@"description" withId:[background getDescription] != nil ? [background getDescription] : @""];
    [testCaseMap putWithId:@"steps" withId:create_JavaUtilArrayList_init()];
    return testCaseMap;
  }
  return nil;
}

jboolean CCBRJSONFormatter_isFirstStepAfterBackgroundWithCucumberApiPickleStepTestStep_(CCBRJSONFormatter *self, id<CucumberApiPickleStepTestStep> testStep) {
  CCBRTestSourcesModel_AstNode *astNode = [((CCBRTestSourcesModel *) nil_chk(self->testSources_)) getAstNodeWithNSString:self->currentFeatureFile_ withInt:[((id<CucumberApiPickleStepTestStep>) nil_chk(testStep)) getStepLine]];
  if (astNode != nil) {
    if (self->currentElementMap_ != self->currentTestCaseMap_ && !CCBRTestSourcesModel_isBackgroundStepWithCCBRTestSourcesModel_AstNode_(astNode)) {
      return true;
    }
  }
  return false;
}

id<JavaUtilMap> CCBRJSONFormatter_createTestStepWithCucumberApiPickleStepTestStep_(CCBRJSONFormatter *self, id<CucumberApiPickleStepTestStep> testStep) {
  id<JavaUtilMap> stepMap = create_JavaUtilHashMap_init();
  [stepMap putWithId:@"name" withId:[((id<CucumberApiPickleStepTestStep>) nil_chk(testStep)) getStepText]];
  [stepMap putWithId:@"line" withId:JavaLangInteger_valueOfWithInt_([testStep getStepLine])];
  CCBRTestSourcesModel_AstNode *astNode = [((CCBRTestSourcesModel *) nil_chk(self->testSources_)) getAstNodeWithNSString:self->currentFeatureFile_ withInt:[testStep getStepLine]];
  if (![((id<JavaUtilList>) nil_chk([testStep getStepArgument])) isEmpty]) {
    id<GHKArgument> argument = [((id<JavaUtilList>) nil_chk([testStep getStepArgument])) getWithInt:0];
    if ([argument isKindOfClass:[GHKPickleString class]]) {
      [stepMap putWithId:@"doc_string" withId:CCBRJSONFormatter_createDocStringMapWithGHKArgument_withCCBRTestSourcesModel_AstNode_(self, argument, astNode)];
    }
    else if ([argument isKindOfClass:[GHKPickleTable class]]) {
      [stepMap putWithId:@"rows" withId:CCBRJSONFormatter_createDataTableListWithGHKArgument_(self, argument)];
    }
  }
  if (astNode != nil) {
    GHKAStep *step = (GHKAStep *) cast_chk(astNode->node_, [GHKAStep class]);
    [stepMap putWithId:@"keyword" withId:[((GHKAStep *) nil_chk(step)) getKeyword]];
  }
  return stepMap;
}

id<JavaUtilMap> CCBRJSONFormatter_createDocStringMapWithGHKArgument_withCCBRTestSourcesModel_AstNode_(CCBRJSONFormatter *self, id<GHKArgument> argument, CCBRTestSourcesModel_AstNode *astNode) {
  id<JavaUtilMap> docStringMap = create_JavaUtilHashMap_init();
  GHKPickleString *docString = ((GHKPickleString *) cast_chk(argument, [GHKPickleString class]));
  [docStringMap putWithId:@"value" withId:[((GHKPickleString *) nil_chk(docString)) getContent]];
  [docStringMap putWithId:@"line" withId:JavaLangInteger_valueOfWithInt_([((GHKPickleLocation *) nil_chk([docString getLocation])) getLine])];
  if (astNode != nil) {
    [docStringMap putWithId:@"content_type" withId:[((GHKADocString *) nil_chk(((GHKADocString *) cast_chk([((GHKAStep *) nil_chk(((GHKAStep *) cast_chk(astNode->node_, [GHKAStep class])))) getArgument], [GHKADocString class])))) getContentType]];
  }
  return docStringMap;
}

id<JavaUtilList> CCBRJSONFormatter_createDataTableListWithGHKArgument_(CCBRJSONFormatter *self, id<GHKArgument> argument) {
  id<JavaUtilList> rowList = create_JavaUtilArrayList_init();
  for (GHKPickleRow * __strong row in nil_chk([((GHKPickleTable *) nil_chk(((GHKPickleTable *) cast_chk(argument, [GHKPickleTable class])))) getRows])) {
    id<JavaUtilMap> rowMap = create_JavaUtilHashMap_init();
    [rowMap putWithId:@"cells" withId:CCBRJSONFormatter_createCellListWithGHKPickleRow_(self, row)];
    [rowList addWithId:rowMap];
  }
  return rowList;
}

id<JavaUtilList> CCBRJSONFormatter_createCellListWithGHKPickleRow_(CCBRJSONFormatter *self, GHKPickleRow *row) {
  id<JavaUtilList> cells = create_JavaUtilArrayList_init();
  for (GHKPickleCell * __strong cell in nil_chk([((GHKPickleRow *) nil_chk(row)) getCells])) {
    [cells addWithId:[((GHKPickleCell *) nil_chk(cell)) getValue]];
  }
  return cells;
}

id<JavaUtilMap> CCBRJSONFormatter_createHookStepWithCucumberApiHookTestStep_(CCBRJSONFormatter *self, id<CucumberApiHookTestStep> hookTestStep) {
  return create_JavaUtilHashMap_init();
}

void CCBRJSONFormatter_addHookStepToTestCaseMapWithJavaUtilMap_withCucumberApiHookType_(CCBRJSONFormatter *self, id<JavaUtilMap> currentStepOrHookMap, CucumberApiHookType *hookType) {
  NSString *hookName;
  if ([((NSString *) nil_chk([((CucumberApiHookType *) nil_chk(hookType)) description])) java_contains:@"after"]) hookName = @"after";
  else hookName = @"before";
  id<JavaUtilMap> mapToAddTo;
  switch ([hookType ordinal]) {
    case CucumberApiHookType_Enum_Before:
    mapToAddTo = self->currentTestCaseMap_;
    break;
    case CucumberApiHookType_Enum_After:
    mapToAddTo = self->currentTestCaseMap_;
    break;
    case CucumberApiHookType_Enum_BeforeStep:
    mapToAddTo = self->currentBeforeStepHookList_;
    break;
    case CucumberApiHookType_Enum_AfterStep:
    mapToAddTo = [((id<JavaUtilList>) nil_chk(self->currentStepsList_)) getWithInt:[self->currentStepsList_ size] - 1];
    break;
    default:
    mapToAddTo = self->currentTestCaseMap_;
  }
  if (![((id<JavaUtilMap>) nil_chk(mapToAddTo)) containsKeyWithId:hookName]) {
    [mapToAddTo putWithId:hookName withId:create_JavaUtilArrayList_init()];
  }
  [((id<JavaUtilList>) nil_chk(((id<JavaUtilList>) cast_check([mapToAddTo getWithId:hookName], JavaUtilList_class_())))) addWithId:currentStepOrHookMap];
}

void CCBRJSONFormatter_addOutputToHookMapWithNSString_(CCBRJSONFormatter *self, NSString *text) {
  if (![((id<JavaUtilMap>) nil_chk(self->currentStepOrHookMap_)) containsKeyWithId:@"output"]) {
    [((id<JavaUtilMap>) nil_chk(self->currentStepOrHookMap_)) putWithId:@"output" withId:create_JavaUtilArrayList_init()];
  }
  [((id<JavaUtilList>) nil_chk(((id<JavaUtilList>) cast_check([((id<JavaUtilMap>) nil_chk(self->currentStepOrHookMap_)) getWithId:@"output"], JavaUtilList_class_())))) addWithId:text];
}

void CCBRJSONFormatter_addEmbeddingToHookMapWithByteArray_withNSString_(CCBRJSONFormatter *self, IOSByteArray *data, NSString *mimeType) {
  if (![((id<JavaUtilMap>) nil_chk(self->currentStepOrHookMap_)) containsKeyWithId:@"embeddings"]) {
    [((id<JavaUtilMap>) nil_chk(self->currentStepOrHookMap_)) putWithId:@"embeddings" withId:create_JavaUtilArrayList_init()];
  }
  id<JavaUtilMap> embedMap = CCBRJSONFormatter_createEmbeddingMapWithByteArray_withNSString_(self, data, mimeType);
  [((id<JavaUtilList>) nil_chk(((id<JavaUtilList>) cast_check([((id<JavaUtilMap>) nil_chk(self->currentStepOrHookMap_)) getWithId:@"embeddings"], JavaUtilList_class_())))) addWithId:embedMap];
}

id<JavaUtilMap> CCBRJSONFormatter_createEmbeddingMapWithByteArray_withNSString_(CCBRJSONFormatter *self, IOSByteArray *data, NSString *mimeType) {
  id<JavaUtilMap> embedMap = create_JavaUtilHashMap_init();
  [embedMap putWithId:@"mime_type" withId:mimeType];
  [embedMap putWithId:@"data" withId:[((JavaUtilBase64_Encoder *) nil_chk(JavaUtilBase64_getEncoder())) encodeWithByteArray:data]];
  return embedMap;
}

id<JavaUtilMap> CCBRJSONFormatter_createMatchMapWithCucumberApiTestStep_withCucumberApiResult_(CCBRJSONFormatter *self, id<CucumberApiTestStep> step, CucumberApiResult *result) {
  id<JavaUtilMap> matchMap = create_JavaUtilHashMap_init();
  if ([CucumberApiPickleStepTestStep_class_() isInstance:step]) {
    id<CucumberApiPickleStepTestStep> testStep = (id<CucumberApiPickleStepTestStep>) cast_check(step, CucumberApiPickleStepTestStep_class_());
    if (![((id<JavaUtilList>) nil_chk([((id<CucumberApiPickleStepTestStep>) nil_chk(testStep)) getDefinitionArgument])) isEmpty]) {
      id<JavaUtilList> argumentList = create_JavaUtilArrayList_init();
      for (id<CucumberApiArgument> __strong argument in nil_chk([testStep getDefinitionArgument])) {
        id<JavaUtilMap> argumentMap = create_JavaUtilHashMap_init();
        if ([((id<CucumberApiArgument>) nil_chk(argument)) getValue] != nil) {
          [argumentMap putWithId:@"val" withId:[argument getValue]];
          [argumentMap putWithId:@"offset" withId:JavaLangInteger_valueOfWithInt_([argument getStart])];
        }
        [argumentList addWithId:argumentMap];
      }
      [matchMap putWithId:@"arguments" withId:argumentList];
    }
  }
  if (![((CucumberApiResult *) nil_chk(result)) isWithCucumberApiResult_Type:JreLoadEnum(CucumberApiResult_Type, UNDEFINED)]) {
    [matchMap putWithId:@"location" withId:[((id<CucumberApiTestStep>) nil_chk(step)) getCodeLocation]];
  }
  return matchMap;
}

id<JavaUtilMap> CCBRJSONFormatter_createResultMapWithCucumberApiResult_(CCBRJSONFormatter *self, CucumberApiResult *result) {
  id<JavaUtilMap> resultMap = create_JavaUtilHashMap_init();
  [resultMap putWithId:@"status" withId:[((CucumberApiResult_Type *) nil_chk([((CucumberApiResult *) nil_chk(result)) getStatus])) lowerCaseName]];
  if ([result getErrorMessage] != nil) {
    [resultMap putWithId:@"error_message" withId:[result getErrorMessage]];
  }
  if ([result getDuration] != nil && [((JavaLangLong *) nil_chk([result getDuration])) longLongValue] != 0) {
    [resultMap putWithId:@"duration" withId:[result getDuration]];
  }
  return resultMap;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRJSONFormatter)

@implementation CCBRJSONFormatter_1

- (instancetype __nonnull)initWithCCBRJSONFormatter:(CCBRJSONFormatter *)outer$ {
  CCBRJSONFormatter_1_initWithCCBRJSONFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestSourceRead *)event {
  CCBRJSONFormatter_handleTestSourceReadWithCucumberApiEventTestSourceRead_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRJSONFormatter:);
  methods[1].selector = @selector(receiveWithCucumberApiEventEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRJSONFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCucumberApiEventTestSourceRead;", "LCCBRJSONFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestSourceRead;>;" };
  static const J2ObjcClassInfo _CCBRJSONFormatter_1 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRJSONFormatter_1;
}

@end

void CCBRJSONFormatter_1_initWithCCBRJSONFormatter_(CCBRJSONFormatter_1 *self, CCBRJSONFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRJSONFormatter_1 *new_CCBRJSONFormatter_1_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRJSONFormatter_1, initWithCCBRJSONFormatter_, outer$)
}

CCBRJSONFormatter_1 *create_CCBRJSONFormatter_1_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRJSONFormatter_1, initWithCCBRJSONFormatter_, outer$)
}

@implementation CCBRJSONFormatter_2

- (instancetype __nonnull)initWithCCBRJSONFormatter:(CCBRJSONFormatter *)outer$ {
  CCBRJSONFormatter_2_initWithCCBRJSONFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestCaseStarted *)event {
  CCBRJSONFormatter_handleTestCaseStartedWithCucumberApiEventTestCaseStarted_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRJSONFormatter:);
  methods[1].selector = @selector(receiveWithCucumberApiEventEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRJSONFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCucumberApiEventTestCaseStarted;", "LCCBRJSONFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestCaseStarted;>;" };
  static const J2ObjcClassInfo _CCBRJSONFormatter_2 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRJSONFormatter_2;
}

@end

void CCBRJSONFormatter_2_initWithCCBRJSONFormatter_(CCBRJSONFormatter_2 *self, CCBRJSONFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRJSONFormatter_2 *new_CCBRJSONFormatter_2_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRJSONFormatter_2, initWithCCBRJSONFormatter_, outer$)
}

CCBRJSONFormatter_2 *create_CCBRJSONFormatter_2_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRJSONFormatter_2, initWithCCBRJSONFormatter_, outer$)
}

@implementation CCBRJSONFormatter_3

- (instancetype __nonnull)initWithCCBRJSONFormatter:(CCBRJSONFormatter *)outer$ {
  CCBRJSONFormatter_3_initWithCCBRJSONFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestStepStarted *)event {
  CCBRJSONFormatter_handleTestStepStartedWithCucumberApiEventTestStepStarted_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRJSONFormatter:);
  methods[1].selector = @selector(receiveWithCucumberApiEventEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRJSONFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCucumberApiEventTestStepStarted;", "LCCBRJSONFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestStepStarted;>;" };
  static const J2ObjcClassInfo _CCBRJSONFormatter_3 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRJSONFormatter_3;
}

@end

void CCBRJSONFormatter_3_initWithCCBRJSONFormatter_(CCBRJSONFormatter_3 *self, CCBRJSONFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRJSONFormatter_3 *new_CCBRJSONFormatter_3_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRJSONFormatter_3, initWithCCBRJSONFormatter_, outer$)
}

CCBRJSONFormatter_3 *create_CCBRJSONFormatter_3_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRJSONFormatter_3, initWithCCBRJSONFormatter_, outer$)
}

@implementation CCBRJSONFormatter_4

- (instancetype __nonnull)initWithCCBRJSONFormatter:(CCBRJSONFormatter *)outer$ {
  CCBRJSONFormatter_4_initWithCCBRJSONFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestStepFinished *)event {
  CCBRJSONFormatter_handleTestStepFinishedWithCucumberApiEventTestStepFinished_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRJSONFormatter:);
  methods[1].selector = @selector(receiveWithCucumberApiEventEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRJSONFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCucumberApiEventTestStepFinished;", "LCCBRJSONFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestStepFinished;>;" };
  static const J2ObjcClassInfo _CCBRJSONFormatter_4 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRJSONFormatter_4;
}

@end

void CCBRJSONFormatter_4_initWithCCBRJSONFormatter_(CCBRJSONFormatter_4 *self, CCBRJSONFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRJSONFormatter_4 *new_CCBRJSONFormatter_4_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRJSONFormatter_4, initWithCCBRJSONFormatter_, outer$)
}

CCBRJSONFormatter_4 *create_CCBRJSONFormatter_4_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRJSONFormatter_4, initWithCCBRJSONFormatter_, outer$)
}

@implementation CCBRJSONFormatter_5

- (instancetype __nonnull)initWithCCBRJSONFormatter:(CCBRJSONFormatter *)outer$ {
  CCBRJSONFormatter_5_initWithCCBRJSONFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestRunFinished *)event {
  CCBRJSONFormatter_finishReport(this$0_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRJSONFormatter:);
  methods[1].selector = @selector(receiveWithCucumberApiEventEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRJSONFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCucumberApiEventTestRunFinished;", "LCCBRJSONFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestRunFinished;>;" };
  static const J2ObjcClassInfo _CCBRJSONFormatter_5 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRJSONFormatter_5;
}

@end

void CCBRJSONFormatter_5_initWithCCBRJSONFormatter_(CCBRJSONFormatter_5 *self, CCBRJSONFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRJSONFormatter_5 *new_CCBRJSONFormatter_5_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRJSONFormatter_5, initWithCCBRJSONFormatter_, outer$)
}

CCBRJSONFormatter_5 *create_CCBRJSONFormatter_5_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRJSONFormatter_5, initWithCCBRJSONFormatter_, outer$)
}

@implementation CCBRJSONFormatter_6

- (instancetype __nonnull)initWithCCBRJSONFormatter:(CCBRJSONFormatter *)outer$ {
  CCBRJSONFormatter_6_initWithCCBRJSONFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventWriteEvent *)event {
  CCBRJSONFormatter_handleWriteWithCucumberApiEventWriteEvent_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRJSONFormatter:);
  methods[1].selector = @selector(receiveWithCucumberApiEventEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRJSONFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCucumberApiEventWriteEvent;", "LCCBRJSONFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/WriteEvent;>;" };
  static const J2ObjcClassInfo _CCBRJSONFormatter_6 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRJSONFormatter_6;
}

@end

void CCBRJSONFormatter_6_initWithCCBRJSONFormatter_(CCBRJSONFormatter_6 *self, CCBRJSONFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRJSONFormatter_6 *new_CCBRJSONFormatter_6_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRJSONFormatter_6, initWithCCBRJSONFormatter_, outer$)
}

CCBRJSONFormatter_6 *create_CCBRJSONFormatter_6_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRJSONFormatter_6, initWithCCBRJSONFormatter_, outer$)
}

@implementation CCBRJSONFormatter_7

- (instancetype __nonnull)initWithCCBRJSONFormatter:(CCBRJSONFormatter *)outer$ {
  CCBRJSONFormatter_7_initWithCCBRJSONFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventEmbedEvent *)event {
  CCBRJSONFormatter_handleEmbedWithCucumberApiEventEmbedEvent_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRJSONFormatter:);
  methods[1].selector = @selector(receiveWithCucumberApiEventEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRJSONFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCucumberApiEventEmbedEvent;", "LCCBRJSONFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/EmbedEvent;>;" };
  static const J2ObjcClassInfo _CCBRJSONFormatter_7 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRJSONFormatter_7;
}

@end

void CCBRJSONFormatter_7_initWithCCBRJSONFormatter_(CCBRJSONFormatter_7 *self, CCBRJSONFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRJSONFormatter_7 *new_CCBRJSONFormatter_7_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRJSONFormatter_7, initWithCCBRJSONFormatter_, outer$)
}

CCBRJSONFormatter_7 *create_CCBRJSONFormatter_7_initWithCCBRJSONFormatter_(CCBRJSONFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRJSONFormatter_7, initWithCCBRJSONFormatter_, outer$)
}
