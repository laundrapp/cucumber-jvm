//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/formatter/PrettyFormatter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "cucumber/api/Result.h"
#include "cucumber/api/TestCase.h"
#include "cucumber/api/TestStep.h"
#include "cucumber/api/event/EventHandler.h"
#include "cucumber/api/event/EventPublisher.h"
#include "cucumber/api/event/TestCaseStarted.h"
#include "cucumber/api/event/TestRunFinished.h"
#include "cucumber/api/event/TestSourceRead.h"
#include "cucumber/api/event/TestStepFinished.h"
#include "cucumber/api/event/TestStepStarted.h"
#include "cucumber/api/event/WriteEvent.h"
#include "cucumber/api/formatter/NiceAppendable.h"
#include "cucumber/runtime/Argument.h"
#include "cucumber/runtime/formatter/AnsiFormats.h"
#include "cucumber/runtime/formatter/Format.h"
#include "cucumber/runtime/formatter/Formats.h"
#include "cucumber/runtime/formatter/MonochromeFormats.h"
#include "cucumber/runtime/formatter/PrettyFormatter.h"
#include "cucumber/runtime/formatter/TestSourcesModel.h"
#include "cucumber/util/FixJava.h"
#include "cucumber/util/Mapper.h"
#include "gherkin/ast/Background.h"
#include "gherkin/ast/Examples.h"
#include "gherkin/ast/Feature.h"
#include "gherkin/ast/Location.h"
#include "gherkin/ast/Node.h"
#include "gherkin/ast/ScenarioDefinition.h"
#include "gherkin/ast/ScenarioOutline.h"
#include "gherkin/ast/Step.h"
#include "gherkin/ast/Tag.h"
#include "gherkin/pickles/PickleTag.h"
#include "java/lang/Appendable.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/util/List.h"

@interface CCBRPrettyFormatter () {
 @public
  CCBRTestSourcesModel *testSources_;
  CCBNiceAppendable *out_;
  id<CCBRFormats> formats_;
  NSString *currentFeatureFile_;
  CCBTestCase *currentTestCase_;
  GherkinAstScenarioOutline *currentScenarioOutline_;
  GherkinAstExamples *currentExamples_;
  jint locationIndentation_;
  id<CucumberUtilMapper> tagNameMapper_;
  id<CucumberUtilMapper> pickleTagNameMapper_;
  id<CCBEventHandler> testSourceReadHandler_;
  id<CCBEventHandler> caseStartedHandler_;
  id<CCBEventHandler> stepStartedHandler_;
  id<CCBEventHandler> stepFinishedHandler_;
  id<CCBEventHandler> writeEventhandler_;
  id<CCBEventHandler> runFinishedHandler_;
}

- (void)handleTestSourceReadWithCCBTestSourceRead:(CCBTestSourceRead *)event;

- (void)handleTestCaseStartedWithCCBTestCaseStarted:(CCBTestCaseStarted *)event;

- (void)handleTestStepStartedWithCCBTestStepStarted:(CCBTestStepStarted *)event;

- (void)handleTestStepFinishedWithCCBTestStepFinished:(CCBTestStepFinished *)event;

- (void)handleWriteWithCCBWriteEvent:(CCBWriteEvent *)event;

- (void)finishReport;

- (void)handleStartOfFeatureWithCCBTestCaseStarted:(CCBTestCaseStarted *)event;

- (void)handleScenarioOutlineWithCCBTestCaseStarted:(CCBTestCaseStarted *)event;

- (void)printScenarioOutlineWithGherkinAstScenarioOutline:(GherkinAstScenarioOutline *)scenarioOutline;

- (void)printExamplesWithGherkinAstExamples:(GherkinAstExamples *)examples;

- (void)printStepWithCCBTestStep:(CCBTestStep *)testStep
                   withCCBResult:(CCBResult *)result;

- (NSString *)getScenarioDefinitionTextWithGherkinAstScenarioDefinition:(GherkinAstScenarioDefinition *)definition;

- (NSString *)getLocationTextWithNSString:(NSString *)file
                                  withInt:(jint)line;

- (NSString *)getLocationTextWithNSString:(NSString *)location;

- (JavaLangStringBuffer *)stepTextWithCCBTestStep:(CCBTestStep *)testStep;

- (NSString *)getStepKeywordWithCCBTestStep:(CCBTestStep *)testStep;

- (jboolean)isFirstStepAfterBackgroundWithCCBTestStep:(CCBTestStep *)testStep;

- (jboolean)isBackgroundStepWithCCBTestStep:(CCBTestStep *)testStep;

- (void)printFeatureWithNSString:(NSString *)path;

- (void)printTagsWithJavaUtilList:(id<JavaUtilList>)tags;

- (void)printTagsWithJavaUtilList:(id<JavaUtilList>)tags
                     withNSString:(NSString *)indent;

- (void)printPickleTagsWithJavaUtilList:(id<JavaUtilList>)tags
                           withNSString:(NSString *)indent;

- (void)printDescriptionWithNSString:(NSString *)description_;

- (void)printBackgroundWithCCBTestCase:(CCBTestCase *)testCase;

- (void)printScenarioDefinitionWithCCBTestCase:(CCBTestCase *)testCase;

- (void)printErrorWithCCBResult:(CCBResult *)result;

- (void)calculateLocationIndentationWithNSString:(NSString *)definitionText
                                withJavaUtilList:(id<JavaUtilList>)testSteps;

- (void)calculateLocationIndentationWithNSString:(NSString *)definitionText
                                withJavaUtilList:(id<JavaUtilList>)testSteps
                                     withBoolean:(jboolean)useBackgroundSteps;

- (NSString *)createPaddingToLocationWithNSString:(NSString *)indent
                                     withNSString:(NSString *)text;

@end

J2OBJC_FIELD_SETTER(CCBRPrettyFormatter, testSources_, CCBRTestSourcesModel *)
J2OBJC_FIELD_SETTER(CCBRPrettyFormatter, out_, CCBNiceAppendable *)
J2OBJC_FIELD_SETTER(CCBRPrettyFormatter, formats_, id<CCBRFormats>)
J2OBJC_FIELD_SETTER(CCBRPrettyFormatter, currentFeatureFile_, NSString *)
J2OBJC_FIELD_SETTER(CCBRPrettyFormatter, currentTestCase_, CCBTestCase *)
J2OBJC_FIELD_SETTER(CCBRPrettyFormatter, currentScenarioOutline_, GherkinAstScenarioOutline *)
J2OBJC_FIELD_SETTER(CCBRPrettyFormatter, currentExamples_, GherkinAstExamples *)
J2OBJC_FIELD_SETTER(CCBRPrettyFormatter, tagNameMapper_, id<CucumberUtilMapper>)
J2OBJC_FIELD_SETTER(CCBRPrettyFormatter, pickleTagNameMapper_, id<CucumberUtilMapper>)
J2OBJC_FIELD_SETTER(CCBRPrettyFormatter, testSourceReadHandler_, id<CCBEventHandler>)
J2OBJC_FIELD_SETTER(CCBRPrettyFormatter, caseStartedHandler_, id<CCBEventHandler>)
J2OBJC_FIELD_SETTER(CCBRPrettyFormatter, stepStartedHandler_, id<CCBEventHandler>)
J2OBJC_FIELD_SETTER(CCBRPrettyFormatter, stepFinishedHandler_, id<CCBEventHandler>)
J2OBJC_FIELD_SETTER(CCBRPrettyFormatter, writeEventhandler_, id<CCBEventHandler>)
J2OBJC_FIELD_SETTER(CCBRPrettyFormatter, runFinishedHandler_, id<CCBEventHandler>)

inline NSString *CCBRPrettyFormatter_get_SCENARIO_INDENT(void);
static NSString *CCBRPrettyFormatter_SCENARIO_INDENT = @"  ";
J2OBJC_STATIC_FIELD_OBJ_FINAL(CCBRPrettyFormatter, SCENARIO_INDENT, NSString *)

inline NSString *CCBRPrettyFormatter_get_STEP_INDENT(void);
static NSString *CCBRPrettyFormatter_STEP_INDENT = @"    ";
J2OBJC_STATIC_FIELD_OBJ_FINAL(CCBRPrettyFormatter, STEP_INDENT, NSString *)

inline NSString *CCBRPrettyFormatter_get_EXAMPLES_INDENT(void);
static NSString *CCBRPrettyFormatter_EXAMPLES_INDENT = @"    ";
J2OBJC_STATIC_FIELD_OBJ_FINAL(CCBRPrettyFormatter, EXAMPLES_INDENT, NSString *)

__attribute__((unused)) static void CCBRPrettyFormatter_handleTestSourceReadWithCCBTestSourceRead_(CCBRPrettyFormatter *self, CCBTestSourceRead *event);

__attribute__((unused)) static void CCBRPrettyFormatter_handleTestCaseStartedWithCCBTestCaseStarted_(CCBRPrettyFormatter *self, CCBTestCaseStarted *event);

__attribute__((unused)) static void CCBRPrettyFormatter_handleTestStepStartedWithCCBTestStepStarted_(CCBRPrettyFormatter *self, CCBTestStepStarted *event);

__attribute__((unused)) static void CCBRPrettyFormatter_handleTestStepFinishedWithCCBTestStepFinished_(CCBRPrettyFormatter *self, CCBTestStepFinished *event);

__attribute__((unused)) static void CCBRPrettyFormatter_handleWriteWithCCBWriteEvent_(CCBRPrettyFormatter *self, CCBWriteEvent *event);

__attribute__((unused)) static void CCBRPrettyFormatter_finishReport(CCBRPrettyFormatter *self);

__attribute__((unused)) static void CCBRPrettyFormatter_handleStartOfFeatureWithCCBTestCaseStarted_(CCBRPrettyFormatter *self, CCBTestCaseStarted *event);

__attribute__((unused)) static void CCBRPrettyFormatter_handleScenarioOutlineWithCCBTestCaseStarted_(CCBRPrettyFormatter *self, CCBTestCaseStarted *event);

__attribute__((unused)) static void CCBRPrettyFormatter_printScenarioOutlineWithGherkinAstScenarioOutline_(CCBRPrettyFormatter *self, GherkinAstScenarioOutline *scenarioOutline);

__attribute__((unused)) static void CCBRPrettyFormatter_printExamplesWithGherkinAstExamples_(CCBRPrettyFormatter *self, GherkinAstExamples *examples);

__attribute__((unused)) static void CCBRPrettyFormatter_printStepWithCCBTestStep_withCCBResult_(CCBRPrettyFormatter *self, CCBTestStep *testStep, CCBResult *result);

__attribute__((unused)) static NSString *CCBRPrettyFormatter_getScenarioDefinitionTextWithGherkinAstScenarioDefinition_(CCBRPrettyFormatter *self, GherkinAstScenarioDefinition *definition);

__attribute__((unused)) static NSString *CCBRPrettyFormatter_getLocationTextWithNSString_withInt_(CCBRPrettyFormatter *self, NSString *file, jint line);

__attribute__((unused)) static NSString *CCBRPrettyFormatter_getLocationTextWithNSString_(CCBRPrettyFormatter *self, NSString *location);

__attribute__((unused)) static JavaLangStringBuffer *CCBRPrettyFormatter_stepTextWithCCBTestStep_(CCBRPrettyFormatter *self, CCBTestStep *testStep);

__attribute__((unused)) static NSString *CCBRPrettyFormatter_getStepKeywordWithCCBTestStep_(CCBRPrettyFormatter *self, CCBTestStep *testStep);

__attribute__((unused)) static jboolean CCBRPrettyFormatter_isFirstStepAfterBackgroundWithCCBTestStep_(CCBRPrettyFormatter *self, CCBTestStep *testStep);

__attribute__((unused)) static jboolean CCBRPrettyFormatter_isBackgroundStepWithCCBTestStep_(CCBRPrettyFormatter *self, CCBTestStep *testStep);

__attribute__((unused)) static void CCBRPrettyFormatter_printFeatureWithNSString_(CCBRPrettyFormatter *self, NSString *path);

__attribute__((unused)) static void CCBRPrettyFormatter_printTagsWithJavaUtilList_(CCBRPrettyFormatter *self, id<JavaUtilList> tags);

__attribute__((unused)) static void CCBRPrettyFormatter_printTagsWithJavaUtilList_withNSString_(CCBRPrettyFormatter *self, id<JavaUtilList> tags, NSString *indent);

__attribute__((unused)) static void CCBRPrettyFormatter_printPickleTagsWithJavaUtilList_withNSString_(CCBRPrettyFormatter *self, id<JavaUtilList> tags, NSString *indent);

__attribute__((unused)) static void CCBRPrettyFormatter_printDescriptionWithNSString_(CCBRPrettyFormatter *self, NSString *description_);

__attribute__((unused)) static void CCBRPrettyFormatter_printBackgroundWithCCBTestCase_(CCBRPrettyFormatter *self, CCBTestCase *testCase);

__attribute__((unused)) static void CCBRPrettyFormatter_printScenarioDefinitionWithCCBTestCase_(CCBRPrettyFormatter *self, CCBTestCase *testCase);

__attribute__((unused)) static void CCBRPrettyFormatter_printErrorWithCCBResult_(CCBRPrettyFormatter *self, CCBResult *result);

__attribute__((unused)) static void CCBRPrettyFormatter_calculateLocationIndentationWithNSString_withJavaUtilList_(CCBRPrettyFormatter *self, NSString *definitionText, id<JavaUtilList> testSteps);

__attribute__((unused)) static void CCBRPrettyFormatter_calculateLocationIndentationWithNSString_withJavaUtilList_withBoolean_(CCBRPrettyFormatter *self, NSString *definitionText, id<JavaUtilList> testSteps, jboolean useBackgroundSteps);

__attribute__((unused)) static NSString *CCBRPrettyFormatter_createPaddingToLocationWithNSString_withNSString_(CCBRPrettyFormatter *self, NSString *indent, NSString *text);

@interface CCBRPrettyFormatter_1 : NSObject < CucumberUtilMapper >

- (instancetype __nonnull)init;

- (NSString *)mapWithId:(GherkinAstTag *)tag;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRPrettyFormatter_1)

__attribute__((unused)) static void CCBRPrettyFormatter_1_init(CCBRPrettyFormatter_1 *self);

__attribute__((unused)) static CCBRPrettyFormatter_1 *new_CCBRPrettyFormatter_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRPrettyFormatter_1 *create_CCBRPrettyFormatter_1_init(void);

@interface CCBRPrettyFormatter_2 : NSObject < CucumberUtilMapper >

- (instancetype __nonnull)init;

- (NSString *)mapWithId:(GherkinPicklesPickleTag *)pickleTag;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRPrettyFormatter_2)

__attribute__((unused)) static void CCBRPrettyFormatter_2_init(CCBRPrettyFormatter_2 *self);

__attribute__((unused)) static CCBRPrettyFormatter_2 *new_CCBRPrettyFormatter_2_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRPrettyFormatter_2 *create_CCBRPrettyFormatter_2_init(void);

@interface CCBRPrettyFormatter_3 : NSObject < CCBEventHandler > {
 @public
  CCBRPrettyFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRPrettyFormatter:(CCBRPrettyFormatter *)outer$;

- (void)receiveWithCCBEvent:(CCBTestSourceRead *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRPrettyFormatter_3)

__attribute__((unused)) static void CCBRPrettyFormatter_3_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter_3 *self, CCBRPrettyFormatter *outer$);

__attribute__((unused)) static CCBRPrettyFormatter_3 *new_CCBRPrettyFormatter_3_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRPrettyFormatter_3 *create_CCBRPrettyFormatter_3_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter *outer$);

@interface CCBRPrettyFormatter_4 : NSObject < CCBEventHandler > {
 @public
  CCBRPrettyFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRPrettyFormatter:(CCBRPrettyFormatter *)outer$;

- (void)receiveWithCCBEvent:(CCBTestCaseStarted *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRPrettyFormatter_4)

__attribute__((unused)) static void CCBRPrettyFormatter_4_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter_4 *self, CCBRPrettyFormatter *outer$);

__attribute__((unused)) static CCBRPrettyFormatter_4 *new_CCBRPrettyFormatter_4_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRPrettyFormatter_4 *create_CCBRPrettyFormatter_4_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter *outer$);

@interface CCBRPrettyFormatter_5 : NSObject < CCBEventHandler > {
 @public
  CCBRPrettyFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRPrettyFormatter:(CCBRPrettyFormatter *)outer$;

- (void)receiveWithCCBEvent:(CCBTestStepStarted *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRPrettyFormatter_5)

__attribute__((unused)) static void CCBRPrettyFormatter_5_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter_5 *self, CCBRPrettyFormatter *outer$);

__attribute__((unused)) static CCBRPrettyFormatter_5 *new_CCBRPrettyFormatter_5_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRPrettyFormatter_5 *create_CCBRPrettyFormatter_5_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter *outer$);

@interface CCBRPrettyFormatter_6 : NSObject < CCBEventHandler > {
 @public
  CCBRPrettyFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRPrettyFormatter:(CCBRPrettyFormatter *)outer$;

- (void)receiveWithCCBEvent:(CCBTestStepFinished *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRPrettyFormatter_6)

__attribute__((unused)) static void CCBRPrettyFormatter_6_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter_6 *self, CCBRPrettyFormatter *outer$);

__attribute__((unused)) static CCBRPrettyFormatter_6 *new_CCBRPrettyFormatter_6_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRPrettyFormatter_6 *create_CCBRPrettyFormatter_6_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter *outer$);

@interface CCBRPrettyFormatter_7 : NSObject < CCBEventHandler > {
 @public
  CCBRPrettyFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRPrettyFormatter:(CCBRPrettyFormatter *)outer$;

- (void)receiveWithCCBEvent:(CCBWriteEvent *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRPrettyFormatter_7)

__attribute__((unused)) static void CCBRPrettyFormatter_7_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter_7 *self, CCBRPrettyFormatter *outer$);

__attribute__((unused)) static CCBRPrettyFormatter_7 *new_CCBRPrettyFormatter_7_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRPrettyFormatter_7 *create_CCBRPrettyFormatter_7_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter *outer$);

@interface CCBRPrettyFormatter_8 : NSObject < CCBEventHandler > {
 @public
  CCBRPrettyFormatter *this$0_;
}

- (instancetype __nonnull)initWithCCBRPrettyFormatter:(CCBRPrettyFormatter *)outer$;

- (void)receiveWithCCBEvent:(CCBTestRunFinished *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRPrettyFormatter_8)

__attribute__((unused)) static void CCBRPrettyFormatter_8_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter_8 *self, CCBRPrettyFormatter *outer$);

__attribute__((unused)) static CCBRPrettyFormatter_8 *new_CCBRPrettyFormatter_8_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRPrettyFormatter_8 *create_CCBRPrettyFormatter_8_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter *outer$);

@implementation CCBRPrettyFormatter

- (instancetype __nonnull)initWithJavaLangAppendable:(id<JavaLangAppendable>)outArg {
  CCBRPrettyFormatter_initWithJavaLangAppendable_(self, outArg);
  return self;
}

- (void)setEventPublisherWithCCBEventPublisher:(id<CCBEventPublisher>)publisher {
  [((id<CCBEventPublisher>) nil_chk(publisher)) registerHandlerForWithIOSClass:CCBTestSourceRead_class_() withCCBEventHandler:testSourceReadHandler_];
  [publisher registerHandlerForWithIOSClass:CCBTestCaseStarted_class_() withCCBEventHandler:caseStartedHandler_];
  [publisher registerHandlerForWithIOSClass:CCBTestStepStarted_class_() withCCBEventHandler:stepStartedHandler_];
  [publisher registerHandlerForWithIOSClass:CCBTestStepFinished_class_() withCCBEventHandler:stepFinishedHandler_];
  [publisher registerHandlerForWithIOSClass:CCBWriteEvent_class_() withCCBEventHandler:writeEventhandler_];
  [publisher registerHandlerForWithIOSClass:CCBTestRunFinished_class_() withCCBEventHandler:runFinishedHandler_];
}

- (void)setMonochromeWithBoolean:(jboolean)monochrome {
  if (monochrome) {
    JreStrongAssignAndConsume(&formats_, new_CCBRMonochromeFormats_init());
  }
  else {
    JreStrongAssignAndConsume(&formats_, new_CCBRAnsiFormats_init());
  }
}

- (void)handleTestSourceReadWithCCBTestSourceRead:(CCBTestSourceRead *)event {
  CCBRPrettyFormatter_handleTestSourceReadWithCCBTestSourceRead_(self, event);
}

- (void)handleTestCaseStartedWithCCBTestCaseStarted:(CCBTestCaseStarted *)event {
  CCBRPrettyFormatter_handleTestCaseStartedWithCCBTestCaseStarted_(self, event);
}

- (void)handleTestStepStartedWithCCBTestStepStarted:(CCBTestStepStarted *)event {
  CCBRPrettyFormatter_handleTestStepStartedWithCCBTestStepStarted_(self, event);
}

- (void)handleTestStepFinishedWithCCBTestStepFinished:(CCBTestStepFinished *)event {
  CCBRPrettyFormatter_handleTestStepFinishedWithCCBTestStepFinished_(self, event);
}

- (void)handleWriteWithCCBWriteEvent:(CCBWriteEvent *)event {
  CCBRPrettyFormatter_handleWriteWithCCBWriteEvent_(self, event);
}

- (void)finishReport {
  CCBRPrettyFormatter_finishReport(self);
}

- (void)handleStartOfFeatureWithCCBTestCaseStarted:(CCBTestCaseStarted *)event {
  CCBRPrettyFormatter_handleStartOfFeatureWithCCBTestCaseStarted_(self, event);
}

- (void)handleScenarioOutlineWithCCBTestCaseStarted:(CCBTestCaseStarted *)event {
  CCBRPrettyFormatter_handleScenarioOutlineWithCCBTestCaseStarted_(self, event);
}

- (void)printScenarioOutlineWithGherkinAstScenarioOutline:(GherkinAstScenarioOutline *)scenarioOutline {
  CCBRPrettyFormatter_printScenarioOutlineWithGherkinAstScenarioOutline_(self, scenarioOutline);
}

- (void)printExamplesWithGherkinAstExamples:(GherkinAstExamples *)examples {
  CCBRPrettyFormatter_printExamplesWithGherkinAstExamples_(self, examples);
}

- (void)printStepWithCCBTestStep:(CCBTestStep *)testStep
                   withCCBResult:(CCBResult *)result {
  CCBRPrettyFormatter_printStepWithCCBTestStep_withCCBResult_(self, testStep, result);
}

- (NSString *)formatStepTextWithNSString:(NSString *)keyword
                            withNSString:(NSString *)stepText
                          withCCBRFormat:(id<CCBRFormat>)textFormat
                          withCCBRFormat:(id<CCBRFormat>)argFormat
                        withJavaUtilList:(id<JavaUtilList>)arguments {
  jint beginIndex = 0;
  JavaLangStringBuilder *result = create_JavaLangStringBuilder_initWithNSString_([((id<CCBRFormat>) nil_chk(textFormat)) textWithNSString:keyword]);
  for (CCBRArgument * __strong argument in nil_chk(arguments)) {
    if ([((CCBRArgument *) nil_chk(argument)) getOffset] != nil) {
      jint argumentOffset = [((JavaLangInteger *) nil_chk([argument getOffset])) intValue];
      if (argumentOffset < beginIndex) {
        continue;
      }
      NSString *text = [((NSString *) nil_chk(stepText)) java_substring:beginIndex endIndex:argumentOffset];
      [result appendWithNSString:[textFormat textWithNSString:text]];
    }
    if ([argument getVal] != nil) {
      [result appendWithNSString:[((id<CCBRFormat>) nil_chk(argFormat)) textWithNSString:[argument getVal]]];
      beginIndex = [((JavaLangInteger *) nil_chk([argument getOffset])) intValue] + [((NSString *) nil_chk([argument getVal])) java_length];
    }
  }
  if (beginIndex != [((NSString *) nil_chk(stepText)) java_length]) {
    NSString *text = [stepText java_substring:beginIndex endIndex:[stepText java_length]];
    [result appendWithNSString:[textFormat textWithNSString:text]];
  }
  return [result description];
}

- (NSString *)getScenarioDefinitionTextWithGherkinAstScenarioDefinition:(GherkinAstScenarioDefinition *)definition {
  return CCBRPrettyFormatter_getScenarioDefinitionTextWithGherkinAstScenarioDefinition_(self, definition);
}

- (NSString *)getLocationTextWithNSString:(NSString *)file
                                  withInt:(jint)line {
  return CCBRPrettyFormatter_getLocationTextWithNSString_withInt_(self, file, line);
}

- (NSString *)getLocationTextWithNSString:(NSString *)location {
  return CCBRPrettyFormatter_getLocationTextWithNSString_(self, location);
}

- (JavaLangStringBuffer *)stepTextWithCCBTestStep:(CCBTestStep *)testStep {
  return CCBRPrettyFormatter_stepTextWithCCBTestStep_(self, testStep);
}

- (NSString *)getStepKeywordWithCCBTestStep:(CCBTestStep *)testStep {
  return CCBRPrettyFormatter_getStepKeywordWithCCBTestStep_(self, testStep);
}

- (jboolean)isFirstStepAfterBackgroundWithCCBTestStep:(CCBTestStep *)testStep {
  return CCBRPrettyFormatter_isFirstStepAfterBackgroundWithCCBTestStep_(self, testStep);
}

- (jboolean)isBackgroundStepWithCCBTestStep:(CCBTestStep *)testStep {
  return CCBRPrettyFormatter_isBackgroundStepWithCCBTestStep_(self, testStep);
}

- (void)printFeatureWithNSString:(NSString *)path {
  CCBRPrettyFormatter_printFeatureWithNSString_(self, path);
}

- (void)printTagsWithJavaUtilList:(id<JavaUtilList>)tags {
  CCBRPrettyFormatter_printTagsWithJavaUtilList_(self, tags);
}

- (void)printTagsWithJavaUtilList:(id<JavaUtilList>)tags
                     withNSString:(NSString *)indent {
  CCBRPrettyFormatter_printTagsWithJavaUtilList_withNSString_(self, tags, indent);
}

- (void)printPickleTagsWithJavaUtilList:(id<JavaUtilList>)tags
                           withNSString:(NSString *)indent {
  CCBRPrettyFormatter_printPickleTagsWithJavaUtilList_withNSString_(self, tags, indent);
}

- (void)printDescriptionWithNSString:(NSString *)description_ {
  CCBRPrettyFormatter_printDescriptionWithNSString_(self, description_);
}

- (void)printBackgroundWithCCBTestCase:(CCBTestCase *)testCase {
  CCBRPrettyFormatter_printBackgroundWithCCBTestCase_(self, testCase);
}

- (void)printScenarioDefinitionWithCCBTestCase:(CCBTestCase *)testCase {
  CCBRPrettyFormatter_printScenarioDefinitionWithCCBTestCase_(self, testCase);
}

- (void)printErrorWithCCBResult:(CCBResult *)result {
  CCBRPrettyFormatter_printErrorWithCCBResult_(self, result);
}

- (void)calculateLocationIndentationWithNSString:(NSString *)definitionText
                                withJavaUtilList:(id<JavaUtilList>)testSteps {
  CCBRPrettyFormatter_calculateLocationIndentationWithNSString_withJavaUtilList_(self, definitionText, testSteps);
}

- (void)calculateLocationIndentationWithNSString:(NSString *)definitionText
                                withJavaUtilList:(id<JavaUtilList>)testSteps
                                     withBoolean:(jboolean)useBackgroundSteps {
  CCBRPrettyFormatter_calculateLocationIndentationWithNSString_withJavaUtilList_withBoolean_(self, definitionText, testSteps, useBackgroundSteps);
}

- (NSString *)createPaddingToLocationWithNSString:(NSString *)indent
                                     withNSString:(NSString *)text {
  return CCBRPrettyFormatter_createPaddingToLocationWithNSString_withNSString_(self, indent, text);
}

- (void)dealloc {
  RELEASE_(testSources_);
  RELEASE_(out_);
  RELEASE_(formats_);
  RELEASE_(currentFeatureFile_);
  RELEASE_(currentTestCase_);
  RELEASE_(currentScenarioOutline_);
  RELEASE_(currentExamples_);
  RELEASE_(tagNameMapper_);
  RELEASE_(pickleTagNameMapper_);
  RELEASE_(testSourceReadHandler_);
  RELEASE_(caseStartedHandler_);
  RELEASE_(stepStartedHandler_);
  RELEASE_(stepFinishedHandler_);
  RELEASE_(writeEventhandler_);
  RELEASE_(runFinishedHandler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 22, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 23, 24, -1, 25, -1, -1 },
    { NULL, "LNSString;", 0x2, 26, 27, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 28, 29, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 28, 30, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuffer;", 0x2, 31, 32, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 33, 32, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 34, 32, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 35, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 36, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 37, 38, -1, 39, -1, -1 },
    { NULL, "V", 0x2, 37, 40, -1, 41, -1, -1 },
    { NULL, "V", 0x2, 42, 40, -1, 43, -1, -1 },
    { NULL, "V", 0x2, 44, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 45, 46, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 47, 46, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 48, 49, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 50, 51, -1, 52, -1, -1 },
    { NULL, "V", 0x2, 50, 53, -1, 54, -1, -1 },
    { NULL, "LNSString;", 0x2, 55, 56, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangAppendable:);
  methods[1].selector = @selector(setEventPublisherWithCCBEventPublisher:);
  methods[2].selector = @selector(setMonochromeWithBoolean:);
  methods[3].selector = @selector(handleTestSourceReadWithCCBTestSourceRead:);
  methods[4].selector = @selector(handleTestCaseStartedWithCCBTestCaseStarted:);
  methods[5].selector = @selector(handleTestStepStartedWithCCBTestStepStarted:);
  methods[6].selector = @selector(handleTestStepFinishedWithCCBTestStepFinished:);
  methods[7].selector = @selector(handleWriteWithCCBWriteEvent:);
  methods[8].selector = @selector(finishReport);
  methods[9].selector = @selector(handleStartOfFeatureWithCCBTestCaseStarted:);
  methods[10].selector = @selector(handleScenarioOutlineWithCCBTestCaseStarted:);
  methods[11].selector = @selector(printScenarioOutlineWithGherkinAstScenarioOutline:);
  methods[12].selector = @selector(printExamplesWithGherkinAstExamples:);
  methods[13].selector = @selector(printStepWithCCBTestStep:withCCBResult:);
  methods[14].selector = @selector(formatStepTextWithNSString:withNSString:withCCBRFormat:withCCBRFormat:withJavaUtilList:);
  methods[15].selector = @selector(getScenarioDefinitionTextWithGherkinAstScenarioDefinition:);
  methods[16].selector = @selector(getLocationTextWithNSString:withInt:);
  methods[17].selector = @selector(getLocationTextWithNSString:);
  methods[18].selector = @selector(stepTextWithCCBTestStep:);
  methods[19].selector = @selector(getStepKeywordWithCCBTestStep:);
  methods[20].selector = @selector(isFirstStepAfterBackgroundWithCCBTestStep:);
  methods[21].selector = @selector(isBackgroundStepWithCCBTestStep:);
  methods[22].selector = @selector(printFeatureWithNSString:);
  methods[23].selector = @selector(printTagsWithJavaUtilList:);
  methods[24].selector = @selector(printTagsWithJavaUtilList:withNSString:);
  methods[25].selector = @selector(printPickleTagsWithJavaUtilList:withNSString:);
  methods[26].selector = @selector(printDescriptionWithNSString:);
  methods[27].selector = @selector(printBackgroundWithCCBTestCase:);
  methods[28].selector = @selector(printScenarioDefinitionWithCCBTestCase:);
  methods[29].selector = @selector(printErrorWithCCBResult:);
  methods[30].selector = @selector(calculateLocationIndentationWithNSString:withJavaUtilList:);
  methods[31].selector = @selector(calculateLocationIndentationWithNSString:withJavaUtilList:withBoolean:);
  methods[32].selector = @selector(createPaddingToLocationWithNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SCENARIO_INDENT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 57, -1, -1 },
    { "STEP_INDENT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 58, -1, -1 },
    { "EXAMPLES_INDENT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 59, -1, -1 },
    { "testSources_", "LCCBRTestSourcesModel;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "out_", "LCCBNiceAppendable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "formats_", "LCCBRFormats;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentFeatureFile_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentTestCase_", "LCCBTestCase;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentScenarioOutline_", "LGherkinAstScenarioOutline;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentExamples_", "LGherkinAstExamples;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "locationIndentation_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tagNameMapper_", "LCucumberUtilMapper;", .constantValue.asLong = 0, 0x2, -1, -1, 60, -1 },
    { "pickleTagNameMapper_", "LCucumberUtilMapper;", .constantValue.asLong = 0, 0x2, -1, -1, 61, -1 },
    { "testSourceReadHandler_", "LCCBEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 62, -1 },
    { "caseStartedHandler_", "LCCBEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 63, -1 },
    { "stepStartedHandler_", "LCCBEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 64, -1 },
    { "stepFinishedHandler_", "LCCBEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 65, -1 },
    { "writeEventhandler_", "LCCBEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 66, -1 },
    { "runFinishedHandler_", "LCCBEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 67, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangAppendable;", "setEventPublisher", "LCCBEventPublisher;", "setMonochrome", "Z", "handleTestSourceRead", "LCCBTestSourceRead;", "handleTestCaseStarted", "LCCBTestCaseStarted;", "handleTestStepStarted", "LCCBTestStepStarted;", "handleTestStepFinished", "LCCBTestStepFinished;", "handleWrite", "LCCBWriteEvent;", "handleStartOfFeature", "handleScenarioOutline", "printScenarioOutline", "LGherkinAstScenarioOutline;", "printExamples", "LGherkinAstExamples;", "printStep", "LCCBTestStep;LCCBResult;", "formatStepText", "LNSString;LNSString;LCCBRFormat;LCCBRFormat;LJavaUtilList;", "(Ljava/lang/String;Ljava/lang/String;Lcucumber/runtime/formatter/Format;Lcucumber/runtime/formatter/Format;Ljava/util/List<Lcucumber/runtime/Argument;>;)Ljava/lang/String;", "getScenarioDefinitionText", "LGherkinAstScenarioDefinition;", "getLocationText", "LNSString;I", "LNSString;", "stepText", "LCCBTestStep;", "getStepKeyword", "isFirstStepAfterBackground", "isBackgroundStep", "printFeature", "printTags", "LJavaUtilList;", "(Ljava/util/List<Lgherkin/ast/Tag;>;)V", "LJavaUtilList;LNSString;", "(Ljava/util/List<Lgherkin/ast/Tag;>;Ljava/lang/String;)V", "printPickleTags", "(Ljava/util/List<Lgherkin/pickles/PickleTag;>;Ljava/lang/String;)V", "printDescription", "printBackground", "LCCBTestCase;", "printScenarioDefinition", "printError", "LCCBResult;", "calculateLocationIndentation", "LNSString;LJavaUtilList;", "(Ljava/lang/String;Ljava/util/List<Lcucumber/api/TestStep;>;)V", "LNSString;LJavaUtilList;Z", "(Ljava/lang/String;Ljava/util/List<Lcucumber/api/TestStep;>;Z)V", "createPaddingToLocation", "LNSString;LNSString;", &CCBRPrettyFormatter_SCENARIO_INDENT, &CCBRPrettyFormatter_STEP_INDENT, &CCBRPrettyFormatter_EXAMPLES_INDENT, "Lcucumber/util/Mapper<Lgherkin/ast/Tag;Ljava/lang/String;>;", "Lcucumber/util/Mapper<Lgherkin/pickles/PickleTag;Ljava/lang/String;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestSourceRead;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestCaseStarted;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestStepStarted;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestStepFinished;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/WriteEvent;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestRunFinished;>;" };
  static const J2ObjcClassInfo _CCBRPrettyFormatter = { "PrettyFormatter", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x10, 33, 19, -1, -1, -1, -1, -1 };
  return &_CCBRPrettyFormatter;
}

@end

void CCBRPrettyFormatter_initWithJavaLangAppendable_(CCBRPrettyFormatter *self, id<JavaLangAppendable> outArg) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->testSources_, new_CCBRTestSourcesModel_init());
  JreStrongAssignAndConsume(&self->tagNameMapper_, new_CCBRPrettyFormatter_1_init());
  JreStrongAssignAndConsume(&self->pickleTagNameMapper_, new_CCBRPrettyFormatter_2_init());
  JreStrongAssignAndConsume(&self->testSourceReadHandler_, new_CCBRPrettyFormatter_3_initWithCCBRPrettyFormatter_(self));
  JreStrongAssignAndConsume(&self->caseStartedHandler_, new_CCBRPrettyFormatter_4_initWithCCBRPrettyFormatter_(self));
  JreStrongAssignAndConsume(&self->stepStartedHandler_, new_CCBRPrettyFormatter_5_initWithCCBRPrettyFormatter_(self));
  JreStrongAssignAndConsume(&self->stepFinishedHandler_, new_CCBRPrettyFormatter_6_initWithCCBRPrettyFormatter_(self));
  JreStrongAssignAndConsume(&self->writeEventhandler_, new_CCBRPrettyFormatter_7_initWithCCBRPrettyFormatter_(self));
  JreStrongAssignAndConsume(&self->runFinishedHandler_, new_CCBRPrettyFormatter_8_initWithCCBRPrettyFormatter_(self));
  JreStrongAssignAndConsume(&self->out_, new_CCBNiceAppendable_initWithJavaLangAppendable_(outArg));
  JreStrongAssignAndConsume(&self->formats_, new_CCBRAnsiFormats_init());
}

CCBRPrettyFormatter *new_CCBRPrettyFormatter_initWithJavaLangAppendable_(id<JavaLangAppendable> outArg) {
  J2OBJC_NEW_IMPL(CCBRPrettyFormatter, initWithJavaLangAppendable_, outArg)
}

CCBRPrettyFormatter *create_CCBRPrettyFormatter_initWithJavaLangAppendable_(id<JavaLangAppendable> outArg) {
  J2OBJC_CREATE_IMPL(CCBRPrettyFormatter, initWithJavaLangAppendable_, outArg)
}

void CCBRPrettyFormatter_handleTestSourceReadWithCCBTestSourceRead_(CCBRPrettyFormatter *self, CCBTestSourceRead *event) {
  [((CCBRTestSourcesModel *) nil_chk(self->testSources_)) addTestSourceReadEventWithNSString:((CCBTestSourceRead *) nil_chk(event))->uri_ withCCBTestSourceRead:event];
}

void CCBRPrettyFormatter_handleTestCaseStartedWithCCBTestCaseStarted_(CCBRPrettyFormatter *self, CCBTestCaseStarted *event) {
  CCBRPrettyFormatter_handleStartOfFeatureWithCCBTestCaseStarted_(self, event);
  CCBRPrettyFormatter_handleScenarioOutlineWithCCBTestCaseStarted_(self, event);
  if ([((CCBRTestSourcesModel *) nil_chk(self->testSources_)) hasBackgroundWithNSString:self->currentFeatureFile_ withInt:[((CCBTestCase *) nil_chk(((CCBTestCaseStarted *) nil_chk(event))->testCase_)) getLine]]) {
    CCBRPrettyFormatter_printBackgroundWithCCBTestCase_(self, event->testCase_);
    JreStrongAssign(&self->currentTestCase_, event->testCase_);
  }
  else {
    CCBRPrettyFormatter_printScenarioDefinitionWithCCBTestCase_(self, event->testCase_);
  }
}

void CCBRPrettyFormatter_handleTestStepStartedWithCCBTestStepStarted_(CCBRPrettyFormatter *self, CCBTestStepStarted *event) {
  if (![((CCBTestStep *) nil_chk(((CCBTestStepStarted *) nil_chk(event))->testStep_)) isHook]) {
    if (CCBRPrettyFormatter_isFirstStepAfterBackgroundWithCCBTestStep_(self, event->testStep_)) {
      CCBRPrettyFormatter_printScenarioDefinitionWithCCBTestCase_(self, self->currentTestCase_);
      JreStrongAssign(&self->currentTestCase_, nil);
    }
  }
}

void CCBRPrettyFormatter_handleTestStepFinishedWithCCBTestStepFinished_(CCBRPrettyFormatter *self, CCBTestStepFinished *event) {
  CCBTestStep *testStep = ((CCBTestStepFinished *) nil_chk(event))->testStep_;
  if (![((CCBTestStep *) nil_chk(testStep)) isHook]) {
    CCBRPrettyFormatter_printStepWithCCBTestStep_withCCBResult_(self, testStep, event->result_);
  }
  CCBRPrettyFormatter_printErrorWithCCBResult_(self, event->result_);
}

void CCBRPrettyFormatter_handleWriteWithCCBWriteEvent_(CCBRPrettyFormatter *self, CCBWriteEvent *event) {
  [((CCBNiceAppendable *) nil_chk(self->out_)) printlnWithJavaLangCharSequence:((CCBWriteEvent *) nil_chk(event))->text_];
}

void CCBRPrettyFormatter_finishReport(CCBRPrettyFormatter *self) {
  [((CCBNiceAppendable *) nil_chk(self->out_)) close];
}

void CCBRPrettyFormatter_handleStartOfFeatureWithCCBTestCaseStarted_(CCBRPrettyFormatter *self, CCBTestCaseStarted *event) {
  if (self->currentFeatureFile_ == nil || ![self->currentFeatureFile_ isEqual:[((CCBTestCase *) nil_chk(((CCBTestCaseStarted *) nil_chk(event))->testCase_)) getUri]]) {
    if (self->currentFeatureFile_ != nil) {
      [((CCBNiceAppendable *) nil_chk(self->out_)) println];
    }
    JreStrongAssign(&self->currentFeatureFile_, [((CCBTestCase *) nil_chk(((CCBTestCaseStarted *) nil_chk(event))->testCase_)) getUri]);
    CCBRPrettyFormatter_printFeatureWithNSString_(self, self->currentFeatureFile_);
  }
}

void CCBRPrettyFormatter_handleScenarioOutlineWithCCBTestCaseStarted_(CCBRPrettyFormatter *self, CCBTestCaseStarted *event) {
  CCBRTestSourcesModel_AstNode *astNode = [((CCBRTestSourcesModel *) nil_chk(self->testSources_)) getAstNodeWithNSString:self->currentFeatureFile_ withInt:[((CCBTestCase *) nil_chk(((CCBTestCaseStarted *) nil_chk(event))->testCase_)) getLine]];
  if (CCBRTestSourcesModel_isScenarioOutlineScenarioWithCCBRTestSourcesModel_AstNode_(astNode)) {
    GherkinAstScenarioOutline *scenarioOutline = (GherkinAstScenarioOutline *) cast_chk(CCBRTestSourcesModel_getScenarioDefinitionWithCCBRTestSourcesModel_AstNode_(astNode), [GherkinAstScenarioOutline class]);
    if (self->currentScenarioOutline_ == nil || ![self->currentScenarioOutline_ isEqual:scenarioOutline]) {
      JreStrongAssign(&self->currentScenarioOutline_, scenarioOutline);
      CCBRPrettyFormatter_printScenarioOutlineWithGherkinAstScenarioOutline_(self, self->currentScenarioOutline_);
    }
    if (self->currentExamples_ == nil || ![self->currentExamples_ isEqual:((CCBRTestSourcesModel_AstNode *) nil_chk(((CCBRTestSourcesModel_AstNode *) nil_chk(astNode))->parent_))->node_]) {
      JreStrongAssign(&self->currentExamples_, (GherkinAstExamples *) cast_chk(((CCBRTestSourcesModel_AstNode *) nil_chk(((CCBRTestSourcesModel_AstNode *) nil_chk(astNode))->parent_))->node_, [GherkinAstExamples class]));
      CCBRPrettyFormatter_printExamplesWithGherkinAstExamples_(self, self->currentExamples_);
    }
  }
  else {
    JreStrongAssign(&self->currentScenarioOutline_, nil);
    JreStrongAssign(&self->currentExamples_, nil);
  }
}

void CCBRPrettyFormatter_printScenarioOutlineWithGherkinAstScenarioOutline_(CCBRPrettyFormatter *self, GherkinAstScenarioOutline *scenarioOutline) {
  [((CCBNiceAppendable *) nil_chk(self->out_)) println];
  CCBRPrettyFormatter_printTagsWithJavaUtilList_withNSString_(self, [((GherkinAstScenarioOutline *) nil_chk(scenarioOutline)) getTags], CCBRPrettyFormatter_SCENARIO_INDENT);
  [self->out_ printlnWithJavaLangCharSequence:JreStrcat("$$C$", CCBRPrettyFormatter_SCENARIO_INDENT, CCBRPrettyFormatter_getScenarioDefinitionTextWithGherkinAstScenarioDefinition_(self, scenarioOutline), ' ', CCBRPrettyFormatter_getLocationTextWithNSString_withInt_(self, self->currentFeatureFile_, [((GherkinAstLocation *) nil_chk([scenarioOutline getLocation])) getLine]))];
  CCBRPrettyFormatter_printDescriptionWithNSString_(self, [scenarioOutline getDescription]);
  for (GherkinAstStep * __strong step in nil_chk([scenarioOutline getSteps])) {
    [self->out_ printlnWithJavaLangCharSequence:JreStrcat("$$", CCBRPrettyFormatter_STEP_INDENT, [((id<CCBRFormat>) nil_chk([((id<CCBRFormats>) nil_chk(self->formats_)) getWithNSString:@"skipped"])) textWithNSString:JreStrcat("$$", [((GherkinAstStep *) nil_chk(step)) getKeyword], [step getText])])];
  }
}

void CCBRPrettyFormatter_printExamplesWithGherkinAstExamples_(CCBRPrettyFormatter *self, GherkinAstExamples *examples) {
  [((CCBNiceAppendable *) nil_chk(self->out_)) println];
  CCBRPrettyFormatter_printTagsWithJavaUtilList_withNSString_(self, [((GherkinAstExamples *) nil_chk(examples)) getTags], CCBRPrettyFormatter_EXAMPLES_INDENT);
  [self->out_ printlnWithJavaLangCharSequence:JreStrcat("$$$$", CCBRPrettyFormatter_EXAMPLES_INDENT, [examples getKeyword], @": ", [examples getName])];
  CCBRPrettyFormatter_printDescriptionWithNSString_(self, [examples getDescription]);
}

void CCBRPrettyFormatter_printStepWithCCBTestStep_withCCBResult_(CCBRPrettyFormatter *self, CCBTestStep *testStep, CCBResult *result) {
  NSString *keyword = CCBRPrettyFormatter_getStepKeywordWithCCBTestStep_(self, testStep);
  NSString *stepText = [((CCBTestStep *) nil_chk(testStep)) getStepText];
  NSString *locationPadding = CCBRPrettyFormatter_createPaddingToLocationWithNSString_withNSString_(self, CCBRPrettyFormatter_STEP_INDENT, JreStrcat("$$", keyword, stepText));
  NSString *formattedStepText = [self formatStepTextWithNSString:keyword withNSString:stepText withCCBRFormat:[((id<CCBRFormats>) nil_chk(self->formats_)) getWithNSString:[((CCBResult_Type *) nil_chk([((CCBResult *) nil_chk(result)) getStatus])) lowerCaseName]] withCCBRFormat:[((id<CCBRFormats>) nil_chk(self->formats_)) getWithNSString:JreStrcat("$$", [((CCBResult_Type *) nil_chk([result getStatus])) lowerCaseName], @"_arg")] withJavaUtilList:[testStep getDefinitionArgument]];
  [((CCBNiceAppendable *) nil_chk(self->out_)) printlnWithJavaLangCharSequence:JreStrcat("$$$$", CCBRPrettyFormatter_STEP_INDENT, formattedStepText, locationPadding, CCBRPrettyFormatter_getLocationTextWithNSString_(self, [testStep getCodeLocation]))];
}

NSString *CCBRPrettyFormatter_getScenarioDefinitionTextWithGherkinAstScenarioDefinition_(CCBRPrettyFormatter *self, GherkinAstScenarioDefinition *definition) {
  return JreStrcat("$$$", [((GherkinAstScenarioDefinition *) nil_chk(definition)) getKeyword], @": ", [definition getName]);
}

NSString *CCBRPrettyFormatter_getLocationTextWithNSString_withInt_(CCBRPrettyFormatter *self, NSString *file, jint line) {
  return CCBRPrettyFormatter_getLocationTextWithNSString_(self, JreStrcat("$CI", file, ':', line));
}

NSString *CCBRPrettyFormatter_getLocationTextWithNSString_(CCBRPrettyFormatter *self, NSString *location) {
  return [((id<CCBRFormat>) nil_chk([((id<CCBRFormats>) nil_chk(self->formats_)) getWithNSString:@"comment"])) textWithNSString:JreStrcat("$$", @"# ", location)];
}

JavaLangStringBuffer *CCBRPrettyFormatter_stepTextWithCCBTestStep_(CCBRPrettyFormatter *self, CCBTestStep *testStep) {
  NSString *keyword = CCBRPrettyFormatter_getStepKeywordWithCCBTestStep_(self, testStep);
  return create_JavaLangStringBuffer_initWithNSString_(JreStrcat("$$", keyword, [((CCBTestStep *) nil_chk(testStep)) getStepText]));
}

NSString *CCBRPrettyFormatter_getStepKeywordWithCCBTestStep_(CCBRPrettyFormatter *self, CCBTestStep *testStep) {
  CCBRTestSourcesModel_AstNode *astNode = [((CCBRTestSourcesModel *) nil_chk(self->testSources_)) getAstNodeWithNSString:self->currentFeatureFile_ withInt:[((CCBTestStep *) nil_chk(testStep)) getStepLine]];
  if (astNode != nil) {
    GherkinAstStep *step = (GherkinAstStep *) cast_chk(astNode->node_, [GherkinAstStep class]);
    return [((GherkinAstStep *) nil_chk(step)) getKeyword];
  }
  else {
    return @"";
  }
}

jboolean CCBRPrettyFormatter_isFirstStepAfterBackgroundWithCCBTestStep_(CCBRPrettyFormatter *self, CCBTestStep *testStep) {
  return self->currentTestCase_ != nil && !CCBRPrettyFormatter_isBackgroundStepWithCCBTestStep_(self, testStep);
}

jboolean CCBRPrettyFormatter_isBackgroundStepWithCCBTestStep_(CCBRPrettyFormatter *self, CCBTestStep *testStep) {
  CCBRTestSourcesModel_AstNode *astNode = [((CCBRTestSourcesModel *) nil_chk(self->testSources_)) getAstNodeWithNSString:self->currentFeatureFile_ withInt:[((CCBTestStep *) nil_chk(testStep)) getStepLine]];
  if (astNode != nil) {
    return CCBRTestSourcesModel_isBackgroundStepWithCCBRTestSourcesModel_AstNode_(astNode);
  }
  return false;
}

void CCBRPrettyFormatter_printFeatureWithNSString_(CCBRPrettyFormatter *self, NSString *path) {
  GherkinAstFeature *feature = [((CCBRTestSourcesModel *) nil_chk(self->testSources_)) getFeatureWithNSString:path];
  CCBRPrettyFormatter_printTagsWithJavaUtilList_(self, [((GherkinAstFeature *) nil_chk(feature)) getTags]);
  [((CCBNiceAppendable *) nil_chk(self->out_)) printlnWithJavaLangCharSequence:JreStrcat("$$$", [feature getKeyword], @": ", [feature getName])];
  CCBRPrettyFormatter_printDescriptionWithNSString_(self, [feature getDescription]);
}

void CCBRPrettyFormatter_printTagsWithJavaUtilList_(CCBRPrettyFormatter *self, id<JavaUtilList> tags) {
  CCBRPrettyFormatter_printTagsWithJavaUtilList_withNSString_(self, tags, @"");
}

void CCBRPrettyFormatter_printTagsWithJavaUtilList_withNSString_(CCBRPrettyFormatter *self, id<JavaUtilList> tags, NSString *indent) {
  if (![((id<JavaUtilList>) nil_chk(tags)) isEmpty]) {
    [((CCBNiceAppendable *) nil_chk(self->out_)) printlnWithJavaLangCharSequence:JreStrcat("$$", indent, CucumberUtilFixJava_joinWithJavaUtilList_withNSString_(CucumberUtilFixJava_mapWithJavaUtilList_withCucumberUtilMapper_(tags, self->tagNameMapper_), @" "))];
  }
}

void CCBRPrettyFormatter_printPickleTagsWithJavaUtilList_withNSString_(CCBRPrettyFormatter *self, id<JavaUtilList> tags, NSString *indent) {
  if (![((id<JavaUtilList>) nil_chk(tags)) isEmpty]) {
    [((CCBNiceAppendable *) nil_chk(self->out_)) printlnWithJavaLangCharSequence:JreStrcat("$$", indent, CucumberUtilFixJava_joinWithJavaUtilList_withNSString_(CucumberUtilFixJava_mapWithJavaUtilList_withCucumberUtilMapper_(tags, self->pickleTagNameMapper_), @" "))];
  }
}

void CCBRPrettyFormatter_printDescriptionWithNSString_(CCBRPrettyFormatter *self, NSString *description_) {
  if (description_ != nil) {
    [((CCBNiceAppendable *) nil_chk(self->out_)) printlnWithJavaLangCharSequence:description_];
  }
}

void CCBRPrettyFormatter_printBackgroundWithCCBTestCase_(CCBRPrettyFormatter *self, CCBTestCase *testCase) {
  CCBRTestSourcesModel_AstNode *astNode = [((CCBRTestSourcesModel *) nil_chk(self->testSources_)) getAstNodeWithNSString:self->currentFeatureFile_ withInt:[((CCBTestCase *) nil_chk(testCase)) getLine]];
  if (astNode != nil) {
    GherkinAstBackground *background = CCBRTestSourcesModel_getBackgroundForTestCaseWithCCBRTestSourcesModel_AstNode_(astNode);
    NSString *backgroundText = CCBRPrettyFormatter_getScenarioDefinitionTextWithGherkinAstScenarioDefinition_(self, background);
    jboolean useBackgroundSteps = true;
    CCBRPrettyFormatter_calculateLocationIndentationWithNSString_withJavaUtilList_withBoolean_(self, JreStrcat("$$", CCBRPrettyFormatter_SCENARIO_INDENT, backgroundText), [testCase getTestSteps], useBackgroundSteps);
    NSString *locationPadding = CCBRPrettyFormatter_createPaddingToLocationWithNSString_withNSString_(self, CCBRPrettyFormatter_SCENARIO_INDENT, backgroundText);
    [((CCBNiceAppendable *) nil_chk(self->out_)) println];
    [self->out_ printlnWithJavaLangCharSequence:JreStrcat("$$$$", CCBRPrettyFormatter_SCENARIO_INDENT, backgroundText, locationPadding, CCBRPrettyFormatter_getLocationTextWithNSString_withInt_(self, self->currentFeatureFile_, [((GherkinAstLocation *) nil_chk([((GherkinAstBackground *) nil_chk(background)) getLocation])) getLine]))];
    CCBRPrettyFormatter_printDescriptionWithNSString_(self, [background getDescription]);
  }
}

void CCBRPrettyFormatter_printScenarioDefinitionWithCCBTestCase_(CCBRPrettyFormatter *self, CCBTestCase *testCase) {
  GherkinAstScenarioDefinition *scenarioDefinition = [((CCBRTestSourcesModel *) nil_chk(self->testSources_)) getScenarioDefinitionWithNSString:self->currentFeatureFile_ withInt:[((CCBTestCase *) nil_chk(testCase)) getLine]];
  NSString *definitionText = JreStrcat("$$$", [((GherkinAstScenarioDefinition *) nil_chk(scenarioDefinition)) getKeyword], @": ", [testCase getName]);
  CCBRPrettyFormatter_calculateLocationIndentationWithNSString_withJavaUtilList_(self, JreStrcat("$$", CCBRPrettyFormatter_SCENARIO_INDENT, definitionText), [testCase getTestSteps]);
  NSString *locationPadding = CCBRPrettyFormatter_createPaddingToLocationWithNSString_withNSString_(self, CCBRPrettyFormatter_SCENARIO_INDENT, definitionText);
  [((CCBNiceAppendable *) nil_chk(self->out_)) println];
  CCBRPrettyFormatter_printPickleTagsWithJavaUtilList_withNSString_(self, [testCase getTags], CCBRPrettyFormatter_SCENARIO_INDENT);
  [self->out_ printlnWithJavaLangCharSequence:JreStrcat("$$$$", CCBRPrettyFormatter_SCENARIO_INDENT, definitionText, locationPadding, CCBRPrettyFormatter_getLocationTextWithNSString_withInt_(self, self->currentFeatureFile_, [testCase getLine]))];
  CCBRPrettyFormatter_printDescriptionWithNSString_(self, [scenarioDefinition getDescription]);
}

void CCBRPrettyFormatter_printErrorWithCCBResult_(CCBRPrettyFormatter *self, CCBResult *result) {
  if ([((CCBResult *) nil_chk(result)) getError] != nil) {
    [((CCBNiceAppendable *) nil_chk(self->out_)) printlnWithJavaLangCharSequence:JreStrcat("$$", @"      ", [((id<CCBRFormat>) nil_chk([((id<CCBRFormats>) nil_chk(self->formats_)) getWithNSString:[((CCBResult_Type *) nil_chk([result getStatus])) lowerCaseName]])) textWithNSString:[result getErrorMessage]])];
  }
}

void CCBRPrettyFormatter_calculateLocationIndentationWithNSString_withJavaUtilList_(CCBRPrettyFormatter *self, NSString *definitionText, id<JavaUtilList> testSteps) {
  jboolean useBackgroundSteps = false;
  CCBRPrettyFormatter_calculateLocationIndentationWithNSString_withJavaUtilList_withBoolean_(self, definitionText, testSteps, useBackgroundSteps);
}

void CCBRPrettyFormatter_calculateLocationIndentationWithNSString_withJavaUtilList_withBoolean_(CCBRPrettyFormatter *self, NSString *definitionText, id<JavaUtilList> testSteps, jboolean useBackgroundSteps) {
  jint maxTextLength = [((NSString *) nil_chk(definitionText)) java_length];
  for (CCBTestStep * __strong step in nil_chk(testSteps)) {
    if ([((CCBTestStep *) nil_chk(step)) isHook]) {
      continue;
    }
    if (CCBRPrettyFormatter_isBackgroundStepWithCCBTestStep_(self, step) == useBackgroundSteps) {
      JavaLangStringBuffer *stepText = CCBRPrettyFormatter_stepTextWithCCBTestStep_(self, step);
      maxTextLength = JavaLangMath_maxWithInt_withInt_(maxTextLength, [((NSString *) nil_chk(CCBRPrettyFormatter_STEP_INDENT)) java_length] + [((JavaLangStringBuffer *) nil_chk(stepText)) java_length]);
    }
  }
  self->locationIndentation_ = maxTextLength + 1;
}

NSString *CCBRPrettyFormatter_createPaddingToLocationWithNSString_withNSString_(CCBRPrettyFormatter *self, NSString *indent, NSString *text) {
  JavaLangStringBuffer *padding = create_JavaLangStringBuffer_init();
  for (jint i = [((NSString *) nil_chk(indent)) java_length] + [((NSString *) nil_chk(text)) java_length]; i < self->locationIndentation_; ++i) {
    [padding appendWithChar:' '];
  }
  return [padding description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRPrettyFormatter)

@implementation CCBRPrettyFormatter_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CCBRPrettyFormatter_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)mapWithId:(GherkinAstTag *)tag {
  return [((GherkinAstTag *) nil_chk(tag)) getName];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mapWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "map", "LGherkinAstTag;", "LCCBRPrettyFormatter;", "Ljava/lang/Object;Lcucumber/util/Mapper<Lgherkin/ast/Tag;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _CCBRPrettyFormatter_1 = { "", "cucumber.runtime.formatter", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, -1, 3, -1 };
  return &_CCBRPrettyFormatter_1;
}

@end

void CCBRPrettyFormatter_1_init(CCBRPrettyFormatter_1 *self) {
  NSObject_init(self);
}

CCBRPrettyFormatter_1 *new_CCBRPrettyFormatter_1_init() {
  J2OBJC_NEW_IMPL(CCBRPrettyFormatter_1, init)
}

CCBRPrettyFormatter_1 *create_CCBRPrettyFormatter_1_init() {
  J2OBJC_CREATE_IMPL(CCBRPrettyFormatter_1, init)
}

@implementation CCBRPrettyFormatter_2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CCBRPrettyFormatter_2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)mapWithId:(GherkinPicklesPickleTag *)pickleTag {
  return [((GherkinPicklesPickleTag *) nil_chk(pickleTag)) getName];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mapWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "map", "LGherkinPicklesPickleTag;", "LCCBRPrettyFormatter;", "Ljava/lang/Object;Lcucumber/util/Mapper<Lgherkin/pickles/PickleTag;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _CCBRPrettyFormatter_2 = { "", "cucumber.runtime.formatter", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, -1, 3, -1 };
  return &_CCBRPrettyFormatter_2;
}

@end

void CCBRPrettyFormatter_2_init(CCBRPrettyFormatter_2 *self) {
  NSObject_init(self);
}

CCBRPrettyFormatter_2 *new_CCBRPrettyFormatter_2_init() {
  J2OBJC_NEW_IMPL(CCBRPrettyFormatter_2, init)
}

CCBRPrettyFormatter_2 *create_CCBRPrettyFormatter_2_init() {
  J2OBJC_CREATE_IMPL(CCBRPrettyFormatter_2, init)
}

@implementation CCBRPrettyFormatter_3

- (instancetype __nonnull)initWithCCBRPrettyFormatter:(CCBRPrettyFormatter *)outer$ {
  CCBRPrettyFormatter_3_initWithCCBRPrettyFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCCBEvent:(CCBTestSourceRead *)event {
  CCBRPrettyFormatter_handleTestSourceReadWithCCBTestSourceRead_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRPrettyFormatter:);
  methods[1].selector = @selector(receiveWithCCBEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRPrettyFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCCBTestSourceRead;", "LCCBRPrettyFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestSourceRead;>;" };
  static const J2ObjcClassInfo _CCBRPrettyFormatter_3 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRPrettyFormatter_3;
}

@end

void CCBRPrettyFormatter_3_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter_3 *self, CCBRPrettyFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRPrettyFormatter_3 *new_CCBRPrettyFormatter_3_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRPrettyFormatter_3, initWithCCBRPrettyFormatter_, outer$)
}

CCBRPrettyFormatter_3 *create_CCBRPrettyFormatter_3_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRPrettyFormatter_3, initWithCCBRPrettyFormatter_, outer$)
}

@implementation CCBRPrettyFormatter_4

- (instancetype __nonnull)initWithCCBRPrettyFormatter:(CCBRPrettyFormatter *)outer$ {
  CCBRPrettyFormatter_4_initWithCCBRPrettyFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCCBEvent:(CCBTestCaseStarted *)event {
  CCBRPrettyFormatter_handleTestCaseStartedWithCCBTestCaseStarted_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRPrettyFormatter:);
  methods[1].selector = @selector(receiveWithCCBEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRPrettyFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCCBTestCaseStarted;", "LCCBRPrettyFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestCaseStarted;>;" };
  static const J2ObjcClassInfo _CCBRPrettyFormatter_4 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRPrettyFormatter_4;
}

@end

void CCBRPrettyFormatter_4_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter_4 *self, CCBRPrettyFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRPrettyFormatter_4 *new_CCBRPrettyFormatter_4_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRPrettyFormatter_4, initWithCCBRPrettyFormatter_, outer$)
}

CCBRPrettyFormatter_4 *create_CCBRPrettyFormatter_4_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRPrettyFormatter_4, initWithCCBRPrettyFormatter_, outer$)
}

@implementation CCBRPrettyFormatter_5

- (instancetype __nonnull)initWithCCBRPrettyFormatter:(CCBRPrettyFormatter *)outer$ {
  CCBRPrettyFormatter_5_initWithCCBRPrettyFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCCBEvent:(CCBTestStepStarted *)event {
  CCBRPrettyFormatter_handleTestStepStartedWithCCBTestStepStarted_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRPrettyFormatter:);
  methods[1].selector = @selector(receiveWithCCBEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRPrettyFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCCBTestStepStarted;", "LCCBRPrettyFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestStepStarted;>;" };
  static const J2ObjcClassInfo _CCBRPrettyFormatter_5 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRPrettyFormatter_5;
}

@end

void CCBRPrettyFormatter_5_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter_5 *self, CCBRPrettyFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRPrettyFormatter_5 *new_CCBRPrettyFormatter_5_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRPrettyFormatter_5, initWithCCBRPrettyFormatter_, outer$)
}

CCBRPrettyFormatter_5 *create_CCBRPrettyFormatter_5_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRPrettyFormatter_5, initWithCCBRPrettyFormatter_, outer$)
}

@implementation CCBRPrettyFormatter_6

- (instancetype __nonnull)initWithCCBRPrettyFormatter:(CCBRPrettyFormatter *)outer$ {
  CCBRPrettyFormatter_6_initWithCCBRPrettyFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCCBEvent:(CCBTestStepFinished *)event {
  CCBRPrettyFormatter_handleTestStepFinishedWithCCBTestStepFinished_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRPrettyFormatter:);
  methods[1].selector = @selector(receiveWithCCBEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRPrettyFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCCBTestStepFinished;", "LCCBRPrettyFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestStepFinished;>;" };
  static const J2ObjcClassInfo _CCBRPrettyFormatter_6 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRPrettyFormatter_6;
}

@end

void CCBRPrettyFormatter_6_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter_6 *self, CCBRPrettyFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRPrettyFormatter_6 *new_CCBRPrettyFormatter_6_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRPrettyFormatter_6, initWithCCBRPrettyFormatter_, outer$)
}

CCBRPrettyFormatter_6 *create_CCBRPrettyFormatter_6_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRPrettyFormatter_6, initWithCCBRPrettyFormatter_, outer$)
}

@implementation CCBRPrettyFormatter_7

- (instancetype __nonnull)initWithCCBRPrettyFormatter:(CCBRPrettyFormatter *)outer$ {
  CCBRPrettyFormatter_7_initWithCCBRPrettyFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCCBEvent:(CCBWriteEvent *)event {
  CCBRPrettyFormatter_handleWriteWithCCBWriteEvent_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRPrettyFormatter:);
  methods[1].selector = @selector(receiveWithCCBEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRPrettyFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCCBWriteEvent;", "LCCBRPrettyFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/WriteEvent;>;" };
  static const J2ObjcClassInfo _CCBRPrettyFormatter_7 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRPrettyFormatter_7;
}

@end

void CCBRPrettyFormatter_7_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter_7 *self, CCBRPrettyFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRPrettyFormatter_7 *new_CCBRPrettyFormatter_7_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRPrettyFormatter_7, initWithCCBRPrettyFormatter_, outer$)
}

CCBRPrettyFormatter_7 *create_CCBRPrettyFormatter_7_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRPrettyFormatter_7, initWithCCBRPrettyFormatter_, outer$)
}

@implementation CCBRPrettyFormatter_8

- (instancetype __nonnull)initWithCCBRPrettyFormatter:(CCBRPrettyFormatter *)outer$ {
  CCBRPrettyFormatter_8_initWithCCBRPrettyFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCCBEvent:(CCBTestRunFinished *)event {
  CCBRPrettyFormatter_finishReport(this$0_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRPrettyFormatter:);
  methods[1].selector = @selector(receiveWithCCBEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRPrettyFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCCBTestRunFinished;", "LCCBRPrettyFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestRunFinished;>;" };
  static const J2ObjcClassInfo _CCBRPrettyFormatter_8 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRPrettyFormatter_8;
}

@end

void CCBRPrettyFormatter_8_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter_8 *self, CCBRPrettyFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRPrettyFormatter_8 *new_CCBRPrettyFormatter_8_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter *outer$) {
  J2OBJC_NEW_IMPL(CCBRPrettyFormatter_8, initWithCCBRPrettyFormatter_, outer$)
}

CCBRPrettyFormatter_8 *create_CCBRPrettyFormatter_8_initWithCCBRPrettyFormatter_(CCBRPrettyFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CCBRPrettyFormatter_8, initWithCCBRPrettyFormatter_, outer$)
}
