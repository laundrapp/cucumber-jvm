//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/laundrapp_org/cucumber-jvm/core/src/main/java/cucumber/runtime/formatter/PrettyFormatter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "cucumber/api/Result.h"
#include "cucumber/api/TestCase.h"
#include "cucumber/api/TestStep.h"
#include "cucumber/api/event/EventHandler.h"
#include "cucumber/api/event/EventPublisher.h"
#include "cucumber/api/event/TestCaseStarted.h"
#include "cucumber/api/event/TestRunFinished.h"
#include "cucumber/api/event/TestSourceRead.h"
#include "cucumber/api/event/TestStepFinished.h"
#include "cucumber/api/event/TestStepStarted.h"
#include "cucumber/api/event/WriteEvent.h"
#include "cucumber/api/formatter/NiceAppendable.h"
#include "cucumber/runtime/Argument.h"
#include "cucumber/runtime/formatter/AnsiFormats.h"
#include "cucumber/runtime/formatter/Format.h"
#include "cucumber/runtime/formatter/Formats.h"
#include "cucumber/runtime/formatter/MonochromeFormats.h"
#include "cucumber/runtime/formatter/PrettyFormatter.h"
#include "cucumber/runtime/formatter/TestSourcesModel.h"
#include "cucumber/util/FixJava.h"
#include "cucumber/util/Mapper.h"
#include "gherkin/ast/Background.h"
#include "gherkin/ast/Examples.h"
#include "gherkin/ast/Feature.h"
#include "gherkin/ast/Location.h"
#include "gherkin/ast/Node.h"
#include "gherkin/ast/ScenarioDefinition.h"
#include "gherkin/ast/ScenarioOutline.h"
#include "gherkin/ast/Step.h"
#include "gherkin/ast/Tag.h"
#include "gherkin/pickles/PickleTag.h"
#include "java/lang/Appendable.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/util/List.h"

@interface CucumberRuntimeFormatterPrettyFormatter () {
 @public
  CucumberRuntimeFormatterTestSourcesModel *testSources_;
  CucumberApiFormatterNiceAppendable *out_;
  id<CucumberRuntimeFormatterFormats> formats_;
  NSString *currentFeatureFile_;
  CucumberApiTestCase *currentTestCase_;
  GherkinAstScenarioOutline *currentScenarioOutline_;
  GherkinAstExamples *currentExamples_;
  jint locationIndentation_;
  id<CucumberUtilMapper> tagNameMapper_;
  id<CucumberUtilMapper> pickleTagNameMapper_;
  id<CucumberApiEventEventHandler> testSourceReadHandler_;
  id<CucumberApiEventEventHandler> caseStartedHandler_;
  id<CucumberApiEventEventHandler> stepStartedHandler_;
  id<CucumberApiEventEventHandler> stepFinishedHandler_;
  id<CucumberApiEventEventHandler> writeEventhandler_;
  id<CucumberApiEventEventHandler> runFinishedHandler_;
}

- (void)handleTestSourceReadWithCucumberApiEventTestSourceRead:(CucumberApiEventTestSourceRead *)event;

- (void)handleTestCaseStartedWithCucumberApiEventTestCaseStarted:(CucumberApiEventTestCaseStarted *)event;

- (void)handleTestStepStartedWithCucumberApiEventTestStepStarted:(CucumberApiEventTestStepStarted *)event;

- (void)handleTestStepFinishedWithCucumberApiEventTestStepFinished:(CucumberApiEventTestStepFinished *)event;

- (void)handleWriteWithCucumberApiEventWriteEvent:(CucumberApiEventWriteEvent *)event;

- (void)finishReport;

- (void)handleStartOfFeatureWithCucumberApiEventTestCaseStarted:(CucumberApiEventTestCaseStarted *)event;

- (void)handleScenarioOutlineWithCucumberApiEventTestCaseStarted:(CucumberApiEventTestCaseStarted *)event;

- (void)printScenarioOutlineWithGherkinAstScenarioOutline:(GherkinAstScenarioOutline *)scenarioOutline;

- (void)printExamplesWithGherkinAstExamples:(GherkinAstExamples *)examples;

- (void)printStepWithCucumberApiTestStep:(CucumberApiTestStep *)testStep
                   withCucumberApiResult:(CucumberApiResult *)result;

- (NSString *)getScenarioDefinitionTextWithGherkinAstScenarioDefinition:(GherkinAstScenarioDefinition *)definition;

- (NSString *)getLocationTextWithNSString:(NSString *)file
                                  withInt:(jint)line;

- (NSString *)getLocationTextWithNSString:(NSString *)location;

- (JavaLangStringBuffer *)stepTextWithCucumberApiTestStep:(CucumberApiTestStep *)testStep;

- (NSString *)getStepKeywordWithCucumberApiTestStep:(CucumberApiTestStep *)testStep;

- (jboolean)isFirstStepAfterBackgroundWithCucumberApiTestStep:(CucumberApiTestStep *)testStep;

- (jboolean)isBackgroundStepWithCucumberApiTestStep:(CucumberApiTestStep *)testStep;

- (void)printFeatureWithNSString:(NSString *)path;

- (void)printTagsWithJavaUtilList:(id<JavaUtilList>)tags;

- (void)printTagsWithJavaUtilList:(id<JavaUtilList>)tags
                     withNSString:(NSString *)indent;

- (void)printPickleTagsWithJavaUtilList:(id<JavaUtilList>)tags
                           withNSString:(NSString *)indent;

- (void)printDescriptionWithNSString:(NSString *)description_;

- (void)printBackgroundWithCucumberApiTestCase:(CucumberApiTestCase *)testCase;

- (void)printScenarioDefinitionWithCucumberApiTestCase:(CucumberApiTestCase *)testCase;

- (void)printErrorWithCucumberApiResult:(CucumberApiResult *)result;

- (void)calculateLocationIndentationWithNSString:(NSString *)definitionText
                                withJavaUtilList:(id<JavaUtilList>)testSteps;

- (void)calculateLocationIndentationWithNSString:(NSString *)definitionText
                                withJavaUtilList:(id<JavaUtilList>)testSteps
                                     withBoolean:(jboolean)useBackgroundSteps;

- (NSString *)createPaddingToLocationWithNSString:(NSString *)indent
                                     withNSString:(NSString *)text;

@end

J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterPrettyFormatter, testSources_, CucumberRuntimeFormatterTestSourcesModel *)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterPrettyFormatter, out_, CucumberApiFormatterNiceAppendable *)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterPrettyFormatter, formats_, id<CucumberRuntimeFormatterFormats>)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterPrettyFormatter, currentFeatureFile_, NSString *)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterPrettyFormatter, currentTestCase_, CucumberApiTestCase *)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterPrettyFormatter, currentScenarioOutline_, GherkinAstScenarioOutline *)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterPrettyFormatter, currentExamples_, GherkinAstExamples *)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterPrettyFormatter, tagNameMapper_, id<CucumberUtilMapper>)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterPrettyFormatter, pickleTagNameMapper_, id<CucumberUtilMapper>)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterPrettyFormatter, testSourceReadHandler_, id<CucumberApiEventEventHandler>)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterPrettyFormatter, caseStartedHandler_, id<CucumberApiEventEventHandler>)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterPrettyFormatter, stepStartedHandler_, id<CucumberApiEventEventHandler>)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterPrettyFormatter, stepFinishedHandler_, id<CucumberApiEventEventHandler>)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterPrettyFormatter, writeEventhandler_, id<CucumberApiEventEventHandler>)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterPrettyFormatter, runFinishedHandler_, id<CucumberApiEventEventHandler>)

inline NSString *CucumberRuntimeFormatterPrettyFormatter_get_SCENARIO_INDENT(void);
static NSString *CucumberRuntimeFormatterPrettyFormatter_SCENARIO_INDENT = @"  ";
J2OBJC_STATIC_FIELD_OBJ_FINAL(CucumberRuntimeFormatterPrettyFormatter, SCENARIO_INDENT, NSString *)

inline NSString *CucumberRuntimeFormatterPrettyFormatter_get_STEP_INDENT(void);
static NSString *CucumberRuntimeFormatterPrettyFormatter_STEP_INDENT = @"    ";
J2OBJC_STATIC_FIELD_OBJ_FINAL(CucumberRuntimeFormatterPrettyFormatter, STEP_INDENT, NSString *)

inline NSString *CucumberRuntimeFormatterPrettyFormatter_get_EXAMPLES_INDENT(void);
static NSString *CucumberRuntimeFormatterPrettyFormatter_EXAMPLES_INDENT = @"    ";
J2OBJC_STATIC_FIELD_OBJ_FINAL(CucumberRuntimeFormatterPrettyFormatter, EXAMPLES_INDENT, NSString *)

__attribute__((unused)) static void CucumberRuntimeFormatterPrettyFormatter_handleTestSourceReadWithCucumberApiEventTestSourceRead_(CucumberRuntimeFormatterPrettyFormatter *self, CucumberApiEventTestSourceRead *event);

__attribute__((unused)) static void CucumberRuntimeFormatterPrettyFormatter_handleTestCaseStartedWithCucumberApiEventTestCaseStarted_(CucumberRuntimeFormatterPrettyFormatter *self, CucumberApiEventTestCaseStarted *event);

__attribute__((unused)) static void CucumberRuntimeFormatterPrettyFormatter_handleTestStepStartedWithCucumberApiEventTestStepStarted_(CucumberRuntimeFormatterPrettyFormatter *self, CucumberApiEventTestStepStarted *event);

__attribute__((unused)) static void CucumberRuntimeFormatterPrettyFormatter_handleTestStepFinishedWithCucumberApiEventTestStepFinished_(CucumberRuntimeFormatterPrettyFormatter *self, CucumberApiEventTestStepFinished *event);

__attribute__((unused)) static void CucumberRuntimeFormatterPrettyFormatter_handleWriteWithCucumberApiEventWriteEvent_(CucumberRuntimeFormatterPrettyFormatter *self, CucumberApiEventWriteEvent *event);

__attribute__((unused)) static void CucumberRuntimeFormatterPrettyFormatter_finishReport(CucumberRuntimeFormatterPrettyFormatter *self);

__attribute__((unused)) static void CucumberRuntimeFormatterPrettyFormatter_handleStartOfFeatureWithCucumberApiEventTestCaseStarted_(CucumberRuntimeFormatterPrettyFormatter *self, CucumberApiEventTestCaseStarted *event);

__attribute__((unused)) static void CucumberRuntimeFormatterPrettyFormatter_handleScenarioOutlineWithCucumberApiEventTestCaseStarted_(CucumberRuntimeFormatterPrettyFormatter *self, CucumberApiEventTestCaseStarted *event);

__attribute__((unused)) static void CucumberRuntimeFormatterPrettyFormatter_printScenarioOutlineWithGherkinAstScenarioOutline_(CucumberRuntimeFormatterPrettyFormatter *self, GherkinAstScenarioOutline *scenarioOutline);

__attribute__((unused)) static void CucumberRuntimeFormatterPrettyFormatter_printExamplesWithGherkinAstExamples_(CucumberRuntimeFormatterPrettyFormatter *self, GherkinAstExamples *examples);

__attribute__((unused)) static void CucumberRuntimeFormatterPrettyFormatter_printStepWithCucumberApiTestStep_withCucumberApiResult_(CucumberRuntimeFormatterPrettyFormatter *self, CucumberApiTestStep *testStep, CucumberApiResult *result);

__attribute__((unused)) static NSString *CucumberRuntimeFormatterPrettyFormatter_getScenarioDefinitionTextWithGherkinAstScenarioDefinition_(CucumberRuntimeFormatterPrettyFormatter *self, GherkinAstScenarioDefinition *definition);

__attribute__((unused)) static NSString *CucumberRuntimeFormatterPrettyFormatter_getLocationTextWithNSString_withInt_(CucumberRuntimeFormatterPrettyFormatter *self, NSString *file, jint line);

__attribute__((unused)) static NSString *CucumberRuntimeFormatterPrettyFormatter_getLocationTextWithNSString_(CucumberRuntimeFormatterPrettyFormatter *self, NSString *location);

__attribute__((unused)) static JavaLangStringBuffer *CucumberRuntimeFormatterPrettyFormatter_stepTextWithCucumberApiTestStep_(CucumberRuntimeFormatterPrettyFormatter *self, CucumberApiTestStep *testStep);

__attribute__((unused)) static NSString *CucumberRuntimeFormatterPrettyFormatter_getStepKeywordWithCucumberApiTestStep_(CucumberRuntimeFormatterPrettyFormatter *self, CucumberApiTestStep *testStep);

__attribute__((unused)) static jboolean CucumberRuntimeFormatterPrettyFormatter_isFirstStepAfterBackgroundWithCucumberApiTestStep_(CucumberRuntimeFormatterPrettyFormatter *self, CucumberApiTestStep *testStep);

__attribute__((unused)) static jboolean CucumberRuntimeFormatterPrettyFormatter_isBackgroundStepWithCucumberApiTestStep_(CucumberRuntimeFormatterPrettyFormatter *self, CucumberApiTestStep *testStep);

__attribute__((unused)) static void CucumberRuntimeFormatterPrettyFormatter_printFeatureWithNSString_(CucumberRuntimeFormatterPrettyFormatter *self, NSString *path);

__attribute__((unused)) static void CucumberRuntimeFormatterPrettyFormatter_printTagsWithJavaUtilList_(CucumberRuntimeFormatterPrettyFormatter *self, id<JavaUtilList> tags);

__attribute__((unused)) static void CucumberRuntimeFormatterPrettyFormatter_printTagsWithJavaUtilList_withNSString_(CucumberRuntimeFormatterPrettyFormatter *self, id<JavaUtilList> tags, NSString *indent);

__attribute__((unused)) static void CucumberRuntimeFormatterPrettyFormatter_printPickleTagsWithJavaUtilList_withNSString_(CucumberRuntimeFormatterPrettyFormatter *self, id<JavaUtilList> tags, NSString *indent);

__attribute__((unused)) static void CucumberRuntimeFormatterPrettyFormatter_printDescriptionWithNSString_(CucumberRuntimeFormatterPrettyFormatter *self, NSString *description_);

__attribute__((unused)) static void CucumberRuntimeFormatterPrettyFormatter_printBackgroundWithCucumberApiTestCase_(CucumberRuntimeFormatterPrettyFormatter *self, CucumberApiTestCase *testCase);

__attribute__((unused)) static void CucumberRuntimeFormatterPrettyFormatter_printScenarioDefinitionWithCucumberApiTestCase_(CucumberRuntimeFormatterPrettyFormatter *self, CucumberApiTestCase *testCase);

__attribute__((unused)) static void CucumberRuntimeFormatterPrettyFormatter_printErrorWithCucumberApiResult_(CucumberRuntimeFormatterPrettyFormatter *self, CucumberApiResult *result);

__attribute__((unused)) static void CucumberRuntimeFormatterPrettyFormatter_calculateLocationIndentationWithNSString_withJavaUtilList_(CucumberRuntimeFormatterPrettyFormatter *self, NSString *definitionText, id<JavaUtilList> testSteps);

__attribute__((unused)) static void CucumberRuntimeFormatterPrettyFormatter_calculateLocationIndentationWithNSString_withJavaUtilList_withBoolean_(CucumberRuntimeFormatterPrettyFormatter *self, NSString *definitionText, id<JavaUtilList> testSteps, jboolean useBackgroundSteps);

__attribute__((unused)) static NSString *CucumberRuntimeFormatterPrettyFormatter_createPaddingToLocationWithNSString_withNSString_(CucumberRuntimeFormatterPrettyFormatter *self, NSString *indent, NSString *text);

@interface CucumberRuntimeFormatterPrettyFormatter_1 : NSObject < CucumberUtilMapper >

- (instancetype __nonnull)init;

- (NSString *)mapWithId:(GherkinAstTag *)tag;

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberRuntimeFormatterPrettyFormatter_1)

__attribute__((unused)) static void CucumberRuntimeFormatterPrettyFormatter_1_init(CucumberRuntimeFormatterPrettyFormatter_1 *self);

__attribute__((unused)) static CucumberRuntimeFormatterPrettyFormatter_1 *new_CucumberRuntimeFormatterPrettyFormatter_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberRuntimeFormatterPrettyFormatter_1 *create_CucumberRuntimeFormatterPrettyFormatter_1_init(void);

@interface CucumberRuntimeFormatterPrettyFormatter_2 : NSObject < CucumberUtilMapper >

- (instancetype __nonnull)init;

- (NSString *)mapWithId:(GherkinPicklesPickleTag *)pickleTag;

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberRuntimeFormatterPrettyFormatter_2)

__attribute__((unused)) static void CucumberRuntimeFormatterPrettyFormatter_2_init(CucumberRuntimeFormatterPrettyFormatter_2 *self);

__attribute__((unused)) static CucumberRuntimeFormatterPrettyFormatter_2 *new_CucumberRuntimeFormatterPrettyFormatter_2_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberRuntimeFormatterPrettyFormatter_2 *create_CucumberRuntimeFormatterPrettyFormatter_2_init(void);

@interface CucumberRuntimeFormatterPrettyFormatter_3 : NSObject < CucumberApiEventEventHandler > {
 @public
  CucumberRuntimeFormatterPrettyFormatter *this$0_;
}

- (instancetype __nonnull)initWithCucumberRuntimeFormatterPrettyFormatter:(CucumberRuntimeFormatterPrettyFormatter *)outer$;

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestSourceRead *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberRuntimeFormatterPrettyFormatter_3)

__attribute__((unused)) static void CucumberRuntimeFormatterPrettyFormatter_3_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter_3 *self, CucumberRuntimeFormatterPrettyFormatter *outer$);

__attribute__((unused)) static CucumberRuntimeFormatterPrettyFormatter_3 *new_CucumberRuntimeFormatterPrettyFormatter_3_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberRuntimeFormatterPrettyFormatter_3 *create_CucumberRuntimeFormatterPrettyFormatter_3_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter *outer$);

@interface CucumberRuntimeFormatterPrettyFormatter_4 : NSObject < CucumberApiEventEventHandler > {
 @public
  CucumberRuntimeFormatterPrettyFormatter *this$0_;
}

- (instancetype __nonnull)initWithCucumberRuntimeFormatterPrettyFormatter:(CucumberRuntimeFormatterPrettyFormatter *)outer$;

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestCaseStarted *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberRuntimeFormatterPrettyFormatter_4)

__attribute__((unused)) static void CucumberRuntimeFormatterPrettyFormatter_4_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter_4 *self, CucumberRuntimeFormatterPrettyFormatter *outer$);

__attribute__((unused)) static CucumberRuntimeFormatterPrettyFormatter_4 *new_CucumberRuntimeFormatterPrettyFormatter_4_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberRuntimeFormatterPrettyFormatter_4 *create_CucumberRuntimeFormatterPrettyFormatter_4_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter *outer$);

@interface CucumberRuntimeFormatterPrettyFormatter_5 : NSObject < CucumberApiEventEventHandler > {
 @public
  CucumberRuntimeFormatterPrettyFormatter *this$0_;
}

- (instancetype __nonnull)initWithCucumberRuntimeFormatterPrettyFormatter:(CucumberRuntimeFormatterPrettyFormatter *)outer$;

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestStepStarted *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberRuntimeFormatterPrettyFormatter_5)

__attribute__((unused)) static void CucumberRuntimeFormatterPrettyFormatter_5_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter_5 *self, CucumberRuntimeFormatterPrettyFormatter *outer$);

__attribute__((unused)) static CucumberRuntimeFormatterPrettyFormatter_5 *new_CucumberRuntimeFormatterPrettyFormatter_5_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberRuntimeFormatterPrettyFormatter_5 *create_CucumberRuntimeFormatterPrettyFormatter_5_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter *outer$);

@interface CucumberRuntimeFormatterPrettyFormatter_6 : NSObject < CucumberApiEventEventHandler > {
 @public
  CucumberRuntimeFormatterPrettyFormatter *this$0_;
}

- (instancetype __nonnull)initWithCucumberRuntimeFormatterPrettyFormatter:(CucumberRuntimeFormatterPrettyFormatter *)outer$;

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestStepFinished *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberRuntimeFormatterPrettyFormatter_6)

__attribute__((unused)) static void CucumberRuntimeFormatterPrettyFormatter_6_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter_6 *self, CucumberRuntimeFormatterPrettyFormatter *outer$);

__attribute__((unused)) static CucumberRuntimeFormatterPrettyFormatter_6 *new_CucumberRuntimeFormatterPrettyFormatter_6_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberRuntimeFormatterPrettyFormatter_6 *create_CucumberRuntimeFormatterPrettyFormatter_6_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter *outer$);

@interface CucumberRuntimeFormatterPrettyFormatter_7 : NSObject < CucumberApiEventEventHandler > {
 @public
  CucumberRuntimeFormatterPrettyFormatter *this$0_;
}

- (instancetype __nonnull)initWithCucumberRuntimeFormatterPrettyFormatter:(CucumberRuntimeFormatterPrettyFormatter *)outer$;

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventWriteEvent *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberRuntimeFormatterPrettyFormatter_7)

__attribute__((unused)) static void CucumberRuntimeFormatterPrettyFormatter_7_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter_7 *self, CucumberRuntimeFormatterPrettyFormatter *outer$);

__attribute__((unused)) static CucumberRuntimeFormatterPrettyFormatter_7 *new_CucumberRuntimeFormatterPrettyFormatter_7_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberRuntimeFormatterPrettyFormatter_7 *create_CucumberRuntimeFormatterPrettyFormatter_7_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter *outer$);

@interface CucumberRuntimeFormatterPrettyFormatter_8 : NSObject < CucumberApiEventEventHandler > {
 @public
  CucumberRuntimeFormatterPrettyFormatter *this$0_;
}

- (instancetype __nonnull)initWithCucumberRuntimeFormatterPrettyFormatter:(CucumberRuntimeFormatterPrettyFormatter *)outer$;

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestRunFinished *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberRuntimeFormatterPrettyFormatter_8)

__attribute__((unused)) static void CucumberRuntimeFormatterPrettyFormatter_8_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter_8 *self, CucumberRuntimeFormatterPrettyFormatter *outer$);

__attribute__((unused)) static CucumberRuntimeFormatterPrettyFormatter_8 *new_CucumberRuntimeFormatterPrettyFormatter_8_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberRuntimeFormatterPrettyFormatter_8 *create_CucumberRuntimeFormatterPrettyFormatter_8_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter *outer$);

@implementation CucumberRuntimeFormatterPrettyFormatter

- (instancetype __nonnull)initWithJavaLangAppendable:(id<JavaLangAppendable>)outArg {
  CucumberRuntimeFormatterPrettyFormatter_initWithJavaLangAppendable_(self, outArg);
  return self;
}

- (void)setEventPublisherWithCucumberApiEventEventPublisher:(id<CucumberApiEventEventPublisher>)publisher {
  [((id<CucumberApiEventEventPublisher>) nil_chk(publisher)) registerHandlerForWithIOSClass:CucumberApiEventTestSourceRead_class_() withCucumberApiEventEventHandler:testSourceReadHandler_];
  [publisher registerHandlerForWithIOSClass:CucumberApiEventTestCaseStarted_class_() withCucumberApiEventEventHandler:caseStartedHandler_];
  [publisher registerHandlerForWithIOSClass:CucumberApiEventTestStepStarted_class_() withCucumberApiEventEventHandler:stepStartedHandler_];
  [publisher registerHandlerForWithIOSClass:CucumberApiEventTestStepFinished_class_() withCucumberApiEventEventHandler:stepFinishedHandler_];
  [publisher registerHandlerForWithIOSClass:CucumberApiEventWriteEvent_class_() withCucumberApiEventEventHandler:writeEventhandler_];
  [publisher registerHandlerForWithIOSClass:CucumberApiEventTestRunFinished_class_() withCucumberApiEventEventHandler:runFinishedHandler_];
}

- (void)setMonochromeWithBoolean:(jboolean)monochrome {
  if (monochrome) {
    JreStrongAssignAndConsume(&formats_, new_CucumberRuntimeFormatterMonochromeFormats_init());
  }
  else {
    JreStrongAssignAndConsume(&formats_, new_CucumberRuntimeFormatterAnsiFormats_init());
  }
}

- (void)handleTestSourceReadWithCucumberApiEventTestSourceRead:(CucumberApiEventTestSourceRead *)event {
  CucumberRuntimeFormatterPrettyFormatter_handleTestSourceReadWithCucumberApiEventTestSourceRead_(self, event);
}

- (void)handleTestCaseStartedWithCucumberApiEventTestCaseStarted:(CucumberApiEventTestCaseStarted *)event {
  CucumberRuntimeFormatterPrettyFormatter_handleTestCaseStartedWithCucumberApiEventTestCaseStarted_(self, event);
}

- (void)handleTestStepStartedWithCucumberApiEventTestStepStarted:(CucumberApiEventTestStepStarted *)event {
  CucumberRuntimeFormatterPrettyFormatter_handleTestStepStartedWithCucumberApiEventTestStepStarted_(self, event);
}

- (void)handleTestStepFinishedWithCucumberApiEventTestStepFinished:(CucumberApiEventTestStepFinished *)event {
  CucumberRuntimeFormatterPrettyFormatter_handleTestStepFinishedWithCucumberApiEventTestStepFinished_(self, event);
}

- (void)handleWriteWithCucumberApiEventWriteEvent:(CucumberApiEventWriteEvent *)event {
  CucumberRuntimeFormatterPrettyFormatter_handleWriteWithCucumberApiEventWriteEvent_(self, event);
}

- (void)finishReport {
  CucumberRuntimeFormatterPrettyFormatter_finishReport(self);
}

- (void)handleStartOfFeatureWithCucumberApiEventTestCaseStarted:(CucumberApiEventTestCaseStarted *)event {
  CucumberRuntimeFormatterPrettyFormatter_handleStartOfFeatureWithCucumberApiEventTestCaseStarted_(self, event);
}

- (void)handleScenarioOutlineWithCucumberApiEventTestCaseStarted:(CucumberApiEventTestCaseStarted *)event {
  CucumberRuntimeFormatterPrettyFormatter_handleScenarioOutlineWithCucumberApiEventTestCaseStarted_(self, event);
}

- (void)printScenarioOutlineWithGherkinAstScenarioOutline:(GherkinAstScenarioOutline *)scenarioOutline {
  CucumberRuntimeFormatterPrettyFormatter_printScenarioOutlineWithGherkinAstScenarioOutline_(self, scenarioOutline);
}

- (void)printExamplesWithGherkinAstExamples:(GherkinAstExamples *)examples {
  CucumberRuntimeFormatterPrettyFormatter_printExamplesWithGherkinAstExamples_(self, examples);
}

- (void)printStepWithCucumberApiTestStep:(CucumberApiTestStep *)testStep
                   withCucumberApiResult:(CucumberApiResult *)result {
  CucumberRuntimeFormatterPrettyFormatter_printStepWithCucumberApiTestStep_withCucumberApiResult_(self, testStep, result);
}

- (NSString *)formatStepTextWithNSString:(NSString *)keyword
                            withNSString:(NSString *)stepText
      withCucumberRuntimeFormatterFormat:(id<CucumberRuntimeFormatterFormat>)textFormat
      withCucumberRuntimeFormatterFormat:(id<CucumberRuntimeFormatterFormat>)argFormat
                        withJavaUtilList:(id<JavaUtilList>)arguments {
  jint beginIndex = 0;
  JavaLangStringBuilder *result = create_JavaLangStringBuilder_initWithNSString_([((id<CucumberRuntimeFormatterFormat>) nil_chk(textFormat)) textWithNSString:keyword]);
  for (CucumberRuntimeArgument * __strong argument in nil_chk(arguments)) {
    if ([((CucumberRuntimeArgument *) nil_chk(argument)) getOffset] != nil) {
      jint argumentOffset = [((JavaLangInteger *) nil_chk([argument getOffset])) intValue];
      if (argumentOffset < beginIndex) {
        continue;
      }
      NSString *text = [((NSString *) nil_chk(stepText)) java_substring:beginIndex endIndex:argumentOffset];
      [result appendWithNSString:[textFormat textWithNSString:text]];
    }
    if ([argument getVal] != nil) {
      [result appendWithNSString:[((id<CucumberRuntimeFormatterFormat>) nil_chk(argFormat)) textWithNSString:[argument getVal]]];
      beginIndex = [((JavaLangInteger *) nil_chk([argument getOffset])) intValue] + [((NSString *) nil_chk([argument getVal])) java_length];
    }
  }
  if (beginIndex != [((NSString *) nil_chk(stepText)) java_length]) {
    NSString *text = [stepText java_substring:beginIndex endIndex:[stepText java_length]];
    [result appendWithNSString:[textFormat textWithNSString:text]];
  }
  return [result description];
}

- (NSString *)getScenarioDefinitionTextWithGherkinAstScenarioDefinition:(GherkinAstScenarioDefinition *)definition {
  return CucumberRuntimeFormatterPrettyFormatter_getScenarioDefinitionTextWithGherkinAstScenarioDefinition_(self, definition);
}

- (NSString *)getLocationTextWithNSString:(NSString *)file
                                  withInt:(jint)line {
  return CucumberRuntimeFormatterPrettyFormatter_getLocationTextWithNSString_withInt_(self, file, line);
}

- (NSString *)getLocationTextWithNSString:(NSString *)location {
  return CucumberRuntimeFormatterPrettyFormatter_getLocationTextWithNSString_(self, location);
}

- (JavaLangStringBuffer *)stepTextWithCucumberApiTestStep:(CucumberApiTestStep *)testStep {
  return CucumberRuntimeFormatterPrettyFormatter_stepTextWithCucumberApiTestStep_(self, testStep);
}

- (NSString *)getStepKeywordWithCucumberApiTestStep:(CucumberApiTestStep *)testStep {
  return CucumberRuntimeFormatterPrettyFormatter_getStepKeywordWithCucumberApiTestStep_(self, testStep);
}

- (jboolean)isFirstStepAfterBackgroundWithCucumberApiTestStep:(CucumberApiTestStep *)testStep {
  return CucumberRuntimeFormatterPrettyFormatter_isFirstStepAfterBackgroundWithCucumberApiTestStep_(self, testStep);
}

- (jboolean)isBackgroundStepWithCucumberApiTestStep:(CucumberApiTestStep *)testStep {
  return CucumberRuntimeFormatterPrettyFormatter_isBackgroundStepWithCucumberApiTestStep_(self, testStep);
}

- (void)printFeatureWithNSString:(NSString *)path {
  CucumberRuntimeFormatterPrettyFormatter_printFeatureWithNSString_(self, path);
}

- (void)printTagsWithJavaUtilList:(id<JavaUtilList>)tags {
  CucumberRuntimeFormatterPrettyFormatter_printTagsWithJavaUtilList_(self, tags);
}

- (void)printTagsWithJavaUtilList:(id<JavaUtilList>)tags
                     withNSString:(NSString *)indent {
  CucumberRuntimeFormatterPrettyFormatter_printTagsWithJavaUtilList_withNSString_(self, tags, indent);
}

- (void)printPickleTagsWithJavaUtilList:(id<JavaUtilList>)tags
                           withNSString:(NSString *)indent {
  CucumberRuntimeFormatterPrettyFormatter_printPickleTagsWithJavaUtilList_withNSString_(self, tags, indent);
}

- (void)printDescriptionWithNSString:(NSString *)description_ {
  CucumberRuntimeFormatterPrettyFormatter_printDescriptionWithNSString_(self, description_);
}

- (void)printBackgroundWithCucumberApiTestCase:(CucumberApiTestCase *)testCase {
  CucumberRuntimeFormatterPrettyFormatter_printBackgroundWithCucumberApiTestCase_(self, testCase);
}

- (void)printScenarioDefinitionWithCucumberApiTestCase:(CucumberApiTestCase *)testCase {
  CucumberRuntimeFormatterPrettyFormatter_printScenarioDefinitionWithCucumberApiTestCase_(self, testCase);
}

- (void)printErrorWithCucumberApiResult:(CucumberApiResult *)result {
  CucumberRuntimeFormatterPrettyFormatter_printErrorWithCucumberApiResult_(self, result);
}

- (void)calculateLocationIndentationWithNSString:(NSString *)definitionText
                                withJavaUtilList:(id<JavaUtilList>)testSteps {
  CucumberRuntimeFormatterPrettyFormatter_calculateLocationIndentationWithNSString_withJavaUtilList_(self, definitionText, testSteps);
}

- (void)calculateLocationIndentationWithNSString:(NSString *)definitionText
                                withJavaUtilList:(id<JavaUtilList>)testSteps
                                     withBoolean:(jboolean)useBackgroundSteps {
  CucumberRuntimeFormatterPrettyFormatter_calculateLocationIndentationWithNSString_withJavaUtilList_withBoolean_(self, definitionText, testSteps, useBackgroundSteps);
}

- (NSString *)createPaddingToLocationWithNSString:(NSString *)indent
                                     withNSString:(NSString *)text {
  return CucumberRuntimeFormatterPrettyFormatter_createPaddingToLocationWithNSString_withNSString_(self, indent, text);
}

- (void)dealloc {
  RELEASE_(testSources_);
  RELEASE_(out_);
  RELEASE_(formats_);
  RELEASE_(currentFeatureFile_);
  RELEASE_(currentTestCase_);
  RELEASE_(currentScenarioOutline_);
  RELEASE_(currentExamples_);
  RELEASE_(tagNameMapper_);
  RELEASE_(pickleTagNameMapper_);
  RELEASE_(testSourceReadHandler_);
  RELEASE_(caseStartedHandler_);
  RELEASE_(stepStartedHandler_);
  RELEASE_(stepFinishedHandler_);
  RELEASE_(writeEventhandler_);
  RELEASE_(runFinishedHandler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 22, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 23, 24, -1, 25, -1, -1 },
    { NULL, "LNSString;", 0x2, 26, 27, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 28, 29, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 28, 30, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuffer;", 0x2, 31, 32, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 33, 32, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 34, 32, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 35, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 36, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 37, 38, -1, 39, -1, -1 },
    { NULL, "V", 0x2, 37, 40, -1, 41, -1, -1 },
    { NULL, "V", 0x2, 42, 40, -1, 43, -1, -1 },
    { NULL, "V", 0x2, 44, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 45, 46, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 47, 46, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 48, 49, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 50, 51, -1, 52, -1, -1 },
    { NULL, "V", 0x2, 50, 53, -1, 54, -1, -1 },
    { NULL, "LNSString;", 0x2, 55, 56, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangAppendable:);
  methods[1].selector = @selector(setEventPublisherWithCucumberApiEventEventPublisher:);
  methods[2].selector = @selector(setMonochromeWithBoolean:);
  methods[3].selector = @selector(handleTestSourceReadWithCucumberApiEventTestSourceRead:);
  methods[4].selector = @selector(handleTestCaseStartedWithCucumberApiEventTestCaseStarted:);
  methods[5].selector = @selector(handleTestStepStartedWithCucumberApiEventTestStepStarted:);
  methods[6].selector = @selector(handleTestStepFinishedWithCucumberApiEventTestStepFinished:);
  methods[7].selector = @selector(handleWriteWithCucumberApiEventWriteEvent:);
  methods[8].selector = @selector(finishReport);
  methods[9].selector = @selector(handleStartOfFeatureWithCucumberApiEventTestCaseStarted:);
  methods[10].selector = @selector(handleScenarioOutlineWithCucumberApiEventTestCaseStarted:);
  methods[11].selector = @selector(printScenarioOutlineWithGherkinAstScenarioOutline:);
  methods[12].selector = @selector(printExamplesWithGherkinAstExamples:);
  methods[13].selector = @selector(printStepWithCucumberApiTestStep:withCucumberApiResult:);
  methods[14].selector = @selector(formatStepTextWithNSString:withNSString:withCucumberRuntimeFormatterFormat:withCucumberRuntimeFormatterFormat:withJavaUtilList:);
  methods[15].selector = @selector(getScenarioDefinitionTextWithGherkinAstScenarioDefinition:);
  methods[16].selector = @selector(getLocationTextWithNSString:withInt:);
  methods[17].selector = @selector(getLocationTextWithNSString:);
  methods[18].selector = @selector(stepTextWithCucumberApiTestStep:);
  methods[19].selector = @selector(getStepKeywordWithCucumberApiTestStep:);
  methods[20].selector = @selector(isFirstStepAfterBackgroundWithCucumberApiTestStep:);
  methods[21].selector = @selector(isBackgroundStepWithCucumberApiTestStep:);
  methods[22].selector = @selector(printFeatureWithNSString:);
  methods[23].selector = @selector(printTagsWithJavaUtilList:);
  methods[24].selector = @selector(printTagsWithJavaUtilList:withNSString:);
  methods[25].selector = @selector(printPickleTagsWithJavaUtilList:withNSString:);
  methods[26].selector = @selector(printDescriptionWithNSString:);
  methods[27].selector = @selector(printBackgroundWithCucumberApiTestCase:);
  methods[28].selector = @selector(printScenarioDefinitionWithCucumberApiTestCase:);
  methods[29].selector = @selector(printErrorWithCucumberApiResult:);
  methods[30].selector = @selector(calculateLocationIndentationWithNSString:withJavaUtilList:);
  methods[31].selector = @selector(calculateLocationIndentationWithNSString:withJavaUtilList:withBoolean:);
  methods[32].selector = @selector(createPaddingToLocationWithNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SCENARIO_INDENT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 57, -1, -1 },
    { "STEP_INDENT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 58, -1, -1 },
    { "EXAMPLES_INDENT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 59, -1, -1 },
    { "testSources_", "LCucumberRuntimeFormatterTestSourcesModel;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "out_", "LCucumberApiFormatterNiceAppendable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "formats_", "LCucumberRuntimeFormatterFormats;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentFeatureFile_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentTestCase_", "LCucumberApiTestCase;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentScenarioOutline_", "LGherkinAstScenarioOutline;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentExamples_", "LGherkinAstExamples;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "locationIndentation_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tagNameMapper_", "LCucumberUtilMapper;", .constantValue.asLong = 0, 0x2, -1, -1, 60, -1 },
    { "pickleTagNameMapper_", "LCucumberUtilMapper;", .constantValue.asLong = 0, 0x2, -1, -1, 61, -1 },
    { "testSourceReadHandler_", "LCucumberApiEventEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 62, -1 },
    { "caseStartedHandler_", "LCucumberApiEventEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 63, -1 },
    { "stepStartedHandler_", "LCucumberApiEventEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 64, -1 },
    { "stepFinishedHandler_", "LCucumberApiEventEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 65, -1 },
    { "writeEventhandler_", "LCucumberApiEventEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 66, -1 },
    { "runFinishedHandler_", "LCucumberApiEventEventHandler;", .constantValue.asLong = 0, 0x2, -1, -1, 67, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangAppendable;", "setEventPublisher", "LCucumberApiEventEventPublisher;", "setMonochrome", "Z", "handleTestSourceRead", "LCucumberApiEventTestSourceRead;", "handleTestCaseStarted", "LCucumberApiEventTestCaseStarted;", "handleTestStepStarted", "LCucumberApiEventTestStepStarted;", "handleTestStepFinished", "LCucumberApiEventTestStepFinished;", "handleWrite", "LCucumberApiEventWriteEvent;", "handleStartOfFeature", "handleScenarioOutline", "printScenarioOutline", "LGherkinAstScenarioOutline;", "printExamples", "LGherkinAstExamples;", "printStep", "LCucumberApiTestStep;LCucumberApiResult;", "formatStepText", "LNSString;LNSString;LCucumberRuntimeFormatterFormat;LCucumberRuntimeFormatterFormat;LJavaUtilList;", "(Ljava/lang/String;Ljava/lang/String;Lcucumber/runtime/formatter/Format;Lcucumber/runtime/formatter/Format;Ljava/util/List<Lcucumber/runtime/Argument;>;)Ljava/lang/String;", "getScenarioDefinitionText", "LGherkinAstScenarioDefinition;", "getLocationText", "LNSString;I", "LNSString;", "stepText", "LCucumberApiTestStep;", "getStepKeyword", "isFirstStepAfterBackground", "isBackgroundStep", "printFeature", "printTags", "LJavaUtilList;", "(Ljava/util/List<Lgherkin/ast/Tag;>;)V", "LJavaUtilList;LNSString;", "(Ljava/util/List<Lgherkin/ast/Tag;>;Ljava/lang/String;)V", "printPickleTags", "(Ljava/util/List<Lgherkin/pickles/PickleTag;>;Ljava/lang/String;)V", "printDescription", "printBackground", "LCucumberApiTestCase;", "printScenarioDefinition", "printError", "LCucumberApiResult;", "calculateLocationIndentation", "LNSString;LJavaUtilList;", "(Ljava/lang/String;Ljava/util/List<Lcucumber/api/TestStep;>;)V", "LNSString;LJavaUtilList;Z", "(Ljava/lang/String;Ljava/util/List<Lcucumber/api/TestStep;>;Z)V", "createPaddingToLocation", "LNSString;LNSString;", &CucumberRuntimeFormatterPrettyFormatter_SCENARIO_INDENT, &CucumberRuntimeFormatterPrettyFormatter_STEP_INDENT, &CucumberRuntimeFormatterPrettyFormatter_EXAMPLES_INDENT, "Lcucumber/util/Mapper<Lgherkin/ast/Tag;Ljava/lang/String;>;", "Lcucumber/util/Mapper<Lgherkin/pickles/PickleTag;Ljava/lang/String;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestSourceRead;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestCaseStarted;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestStepStarted;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestStepFinished;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/WriteEvent;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestRunFinished;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeFormatterPrettyFormatter = { "PrettyFormatter", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x10, 33, 19, -1, -1, -1, -1, -1 };
  return &_CucumberRuntimeFormatterPrettyFormatter;
}

@end

void CucumberRuntimeFormatterPrettyFormatter_initWithJavaLangAppendable_(CucumberRuntimeFormatterPrettyFormatter *self, id<JavaLangAppendable> outArg) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->testSources_, new_CucumberRuntimeFormatterTestSourcesModel_init());
  JreStrongAssignAndConsume(&self->tagNameMapper_, new_CucumberRuntimeFormatterPrettyFormatter_1_init());
  JreStrongAssignAndConsume(&self->pickleTagNameMapper_, new_CucumberRuntimeFormatterPrettyFormatter_2_init());
  JreStrongAssignAndConsume(&self->testSourceReadHandler_, new_CucumberRuntimeFormatterPrettyFormatter_3_initWithCucumberRuntimeFormatterPrettyFormatter_(self));
  JreStrongAssignAndConsume(&self->caseStartedHandler_, new_CucumberRuntimeFormatterPrettyFormatter_4_initWithCucumberRuntimeFormatterPrettyFormatter_(self));
  JreStrongAssignAndConsume(&self->stepStartedHandler_, new_CucumberRuntimeFormatterPrettyFormatter_5_initWithCucumberRuntimeFormatterPrettyFormatter_(self));
  JreStrongAssignAndConsume(&self->stepFinishedHandler_, new_CucumberRuntimeFormatterPrettyFormatter_6_initWithCucumberRuntimeFormatterPrettyFormatter_(self));
  JreStrongAssignAndConsume(&self->writeEventhandler_, new_CucumberRuntimeFormatterPrettyFormatter_7_initWithCucumberRuntimeFormatterPrettyFormatter_(self));
  JreStrongAssignAndConsume(&self->runFinishedHandler_, new_CucumberRuntimeFormatterPrettyFormatter_8_initWithCucumberRuntimeFormatterPrettyFormatter_(self));
  JreStrongAssignAndConsume(&self->out_, new_CucumberApiFormatterNiceAppendable_initWithJavaLangAppendable_(outArg));
  JreStrongAssignAndConsume(&self->formats_, new_CucumberRuntimeFormatterAnsiFormats_init());
}

CucumberRuntimeFormatterPrettyFormatter *new_CucumberRuntimeFormatterPrettyFormatter_initWithJavaLangAppendable_(id<JavaLangAppendable> outArg) {
  J2OBJC_NEW_IMPL(CucumberRuntimeFormatterPrettyFormatter, initWithJavaLangAppendable_, outArg)
}

CucumberRuntimeFormatterPrettyFormatter *create_CucumberRuntimeFormatterPrettyFormatter_initWithJavaLangAppendable_(id<JavaLangAppendable> outArg) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeFormatterPrettyFormatter, initWithJavaLangAppendable_, outArg)
}

void CucumberRuntimeFormatterPrettyFormatter_handleTestSourceReadWithCucumberApiEventTestSourceRead_(CucumberRuntimeFormatterPrettyFormatter *self, CucumberApiEventTestSourceRead *event) {
  [((CucumberRuntimeFormatterTestSourcesModel *) nil_chk(self->testSources_)) addTestSourceReadEventWithNSString:((CucumberApiEventTestSourceRead *) nil_chk(event))->uri_ withCucumberApiEventTestSourceRead:event];
}

void CucumberRuntimeFormatterPrettyFormatter_handleTestCaseStartedWithCucumberApiEventTestCaseStarted_(CucumberRuntimeFormatterPrettyFormatter *self, CucumberApiEventTestCaseStarted *event) {
  CucumberRuntimeFormatterPrettyFormatter_handleStartOfFeatureWithCucumberApiEventTestCaseStarted_(self, event);
  CucumberRuntimeFormatterPrettyFormatter_handleScenarioOutlineWithCucumberApiEventTestCaseStarted_(self, event);
  if ([((CucumberRuntimeFormatterTestSourcesModel *) nil_chk(self->testSources_)) hasBackgroundWithNSString:self->currentFeatureFile_ withInt:[((CucumberApiTestCase *) nil_chk(((CucumberApiEventTestCaseStarted *) nil_chk(event))->testCase_)) getLine]]) {
    CucumberRuntimeFormatterPrettyFormatter_printBackgroundWithCucumberApiTestCase_(self, event->testCase_);
    JreStrongAssign(&self->currentTestCase_, event->testCase_);
  }
  else {
    CucumberRuntimeFormatterPrettyFormatter_printScenarioDefinitionWithCucumberApiTestCase_(self, event->testCase_);
  }
}

void CucumberRuntimeFormatterPrettyFormatter_handleTestStepStartedWithCucumberApiEventTestStepStarted_(CucumberRuntimeFormatterPrettyFormatter *self, CucumberApiEventTestStepStarted *event) {
  if (![((CucumberApiTestStep *) nil_chk(((CucumberApiEventTestStepStarted *) nil_chk(event))->testStep_)) isHook]) {
    if (CucumberRuntimeFormatterPrettyFormatter_isFirstStepAfterBackgroundWithCucumberApiTestStep_(self, event->testStep_)) {
      CucumberRuntimeFormatterPrettyFormatter_printScenarioDefinitionWithCucumberApiTestCase_(self, self->currentTestCase_);
      JreStrongAssign(&self->currentTestCase_, nil);
    }
  }
}

void CucumberRuntimeFormatterPrettyFormatter_handleTestStepFinishedWithCucumberApiEventTestStepFinished_(CucumberRuntimeFormatterPrettyFormatter *self, CucumberApiEventTestStepFinished *event) {
  CucumberApiTestStep *testStep = ((CucumberApiEventTestStepFinished *) nil_chk(event))->testStep_;
  if (![((CucumberApiTestStep *) nil_chk(testStep)) isHook]) {
    CucumberRuntimeFormatterPrettyFormatter_printStepWithCucumberApiTestStep_withCucumberApiResult_(self, testStep, event->result_);
  }
  CucumberRuntimeFormatterPrettyFormatter_printErrorWithCucumberApiResult_(self, event->result_);
}

void CucumberRuntimeFormatterPrettyFormatter_handleWriteWithCucumberApiEventWriteEvent_(CucumberRuntimeFormatterPrettyFormatter *self, CucumberApiEventWriteEvent *event) {
  [((CucumberApiFormatterNiceAppendable *) nil_chk(self->out_)) printlnWithJavaLangCharSequence:((CucumberApiEventWriteEvent *) nil_chk(event))->text_];
}

void CucumberRuntimeFormatterPrettyFormatter_finishReport(CucumberRuntimeFormatterPrettyFormatter *self) {
  [((CucumberApiFormatterNiceAppendable *) nil_chk(self->out_)) close];
}

void CucumberRuntimeFormatterPrettyFormatter_handleStartOfFeatureWithCucumberApiEventTestCaseStarted_(CucumberRuntimeFormatterPrettyFormatter *self, CucumberApiEventTestCaseStarted *event) {
  if (self->currentFeatureFile_ == nil || ![self->currentFeatureFile_ isEqual:[((CucumberApiTestCase *) nil_chk(((CucumberApiEventTestCaseStarted *) nil_chk(event))->testCase_)) getUri]]) {
    if (self->currentFeatureFile_ != nil) {
      [((CucumberApiFormatterNiceAppendable *) nil_chk(self->out_)) println];
    }
    JreStrongAssign(&self->currentFeatureFile_, [((CucumberApiTestCase *) nil_chk(((CucumberApiEventTestCaseStarted *) nil_chk(event))->testCase_)) getUri]);
    CucumberRuntimeFormatterPrettyFormatter_printFeatureWithNSString_(self, self->currentFeatureFile_);
  }
}

void CucumberRuntimeFormatterPrettyFormatter_handleScenarioOutlineWithCucumberApiEventTestCaseStarted_(CucumberRuntimeFormatterPrettyFormatter *self, CucumberApiEventTestCaseStarted *event) {
  CucumberRuntimeFormatterTestSourcesModel_AstNode *astNode = [((CucumberRuntimeFormatterTestSourcesModel *) nil_chk(self->testSources_)) getAstNodeWithNSString:self->currentFeatureFile_ withInt:[((CucumberApiTestCase *) nil_chk(((CucumberApiEventTestCaseStarted *) nil_chk(event))->testCase_)) getLine]];
  if (CucumberRuntimeFormatterTestSourcesModel_isScenarioOutlineScenarioWithCucumberRuntimeFormatterTestSourcesModel_AstNode_(astNode)) {
    GherkinAstScenarioOutline *scenarioOutline = (GherkinAstScenarioOutline *) cast_chk(CucumberRuntimeFormatterTestSourcesModel_getScenarioDefinitionWithCucumberRuntimeFormatterTestSourcesModel_AstNode_(astNode), [GherkinAstScenarioOutline class]);
    if (self->currentScenarioOutline_ == nil || ![self->currentScenarioOutline_ isEqual:scenarioOutline]) {
      JreStrongAssign(&self->currentScenarioOutline_, scenarioOutline);
      CucumberRuntimeFormatterPrettyFormatter_printScenarioOutlineWithGherkinAstScenarioOutline_(self, self->currentScenarioOutline_);
    }
    if (self->currentExamples_ == nil || ![self->currentExamples_ isEqual:((CucumberRuntimeFormatterTestSourcesModel_AstNode *) nil_chk(((CucumberRuntimeFormatterTestSourcesModel_AstNode *) nil_chk(astNode))->parent_))->node_]) {
      JreStrongAssign(&self->currentExamples_, (GherkinAstExamples *) cast_chk(((CucumberRuntimeFormatterTestSourcesModel_AstNode *) nil_chk(((CucumberRuntimeFormatterTestSourcesModel_AstNode *) nil_chk(astNode))->parent_))->node_, [GherkinAstExamples class]));
      CucumberRuntimeFormatterPrettyFormatter_printExamplesWithGherkinAstExamples_(self, self->currentExamples_);
    }
  }
  else {
    JreStrongAssign(&self->currentScenarioOutline_, nil);
    JreStrongAssign(&self->currentExamples_, nil);
  }
}

void CucumberRuntimeFormatterPrettyFormatter_printScenarioOutlineWithGherkinAstScenarioOutline_(CucumberRuntimeFormatterPrettyFormatter *self, GherkinAstScenarioOutline *scenarioOutline) {
  [((CucumberApiFormatterNiceAppendable *) nil_chk(self->out_)) println];
  CucumberRuntimeFormatterPrettyFormatter_printTagsWithJavaUtilList_withNSString_(self, [((GherkinAstScenarioOutline *) nil_chk(scenarioOutline)) getTags], CucumberRuntimeFormatterPrettyFormatter_SCENARIO_INDENT);
  [self->out_ printlnWithJavaLangCharSequence:JreStrcat("$$C$", CucumberRuntimeFormatterPrettyFormatter_SCENARIO_INDENT, CucumberRuntimeFormatterPrettyFormatter_getScenarioDefinitionTextWithGherkinAstScenarioDefinition_(self, scenarioOutline), ' ', CucumberRuntimeFormatterPrettyFormatter_getLocationTextWithNSString_withInt_(self, self->currentFeatureFile_, [((GherkinAstLocation *) nil_chk([scenarioOutline getLocation])) getLine]))];
  CucumberRuntimeFormatterPrettyFormatter_printDescriptionWithNSString_(self, [scenarioOutline getDescription]);
  for (GherkinAstStep * __strong step in nil_chk([scenarioOutline getSteps])) {
    [self->out_ printlnWithJavaLangCharSequence:JreStrcat("$$", CucumberRuntimeFormatterPrettyFormatter_STEP_INDENT, [((id<CucumberRuntimeFormatterFormat>) nil_chk([((id<CucumberRuntimeFormatterFormats>) nil_chk(self->formats_)) getWithNSString:@"skipped"])) textWithNSString:JreStrcat("$$", [((GherkinAstStep *) nil_chk(step)) getKeyword], [step getText])])];
  }
}

void CucumberRuntimeFormatterPrettyFormatter_printExamplesWithGherkinAstExamples_(CucumberRuntimeFormatterPrettyFormatter *self, GherkinAstExamples *examples) {
  [((CucumberApiFormatterNiceAppendable *) nil_chk(self->out_)) println];
  CucumberRuntimeFormatterPrettyFormatter_printTagsWithJavaUtilList_withNSString_(self, [((GherkinAstExamples *) nil_chk(examples)) getTags], CucumberRuntimeFormatterPrettyFormatter_EXAMPLES_INDENT);
  [self->out_ printlnWithJavaLangCharSequence:JreStrcat("$$$$", CucumberRuntimeFormatterPrettyFormatter_EXAMPLES_INDENT, [examples getKeyword], @": ", [examples getName])];
  CucumberRuntimeFormatterPrettyFormatter_printDescriptionWithNSString_(self, [examples getDescription]);
}

void CucumberRuntimeFormatterPrettyFormatter_printStepWithCucumberApiTestStep_withCucumberApiResult_(CucumberRuntimeFormatterPrettyFormatter *self, CucumberApiTestStep *testStep, CucumberApiResult *result) {
  NSString *keyword = CucumberRuntimeFormatterPrettyFormatter_getStepKeywordWithCucumberApiTestStep_(self, testStep);
  NSString *stepText = [((CucumberApiTestStep *) nil_chk(testStep)) getStepText];
  NSString *locationPadding = CucumberRuntimeFormatterPrettyFormatter_createPaddingToLocationWithNSString_withNSString_(self, CucumberRuntimeFormatterPrettyFormatter_STEP_INDENT, JreStrcat("$$", keyword, stepText));
  NSString *formattedStepText = [self formatStepTextWithNSString:keyword withNSString:stepText withCucumberRuntimeFormatterFormat:[((id<CucumberRuntimeFormatterFormats>) nil_chk(self->formats_)) getWithNSString:[((CucumberApiResult_Type *) nil_chk([((CucumberApiResult *) nil_chk(result)) getStatus])) lowerCaseName]] withCucumberRuntimeFormatterFormat:[((id<CucumberRuntimeFormatterFormats>) nil_chk(self->formats_)) getWithNSString:JreStrcat("$$", [((CucumberApiResult_Type *) nil_chk([result getStatus])) lowerCaseName], @"_arg")] withJavaUtilList:[testStep getDefinitionArgument]];
  [((CucumberApiFormatterNiceAppendable *) nil_chk(self->out_)) printlnWithJavaLangCharSequence:JreStrcat("$$$$", CucumberRuntimeFormatterPrettyFormatter_STEP_INDENT, formattedStepText, locationPadding, CucumberRuntimeFormatterPrettyFormatter_getLocationTextWithNSString_(self, [testStep getCodeLocation]))];
}

NSString *CucumberRuntimeFormatterPrettyFormatter_getScenarioDefinitionTextWithGherkinAstScenarioDefinition_(CucumberRuntimeFormatterPrettyFormatter *self, GherkinAstScenarioDefinition *definition) {
  return JreStrcat("$$$", [((GherkinAstScenarioDefinition *) nil_chk(definition)) getKeyword], @": ", [definition getName]);
}

NSString *CucumberRuntimeFormatterPrettyFormatter_getLocationTextWithNSString_withInt_(CucumberRuntimeFormatterPrettyFormatter *self, NSString *file, jint line) {
  return CucumberRuntimeFormatterPrettyFormatter_getLocationTextWithNSString_(self, JreStrcat("$CI", file, ':', line));
}

NSString *CucumberRuntimeFormatterPrettyFormatter_getLocationTextWithNSString_(CucumberRuntimeFormatterPrettyFormatter *self, NSString *location) {
  return [((id<CucumberRuntimeFormatterFormat>) nil_chk([((id<CucumberRuntimeFormatterFormats>) nil_chk(self->formats_)) getWithNSString:@"comment"])) textWithNSString:JreStrcat("$$", @"# ", location)];
}

JavaLangStringBuffer *CucumberRuntimeFormatterPrettyFormatter_stepTextWithCucumberApiTestStep_(CucumberRuntimeFormatterPrettyFormatter *self, CucumberApiTestStep *testStep) {
  NSString *keyword = CucumberRuntimeFormatterPrettyFormatter_getStepKeywordWithCucumberApiTestStep_(self, testStep);
  return create_JavaLangStringBuffer_initWithNSString_(JreStrcat("$$", keyword, [((CucumberApiTestStep *) nil_chk(testStep)) getStepText]));
}

NSString *CucumberRuntimeFormatterPrettyFormatter_getStepKeywordWithCucumberApiTestStep_(CucumberRuntimeFormatterPrettyFormatter *self, CucumberApiTestStep *testStep) {
  CucumberRuntimeFormatterTestSourcesModel_AstNode *astNode = [((CucumberRuntimeFormatterTestSourcesModel *) nil_chk(self->testSources_)) getAstNodeWithNSString:self->currentFeatureFile_ withInt:[((CucumberApiTestStep *) nil_chk(testStep)) getStepLine]];
  if (astNode != nil) {
    GherkinAstStep *step = (GherkinAstStep *) cast_chk(astNode->node_, [GherkinAstStep class]);
    return [((GherkinAstStep *) nil_chk(step)) getKeyword];
  }
  else {
    return @"";
  }
}

jboolean CucumberRuntimeFormatterPrettyFormatter_isFirstStepAfterBackgroundWithCucumberApiTestStep_(CucumberRuntimeFormatterPrettyFormatter *self, CucumberApiTestStep *testStep) {
  return self->currentTestCase_ != nil && !CucumberRuntimeFormatterPrettyFormatter_isBackgroundStepWithCucumberApiTestStep_(self, testStep);
}

jboolean CucumberRuntimeFormatterPrettyFormatter_isBackgroundStepWithCucumberApiTestStep_(CucumberRuntimeFormatterPrettyFormatter *self, CucumberApiTestStep *testStep) {
  CucumberRuntimeFormatterTestSourcesModel_AstNode *astNode = [((CucumberRuntimeFormatterTestSourcesModel *) nil_chk(self->testSources_)) getAstNodeWithNSString:self->currentFeatureFile_ withInt:[((CucumberApiTestStep *) nil_chk(testStep)) getStepLine]];
  if (astNode != nil) {
    return CucumberRuntimeFormatterTestSourcesModel_isBackgroundStepWithCucumberRuntimeFormatterTestSourcesModel_AstNode_(astNode);
  }
  return false;
}

void CucumberRuntimeFormatterPrettyFormatter_printFeatureWithNSString_(CucumberRuntimeFormatterPrettyFormatter *self, NSString *path) {
  GherkinAstFeature *feature = [((CucumberRuntimeFormatterTestSourcesModel *) nil_chk(self->testSources_)) getFeatureWithNSString:path];
  CucumberRuntimeFormatterPrettyFormatter_printTagsWithJavaUtilList_(self, [((GherkinAstFeature *) nil_chk(feature)) getTags]);
  [((CucumberApiFormatterNiceAppendable *) nil_chk(self->out_)) printlnWithJavaLangCharSequence:JreStrcat("$$$", [feature getKeyword], @": ", [feature getName])];
  CucumberRuntimeFormatterPrettyFormatter_printDescriptionWithNSString_(self, [feature getDescription]);
}

void CucumberRuntimeFormatterPrettyFormatter_printTagsWithJavaUtilList_(CucumberRuntimeFormatterPrettyFormatter *self, id<JavaUtilList> tags) {
  CucumberRuntimeFormatterPrettyFormatter_printTagsWithJavaUtilList_withNSString_(self, tags, @"");
}

void CucumberRuntimeFormatterPrettyFormatter_printTagsWithJavaUtilList_withNSString_(CucumberRuntimeFormatterPrettyFormatter *self, id<JavaUtilList> tags, NSString *indent) {
  if (![((id<JavaUtilList>) nil_chk(tags)) isEmpty]) {
    [((CucumberApiFormatterNiceAppendable *) nil_chk(self->out_)) printlnWithJavaLangCharSequence:JreStrcat("$$", indent, CucumberUtilFixJava_joinWithJavaUtilList_withNSString_(CucumberUtilFixJava_mapWithJavaUtilList_withCucumberUtilMapper_(tags, self->tagNameMapper_), @" "))];
  }
}

void CucumberRuntimeFormatterPrettyFormatter_printPickleTagsWithJavaUtilList_withNSString_(CucumberRuntimeFormatterPrettyFormatter *self, id<JavaUtilList> tags, NSString *indent) {
  if (![((id<JavaUtilList>) nil_chk(tags)) isEmpty]) {
    [((CucumberApiFormatterNiceAppendable *) nil_chk(self->out_)) printlnWithJavaLangCharSequence:JreStrcat("$$", indent, CucumberUtilFixJava_joinWithJavaUtilList_withNSString_(CucumberUtilFixJava_mapWithJavaUtilList_withCucumberUtilMapper_(tags, self->pickleTagNameMapper_), @" "))];
  }
}

void CucumberRuntimeFormatterPrettyFormatter_printDescriptionWithNSString_(CucumberRuntimeFormatterPrettyFormatter *self, NSString *description_) {
  if (description_ != nil) {
    [((CucumberApiFormatterNiceAppendable *) nil_chk(self->out_)) printlnWithJavaLangCharSequence:description_];
  }
}

void CucumberRuntimeFormatterPrettyFormatter_printBackgroundWithCucumberApiTestCase_(CucumberRuntimeFormatterPrettyFormatter *self, CucumberApiTestCase *testCase) {
  CucumberRuntimeFormatterTestSourcesModel_AstNode *astNode = [((CucumberRuntimeFormatterTestSourcesModel *) nil_chk(self->testSources_)) getAstNodeWithNSString:self->currentFeatureFile_ withInt:[((CucumberApiTestCase *) nil_chk(testCase)) getLine]];
  if (astNode != nil) {
    GherkinAstBackground *background = CucumberRuntimeFormatterTestSourcesModel_getBackgroundForTestCaseWithCucumberRuntimeFormatterTestSourcesModel_AstNode_(astNode);
    NSString *backgroundText = CucumberRuntimeFormatterPrettyFormatter_getScenarioDefinitionTextWithGherkinAstScenarioDefinition_(self, background);
    jboolean useBackgroundSteps = true;
    CucumberRuntimeFormatterPrettyFormatter_calculateLocationIndentationWithNSString_withJavaUtilList_withBoolean_(self, JreStrcat("$$", CucumberRuntimeFormatterPrettyFormatter_SCENARIO_INDENT, backgroundText), [testCase getTestSteps], useBackgroundSteps);
    NSString *locationPadding = CucumberRuntimeFormatterPrettyFormatter_createPaddingToLocationWithNSString_withNSString_(self, CucumberRuntimeFormatterPrettyFormatter_SCENARIO_INDENT, backgroundText);
    [((CucumberApiFormatterNiceAppendable *) nil_chk(self->out_)) println];
    [self->out_ printlnWithJavaLangCharSequence:JreStrcat("$$$$", CucumberRuntimeFormatterPrettyFormatter_SCENARIO_INDENT, backgroundText, locationPadding, CucumberRuntimeFormatterPrettyFormatter_getLocationTextWithNSString_withInt_(self, self->currentFeatureFile_, [((GherkinAstLocation *) nil_chk([((GherkinAstBackground *) nil_chk(background)) getLocation])) getLine]))];
    CucumberRuntimeFormatterPrettyFormatter_printDescriptionWithNSString_(self, [background getDescription]);
  }
}

void CucumberRuntimeFormatterPrettyFormatter_printScenarioDefinitionWithCucumberApiTestCase_(CucumberRuntimeFormatterPrettyFormatter *self, CucumberApiTestCase *testCase) {
  GherkinAstScenarioDefinition *scenarioDefinition = [((CucumberRuntimeFormatterTestSourcesModel *) nil_chk(self->testSources_)) getScenarioDefinitionWithNSString:self->currentFeatureFile_ withInt:[((CucumberApiTestCase *) nil_chk(testCase)) getLine]];
  NSString *definitionText = JreStrcat("$$$", [((GherkinAstScenarioDefinition *) nil_chk(scenarioDefinition)) getKeyword], @": ", [testCase getName]);
  CucumberRuntimeFormatterPrettyFormatter_calculateLocationIndentationWithNSString_withJavaUtilList_(self, JreStrcat("$$", CucumberRuntimeFormatterPrettyFormatter_SCENARIO_INDENT, definitionText), [testCase getTestSteps]);
  NSString *locationPadding = CucumberRuntimeFormatterPrettyFormatter_createPaddingToLocationWithNSString_withNSString_(self, CucumberRuntimeFormatterPrettyFormatter_SCENARIO_INDENT, definitionText);
  [((CucumberApiFormatterNiceAppendable *) nil_chk(self->out_)) println];
  CucumberRuntimeFormatterPrettyFormatter_printPickleTagsWithJavaUtilList_withNSString_(self, [testCase getTags], CucumberRuntimeFormatterPrettyFormatter_SCENARIO_INDENT);
  [self->out_ printlnWithJavaLangCharSequence:JreStrcat("$$$$", CucumberRuntimeFormatterPrettyFormatter_SCENARIO_INDENT, definitionText, locationPadding, CucumberRuntimeFormatterPrettyFormatter_getLocationTextWithNSString_withInt_(self, self->currentFeatureFile_, [testCase getLine]))];
  CucumberRuntimeFormatterPrettyFormatter_printDescriptionWithNSString_(self, [scenarioDefinition getDescription]);
}

void CucumberRuntimeFormatterPrettyFormatter_printErrorWithCucumberApiResult_(CucumberRuntimeFormatterPrettyFormatter *self, CucumberApiResult *result) {
  if ([((CucumberApiResult *) nil_chk(result)) getError] != nil) {
    [((CucumberApiFormatterNiceAppendable *) nil_chk(self->out_)) printlnWithJavaLangCharSequence:JreStrcat("$$", @"      ", [((id<CucumberRuntimeFormatterFormat>) nil_chk([((id<CucumberRuntimeFormatterFormats>) nil_chk(self->formats_)) getWithNSString:[((CucumberApiResult_Type *) nil_chk([result getStatus])) lowerCaseName]])) textWithNSString:[result getErrorMessage]])];
  }
}

void CucumberRuntimeFormatterPrettyFormatter_calculateLocationIndentationWithNSString_withJavaUtilList_(CucumberRuntimeFormatterPrettyFormatter *self, NSString *definitionText, id<JavaUtilList> testSteps) {
  jboolean useBackgroundSteps = false;
  CucumberRuntimeFormatterPrettyFormatter_calculateLocationIndentationWithNSString_withJavaUtilList_withBoolean_(self, definitionText, testSteps, useBackgroundSteps);
}

void CucumberRuntimeFormatterPrettyFormatter_calculateLocationIndentationWithNSString_withJavaUtilList_withBoolean_(CucumberRuntimeFormatterPrettyFormatter *self, NSString *definitionText, id<JavaUtilList> testSteps, jboolean useBackgroundSteps) {
  jint maxTextLength = [((NSString *) nil_chk(definitionText)) java_length];
  for (CucumberApiTestStep * __strong step in nil_chk(testSteps)) {
    if ([((CucumberApiTestStep *) nil_chk(step)) isHook]) {
      continue;
    }
    if (CucumberRuntimeFormatterPrettyFormatter_isBackgroundStepWithCucumberApiTestStep_(self, step) == useBackgroundSteps) {
      JavaLangStringBuffer *stepText = CucumberRuntimeFormatterPrettyFormatter_stepTextWithCucumberApiTestStep_(self, step);
      maxTextLength = JavaLangMath_maxWithInt_withInt_(maxTextLength, [((NSString *) nil_chk(CucumberRuntimeFormatterPrettyFormatter_STEP_INDENT)) java_length] + [((JavaLangStringBuffer *) nil_chk(stepText)) java_length]);
    }
  }
  self->locationIndentation_ = maxTextLength + 1;
}

NSString *CucumberRuntimeFormatterPrettyFormatter_createPaddingToLocationWithNSString_withNSString_(CucumberRuntimeFormatterPrettyFormatter *self, NSString *indent, NSString *text) {
  JavaLangStringBuffer *padding = create_JavaLangStringBuffer_init();
  for (jint i = [((NSString *) nil_chk(indent)) java_length] + [((NSString *) nil_chk(text)) java_length]; i < self->locationIndentation_; ++i) {
    [padding appendWithChar:' '];
  }
  return [padding description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeFormatterPrettyFormatter)

@implementation CucumberRuntimeFormatterPrettyFormatter_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CucumberRuntimeFormatterPrettyFormatter_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)mapWithId:(GherkinAstTag *)tag {
  return [((GherkinAstTag *) nil_chk(tag)) getName];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mapWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "map", "LGherkinAstTag;", "LCucumberRuntimeFormatterPrettyFormatter;", "Ljava/lang/Object;Lcucumber/util/Mapper<Lgherkin/ast/Tag;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeFormatterPrettyFormatter_1 = { "", "cucumber.runtime.formatter", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, -1, 3, -1 };
  return &_CucumberRuntimeFormatterPrettyFormatter_1;
}

@end

void CucumberRuntimeFormatterPrettyFormatter_1_init(CucumberRuntimeFormatterPrettyFormatter_1 *self) {
  NSObject_init(self);
}

CucumberRuntimeFormatterPrettyFormatter_1 *new_CucumberRuntimeFormatterPrettyFormatter_1_init() {
  J2OBJC_NEW_IMPL(CucumberRuntimeFormatterPrettyFormatter_1, init)
}

CucumberRuntimeFormatterPrettyFormatter_1 *create_CucumberRuntimeFormatterPrettyFormatter_1_init() {
  J2OBJC_CREATE_IMPL(CucumberRuntimeFormatterPrettyFormatter_1, init)
}

@implementation CucumberRuntimeFormatterPrettyFormatter_2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CucumberRuntimeFormatterPrettyFormatter_2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)mapWithId:(GherkinPicklesPickleTag *)pickleTag {
  return [((GherkinPicklesPickleTag *) nil_chk(pickleTag)) getName];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mapWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "map", "LGherkinPicklesPickleTag;", "LCucumberRuntimeFormatterPrettyFormatter;", "Ljava/lang/Object;Lcucumber/util/Mapper<Lgherkin/pickles/PickleTag;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeFormatterPrettyFormatter_2 = { "", "cucumber.runtime.formatter", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, -1, 3, -1 };
  return &_CucumberRuntimeFormatterPrettyFormatter_2;
}

@end

void CucumberRuntimeFormatterPrettyFormatter_2_init(CucumberRuntimeFormatterPrettyFormatter_2 *self) {
  NSObject_init(self);
}

CucumberRuntimeFormatterPrettyFormatter_2 *new_CucumberRuntimeFormatterPrettyFormatter_2_init() {
  J2OBJC_NEW_IMPL(CucumberRuntimeFormatterPrettyFormatter_2, init)
}

CucumberRuntimeFormatterPrettyFormatter_2 *create_CucumberRuntimeFormatterPrettyFormatter_2_init() {
  J2OBJC_CREATE_IMPL(CucumberRuntimeFormatterPrettyFormatter_2, init)
}

@implementation CucumberRuntimeFormatterPrettyFormatter_3

- (instancetype __nonnull)initWithCucumberRuntimeFormatterPrettyFormatter:(CucumberRuntimeFormatterPrettyFormatter *)outer$ {
  CucumberRuntimeFormatterPrettyFormatter_3_initWithCucumberRuntimeFormatterPrettyFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestSourceRead *)event {
  CucumberRuntimeFormatterPrettyFormatter_handleTestSourceReadWithCucumberApiEventTestSourceRead_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCucumberRuntimeFormatterPrettyFormatter:);
  methods[1].selector = @selector(receiveWithCucumberApiEventEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCucumberRuntimeFormatterPrettyFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCucumberApiEventTestSourceRead;", "LCucumberRuntimeFormatterPrettyFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestSourceRead;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeFormatterPrettyFormatter_3 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CucumberRuntimeFormatterPrettyFormatter_3;
}

@end

void CucumberRuntimeFormatterPrettyFormatter_3_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter_3 *self, CucumberRuntimeFormatterPrettyFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CucumberRuntimeFormatterPrettyFormatter_3 *new_CucumberRuntimeFormatterPrettyFormatter_3_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter *outer$) {
  J2OBJC_NEW_IMPL(CucumberRuntimeFormatterPrettyFormatter_3, initWithCucumberRuntimeFormatterPrettyFormatter_, outer$)
}

CucumberRuntimeFormatterPrettyFormatter_3 *create_CucumberRuntimeFormatterPrettyFormatter_3_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeFormatterPrettyFormatter_3, initWithCucumberRuntimeFormatterPrettyFormatter_, outer$)
}

@implementation CucumberRuntimeFormatterPrettyFormatter_4

- (instancetype __nonnull)initWithCucumberRuntimeFormatterPrettyFormatter:(CucumberRuntimeFormatterPrettyFormatter *)outer$ {
  CucumberRuntimeFormatterPrettyFormatter_4_initWithCucumberRuntimeFormatterPrettyFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestCaseStarted *)event {
  CucumberRuntimeFormatterPrettyFormatter_handleTestCaseStartedWithCucumberApiEventTestCaseStarted_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCucumberRuntimeFormatterPrettyFormatter:);
  methods[1].selector = @selector(receiveWithCucumberApiEventEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCucumberRuntimeFormatterPrettyFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCucumberApiEventTestCaseStarted;", "LCucumberRuntimeFormatterPrettyFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestCaseStarted;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeFormatterPrettyFormatter_4 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CucumberRuntimeFormatterPrettyFormatter_4;
}

@end

void CucumberRuntimeFormatterPrettyFormatter_4_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter_4 *self, CucumberRuntimeFormatterPrettyFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CucumberRuntimeFormatterPrettyFormatter_4 *new_CucumberRuntimeFormatterPrettyFormatter_4_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter *outer$) {
  J2OBJC_NEW_IMPL(CucumberRuntimeFormatterPrettyFormatter_4, initWithCucumberRuntimeFormatterPrettyFormatter_, outer$)
}

CucumberRuntimeFormatterPrettyFormatter_4 *create_CucumberRuntimeFormatterPrettyFormatter_4_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeFormatterPrettyFormatter_4, initWithCucumberRuntimeFormatterPrettyFormatter_, outer$)
}

@implementation CucumberRuntimeFormatterPrettyFormatter_5

- (instancetype __nonnull)initWithCucumberRuntimeFormatterPrettyFormatter:(CucumberRuntimeFormatterPrettyFormatter *)outer$ {
  CucumberRuntimeFormatterPrettyFormatter_5_initWithCucumberRuntimeFormatterPrettyFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestStepStarted *)event {
  CucumberRuntimeFormatterPrettyFormatter_handleTestStepStartedWithCucumberApiEventTestStepStarted_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCucumberRuntimeFormatterPrettyFormatter:);
  methods[1].selector = @selector(receiveWithCucumberApiEventEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCucumberRuntimeFormatterPrettyFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCucumberApiEventTestStepStarted;", "LCucumberRuntimeFormatterPrettyFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestStepStarted;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeFormatterPrettyFormatter_5 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CucumberRuntimeFormatterPrettyFormatter_5;
}

@end

void CucumberRuntimeFormatterPrettyFormatter_5_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter_5 *self, CucumberRuntimeFormatterPrettyFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CucumberRuntimeFormatterPrettyFormatter_5 *new_CucumberRuntimeFormatterPrettyFormatter_5_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter *outer$) {
  J2OBJC_NEW_IMPL(CucumberRuntimeFormatterPrettyFormatter_5, initWithCucumberRuntimeFormatterPrettyFormatter_, outer$)
}

CucumberRuntimeFormatterPrettyFormatter_5 *create_CucumberRuntimeFormatterPrettyFormatter_5_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeFormatterPrettyFormatter_5, initWithCucumberRuntimeFormatterPrettyFormatter_, outer$)
}

@implementation CucumberRuntimeFormatterPrettyFormatter_6

- (instancetype __nonnull)initWithCucumberRuntimeFormatterPrettyFormatter:(CucumberRuntimeFormatterPrettyFormatter *)outer$ {
  CucumberRuntimeFormatterPrettyFormatter_6_initWithCucumberRuntimeFormatterPrettyFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestStepFinished *)event {
  CucumberRuntimeFormatterPrettyFormatter_handleTestStepFinishedWithCucumberApiEventTestStepFinished_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCucumberRuntimeFormatterPrettyFormatter:);
  methods[1].selector = @selector(receiveWithCucumberApiEventEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCucumberRuntimeFormatterPrettyFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCucumberApiEventTestStepFinished;", "LCucumberRuntimeFormatterPrettyFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestStepFinished;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeFormatterPrettyFormatter_6 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CucumberRuntimeFormatterPrettyFormatter_6;
}

@end

void CucumberRuntimeFormatterPrettyFormatter_6_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter_6 *self, CucumberRuntimeFormatterPrettyFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CucumberRuntimeFormatterPrettyFormatter_6 *new_CucumberRuntimeFormatterPrettyFormatter_6_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter *outer$) {
  J2OBJC_NEW_IMPL(CucumberRuntimeFormatterPrettyFormatter_6, initWithCucumberRuntimeFormatterPrettyFormatter_, outer$)
}

CucumberRuntimeFormatterPrettyFormatter_6 *create_CucumberRuntimeFormatterPrettyFormatter_6_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeFormatterPrettyFormatter_6, initWithCucumberRuntimeFormatterPrettyFormatter_, outer$)
}

@implementation CucumberRuntimeFormatterPrettyFormatter_7

- (instancetype __nonnull)initWithCucumberRuntimeFormatterPrettyFormatter:(CucumberRuntimeFormatterPrettyFormatter *)outer$ {
  CucumberRuntimeFormatterPrettyFormatter_7_initWithCucumberRuntimeFormatterPrettyFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventWriteEvent *)event {
  CucumberRuntimeFormatterPrettyFormatter_handleWriteWithCucumberApiEventWriteEvent_(this$0_, event);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCucumberRuntimeFormatterPrettyFormatter:);
  methods[1].selector = @selector(receiveWithCucumberApiEventEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCucumberRuntimeFormatterPrettyFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCucumberApiEventWriteEvent;", "LCucumberRuntimeFormatterPrettyFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/WriteEvent;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeFormatterPrettyFormatter_7 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CucumberRuntimeFormatterPrettyFormatter_7;
}

@end

void CucumberRuntimeFormatterPrettyFormatter_7_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter_7 *self, CucumberRuntimeFormatterPrettyFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CucumberRuntimeFormatterPrettyFormatter_7 *new_CucumberRuntimeFormatterPrettyFormatter_7_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter *outer$) {
  J2OBJC_NEW_IMPL(CucumberRuntimeFormatterPrettyFormatter_7, initWithCucumberRuntimeFormatterPrettyFormatter_, outer$)
}

CucumberRuntimeFormatterPrettyFormatter_7 *create_CucumberRuntimeFormatterPrettyFormatter_7_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeFormatterPrettyFormatter_7, initWithCucumberRuntimeFormatterPrettyFormatter_, outer$)
}

@implementation CucumberRuntimeFormatterPrettyFormatter_8

- (instancetype __nonnull)initWithCucumberRuntimeFormatterPrettyFormatter:(CucumberRuntimeFormatterPrettyFormatter *)outer$ {
  CucumberRuntimeFormatterPrettyFormatter_8_initWithCucumberRuntimeFormatterPrettyFormatter_(self, outer$);
  return self;
}

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestRunFinished *)event {
  CucumberRuntimeFormatterPrettyFormatter_finishReport(this$0_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCucumberRuntimeFormatterPrettyFormatter:);
  methods[1].selector = @selector(receiveWithCucumberApiEventEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCucumberRuntimeFormatterPrettyFormatter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCucumberApiEventTestRunFinished;", "LCucumberRuntimeFormatterPrettyFormatter;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestRunFinished;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeFormatterPrettyFormatter_8 = { "", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CucumberRuntimeFormatterPrettyFormatter_8;
}

@end

void CucumberRuntimeFormatterPrettyFormatter_8_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter_8 *self, CucumberRuntimeFormatterPrettyFormatter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CucumberRuntimeFormatterPrettyFormatter_8 *new_CucumberRuntimeFormatterPrettyFormatter_8_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter *outer$) {
  J2OBJC_NEW_IMPL(CucumberRuntimeFormatterPrettyFormatter_8, initWithCucumberRuntimeFormatterPrettyFormatter_, outer$)
}

CucumberRuntimeFormatterPrettyFormatter_8 *create_CucumberRuntimeFormatterPrettyFormatter_8_initWithCucumberRuntimeFormatterPrettyFormatter_(CucumberRuntimeFormatterPrettyFormatter *outer$) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeFormatterPrettyFormatter_8, initWithCucumberRuntimeFormatterPrettyFormatter_, outer$)
}
