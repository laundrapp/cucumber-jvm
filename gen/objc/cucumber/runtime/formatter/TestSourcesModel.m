//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/formatter/TestSourcesModel.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/api/event/TestSourceRead.h"
#include "cucumber/runtime/formatter/TestSourcesModel.h"
#include "gherkin/AstBuilder.h"
#include "gherkin/GherkinDialect.h"
#include "gherkin/GherkinDialectProvider.h"
#include "gherkin/Parser.h"
#include "gherkin/ParserException.h"
#include "gherkin/TokenMatcher.h"
#include "gherkin/ast/Background.h"
#include "gherkin/ast/Examples.h"
#include "gherkin/ast/Feature.h"
#include "gherkin/ast/GherkinDocument.h"
#include "gherkin/ast/Location.h"
#include "gherkin/ast/Node.h"
#include "gherkin/ast/ScenarioDefinition.h"
#include "gherkin/ast/ScenarioOutline.h"
#include "gherkin/ast/Step.h"
#include "gherkin/ast/TableRow.h"
#include "java/lang/Integer.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@interface CucumberRuntimeFormatterTestSourcesModel () {
 @public
  id<JavaUtilMap> pathToReadEventMap_;
  id<JavaUtilMap> pathToAstMap_;
  id<JavaUtilMap> pathToNodeMap_;
}

- (CucumberApiEventTestSourceRead *)getTestSourceReadEventWithNSString:(NSString *)uri;

- (void)parseGherkinSourceWithNSString:(NSString *)path;

- (void)processScenarioDefinitionWithJavaUtilMap:(id<JavaUtilMap>)nodeMap
                withGherkinAstScenarioDefinition:(GherkinAstScenarioDefinition *)child
withCucumberRuntimeFormatterTestSourcesModel_AstNode:(CucumberRuntimeFormatterTestSourcesModel_AstNode *)currentParent;

- (void)processScenarioOutlineExamplesWithJavaUtilMap:(id<JavaUtilMap>)nodeMap
                        withGherkinAstScenarioOutline:(GherkinAstScenarioOutline *)scenarioOutline
 withCucumberRuntimeFormatterTestSourcesModel_AstNode:(CucumberRuntimeFormatterTestSourcesModel_AstNode *)childNode;

@end

J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterTestSourcesModel, pathToReadEventMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterTestSourcesModel, pathToAstMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(CucumberRuntimeFormatterTestSourcesModel, pathToNodeMap_, id<JavaUtilMap>)

__attribute__((unused)) static CucumberApiEventTestSourceRead *CucumberRuntimeFormatterTestSourcesModel_getTestSourceReadEventWithNSString_(CucumberRuntimeFormatterTestSourcesModel *self, NSString *uri);

__attribute__((unused)) static void CucumberRuntimeFormatterTestSourcesModel_parseGherkinSourceWithNSString_(CucumberRuntimeFormatterTestSourcesModel *self, NSString *path);

__attribute__((unused)) static void CucumberRuntimeFormatterTestSourcesModel_processScenarioDefinitionWithJavaUtilMap_withGherkinAstScenarioDefinition_withCucumberRuntimeFormatterTestSourcesModel_AstNode_(CucumberRuntimeFormatterTestSourcesModel *self, id<JavaUtilMap> nodeMap, GherkinAstScenarioDefinition *child, CucumberRuntimeFormatterTestSourcesModel_AstNode *currentParent);

__attribute__((unused)) static void CucumberRuntimeFormatterTestSourcesModel_processScenarioOutlineExamplesWithJavaUtilMap_withGherkinAstScenarioOutline_withCucumberRuntimeFormatterTestSourcesModel_AstNode_(CucumberRuntimeFormatterTestSourcesModel *self, id<JavaUtilMap> nodeMap, GherkinAstScenarioOutline *scenarioOutline, CucumberRuntimeFormatterTestSourcesModel_AstNode *childNode);

@implementation CucumberRuntimeFormatterTestSourcesModel

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CucumberRuntimeFormatterTestSourcesModel_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (GherkinAstFeature *)getFeatureForTestCaseWithCucumberRuntimeFormatterTestSourcesModel_AstNode:(CucumberRuntimeFormatterTestSourcesModel_AstNode *)astNode {
  return CucumberRuntimeFormatterTestSourcesModel_getFeatureForTestCaseWithCucumberRuntimeFormatterTestSourcesModel_AstNode_(astNode);
}

+ (GherkinAstBackground *)getBackgroundForTestCaseWithCucumberRuntimeFormatterTestSourcesModel_AstNode:(CucumberRuntimeFormatterTestSourcesModel_AstNode *)astNode {
  return CucumberRuntimeFormatterTestSourcesModel_getBackgroundForTestCaseWithCucumberRuntimeFormatterTestSourcesModel_AstNode_(astNode);
}

+ (GherkinAstScenarioDefinition *)getScenarioDefinitionWithCucumberRuntimeFormatterTestSourcesModel_AstNode:(CucumberRuntimeFormatterTestSourcesModel_AstNode *)astNode {
  return CucumberRuntimeFormatterTestSourcesModel_getScenarioDefinitionWithCucumberRuntimeFormatterTestSourcesModel_AstNode_(astNode);
}

+ (jboolean)isScenarioOutlineScenarioWithCucumberRuntimeFormatterTestSourcesModel_AstNode:(CucumberRuntimeFormatterTestSourcesModel_AstNode *)astNode {
  return CucumberRuntimeFormatterTestSourcesModel_isScenarioOutlineScenarioWithCucumberRuntimeFormatterTestSourcesModel_AstNode_(astNode);
}

+ (jboolean)isBackgroundStepWithCucumberRuntimeFormatterTestSourcesModel_AstNode:(CucumberRuntimeFormatterTestSourcesModel_AstNode *)astNode {
  return CucumberRuntimeFormatterTestSourcesModel_isBackgroundStepWithCucumberRuntimeFormatterTestSourcesModel_AstNode_(astNode);
}

+ (NSString *)calculateIdWithCucumberRuntimeFormatterTestSourcesModel_AstNode:(CucumberRuntimeFormatterTestSourcesModel_AstNode *)astNode {
  return CucumberRuntimeFormatterTestSourcesModel_calculateIdWithCucumberRuntimeFormatterTestSourcesModel_AstNode_(astNode);
}

+ (NSString *)convertToIdWithNSString:(NSString *)name {
  return CucumberRuntimeFormatterTestSourcesModel_convertToIdWithNSString_(name);
}

- (void)addTestSourceReadEventWithNSString:(NSString *)path
        withCucumberApiEventTestSourceRead:(CucumberApiEventTestSourceRead *)event {
  [((id<JavaUtilMap>) nil_chk(pathToReadEventMap_)) putWithId:path withId:event];
}

- (GherkinAstFeature *)getFeatureWithNSString:(NSString *)path {
  if (![((id<JavaUtilMap>) nil_chk(pathToAstMap_)) containsKeyWithId:path]) {
    CucumberRuntimeFormatterTestSourcesModel_parseGherkinSourceWithNSString_(self, path);
  }
  if ([pathToAstMap_ containsKeyWithId:path]) {
    return [((GherkinAstGherkinDocument *) nil_chk([pathToAstMap_ getWithId:path])) getFeature];
  }
  return nil;
}

- (GherkinAstScenarioDefinition *)getScenarioDefinitionWithNSString:(NSString *)path
                                                            withInt:(jint)line {
  return CucumberRuntimeFormatterTestSourcesModel_getScenarioDefinitionWithCucumberRuntimeFormatterTestSourcesModel_AstNode_([self getAstNodeWithNSString:path withInt:line]);
}

- (CucumberRuntimeFormatterTestSourcesModel_AstNode *)getAstNodeWithNSString:(NSString *)path
                                                                     withInt:(jint)line {
  if (![((id<JavaUtilMap>) nil_chk(pathToNodeMap_)) containsKeyWithId:path]) {
    CucumberRuntimeFormatterTestSourcesModel_parseGherkinSourceWithNSString_(self, path);
  }
  if ([pathToNodeMap_ containsKeyWithId:path]) {
    return [((id<JavaUtilMap>) nil_chk([pathToNodeMap_ getWithId:path])) getWithId:JavaLangInteger_valueOfWithInt_(line)];
  }
  return nil;
}

- (jboolean)hasBackgroundWithNSString:(NSString *)path
                              withInt:(jint)line {
  if (![((id<JavaUtilMap>) nil_chk(pathToNodeMap_)) containsKeyWithId:path]) {
    CucumberRuntimeFormatterTestSourcesModel_parseGherkinSourceWithNSString_(self, path);
  }
  if ([pathToNodeMap_ containsKeyWithId:path]) {
    CucumberRuntimeFormatterTestSourcesModel_AstNode *astNode = [((id<JavaUtilMap>) nil_chk([pathToNodeMap_ getWithId:path])) getWithId:JavaLangInteger_valueOfWithInt_(line)];
    return CucumberRuntimeFormatterTestSourcesModel_getBackgroundForTestCaseWithCucumberRuntimeFormatterTestSourcesModel_AstNode_(astNode) != nil;
  }
  return false;
}

- (NSString *)getKeywordFromSourceWithNSString:(NSString *)uri
                                       withInt:(jint)stepLine {
  GherkinAstFeature *feature = [self getFeatureWithNSString:uri];
  if (feature != nil) {
    CucumberApiEventTestSourceRead *event = CucumberRuntimeFormatterTestSourcesModel_getTestSourceReadEventWithNSString_(self, uri);
    NSString *trimmedSourceLine = [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk([((NSString *) nil_chk(((CucumberApiEventTestSourceRead *) nil_chk(event))->source_)) java_split:@"\n"]), stepLine - 1))) java_trim];
    GherkinGherkinDialect *dialect = [create_GherkinGherkinDialectProvider_initWithNSString_([feature getLanguage]) getDefaultDialect];
    for (NSString * __strong keyword in nil_chk([((GherkinGherkinDialect *) nil_chk(dialect)) getStepKeywords])) {
      if ([((NSString *) nil_chk(trimmedSourceLine)) java_hasPrefix:keyword]) {
        return keyword;
      }
    }
  }
  return @"";
}

- (CucumberApiEventTestSourceRead *)getTestSourceReadEventWithNSString:(NSString *)uri {
  return CucumberRuntimeFormatterTestSourcesModel_getTestSourceReadEventWithNSString_(self, uri);
}

- (NSString *)getFeatureNameWithNSString:(NSString *)uri {
  GherkinAstFeature *feature = [self getFeatureWithNSString:uri];
  if (feature != nil) {
    return [feature getName];
  }
  return @"";
}

- (void)parseGherkinSourceWithNSString:(NSString *)path {
  CucumberRuntimeFormatterTestSourcesModel_parseGherkinSourceWithNSString_(self, path);
}

- (void)processScenarioDefinitionWithJavaUtilMap:(id<JavaUtilMap>)nodeMap
                withGherkinAstScenarioDefinition:(GherkinAstScenarioDefinition *)child
withCucumberRuntimeFormatterTestSourcesModel_AstNode:(CucumberRuntimeFormatterTestSourcesModel_AstNode *)currentParent {
  CucumberRuntimeFormatterTestSourcesModel_processScenarioDefinitionWithJavaUtilMap_withGherkinAstScenarioDefinition_withCucumberRuntimeFormatterTestSourcesModel_AstNode_(self, nodeMap, child, currentParent);
}

- (void)processScenarioOutlineExamplesWithJavaUtilMap:(id<JavaUtilMap>)nodeMap
                        withGherkinAstScenarioOutline:(GherkinAstScenarioOutline *)scenarioOutline
 withCucumberRuntimeFormatterTestSourcesModel_AstNode:(CucumberRuntimeFormatterTestSourcesModel_AstNode *)childNode {
  CucumberRuntimeFormatterTestSourcesModel_processScenarioOutlineExamplesWithJavaUtilMap_withGherkinAstScenarioOutline_withCucumberRuntimeFormatterTestSourcesModel_AstNode_(self, nodeMap, scenarioOutline, childNode);
}

- (void)dealloc {
  RELEASE_(pathToReadEventMap_);
  RELEASE_(pathToAstMap_);
  RELEASE_(pathToNodeMap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGherkinAstFeature;", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "LGherkinAstBackground;", 0x8, 2, 1, -1, -1, -1, -1 },
    { NULL, "LGherkinAstScenarioDefinition;", 0x8, 3, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 4, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 5, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 6, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 10, -1, -1, -1, -1 },
    { NULL, "LGherkinAstFeature;", 0x0, 11, 8, -1, -1, -1, -1 },
    { NULL, "LGherkinAstScenarioDefinition;", 0x0, 3, 12, -1, -1, -1, -1 },
    { NULL, "LCucumberRuntimeFormatterTestSourcesModel_AstNode;", 0x0, 13, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 14, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 15, 12, -1, -1, -1, -1 },
    { NULL, "LCucumberApiEventTestSourceRead;", 0x2, 16, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 17, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 20, -1, 21, -1, -1 },
    { NULL, "V", 0x2, 22, 23, -1, 24, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getFeatureForTestCaseWithCucumberRuntimeFormatterTestSourcesModel_AstNode:);
  methods[2].selector = @selector(getBackgroundForTestCaseWithCucumberRuntimeFormatterTestSourcesModel_AstNode:);
  methods[3].selector = @selector(getScenarioDefinitionWithCucumberRuntimeFormatterTestSourcesModel_AstNode:);
  methods[4].selector = @selector(isScenarioOutlineScenarioWithCucumberRuntimeFormatterTestSourcesModel_AstNode:);
  methods[5].selector = @selector(isBackgroundStepWithCucumberRuntimeFormatterTestSourcesModel_AstNode:);
  methods[6].selector = @selector(calculateIdWithCucumberRuntimeFormatterTestSourcesModel_AstNode:);
  methods[7].selector = @selector(convertToIdWithNSString:);
  methods[8].selector = @selector(addTestSourceReadEventWithNSString:withCucumberApiEventTestSourceRead:);
  methods[9].selector = @selector(getFeatureWithNSString:);
  methods[10].selector = @selector(getScenarioDefinitionWithNSString:withInt:);
  methods[11].selector = @selector(getAstNodeWithNSString:withInt:);
  methods[12].selector = @selector(hasBackgroundWithNSString:withInt:);
  methods[13].selector = @selector(getKeywordFromSourceWithNSString:withInt:);
  methods[14].selector = @selector(getTestSourceReadEventWithNSString:);
  methods[15].selector = @selector(getFeatureNameWithNSString:);
  methods[16].selector = @selector(parseGherkinSourceWithNSString:);
  methods[17].selector = @selector(processScenarioDefinitionWithJavaUtilMap:withGherkinAstScenarioDefinition:withCucumberRuntimeFormatterTestSourcesModel_AstNode:);
  methods[18].selector = @selector(processScenarioOutlineExamplesWithJavaUtilMap:withGherkinAstScenarioOutline:withCucumberRuntimeFormatterTestSourcesModel_AstNode:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pathToReadEventMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 25, -1 },
    { "pathToAstMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 26, -1 },
    { "pathToNodeMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 27, -1 },
  };
  static const void *ptrTable[] = { "getFeatureForTestCase", "LCucumberRuntimeFormatterTestSourcesModel_AstNode;", "getBackgroundForTestCase", "getScenarioDefinition", "isScenarioOutlineScenario", "isBackgroundStep", "calculateId", "convertToId", "LNSString;", "addTestSourceReadEvent", "LNSString;LCucumberApiEventTestSourceRead;", "getFeature", "LNSString;I", "getAstNode", "hasBackground", "getKeywordFromSource", "getTestSourceReadEvent", "getFeatureName", "parseGherkinSource", "processScenarioDefinition", "LJavaUtilMap;LGherkinAstScenarioDefinition;LCucumberRuntimeFormatterTestSourcesModel_AstNode;", "(Ljava/util/Map<Ljava/lang/Integer;Lcucumber/runtime/formatter/TestSourcesModel$AstNode;>;Lgherkin/ast/ScenarioDefinition;Lcucumber/runtime/formatter/TestSourcesModel$AstNode;)V", "processScenarioOutlineExamples", "LJavaUtilMap;LGherkinAstScenarioOutline;LCucumberRuntimeFormatterTestSourcesModel_AstNode;", "(Ljava/util/Map<Ljava/lang/Integer;Lcucumber/runtime/formatter/TestSourcesModel$AstNode;>;Lgherkin/ast/ScenarioOutline;Lcucumber/runtime/formatter/TestSourcesModel$AstNode;)V", "Ljava/util/Map<Ljava/lang/String;Lcucumber/api/event/TestSourceRead;>;", "Ljava/util/Map<Ljava/lang/String;Lgherkin/ast/GherkinDocument;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/util/Map<Ljava/lang/Integer;Lcucumber/runtime/formatter/TestSourcesModel$AstNode;>;>;", "LCucumberRuntimeFormatterTestSourcesModel_ExamplesRowWrapperNode;LCucumberRuntimeFormatterTestSourcesModel_AstNode;" };
  static const J2ObjcClassInfo _CucumberRuntimeFormatterTestSourcesModel = { "TestSourcesModel", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x10, 19, 3, -1, 28, -1, -1, -1 };
  return &_CucumberRuntimeFormatterTestSourcesModel;
}

@end

void CucumberRuntimeFormatterTestSourcesModel_init(CucumberRuntimeFormatterTestSourcesModel *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->pathToReadEventMap_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->pathToAstMap_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->pathToNodeMap_, new_JavaUtilHashMap_init());
}

CucumberRuntimeFormatterTestSourcesModel *new_CucumberRuntimeFormatterTestSourcesModel_init() {
  J2OBJC_NEW_IMPL(CucumberRuntimeFormatterTestSourcesModel, init)
}

CucumberRuntimeFormatterTestSourcesModel *create_CucumberRuntimeFormatterTestSourcesModel_init() {
  J2OBJC_CREATE_IMPL(CucumberRuntimeFormatterTestSourcesModel, init)
}

GherkinAstFeature *CucumberRuntimeFormatterTestSourcesModel_getFeatureForTestCaseWithCucumberRuntimeFormatterTestSourcesModel_AstNode_(CucumberRuntimeFormatterTestSourcesModel_AstNode *astNode) {
  CucumberRuntimeFormatterTestSourcesModel_initialize();
  while (((CucumberRuntimeFormatterTestSourcesModel_AstNode *) nil_chk(astNode))->parent_ != nil) {
    astNode = astNode->parent_;
  }
  return (GherkinAstFeature *) cast_chk(astNode->node_, [GherkinAstFeature class]);
}

GherkinAstBackground *CucumberRuntimeFormatterTestSourcesModel_getBackgroundForTestCaseWithCucumberRuntimeFormatterTestSourcesModel_AstNode_(CucumberRuntimeFormatterTestSourcesModel_AstNode *astNode) {
  CucumberRuntimeFormatterTestSourcesModel_initialize();
  GherkinAstFeature *feature = CucumberRuntimeFormatterTestSourcesModel_getFeatureForTestCaseWithCucumberRuntimeFormatterTestSourcesModel_AstNode_(astNode);
  GherkinAstScenarioDefinition *backgound = [((id<JavaUtilList>) nil_chk([((GherkinAstFeature *) nil_chk(feature)) getChildren])) getWithInt:0];
  if ([backgound isKindOfClass:[GherkinAstBackground class]]) {
    return (GherkinAstBackground *) cast_chk(backgound, [GherkinAstBackground class]);
  }
  else {
    return nil;
  }
}

GherkinAstScenarioDefinition *CucumberRuntimeFormatterTestSourcesModel_getScenarioDefinitionWithCucumberRuntimeFormatterTestSourcesModel_AstNode_(CucumberRuntimeFormatterTestSourcesModel_AstNode *astNode) {
  CucumberRuntimeFormatterTestSourcesModel_initialize();
  return [((CucumberRuntimeFormatterTestSourcesModel_AstNode *) nil_chk(astNode))->node_ isKindOfClass:[GherkinAstScenarioDefinition class]] ? (GherkinAstScenarioDefinition *) cast_chk(astNode->node_, [GherkinAstScenarioDefinition class]) : (GherkinAstScenarioDefinition *) cast_chk(((CucumberRuntimeFormatterTestSourcesModel_AstNode *) nil_chk(astNode->parent_))->parent_->node_, [GherkinAstScenarioDefinition class]);
}

jboolean CucumberRuntimeFormatterTestSourcesModel_isScenarioOutlineScenarioWithCucumberRuntimeFormatterTestSourcesModel_AstNode_(CucumberRuntimeFormatterTestSourcesModel_AstNode *astNode) {
  CucumberRuntimeFormatterTestSourcesModel_initialize();
  return !([((CucumberRuntimeFormatterTestSourcesModel_AstNode *) nil_chk(astNode))->node_ isKindOfClass:[GherkinAstScenarioDefinition class]]);
}

jboolean CucumberRuntimeFormatterTestSourcesModel_isBackgroundStepWithCucumberRuntimeFormatterTestSourcesModel_AstNode_(CucumberRuntimeFormatterTestSourcesModel_AstNode *astNode) {
  CucumberRuntimeFormatterTestSourcesModel_initialize();
  return [((CucumberRuntimeFormatterTestSourcesModel_AstNode *) nil_chk(((CucumberRuntimeFormatterTestSourcesModel_AstNode *) nil_chk(astNode))->parent_))->node_ isKindOfClass:[GherkinAstBackground class]];
}

NSString *CucumberRuntimeFormatterTestSourcesModel_calculateIdWithCucumberRuntimeFormatterTestSourcesModel_AstNode_(CucumberRuntimeFormatterTestSourcesModel_AstNode *astNode) {
  CucumberRuntimeFormatterTestSourcesModel_initialize();
  GherkinAstNode *node = ((CucumberRuntimeFormatterTestSourcesModel_AstNode *) nil_chk(astNode))->node_;
  if ([node isKindOfClass:[GherkinAstScenarioDefinition class]]) {
    return JreStrcat("$C$", CucumberRuntimeFormatterTestSourcesModel_calculateIdWithCucumberRuntimeFormatterTestSourcesModel_AstNode_(astNode->parent_), ';', CucumberRuntimeFormatterTestSourcesModel_convertToIdWithNSString_([((GherkinAstScenarioDefinition *) nil_chk(((GherkinAstScenarioDefinition *) cast_chk(node, [GherkinAstScenarioDefinition class])))) getName]));
  }
  if ([node isKindOfClass:[CucumberRuntimeFormatterTestSourcesModel_ExamplesRowWrapperNode class]]) {
    return JreStrcat("$C$", CucumberRuntimeFormatterTestSourcesModel_calculateIdWithCucumberRuntimeFormatterTestSourcesModel_AstNode_(astNode->parent_), ';', JavaLangInteger_toStringWithInt_(((CucumberRuntimeFormatterTestSourcesModel_ExamplesRowWrapperNode *) nil_chk(((CucumberRuntimeFormatterTestSourcesModel_ExamplesRowWrapperNode *) cast_chk(node, [CucumberRuntimeFormatterTestSourcesModel_ExamplesRowWrapperNode class]))))->bodyRowIndex_ + 2));
  }
  if ([node isKindOfClass:[GherkinAstTableRow class]]) {
    return JreStrcat("$C$", CucumberRuntimeFormatterTestSourcesModel_calculateIdWithCucumberRuntimeFormatterTestSourcesModel_AstNode_(astNode->parent_), ';', JavaLangInteger_toStringWithInt_(1));
  }
  if ([node isKindOfClass:[GherkinAstExamples class]]) {
    return JreStrcat("$C$", CucumberRuntimeFormatterTestSourcesModel_calculateIdWithCucumberRuntimeFormatterTestSourcesModel_AstNode_(astNode->parent_), ';', CucumberRuntimeFormatterTestSourcesModel_convertToIdWithNSString_([((GherkinAstExamples *) nil_chk(((GherkinAstExamples *) cast_chk(node, [GherkinAstExamples class])))) getName]));
  }
  if ([node isKindOfClass:[GherkinAstFeature class]]) {
    return CucumberRuntimeFormatterTestSourcesModel_convertToIdWithNSString_([((GherkinAstFeature *) nil_chk(((GherkinAstFeature *) cast_chk(node, [GherkinAstFeature class])))) getName]);
  }
  return @"";
}

NSString *CucumberRuntimeFormatterTestSourcesModel_convertToIdWithNSString_(NSString *name) {
  CucumberRuntimeFormatterTestSourcesModel_initialize();
  return [((NSString *) nil_chk([((NSString *) nil_chk(name)) java_replaceAll:@"[\\s'_,!]" withReplacement:@"-"])) lowercaseString];
}

CucumberApiEventTestSourceRead *CucumberRuntimeFormatterTestSourcesModel_getTestSourceReadEventWithNSString_(CucumberRuntimeFormatterTestSourcesModel *self, NSString *uri) {
  if ([((id<JavaUtilMap>) nil_chk(self->pathToReadEventMap_)) containsKeyWithId:uri]) {
    return [self->pathToReadEventMap_ getWithId:uri];
  }
  return nil;
}

void CucumberRuntimeFormatterTestSourcesModel_parseGherkinSourceWithNSString_(CucumberRuntimeFormatterTestSourcesModel *self, NSString *path) {
  if (![((id<JavaUtilMap>) nil_chk(self->pathToReadEventMap_)) containsKeyWithId:path]) {
    return;
  }
  GherkinParser *parser = create_GherkinParser_initWithGherkinParser_Builder_(create_GherkinAstBuilder_init());
  GherkinTokenMatcher *matcher = create_GherkinTokenMatcher_init();
  @try {
    GherkinAstGherkinDocument *gherkinDocument = [parser parseWithNSString:((CucumberApiEventTestSourceRead *) nil_chk([self->pathToReadEventMap_ getWithId:path]))->source_ withGherkinParser_ITokenMatcher:matcher];
    [((id<JavaUtilMap>) nil_chk(self->pathToAstMap_)) putWithId:path withId:gherkinDocument];
    id<JavaUtilMap> nodeMap = create_JavaUtilHashMap_init();
    CucumberRuntimeFormatterTestSourcesModel_AstNode *currentParent = create_CucumberRuntimeFormatterTestSourcesModel_AstNode_initWithCucumberRuntimeFormatterTestSourcesModel_withGherkinAstNode_withCucumberRuntimeFormatterTestSourcesModel_AstNode_(self, [((GherkinAstGherkinDocument *) nil_chk(gherkinDocument)) getFeature], nil);
    for (GherkinAstScenarioDefinition * __strong child in nil_chk([((GherkinAstFeature *) nil_chk([gherkinDocument getFeature])) getChildren])) {
      CucumberRuntimeFormatterTestSourcesModel_processScenarioDefinitionWithJavaUtilMap_withGherkinAstScenarioDefinition_withCucumberRuntimeFormatterTestSourcesModel_AstNode_(self, nodeMap, child, currentParent);
    }
    [((id<JavaUtilMap>) nil_chk(self->pathToNodeMap_)) putWithId:path withId:nodeMap];
  }
  @catch (GherkinParserException *e) {
  }
}

void CucumberRuntimeFormatterTestSourcesModel_processScenarioDefinitionWithJavaUtilMap_withGherkinAstScenarioDefinition_withCucumberRuntimeFormatterTestSourcesModel_AstNode_(CucumberRuntimeFormatterTestSourcesModel *self, id<JavaUtilMap> nodeMap, GherkinAstScenarioDefinition *child, CucumberRuntimeFormatterTestSourcesModel_AstNode *currentParent) {
  CucumberRuntimeFormatterTestSourcesModel_AstNode *childNode = create_CucumberRuntimeFormatterTestSourcesModel_AstNode_initWithCucumberRuntimeFormatterTestSourcesModel_withGherkinAstNode_withCucumberRuntimeFormatterTestSourcesModel_AstNode_(self, child, currentParent);
  [((id<JavaUtilMap>) nil_chk(nodeMap)) putWithId:JavaLangInteger_valueOfWithInt_([((GherkinAstLocation *) nil_chk([((GherkinAstScenarioDefinition *) nil_chk(child)) getLocation])) getLine]) withId:childNode];
  for (GherkinAstStep * __strong step in nil_chk([child getSteps])) {
    [nodeMap putWithId:JavaLangInteger_valueOfWithInt_([((GherkinAstLocation *) nil_chk([((GherkinAstStep *) nil_chk(step)) getLocation])) getLine]) withId:create_CucumberRuntimeFormatterTestSourcesModel_AstNode_initWithCucumberRuntimeFormatterTestSourcesModel_withGherkinAstNode_withCucumberRuntimeFormatterTestSourcesModel_AstNode_(self, step, childNode)];
  }
  if ([child isKindOfClass:[GherkinAstScenarioOutline class]]) {
    CucumberRuntimeFormatterTestSourcesModel_processScenarioOutlineExamplesWithJavaUtilMap_withGherkinAstScenarioOutline_withCucumberRuntimeFormatterTestSourcesModel_AstNode_(self, nodeMap, (GherkinAstScenarioOutline *) cast_chk(child, [GherkinAstScenarioOutline class]), childNode);
  }
}

void CucumberRuntimeFormatterTestSourcesModel_processScenarioOutlineExamplesWithJavaUtilMap_withGherkinAstScenarioOutline_withCucumberRuntimeFormatterTestSourcesModel_AstNode_(CucumberRuntimeFormatterTestSourcesModel *self, id<JavaUtilMap> nodeMap, GherkinAstScenarioOutline *scenarioOutline, CucumberRuntimeFormatterTestSourcesModel_AstNode *childNode) {
  for (GherkinAstExamples * __strong examples in nil_chk([((GherkinAstScenarioOutline *) nil_chk(scenarioOutline)) getExamples])) {
    CucumberRuntimeFormatterTestSourcesModel_AstNode *examplesNode = create_CucumberRuntimeFormatterTestSourcesModel_AstNode_initWithCucumberRuntimeFormatterTestSourcesModel_withGherkinAstNode_withCucumberRuntimeFormatterTestSourcesModel_AstNode_(self, examples, childNode);
    GherkinAstTableRow *headerRow = [((GherkinAstExamples *) nil_chk(examples)) getTableHeader];
    CucumberRuntimeFormatterTestSourcesModel_AstNode *headerNode = create_CucumberRuntimeFormatterTestSourcesModel_AstNode_initWithCucumberRuntimeFormatterTestSourcesModel_withGherkinAstNode_withCucumberRuntimeFormatterTestSourcesModel_AstNode_(self, headerRow, examplesNode);
    [((id<JavaUtilMap>) nil_chk(nodeMap)) putWithId:JavaLangInteger_valueOfWithInt_([((GherkinAstLocation *) nil_chk([((GherkinAstTableRow *) nil_chk(headerRow)) getLocation])) getLine]) withId:headerNode];
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk([examples getTableBody])) size]; ++i) {
      GherkinAstTableRow *examplesRow = [((id<JavaUtilList>) nil_chk([examples getTableBody])) getWithInt:i];
      GherkinAstNode *rowNode = create_CucumberRuntimeFormatterTestSourcesModel_ExamplesRowWrapperNode_initWithCucumberRuntimeFormatterTestSourcesModel_withGherkinAstNode_withInt_(self, examplesRow, i);
      CucumberRuntimeFormatterTestSourcesModel_AstNode *expandedScenarioNode = create_CucumberRuntimeFormatterTestSourcesModel_AstNode_initWithCucumberRuntimeFormatterTestSourcesModel_withGherkinAstNode_withCucumberRuntimeFormatterTestSourcesModel_AstNode_(self, rowNode, examplesNode);
      [nodeMap putWithId:JavaLangInteger_valueOfWithInt_([((GherkinAstLocation *) nil_chk([((GherkinAstTableRow *) nil_chk(examplesRow)) getLocation])) getLine]) withId:expandedScenarioNode];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeFormatterTestSourcesModel)

@implementation CucumberRuntimeFormatterTestSourcesModel_ExamplesRowWrapperNode

- (instancetype __nonnull)initWithCucumberRuntimeFormatterTestSourcesModel:(CucumberRuntimeFormatterTestSourcesModel *)outer$
                                                        withGherkinAstNode:(GherkinAstNode *)examplesRow
                                                                   withInt:(jint)bodyRowIndex {
  CucumberRuntimeFormatterTestSourcesModel_ExamplesRowWrapperNode_initWithCucumberRuntimeFormatterTestSourcesModel_withGherkinAstNode_withInt_(self, outer$, examplesRow, bodyRowIndex);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCucumberRuntimeFormatterTestSourcesModel:withGherkinAstNode:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bodyRowIndex_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LGherkinAstNode;I", "LCucumberRuntimeFormatterTestSourcesModel;" };
  static const J2ObjcClassInfo _CucumberRuntimeFormatterTestSourcesModel_ExamplesRowWrapperNode = { "ExamplesRowWrapperNode", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x0, 1, 1, 1, -1, -1, -1, -1 };
  return &_CucumberRuntimeFormatterTestSourcesModel_ExamplesRowWrapperNode;
}

@end

void CucumberRuntimeFormatterTestSourcesModel_ExamplesRowWrapperNode_initWithCucumberRuntimeFormatterTestSourcesModel_withGherkinAstNode_withInt_(CucumberRuntimeFormatterTestSourcesModel_ExamplesRowWrapperNode *self, CucumberRuntimeFormatterTestSourcesModel *outer$, GherkinAstNode *examplesRow, jint bodyRowIndex) {
  GherkinAstNode_initWithGherkinAstLocation_(self, [((GherkinAstNode *) nil_chk(examplesRow)) getLocation]);
  self->bodyRowIndex_ = bodyRowIndex;
}

CucumberRuntimeFormatterTestSourcesModel_ExamplesRowWrapperNode *new_CucumberRuntimeFormatterTestSourcesModel_ExamplesRowWrapperNode_initWithCucumberRuntimeFormatterTestSourcesModel_withGherkinAstNode_withInt_(CucumberRuntimeFormatterTestSourcesModel *outer$, GherkinAstNode *examplesRow, jint bodyRowIndex) {
  J2OBJC_NEW_IMPL(CucumberRuntimeFormatterTestSourcesModel_ExamplesRowWrapperNode, initWithCucumberRuntimeFormatterTestSourcesModel_withGherkinAstNode_withInt_, outer$, examplesRow, bodyRowIndex)
}

CucumberRuntimeFormatterTestSourcesModel_ExamplesRowWrapperNode *create_CucumberRuntimeFormatterTestSourcesModel_ExamplesRowWrapperNode_initWithCucumberRuntimeFormatterTestSourcesModel_withGherkinAstNode_withInt_(CucumberRuntimeFormatterTestSourcesModel *outer$, GherkinAstNode *examplesRow, jint bodyRowIndex) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeFormatterTestSourcesModel_ExamplesRowWrapperNode, initWithCucumberRuntimeFormatterTestSourcesModel_withGherkinAstNode_withInt_, outer$, examplesRow, bodyRowIndex)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeFormatterTestSourcesModel_ExamplesRowWrapperNode)

@implementation CucumberRuntimeFormatterTestSourcesModel_AstNode

- (instancetype __nonnull)initWithCucumberRuntimeFormatterTestSourcesModel:(CucumberRuntimeFormatterTestSourcesModel *)outer$
                                                        withGherkinAstNode:(GherkinAstNode *)node
                      withCucumberRuntimeFormatterTestSourcesModel_AstNode:(CucumberRuntimeFormatterTestSourcesModel_AstNode *)parent {
  CucumberRuntimeFormatterTestSourcesModel_AstNode_initWithCucumberRuntimeFormatterTestSourcesModel_withGherkinAstNode_withCucumberRuntimeFormatterTestSourcesModel_AstNode_(self, outer$, node, parent);
  return self;
}

- (void)dealloc {
  RELEASE_(node_);
  RELEASE_(parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCucumberRuntimeFormatterTestSourcesModel:withGherkinAstNode:withCucumberRuntimeFormatterTestSourcesModel_AstNode:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "node_", "LGherkinAstNode;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "parent_", "LCucumberRuntimeFormatterTestSourcesModel_AstNode;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LGherkinAstNode;LCucumberRuntimeFormatterTestSourcesModel_AstNode;", "LCucumberRuntimeFormatterTestSourcesModel;" };
  static const J2ObjcClassInfo _CucumberRuntimeFormatterTestSourcesModel_AstNode = { "AstNode", "cucumber.runtime.formatter", ptrTable, methods, fields, 7, 0x0, 1, 2, 1, -1, -1, -1, -1 };
  return &_CucumberRuntimeFormatterTestSourcesModel_AstNode;
}

@end

void CucumberRuntimeFormatterTestSourcesModel_AstNode_initWithCucumberRuntimeFormatterTestSourcesModel_withGherkinAstNode_withCucumberRuntimeFormatterTestSourcesModel_AstNode_(CucumberRuntimeFormatterTestSourcesModel_AstNode *self, CucumberRuntimeFormatterTestSourcesModel *outer$, GherkinAstNode *node, CucumberRuntimeFormatterTestSourcesModel_AstNode *parent) {
  NSObject_init(self);
  JreStrongAssign(&self->node_, node);
  JreStrongAssign(&self->parent_, parent);
}

CucumberRuntimeFormatterTestSourcesModel_AstNode *new_CucumberRuntimeFormatterTestSourcesModel_AstNode_initWithCucumberRuntimeFormatterTestSourcesModel_withGherkinAstNode_withCucumberRuntimeFormatterTestSourcesModel_AstNode_(CucumberRuntimeFormatterTestSourcesModel *outer$, GherkinAstNode *node, CucumberRuntimeFormatterTestSourcesModel_AstNode *parent) {
  J2OBJC_NEW_IMPL(CucumberRuntimeFormatterTestSourcesModel_AstNode, initWithCucumberRuntimeFormatterTestSourcesModel_withGherkinAstNode_withCucumberRuntimeFormatterTestSourcesModel_AstNode_, outer$, node, parent)
}

CucumberRuntimeFormatterTestSourcesModel_AstNode *create_CucumberRuntimeFormatterTestSourcesModel_AstNode_initWithCucumberRuntimeFormatterTestSourcesModel_withGherkinAstNode_withCucumberRuntimeFormatterTestSourcesModel_AstNode_(CucumberRuntimeFormatterTestSourcesModel *outer$, GherkinAstNode *node, CucumberRuntimeFormatterTestSourcesModel_AstNode *parent) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeFormatterTestSourcesModel_AstNode, initWithCucumberRuntimeFormatterTestSourcesModel_withGherkinAstNode_withCucumberRuntimeFormatterTestSourcesModel_AstNode_, outer$, node, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeFormatterTestSourcesModel_AstNode)
