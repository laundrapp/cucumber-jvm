//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/laundrapp_org/cucumber-jvm/core/src/main/java/cucumber/runtime/MethodFormat.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/runtime/CucumberException.h"
#include "cucumber/runtime/MethodFormat.h"
#include "java/lang/Exception.h"
#include "java/lang/reflect/Method.h"
#include "java/net/URL.h"
#include "java/security/CodeSource.h"
#include "java/security/ProtectionDomain.h"
#include "java/text/MessageFormat.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface CucumberRuntimeMethodFormat () {
 @public
  JavaTextMessageFormat *format_;
}

/*!
 @param format the format string to use. There are several pattern tokens that can be used:                
  <ul>                
  <li> <strong> %M </strong> : Modifiers </li>                
  <li> <strong> %qr </strong> : Qualified return type </li>                
  <li> <strong> %r </strong> : Unqualified return type </li>                
  <li> <strong> %qc </strong> : Qualified class </li>                
  <li> <strong> %c </strong> : Unqualified class </li>                
  <li> <strong> %m </strong> : Method name </li>                
  <li> <strong> %qa </strong> : Qualified arguments </li>                
  <li> <strong> %a </strong> : Unqualified arguments </li>                
  <li> <strong> %qe </strong> : Qualified exceptions </li>                
  <li> <strong> %e </strong> : Unqualified exceptions </li>                
  <li> <strong> %s </strong> : Code source </li>                
  </ul>
 */
- (instancetype __nonnull)initWithNSString:(NSString *)format;

- (NSString *)getCodeSourceWithJavaLangReflectMethod:(JavaLangReflectMethod *)method;

@end

J2OBJC_FIELD_SETTER(CucumberRuntimeMethodFormat, format_, JavaTextMessageFormat *)

inline JavaUtilRegexPattern *CucumberRuntimeMethodFormat_get_METHOD_PATTERN(void);
static JavaUtilRegexPattern *CucumberRuntimeMethodFormat_METHOD_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CucumberRuntimeMethodFormat, METHOD_PATTERN, JavaUtilRegexPattern *)

inline NSString *CucumberRuntimeMethodFormat_get_PACKAGE_PATTERN(void);
static NSString *CucumberRuntimeMethodFormat_PACKAGE_PATTERN = @"[^,]*\\.";
J2OBJC_STATIC_FIELD_OBJ_FINAL(CucumberRuntimeMethodFormat, PACKAGE_PATTERN, NSString *)

__attribute__((unused)) static void CucumberRuntimeMethodFormat_initWithNSString_(CucumberRuntimeMethodFormat *self, NSString *format);

__attribute__((unused)) static CucumberRuntimeMethodFormat *new_CucumberRuntimeMethodFormat_initWithNSString_(NSString *format) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberRuntimeMethodFormat *create_CucumberRuntimeMethodFormat_initWithNSString_(NSString *format);

__attribute__((unused)) static NSString *CucumberRuntimeMethodFormat_getCodeSourceWithJavaLangReflectMethod_(CucumberRuntimeMethodFormat *self, JavaLangReflectMethod *method);

J2OBJC_INITIALIZED_DEFN(CucumberRuntimeMethodFormat)

CucumberRuntimeMethodFormat *CucumberRuntimeMethodFormat_SHORT;
CucumberRuntimeMethodFormat *CucumberRuntimeMethodFormat_FULL;

@implementation CucumberRuntimeMethodFormat

- (instancetype __nonnull)initWithNSString:(NSString *)format {
  CucumberRuntimeMethodFormat_initWithNSString_(self, format);
  return self;
}

- (NSString *)formatWithJavaLangReflectMethod:(JavaLangReflectMethod *)method {
  NSString *signature = [((JavaLangReflectMethod *) nil_chk(method)) toGenericString];
  JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(CucumberRuntimeMethodFormat_METHOD_PATTERN)) matcherWithJavaLangCharSequence:signature];
  if ([((JavaUtilRegexMatcher *) nil_chk(matcher)) find]) {
    NSString *M = [matcher groupWithInt:1];
    NSString *r = [matcher groupWithInt:2];
    NSString *qc = [matcher groupWithInt:3];
    NSString *m = [matcher groupWithInt:4];
    NSString *qa = [matcher groupWithInt:5];
    NSString *qe = [matcher groupWithInt:6];
    NSString *c = [((NSString *) nil_chk(qc)) java_replaceAll:CucumberRuntimeMethodFormat_PACKAGE_PATTERN withReplacement:@""];
    NSString *a = [((NSString *) nil_chk(qa)) java_replaceAll:CucumberRuntimeMethodFormat_PACKAGE_PATTERN withReplacement:@""];
    NSString *e = [((NSString *) nil_chk(qe)) java_replaceAll:CucumberRuntimeMethodFormat_PACKAGE_PATTERN withReplacement:@""];
    NSString *s = CucumberRuntimeMethodFormat_getCodeSourceWithJavaLangReflectMethod_(self, method);
    return [((JavaTextMessageFormat *) nil_chk(format_)) formatWithId:[IOSObjectArray arrayWithObjects:(id[]){ M, r, qc, m, qa, qe, c, a, e, s } count:10 type:NSObject_class_()]];
  }
  else {
    @throw create_CucumberRuntimeCucumberException_initWithNSString_(JreStrcat("$$", @"Cucumber bug: Couldn't format ", signature));
  }
}

- (NSString *)getCodeSourceWithJavaLangReflectMethod:(JavaLangReflectMethod *)method {
  return CucumberRuntimeMethodFormat_getCodeSourceWithJavaLangReflectMethod_(self, method);
}

- (void)dealloc {
  RELEASE_(format_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 3, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(formatWithJavaLangReflectMethod:);
  methods[2].selector = @selector(getCodeSourceWithJavaLangReflectMethod:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "METHOD_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
    { "PACKAGE_PATTERN", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "format_", "LJavaTextMessageFormat;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SHORT", "LCucumberRuntimeMethodFormat;", .constantValue.asLong = 0, 0x19, -1, 6, -1, -1 },
    { "FULL", "LCucumberRuntimeMethodFormat;", .constantValue.asLong = 0, 0x19, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "format", "LJavaLangReflectMethod;", "getCodeSource", &CucumberRuntimeMethodFormat_METHOD_PATTERN, &CucumberRuntimeMethodFormat_PACKAGE_PATTERN, &CucumberRuntimeMethodFormat_SHORT, &CucumberRuntimeMethodFormat_FULL };
  static const J2ObjcClassInfo _CucumberRuntimeMethodFormat = { "MethodFormat", "cucumber.runtime", ptrTable, methods, fields, 7, 0x1, 3, 5, -1, -1, -1, -1, -1 };
  return &_CucumberRuntimeMethodFormat;
}

+ (void)initialize {
  if (self == [CucumberRuntimeMethodFormat class]) {
    JreStrongAssign(&CucumberRuntimeMethodFormat_METHOD_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"((?:static\\s|public\\s)+)([^\\s]*)\\s\\.?(.*)\\.([^\\(]*)\\(([^\\)]*)\\)(?: throws )?(.*)"));
    JreStrongAssignAndConsume(&CucumberRuntimeMethodFormat_SHORT, new_CucumberRuntimeMethodFormat_initWithNSString_(@"%c.%m(%a)"));
    JreStrongAssignAndConsume(&CucumberRuntimeMethodFormat_FULL, new_CucumberRuntimeMethodFormat_initWithNSString_(@"%qc.%m(%a) in %s"));
    J2OBJC_SET_INITIALIZED(CucumberRuntimeMethodFormat)
  }
}

@end

void CucumberRuntimeMethodFormat_initWithNSString_(CucumberRuntimeMethodFormat *self, NSString *format) {
  NSObject_init(self);
  NSString *pattern = [((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk(format)) java_replaceAll:@"%M" withReplacement:@"{0}"])) java_replaceAll:@"%r" withReplacement:@"{1}"])) java_replaceAll:@"%qc" withReplacement:@"{2}"])) java_replaceAll:@"%m" withReplacement:@"{3}"])) java_replaceAll:@"%qa" withReplacement:@"{4}"])) java_replaceAll:@"%qe" withReplacement:@"{5}"])) java_replaceAll:@"%c" withReplacement:@"{6}"])) java_replaceAll:@"%a" withReplacement:@"{7}"])) java_replaceAll:@"%e" withReplacement:@"{8}"])) java_replaceAll:@"%s" withReplacement:@"{9}"];
  JreStrongAssignAndConsume(&self->format_, new_JavaTextMessageFormat_initWithNSString_(pattern));
}

CucumberRuntimeMethodFormat *new_CucumberRuntimeMethodFormat_initWithNSString_(NSString *format) {
  J2OBJC_NEW_IMPL(CucumberRuntimeMethodFormat, initWithNSString_, format)
}

CucumberRuntimeMethodFormat *create_CucumberRuntimeMethodFormat_initWithNSString_(NSString *format) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeMethodFormat, initWithNSString_, format)
}

NSString *CucumberRuntimeMethodFormat_getCodeSourceWithJavaLangReflectMethod_(CucumberRuntimeMethodFormat *self, JavaLangReflectMethod *method) {
  @try {
    JavaSecurityProtectionDomain *protectionDomain = [((IOSClass *) nil_chk([((JavaLangReflectMethod *) nil_chk(method)) getDeclaringClass])) getProtectionDomain];
    return [((JavaNetURL *) nil_chk([((JavaSecurityCodeSource *) nil_chk([((JavaSecurityProtectionDomain *) nil_chk(protectionDomain)) getCodeSource])) getLocation])) toExternalForm];
  }
  @catch (JavaLangException *e) {
    return [((IOSClass *) nil_chk([method getDeclaringClass])) getName];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeMethodFormat)
