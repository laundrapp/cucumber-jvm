//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/Reflections.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/runtime/ClassFinder.h"
#include "cucumber/runtime/CucumberException.h"
#include "cucumber/runtime/NoInstancesException.h"
#include "cucumber/runtime/Reflections.h"
#include "cucumber/runtime/TooManyInstancesException.h"
#include "cucumber/runtime/Utils.h"
#include "java/lang/Exception.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/reflect/Constructor.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@interface CCBRReflections () {
 @public
  id<CCBRClassFinder> classFinder_;
}

- (jboolean)hasConstructorWithIOSClass:(IOSClass *)clazz
                     withIOSClassArray:(IOSObjectArray *)paramTypes;

@end

J2OBJC_FIELD_SETTER(CCBRReflections, classFinder_, id<CCBRClassFinder>)

__attribute__((unused)) static jboolean CCBRReflections_hasConstructorWithIOSClass_withIOSClassArray_(CCBRReflections *self, IOSClass *clazz, IOSObjectArray *paramTypes);

@implementation CCBRReflections

- (instancetype __nonnull)initWithCCBRClassFinder:(id<CCBRClassFinder>)classFinder {
  CCBRReflections_initWithCCBRClassFinder_(self, classFinder);
  return self;
}

- (id)instantiateExactlyOneSubclassWithIOSClass:(IOSClass *)parentType
                               withJavaUtilList:(id<JavaUtilList>)packageNames
                              withIOSClassArray:(IOSObjectArray *)constructorParams
                              withNSObjectArray:(IOSObjectArray *)constructorArgs
                                         withId:(id)fallback {
  id<JavaUtilCollection> instances = [self instantiateSubclassesWithIOSClass:parentType withJavaUtilList:packageNames withIOSClassArray:constructorParams withNSObjectArray:constructorArgs];
  if ([((id<JavaUtilCollection>) nil_chk(instances)) size] == 1) {
    return [((id<JavaUtilIterator>) nil_chk([instances iterator])) next];
  }
  else if ([instances isEmpty]) {
    if (fallback != nil) {
      return fallback;
    }
    @throw create_CCBRNoInstancesException_initWithIOSClass_(parentType);
  }
  else {
    @throw create_CCBRTooManyInstancesException_initWithJavaUtilCollection_(instances);
  }
}

- (id<JavaUtilCollection>)instantiateSubclassesWithIOSClass:(IOSClass *)parentType
                                           withJavaUtilList:(id<JavaUtilList>)packageNames
                                          withIOSClassArray:(IOSObjectArray *)constructorParams
                                          withNSObjectArray:(IOSObjectArray *)constructorArgs {
  id<JavaUtilCollection> result = create_JavaUtilHashSet_init();
  for (NSString * __strong packageName in nil_chk(packageNames)) {
    for (IOSClass * __strong clazz in nil_chk([((id<CCBRClassFinder>) nil_chk(classFinder_)) getDescendantsWithIOSClass:parentType withNSString:packageName])) {
      if (CCBRUtils_isInstantiableWithIOSClass_(clazz)) {
        [result addWithId:[self newInstanceWithIOSClassArray:constructorParams withNSObjectArray:constructorArgs withIOSClass:clazz]];
      }
    }
  }
  return result;
}

- (id)newInstanceWithIOSClassArray:(IOSObjectArray *)constructorParams
                 withNSObjectArray:(IOSObjectArray *)constructorArgs
                      withIOSClass:(IOSClass *)clazz {
  JavaLangReflectConstructor *constructor = nil;
  @try {
    constructor = [((IOSClass *) nil_chk(clazz)) getConstructor:constructorParams];
    @try {
      return [((JavaLangReflectConstructor *) nil_chk(constructor)) newInstanceWithNSObjectArray:constructorArgs];
    }
    @catch (JavaLangException *e) {
      NSString *message = NSString_java_formatWithNSString_withNSObjectArray_(@"Failed to instantiate %s with %s", [IOSObjectArray arrayWithObjects:(id[]){ [constructor toGenericString], JavaUtilArrays_asListWithNSObjectArray_(constructorArgs) } count:2 type:NSObject_class_()]);
      @throw create_CCBRCucumberException_initWithNSString_withJavaLangThrowable_(message, e);
    }
  }
  @catch (JavaLangNoSuchMethodException *e) {
    @throw create_CCBRCucumberException_initWithJavaLangThrowable_(e);
  }
}

- (jboolean)hasConstructorWithIOSClass:(IOSClass *)clazz
                     withIOSClassArray:(IOSObjectArray *)paramTypes {
  return CCBRReflections_hasConstructorWithIOSClass_withIOSClassArray_(self, clazz, paramTypes);
}

- (void)dealloc {
  RELEASE_(classFinder_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "LNSObject;", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "Z", 0x2, 10, 11, -1, 12, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRClassFinder:);
  methods[1].selector = @selector(instantiateExactlyOneSubclassWithIOSClass:withJavaUtilList:withIOSClassArray:withNSObjectArray:withId:);
  methods[2].selector = @selector(instantiateSubclassesWithIOSClass:withJavaUtilList:withIOSClassArray:withNSObjectArray:);
  methods[3].selector = @selector(newInstanceWithIOSClassArray:withNSObjectArray:withIOSClass:);
  methods[4].selector = @selector(hasConstructorWithIOSClass:withIOSClassArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "classFinder_", "LCCBRClassFinder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LCCBRClassFinder;", "instantiateExactlyOneSubclass", "LIOSClass;LJavaUtilList;[LIOSClass;[LNSObject;LNSObject;", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Ljava/util/List<Ljava/lang/String;>;[Ljava/lang/Class;[Ljava/lang/Object;TT;)TT;", "instantiateSubclasses", "LIOSClass;LJavaUtilList;[LIOSClass;[LNSObject;", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Ljava/util/List<Ljava/lang/String;>;[Ljava/lang/Class;[Ljava/lang/Object;)Ljava/util/Collection<+TT;>;", "newInstance", "[LIOSClass;[LNSObject;LIOSClass;", "<T:Ljava/lang/Object;>([Ljava/lang/Class;[Ljava/lang/Object;Ljava/lang/Class<+TT;>;)TT;", "hasConstructor", "LIOSClass;[LIOSClass;", "(Ljava/lang/Class<*>;[Ljava/lang/Class;)Z" };
  static const J2ObjcClassInfo _CCBRReflections = { "Reflections", "cucumber.runtime", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_CCBRReflections;
}

@end

void CCBRReflections_initWithCCBRClassFinder_(CCBRReflections *self, id<CCBRClassFinder> classFinder) {
  NSObject_init(self);
  JreStrongAssign(&self->classFinder_, classFinder);
}

CCBRReflections *new_CCBRReflections_initWithCCBRClassFinder_(id<CCBRClassFinder> classFinder) {
  J2OBJC_NEW_IMPL(CCBRReflections, initWithCCBRClassFinder_, classFinder)
}

CCBRReflections *create_CCBRReflections_initWithCCBRClassFinder_(id<CCBRClassFinder> classFinder) {
  J2OBJC_CREATE_IMPL(CCBRReflections, initWithCCBRClassFinder_, classFinder)
}

jboolean CCBRReflections_hasConstructorWithIOSClass_withIOSClassArray_(CCBRReflections *self, IOSClass *clazz, IOSObjectArray *paramTypes) {
  @try {
    [((IOSClass *) nil_chk(clazz)) getConstructor:paramTypes];
    return true;
  }
  @catch (JavaLangNoSuchMethodException *e) {
    return false;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRReflections)
