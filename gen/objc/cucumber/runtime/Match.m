//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/Match.java
//

#include "J2ObjC_source.h"
#include "cucumber/runtime/Match.h"
#include "java/util/Collections.h"
#include "java/util/List.h"

@interface CucumberRuntimeMatch () {
 @public
  id<JavaUtilList> arguments_;
  NSString *location_;
}

@end

J2OBJC_FIELD_SETTER(CucumberRuntimeMatch, arguments_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CucumberRuntimeMatch, location_, NSString *)

J2OBJC_INITIALIZED_DEFN(CucumberRuntimeMatch)

CucumberRuntimeMatch *CucumberRuntimeMatch_UNDEFINED;

@implementation CucumberRuntimeMatch

- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)arguments
                                  withNSString:(NSString *)location {
  CucumberRuntimeMatch_initWithJavaUtilList_withNSString_(self, arguments, location);
  return self;
}

- (id<JavaUtilList>)getArguments {
  return arguments_;
}

- (NSString *)getLocation {
  return location_;
}

- (void)dealloc {
  RELEASE_(arguments_);
  RELEASE_(location_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilList:withNSString:);
  methods[1].selector = @selector(getArguments);
  methods[2].selector = @selector(getLocation);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "arguments_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
    { "location_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "UNDEFINED", "LCucumberRuntimeMatch;", .constantValue.asLong = 0, 0x19, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;LNSString;", "(Ljava/util/List<Lcucumber/runtime/Argument;>;Ljava/lang/String;)V", "()Ljava/util/List<Lcucumber/runtime/Argument;>;", "Ljava/util/List<Lcucumber/runtime/Argument;>;", &CucumberRuntimeMatch_UNDEFINED };
  static const J2ObjcClassInfo _CucumberRuntimeMatch = { "Match", "cucumber.runtime", ptrTable, methods, fields, 7, 0x1, 3, 3, -1, -1, -1, -1, -1 };
  return &_CucumberRuntimeMatch;
}

+ (void)initialize {
  if (self == [CucumberRuntimeMatch class]) {
    JreStrongAssignAndConsume(&CucumberRuntimeMatch_UNDEFINED, new_CucumberRuntimeMatch_initWithJavaUtilList_withNSString_(JavaUtilCollections_emptyList(), nil));
    J2OBJC_SET_INITIALIZED(CucumberRuntimeMatch)
  }
}

@end

void CucumberRuntimeMatch_initWithJavaUtilList_withNSString_(CucumberRuntimeMatch *self, id<JavaUtilList> arguments, NSString *location) {
  NSObject_init(self);
  JreStrongAssign(&self->arguments_, arguments);
  JreStrongAssign(&self->location_, location);
}

CucumberRuntimeMatch *new_CucumberRuntimeMatch_initWithJavaUtilList_withNSString_(id<JavaUtilList> arguments, NSString *location) {
  J2OBJC_NEW_IMPL(CucumberRuntimeMatch, initWithJavaUtilList_withNSString_, arguments, location)
}

CucumberRuntimeMatch *create_CucumberRuntimeMatch_initWithJavaUtilList_withNSString_(id<JavaUtilList> arguments, NSString *location) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeMatch, initWithJavaUtilList_withNSString_, arguments, location)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeMatch)
