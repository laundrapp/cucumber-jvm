//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/DefinitionArgument.java
//

#include "J2ObjC_source.h"
#include "cucumber/runtime/DefinitionArgument.h"
#include "io/cucumber/cucumberexpressions/Group.h"
#include "io/cucumber/stepexpression/Argument.h"
#include "io/cucumber/stepexpression/ExpressionArgument.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface CCBRDefinitionArgument () {
 @public
  IoCucumberCucumberexpressionsGroup *group_;
}

- (instancetype __nonnull)initWithIoCucumberStepexpressionExpressionArgument:(IoCucumberStepexpressionExpressionArgument *)expressionArgument;

@end

J2OBJC_FIELD_SETTER(CCBRDefinitionArgument, group_, IoCucumberCucumberexpressionsGroup *)

__attribute__((unused)) static void CCBRDefinitionArgument_initWithIoCucumberStepexpressionExpressionArgument_(CCBRDefinitionArgument *self, IoCucumberStepexpressionExpressionArgument *expressionArgument);

__attribute__((unused)) static CCBRDefinitionArgument *new_CCBRDefinitionArgument_initWithIoCucumberStepexpressionExpressionArgument_(IoCucumberStepexpressionExpressionArgument *expressionArgument) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRDefinitionArgument *create_CCBRDefinitionArgument_initWithIoCucumberStepexpressionExpressionArgument_(IoCucumberStepexpressionExpressionArgument *expressionArgument);

@implementation CCBRDefinitionArgument

- (instancetype __nonnull)initWithIoCucumberStepexpressionExpressionArgument:(IoCucumberStepexpressionExpressionArgument *)expressionArgument {
  CCBRDefinitionArgument_initWithIoCucumberStepexpressionExpressionArgument_(self, expressionArgument);
  return self;
}

+ (id<JavaUtilList>)createArgumentsWithJavaUtilList:(id<JavaUtilList>)match {
  return CCBRDefinitionArgument_createArgumentsWithJavaUtilList_(match);
}

- (NSString *)getValue {
  return group_ == nil ? nil : [group_ getValue];
}

- (jint)getStart {
  return group_ == nil ? -1 : [group_ getStart];
}

- (jint)getEnd {
  return group_ == nil ? -1 : [group_ getEnd];
}

- (void)dealloc {
  RELEASE_(group_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIoCucumberStepexpressionExpressionArgument:);
  methods[1].selector = @selector(createArgumentsWithJavaUtilList:);
  methods[2].selector = @selector(getValue);
  methods[3].selector = @selector(getStart);
  methods[4].selector = @selector(getEnd);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "group_", "LIoCucumberCucumberexpressionsGroup;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoCucumberStepexpressionExpressionArgument;", "createArguments", "LJavaUtilList;", "(Ljava/util/List<Lio/cucumber/stepexpression/Argument;>;)Ljava/util/List<Lcucumber/api/Argument;>;" };
  static const J2ObjcClassInfo _CCBRDefinitionArgument = { "DefinitionArgument", "cucumber.runtime", ptrTable, methods, fields, 7, 0x11, 5, 1, -1, -1, -1, -1, -1 };
  return &_CCBRDefinitionArgument;
}

@end

void CCBRDefinitionArgument_initWithIoCucumberStepexpressionExpressionArgument_(CCBRDefinitionArgument *self, IoCucumberStepexpressionExpressionArgument *expressionArgument) {
  NSObject_init(self);
  JreStrongAssign(&self->group_, [((IoCucumberStepexpressionExpressionArgument *) nil_chk(expressionArgument)) getGroup]);
}

CCBRDefinitionArgument *new_CCBRDefinitionArgument_initWithIoCucumberStepexpressionExpressionArgument_(IoCucumberStepexpressionExpressionArgument *expressionArgument) {
  J2OBJC_NEW_IMPL(CCBRDefinitionArgument, initWithIoCucumberStepexpressionExpressionArgument_, expressionArgument)
}

CCBRDefinitionArgument *create_CCBRDefinitionArgument_initWithIoCucumberStepexpressionExpressionArgument_(IoCucumberStepexpressionExpressionArgument *expressionArgument) {
  J2OBJC_CREATE_IMPL(CCBRDefinitionArgument, initWithIoCucumberStepexpressionExpressionArgument_, expressionArgument)
}

id<JavaUtilList> CCBRDefinitionArgument_createArgumentsWithJavaUtilList_(id<JavaUtilList> match) {
  CCBRDefinitionArgument_initialize();
  id<JavaUtilList> args = create_JavaUtilArrayList_init();
  for (id<IoCucumberStepexpressionArgument> __strong argument in nil_chk(match)) {
    if ([argument isKindOfClass:[IoCucumberStepexpressionExpressionArgument class]]) {
      [args addWithId:create_CCBRDefinitionArgument_initWithIoCucumberStepexpressionExpressionArgument_((IoCucumberStepexpressionExpressionArgument *) cast_chk(argument, [IoCucumberStepexpressionExpressionArgument class]))];
    }
  }
  return args;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRDefinitionArgument)
