//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/NamePredicate.java
//

#include "J2ObjC_source.h"
#include "cucumber/runtime/NamePredicate.h"
#include "gherkin/events/PickleEvent.h"
#include "gherkin/pickles/Pickle.h"
#include "java/util/List.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface CCBRNamePredicate () {
 @public
  id<JavaUtilList> patterns_;
}

@end

J2OBJC_FIELD_SETTER(CCBRNamePredicate, patterns_, id<JavaUtilList>)

@implementation CCBRNamePredicate

- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)patterns {
  CCBRNamePredicate_initWithJavaUtilList_(self, patterns);
  return self;
}

- (jboolean)applyWithGherkinEventsPickleEvent:(GherkinEventsPickleEvent *)pickleEvent {
  NSString *name = [((GherkinPicklesPickle *) nil_chk(((GherkinEventsPickleEvent *) nil_chk(pickleEvent))->pickle_)) getName];
  for (JavaUtilRegexPattern * __strong pattern in nil_chk(patterns_)) {
    if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(pattern)) matcherWithJavaLangCharSequence:name])) find]) {
      return true;
    }
  }
  return false;
}

- (void)dealloc {
  RELEASE_(patterns_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilList:);
  methods[1].selector = @selector(applyWithGherkinEventsPickleEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "patterns_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Ljava/util/regex/Pattern;>;)V", "apply", "LGherkinEventsPickleEvent;", "Ljava/util/List<Ljava/util/regex/Pattern;>;" };
  static const J2ObjcClassInfo _CCBRNamePredicate = { "NamePredicate", "cucumber.runtime", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_CCBRNamePredicate;
}

@end

void CCBRNamePredicate_initWithJavaUtilList_(CCBRNamePredicate *self, id<JavaUtilList> patterns) {
  NSObject_init(self);
  JreStrongAssign(&self->patterns_, patterns);
}

CCBRNamePredicate *new_CCBRNamePredicate_initWithJavaUtilList_(id<JavaUtilList> patterns) {
  J2OBJC_NEW_IMPL(CCBRNamePredicate, initWithJavaUtilList_, patterns)
}

CCBRNamePredicate *create_CCBRNamePredicate_initWithJavaUtilList_(id<JavaUtilList> patterns) {
  J2OBJC_CREATE_IMPL(CCBRNamePredicate, initWithJavaUtilList_, patterns)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRNamePredicate)
