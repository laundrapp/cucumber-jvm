//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/laundrapp_org/cucumber-jvm/core/src/main/java/cucumber/runtime/io/MultiLoader.java
//

#include "J2ObjC_source.h"
#include "cucumber/runtime/io/ClasspathResourceLoader.h"
#include "cucumber/runtime/io/FileResourceLoader.h"
#include "cucumber/runtime/io/MultiLoader.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Iterable.h"

@interface CucumberRuntimeIoMultiLoader () {
 @public
  CucumberRuntimeIoClasspathResourceLoader *classpath_;
  CucumberRuntimeIoFileResourceLoader *fs_;
}

+ (jboolean)isClasspathPathWithNSString:(NSString *)path;

+ (NSString *)stripClasspathPrefixWithNSString:(NSString *)path;

@end

J2OBJC_FIELD_SETTER(CucumberRuntimeIoMultiLoader, classpath_, CucumberRuntimeIoClasspathResourceLoader *)
J2OBJC_FIELD_SETTER(CucumberRuntimeIoMultiLoader, fs_, CucumberRuntimeIoFileResourceLoader *)

__attribute__((unused)) static jboolean CucumberRuntimeIoMultiLoader_isClasspathPathWithNSString_(NSString *path);

__attribute__((unused)) static NSString *CucumberRuntimeIoMultiLoader_stripClasspathPrefixWithNSString_(NSString *path);

NSString *CucumberRuntimeIoMultiLoader_CLASSPATH_SCHEME = @"classpath:";

@implementation CucumberRuntimeIoMultiLoader

- (instancetype __nonnull)initWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader {
  CucumberRuntimeIoMultiLoader_initWithJavaLangClassLoader_(self, classLoader);
  return self;
}

- (id<JavaLangIterable>)resourcesWithNSString:(NSString *)path
                                 withNSString:(NSString *)suffix {
  if (CucumberRuntimeIoMultiLoader_isClasspathPathWithNSString_(path)) {
    return [((CucumberRuntimeIoClasspathResourceLoader *) nil_chk(classpath_)) resourcesWithNSString:CucumberRuntimeIoMultiLoader_stripClasspathPrefixWithNSString_(path) withNSString:suffix];
  }
  else {
    return [((CucumberRuntimeIoFileResourceLoader *) nil_chk(fs_)) resourcesWithNSString:path withNSString:suffix];
  }
}

+ (NSString *)packageNameWithNSString:(NSString *)gluePath {
  return CucumberRuntimeIoMultiLoader_packageNameWithNSString_(gluePath);
}

+ (jboolean)isClasspathPathWithNSString:(NSString *)path {
  return CucumberRuntimeIoMultiLoader_isClasspathPathWithNSString_(path);
}

+ (NSString *)stripClasspathPrefixWithNSString:(NSString *)path {
  return CucumberRuntimeIoMultiLoader_stripClasspathPrefixWithNSString_(path);
}

- (void)dealloc {
  RELEASE_(classpath_);
  RELEASE_(fs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 6, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 7, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangClassLoader:);
  methods[1].selector = @selector(resourcesWithNSString:withNSString:);
  methods[2].selector = @selector(packageNameWithNSString:);
  methods[3].selector = @selector(isClasspathPathWithNSString:);
  methods[4].selector = @selector(stripClasspathPrefixWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CLASSPATH_SCHEME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 8, -1, -1 },
    { "classpath_", "LCucumberRuntimeIoClasspathResourceLoader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fs_", "LCucumberRuntimeIoFileResourceLoader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangClassLoader;", "resources", "LNSString;LNSString;", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Iterable<Lcucumber/runtime/io/Resource;>;", "packageName", "LNSString;", "isClasspathPath", "stripClasspathPrefix", &CucumberRuntimeIoMultiLoader_CLASSPATH_SCHEME };
  static const J2ObjcClassInfo _CucumberRuntimeIoMultiLoader = { "MultiLoader", "cucumber.runtime.io", ptrTable, methods, fields, 7, 0x1, 5, 3, -1, -1, -1, -1, -1 };
  return &_CucumberRuntimeIoMultiLoader;
}

@end

void CucumberRuntimeIoMultiLoader_initWithJavaLangClassLoader_(CucumberRuntimeIoMultiLoader *self, JavaLangClassLoader *classLoader) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->classpath_, new_CucumberRuntimeIoClasspathResourceLoader_initWithJavaLangClassLoader_(classLoader));
  JreStrongAssignAndConsume(&self->fs_, new_CucumberRuntimeIoFileResourceLoader_init());
}

CucumberRuntimeIoMultiLoader *new_CucumberRuntimeIoMultiLoader_initWithJavaLangClassLoader_(JavaLangClassLoader *classLoader) {
  J2OBJC_NEW_IMPL(CucumberRuntimeIoMultiLoader, initWithJavaLangClassLoader_, classLoader)
}

CucumberRuntimeIoMultiLoader *create_CucumberRuntimeIoMultiLoader_initWithJavaLangClassLoader_(JavaLangClassLoader *classLoader) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeIoMultiLoader, initWithJavaLangClassLoader_, classLoader)
}

NSString *CucumberRuntimeIoMultiLoader_packageNameWithNSString_(NSString *gluePath) {
  CucumberRuntimeIoMultiLoader_initialize();
  if (CucumberRuntimeIoMultiLoader_isClasspathPathWithNSString_(gluePath)) {
    gluePath = CucumberRuntimeIoMultiLoader_stripClasspathPrefixWithNSString_(gluePath);
  }
  return [((NSString *) nil_chk([((NSString *) nil_chk(gluePath)) java_replace:'/' withChar:'.'])) java_replace:'\\' withChar:'.'];
}

jboolean CucumberRuntimeIoMultiLoader_isClasspathPathWithNSString_(NSString *path) {
  CucumberRuntimeIoMultiLoader_initialize();
  return [((NSString *) nil_chk(path)) java_hasPrefix:CucumberRuntimeIoMultiLoader_CLASSPATH_SCHEME];
}

NSString *CucumberRuntimeIoMultiLoader_stripClasspathPrefixWithNSString_(NSString *path) {
  CucumberRuntimeIoMultiLoader_initialize();
  return [((NSString *) nil_chk(path)) java_substring:[((NSString *) nil_chk(CucumberRuntimeIoMultiLoader_CLASSPATH_SCHEME)) java_length]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeIoMultiLoader)
