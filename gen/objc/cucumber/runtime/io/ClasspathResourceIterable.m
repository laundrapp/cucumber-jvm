//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/laundrapp_org/cucumber-jvm/core/src/main/java/cucumber/runtime/io/ClasspathResourceIterable.java
//

#include "J2ObjC_source.h"
#include "cucumber/runtime/CucumberException.h"
#include "cucumber/runtime/io/ClasspathResourceIterable.h"
#include "cucumber/runtime/io/DelegatingResourceIteratorFactory.h"
#include "cucumber/runtime/io/FlatteningIterator.h"
#include "cucumber/runtime/io/ResourceIteratorFactory.h"
#include "cucumber/runtime/io/ZipThenFileResourceIteratorFactory.h"
#include "java/io/IOException.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Iterable.h"
#include "java/net/URL.h"
#include "java/util/Enumeration.h"
#include "java/util/Iterator.h"
#include "java/util/Spliterator.h"
#include "java/util/function/Consumer.h"

@interface CucumberRuntimeIoClasspathResourceIterable () {
 @public
  id<CucumberRuntimeIoResourceIteratorFactory> resourceIteratorFactory_;
  JavaLangClassLoader *classLoader_;
  NSString *path_;
  NSString *suffix_;
}

@end

J2OBJC_FIELD_SETTER(CucumberRuntimeIoClasspathResourceIterable, resourceIteratorFactory_, id<CucumberRuntimeIoResourceIteratorFactory>)
J2OBJC_FIELD_SETTER(CucumberRuntimeIoClasspathResourceIterable, classLoader_, JavaLangClassLoader *)
J2OBJC_FIELD_SETTER(CucumberRuntimeIoClasspathResourceIterable, path_, NSString *)
J2OBJC_FIELD_SETTER(CucumberRuntimeIoClasspathResourceIterable, suffix_, NSString *)

@implementation CucumberRuntimeIoClasspathResourceIterable

- (instancetype __nonnull)initWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader
                                         withNSString:(NSString *)path
                                         withNSString:(NSString *)suffix {
  CucumberRuntimeIoClasspathResourceIterable_initWithJavaLangClassLoader_withNSString_withNSString_(self, classLoader, path, suffix);
  return self;
}

- (id<JavaUtilIterator>)iterator {
  @try {
    CucumberRuntimeIoFlatteningIterator *iterator = create_CucumberRuntimeIoFlatteningIterator_init();
    id<JavaUtilEnumeration> resources = [((JavaLangClassLoader *) nil_chk(classLoader_)) getResourcesWithNSString:path_];
    while ([((id<JavaUtilEnumeration>) nil_chk(resources)) hasMoreElements]) {
      JavaNetURL *url = [resources nextElement];
      id<JavaUtilIterator> resourceIterator = [((id<CucumberRuntimeIoResourceIteratorFactory>) nil_chk(resourceIteratorFactory_)) createIteratorWithJavaNetURL:url withNSString:path_ withNSString:suffix_];
      [iterator pushWithJavaUtilIterator:resourceIterator];
    }
    return iterator;
  }
  @catch (JavaIoIOException *e) {
    @throw create_CucumberRuntimeCucumberException_initWithJavaLangThrowable_(e);
  }
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

- (void)dealloc {
  RELEASE_(resourceIteratorFactory_);
  RELEASE_(classLoader_);
  RELEASE_(path_);
  RELEASE_(suffix_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangClassLoader:withNSString:withNSString:);
  methods[1].selector = @selector(iterator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "resourceIteratorFactory_", "LCucumberRuntimeIoResourceIteratorFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "classLoader_", "LJavaLangClassLoader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "path_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "suffix_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangClassLoader;LNSString;LNSString;", "()Ljava/util/Iterator<Lcucumber/runtime/io/Resource;>;", "Ljava/lang/Object;Ljava/lang/Iterable<Lcucumber/runtime/io/Resource;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeIoClasspathResourceIterable = { "ClasspathResourceIterable", "cucumber.runtime.io", ptrTable, methods, fields, 7, 0x1, 2, 4, -1, -1, -1, 2, -1 };
  return &_CucumberRuntimeIoClasspathResourceIterable;
}

@end

void CucumberRuntimeIoClasspathResourceIterable_initWithJavaLangClassLoader_withNSString_withNSString_(CucumberRuntimeIoClasspathResourceIterable *self, JavaLangClassLoader *classLoader, NSString *path, NSString *suffix) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->resourceIteratorFactory_, new_CucumberRuntimeIoDelegatingResourceIteratorFactory_initWithCucumberRuntimeIoResourceIteratorFactory_(create_CucumberRuntimeIoZipThenFileResourceIteratorFactory_init()));
  JreStrongAssign(&self->classLoader_, classLoader);
  JreStrongAssign(&self->path_, path);
  JreStrongAssign(&self->suffix_, suffix);
}

CucumberRuntimeIoClasspathResourceIterable *new_CucumberRuntimeIoClasspathResourceIterable_initWithJavaLangClassLoader_withNSString_withNSString_(JavaLangClassLoader *classLoader, NSString *path, NSString *suffix) {
  J2OBJC_NEW_IMPL(CucumberRuntimeIoClasspathResourceIterable, initWithJavaLangClassLoader_withNSString_withNSString_, classLoader, path, suffix)
}

CucumberRuntimeIoClasspathResourceIterable *create_CucumberRuntimeIoClasspathResourceIterable_initWithJavaLangClassLoader_withNSString_withNSString_(JavaLangClassLoader *classLoader, NSString *path, NSString *suffix) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeIoClasspathResourceIterable, initWithJavaLangClassLoader_withNSString_withNSString_, classLoader, path, suffix)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeIoClasspathResourceIterable)
