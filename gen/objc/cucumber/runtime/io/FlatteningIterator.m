//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/io/FlatteningIterator.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "cucumber/runtime/io/FlatteningIterator.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayDeque.h"
#include "java/util/Deque.h"
#include "java/util/Iterator.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/function/Consumer.h"

@interface CCBRFlatteningIterator () {
 @public
  id<JavaUtilDeque> iterators_;
  id next_;
  jboolean nextBlank_;
}

- (void)moveToNext;

@end

J2OBJC_FIELD_SETTER(CCBRFlatteningIterator, iterators_, id<JavaUtilDeque>)
J2OBJC_FIELD_SETTER(CCBRFlatteningIterator, next_, id)

__attribute__((unused)) static void CCBRFlatteningIterator_moveToNext(CCBRFlatteningIterator *self);

@implementation CCBRFlatteningIterator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CCBRFlatteningIterator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)pushWithJavaUtilIterator:(id<JavaUtilIterator>)iterator {
  [((id<JavaUtilDeque>) nil_chk(iterators_)) addFirstWithId:iterator];
}

- (void)remove {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)moveToNext {
  CCBRFlatteningIterator_moveToNext(self);
}

- (id)next {
  CCBRFlatteningIterator_moveToNext(self);
  if (nextBlank_) {
    @throw create_JavaUtilNoSuchElementException_init();
  }
  else {
    id next = self->next_;
    JreStrongAssign(&self->next_, nil);
    nextBlank_ = true;
    return next;
  }
}

- (jboolean)hasNext {
  CCBRFlatteningIterator_moveToNext(self);
  return !nextBlank_;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

- (void)dealloc {
  RELEASE_(iterators_);
  RELEASE_(next_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(pushWithJavaUtilIterator:);
  methods[2].selector = @selector(remove);
  methods[3].selector = @selector(moveToNext);
  methods[4].selector = @selector(next);
  methods[5].selector = @selector(hasNext);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "iterators_", "LJavaUtilDeque;", .constantValue.asLong = 0, 0x12, -1, -1, 4, -1 },
    { "next_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, 5, -1 },
    { "nextBlank_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "push", "LJavaUtilIterator;", "(Ljava/util/Iterator<*>;)V", "()TT;", "Ljava/util/Deque<Ljava/util/Iterator<*>;>;", "TT;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Iterator<TT;>;" };
  static const J2ObjcClassInfo _CCBRFlatteningIterator = { "FlatteningIterator", "cucumber.runtime.io", ptrTable, methods, fields, 7, 0x1, 6, 3, -1, -1, -1, 6, -1 };
  return &_CCBRFlatteningIterator;
}

@end

void CCBRFlatteningIterator_init(CCBRFlatteningIterator *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->iterators_, new_JavaUtilArrayDeque_init());
  self->nextBlank_ = true;
}

CCBRFlatteningIterator *new_CCBRFlatteningIterator_init() {
  J2OBJC_NEW_IMPL(CCBRFlatteningIterator, init)
}

CCBRFlatteningIterator *create_CCBRFlatteningIterator_init() {
  J2OBJC_CREATE_IMPL(CCBRFlatteningIterator, init)
}

void CCBRFlatteningIterator_moveToNext(CCBRFlatteningIterator *self) {
  if (self->nextBlank_ && ![((id<JavaUtilDeque>) nil_chk(self->iterators_)) isEmpty]) {
    if (![((id<JavaUtilIterator>) nil_chk([((id<JavaUtilDeque>) nil_chk(self->iterators_)) peek])) hasNext]) {
      [self->iterators_ removeFirst];
      CCBRFlatteningIterator_moveToNext(self);
    }
    else {
      id next = [((id<JavaUtilIterator>) nil_chk([self->iterators_ peekFirst])) next];
      if ([JavaUtilIterator_class_() isInstance:next]) {
        [self pushWithJavaUtilIterator:(id<JavaUtilIterator>) cast_check(next, JavaUtilIterator_class_())];
        CCBRFlatteningIterator_moveToNext(self);
      }
      else {
        JreStrongAssign(&self->next_, next);
        self->nextBlank_ = false;
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRFlatteningIterator)
