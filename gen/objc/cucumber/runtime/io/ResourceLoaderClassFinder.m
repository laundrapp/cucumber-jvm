//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/laundrapp_org/cucumber-jvm/core/src/main/java/cucumber/runtime/io/ResourceLoaderClassFinder.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "cucumber/runtime/io/Resource.h"
#include "cucumber/runtime/io/ResourceLoader.h"
#include "cucumber/runtime/io/ResourceLoaderClassFinder.h"
#include "java/io/File.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Iterable.h"
#include "java/lang/NoClassDefFoundError.h"
#include "java/util/Collection.h"
#include "java/util/HashSet.h"

@interface CucumberRuntimeIoResourceLoaderClassFinder () {
 @public
  id<CucumberRuntimeIoResourceLoader> resourceLoader_;
  JavaLangClassLoader *classLoader_;
}

@end

J2OBJC_FIELD_SETTER(CucumberRuntimeIoResourceLoaderClassFinder, resourceLoader_, id<CucumberRuntimeIoResourceLoader>)
J2OBJC_FIELD_SETTER(CucumberRuntimeIoResourceLoaderClassFinder, classLoader_, JavaLangClassLoader *)

@implementation CucumberRuntimeIoResourceLoaderClassFinder

- (instancetype)initWithCucumberRuntimeIoResourceLoader:(id<CucumberRuntimeIoResourceLoader>)resourceLoader
                                withJavaLangClassLoader:(JavaLangClassLoader *)classLoader {
  CucumberRuntimeIoResourceLoaderClassFinder_initWithCucumberRuntimeIoResourceLoader_withJavaLangClassLoader_(self, resourceLoader, classLoader);
  return self;
}

- (id<JavaUtilCollection>)getDescendantsWithIOSClass:(IOSClass *)parentType
                                        withNSString:(NSString *)packageName {
  id<JavaUtilCollection> result = create_JavaUtilHashSet_init();
  NSString *packagePath = JreStrcat("$$", @"classpath:", [((NSString *) nil_chk([((NSString *) nil_chk(packageName)) java_replace:'.' withChar:'/'])) java_replace:JreLoadStatic(JavaIoFile, separatorChar) withChar:'/']);
  for (id<CucumberRuntimeIoResource> __strong classResource in nil_chk([((id<CucumberRuntimeIoResourceLoader>) nil_chk(resourceLoader_)) resourcesWithNSString:packagePath withNSString:@".class"])) {
    NSString *className_ = [((id<CucumberRuntimeIoResource>) nil_chk(classResource)) getClassNameWithNSString:@".class"];
    @try {
      IOSClass *clazz = [self loadClassWithNSString:className_];
      if (clazz != nil && ![((IOSClass *) nil_chk(parentType)) isEqual:clazz] && [parentType isAssignableFrom:clazz]) {
        [result addWithId:[clazz asSubclass:parentType]];
      }
    }
    @catch (JavaLangClassNotFoundException *ignore) {
    }
    @catch (JavaLangNoClassDefFoundError *ignore) {
    }
  }
  return result;
}

- (IOSClass *)loadClassWithNSString:(NSString *)className_ {
  return [((JavaLangClassLoader *) nil_chk(classLoader_)) loadClassWithNSString:className_];
}

- (void)dealloc {
  RELEASE_(resourceLoader_);
  RELEASE_(classLoader_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LIOSClass;", 0x1, 4, 5, 6, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithCucumberRuntimeIoResourceLoader:withJavaLangClassLoader:);
  methods[1].selector = @selector(getDescendantsWithIOSClass:withNSString:);
  methods[2].selector = @selector(loadClassWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "resourceLoader_", "LCucumberRuntimeIoResourceLoader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "classLoader_", "LJavaLangClassLoader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LCucumberRuntimeIoResourceLoader;LJavaLangClassLoader;", "getDescendants", "LIOSClass;LNSString;", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Ljava/lang/String;)Ljava/util/Collection<Ljava/lang/Class<+TT;>;>;", "loadClass", "LNSString;", "LJavaLangClassNotFoundException;", "<T:Ljava/lang/Object;>(Ljava/lang/String;)Ljava/lang/Class<+TT;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeIoResourceLoaderClassFinder = { "ResourceLoaderClassFinder", "cucumber.runtime.io", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_CucumberRuntimeIoResourceLoaderClassFinder;
}

@end

void CucumberRuntimeIoResourceLoaderClassFinder_initWithCucumberRuntimeIoResourceLoader_withJavaLangClassLoader_(CucumberRuntimeIoResourceLoaderClassFinder *self, id<CucumberRuntimeIoResourceLoader> resourceLoader, JavaLangClassLoader *classLoader) {
  NSObject_init(self);
  JreStrongAssign(&self->resourceLoader_, resourceLoader);
  JreStrongAssign(&self->classLoader_, classLoader);
}

CucumberRuntimeIoResourceLoaderClassFinder *new_CucumberRuntimeIoResourceLoaderClassFinder_initWithCucumberRuntimeIoResourceLoader_withJavaLangClassLoader_(id<CucumberRuntimeIoResourceLoader> resourceLoader, JavaLangClassLoader *classLoader) {
  J2OBJC_NEW_IMPL(CucumberRuntimeIoResourceLoaderClassFinder, initWithCucumberRuntimeIoResourceLoader_withJavaLangClassLoader_, resourceLoader, classLoader)
}

CucumberRuntimeIoResourceLoaderClassFinder *create_CucumberRuntimeIoResourceLoaderClassFinder_initWithCucumberRuntimeIoResourceLoader_withJavaLangClassLoader_(id<CucumberRuntimeIoResourceLoader> resourceLoader, JavaLangClassLoader *classLoader) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeIoResourceLoaderClassFinder, initWithCucumberRuntimeIoResourceLoader_withJavaLangClassLoader_, resourceLoader, classLoader)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeIoResourceLoaderClassFinder)
