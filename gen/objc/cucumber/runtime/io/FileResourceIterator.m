//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/laundrapp_org/cucumber-jvm/core/src/main/java/cucumber/runtime/io/FileResourceIterator.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/runtime/io/FileResource.h"
#include "cucumber/runtime/io/FileResourceIterator.h"
#include "cucumber/runtime/io/FlatteningIterator.h"
#include "cucumber/runtime/io/Helpers.h"
#include "cucumber/runtime/io/Resource.h"
#include "java/io/File.h"
#include "java/io/FileFilter.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Arrays.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/function/Consumer.h"

@interface CucumberRuntimeIoFileResourceIterator () {
 @public
  CucumberRuntimeIoFlatteningIterator *flatteningIterator_;
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)root
                    withJavaIoFile:(JavaIoFile *)file
                      withNSString:(NSString *)suffix
                       withBoolean:(jboolean)classpathFileResourceIterator;

@end

J2OBJC_FIELD_SETTER(CucumberRuntimeIoFileResourceIterator, flatteningIterator_, CucumberRuntimeIoFlatteningIterator *)

__attribute__((unused)) static void CucumberRuntimeIoFileResourceIterator_initWithJavaIoFile_withJavaIoFile_withNSString_withBoolean_(CucumberRuntimeIoFileResourceIterator *self, JavaIoFile *root, JavaIoFile *file, NSString *suffix, jboolean classpathFileResourceIterator);

__attribute__((unused)) static CucumberRuntimeIoFileResourceIterator *new_CucumberRuntimeIoFileResourceIterator_initWithJavaIoFile_withJavaIoFile_withNSString_withBoolean_(JavaIoFile *root, JavaIoFile *file, NSString *suffix, jboolean classpathFileResourceIterator) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberRuntimeIoFileResourceIterator *create_CucumberRuntimeIoFileResourceIterator_initWithJavaIoFile_withJavaIoFile_withNSString_withBoolean_(JavaIoFile *root, JavaIoFile *file, NSString *suffix, jboolean classpathFileResourceIterator);

@interface CucumberRuntimeIoFileResourceIterator_1 : NSObject < JavaIoFileFilter > {
 @public
  NSString *val$suffix_;
}

- (instancetype)initWithNSString:(NSString *)capture$0;

- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)file;

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberRuntimeIoFileResourceIterator_1)

__attribute__((unused)) static void CucumberRuntimeIoFileResourceIterator_1_initWithNSString_(CucumberRuntimeIoFileResourceIterator_1 *self, NSString *capture$0);

__attribute__((unused)) static CucumberRuntimeIoFileResourceIterator_1 *new_CucumberRuntimeIoFileResourceIterator_1_initWithNSString_(NSString *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberRuntimeIoFileResourceIterator_1 *create_CucumberRuntimeIoFileResourceIterator_1_initWithNSString_(NSString *capture$0);

/*!
 @brief Iterator to iterate over all the files contained in a directory.It returns
  a File object for non directories or a new FileIterator object for directories.
 */
@interface CucumberRuntimeIoFileResourceIterator_FileIterator : NSObject < JavaUtilIterator > {
 @public
  id<JavaUtilIterator> files_;
  id<JavaIoFileFilter> filter_;
  JavaIoFile *root_;
  jboolean classpathFileIterator_;
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)root
                    withJavaIoFile:(JavaIoFile *)file
              withJavaIoFileFilter:(id<JavaIoFileFilter>)filter
                       withBoolean:(jboolean)classpathFileIterator;

- (id)next;

- (jboolean)hasNext;

- (void)remove;

- (CucumberRuntimeIoFileResource *)createFileResourceWithJavaIoFile:(JavaIoFile *)next;

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberRuntimeIoFileResourceIterator_FileIterator)

J2OBJC_FIELD_SETTER(CucumberRuntimeIoFileResourceIterator_FileIterator, files_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(CucumberRuntimeIoFileResourceIterator_FileIterator, filter_, id<JavaIoFileFilter>)
J2OBJC_FIELD_SETTER(CucumberRuntimeIoFileResourceIterator_FileIterator, root_, JavaIoFile *)

__attribute__((unused)) static void CucumberRuntimeIoFileResourceIterator_FileIterator_initWithJavaIoFile_withJavaIoFile_withJavaIoFileFilter_withBoolean_(CucumberRuntimeIoFileResourceIterator_FileIterator *self, JavaIoFile *root, JavaIoFile *file, id<JavaIoFileFilter> filter, jboolean classpathFileIterator);

__attribute__((unused)) static CucumberRuntimeIoFileResourceIterator_FileIterator *new_CucumberRuntimeIoFileResourceIterator_FileIterator_initWithJavaIoFile_withJavaIoFile_withJavaIoFileFilter_withBoolean_(JavaIoFile *root, JavaIoFile *file, id<JavaIoFileFilter> filter, jboolean classpathFileIterator) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberRuntimeIoFileResourceIterator_FileIterator *create_CucumberRuntimeIoFileResourceIterator_FileIterator_initWithJavaIoFile_withJavaIoFile_withJavaIoFileFilter_withBoolean_(JavaIoFile *root, JavaIoFile *file, id<JavaIoFileFilter> filter, jboolean classpathFileIterator);

__attribute__((unused)) static CucumberRuntimeIoFileResource *CucumberRuntimeIoFileResourceIterator_FileIterator_createFileResourceWithJavaIoFile_(CucumberRuntimeIoFileResourceIterator_FileIterator *self, JavaIoFile *next);

J2OBJC_TYPE_LITERAL_HEADER(CucumberRuntimeIoFileResourceIterator_FileIterator)

@implementation CucumberRuntimeIoFileResourceIterator

+ (CucumberRuntimeIoFileResourceIterator *)createFileResourceIteratorWithJavaIoFile:(JavaIoFile *)root
                                                                     withJavaIoFile:(JavaIoFile *)file
                                                                       withNSString:(NSString *)suffix {
  return CucumberRuntimeIoFileResourceIterator_createFileResourceIteratorWithJavaIoFile_withJavaIoFile_withNSString_(root, file, suffix);
}

+ (CucumberRuntimeIoFileResourceIterator *)createClasspathFileResourceIteratorWithJavaIoFile:(JavaIoFile *)root
                                                                              withJavaIoFile:(JavaIoFile *)file
                                                                                withNSString:(NSString *)suffix {
  return CucumberRuntimeIoFileResourceIterator_createClasspathFileResourceIteratorWithJavaIoFile_withJavaIoFile_withNSString_(root, file, suffix);
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)root
                    withJavaIoFile:(JavaIoFile *)file
                      withNSString:(NSString *)suffix
                       withBoolean:(jboolean)classpathFileResourceIterator {
  CucumberRuntimeIoFileResourceIterator_initWithJavaIoFile_withJavaIoFile_withNSString_withBoolean_(self, root, file, suffix, classpathFileResourceIterator);
  return self;
}

- (jboolean)hasNext {
  return [((CucumberRuntimeIoFlatteningIterator *) nil_chk(flatteningIterator_)) hasNext];
}

- (id<CucumberRuntimeIoResource>)next {
  return [((CucumberRuntimeIoFlatteningIterator *) nil_chk(flatteningIterator_)) next];
}

- (void)remove {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

- (void)dealloc {
  RELEASE_(flatteningIterator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LCucumberRuntimeIoFileResourceIterator;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LCucumberRuntimeIoFileResourceIterator;", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LCucumberRuntimeIoResource;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createFileResourceIteratorWithJavaIoFile:withJavaIoFile:withNSString:);
  methods[1].selector = @selector(createClasspathFileResourceIteratorWithJavaIoFile:withJavaIoFile:withNSString:);
  methods[2].selector = @selector(initWithJavaIoFile:withJavaIoFile:withNSString:withBoolean:);
  methods[3].selector = @selector(hasNext);
  methods[4].selector = @selector(next);
  methods[5].selector = @selector(remove);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "flatteningIterator_", "LCucumberRuntimeIoFlatteningIterator;", .constantValue.asLong = 0, 0x12, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "createFileResourceIterator", "LJavaIoFile;LJavaIoFile;LNSString;", "createClasspathFileResourceIterator", "LJavaIoFile;LJavaIoFile;LNSString;Z", "Lcucumber/runtime/io/FlatteningIterator<Lcucumber/runtime/io/Resource;>;", "LCucumberRuntimeIoFileResourceIterator_FileIterator;", "Ljava/lang/Object;Ljava/util/Iterator<Lcucumber/runtime/io/Resource;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeIoFileResourceIterator = { "FileResourceIterator", "cucumber.runtime.io", ptrTable, methods, fields, 7, 0x1, 6, 1, -1, 5, -1, 6, -1 };
  return &_CucumberRuntimeIoFileResourceIterator;
}

@end

CucumberRuntimeIoFileResourceIterator *CucumberRuntimeIoFileResourceIterator_createFileResourceIteratorWithJavaIoFile_withJavaIoFile_withNSString_(JavaIoFile *root, JavaIoFile *file, NSString *suffix) {
  CucumberRuntimeIoFileResourceIterator_initialize();
  return create_CucumberRuntimeIoFileResourceIterator_initWithJavaIoFile_withJavaIoFile_withNSString_withBoolean_(root, file, suffix, false);
}

CucumberRuntimeIoFileResourceIterator *CucumberRuntimeIoFileResourceIterator_createClasspathFileResourceIteratorWithJavaIoFile_withJavaIoFile_withNSString_(JavaIoFile *root, JavaIoFile *file, NSString *suffix) {
  CucumberRuntimeIoFileResourceIterator_initialize();
  return create_CucumberRuntimeIoFileResourceIterator_initWithJavaIoFile_withJavaIoFile_withNSString_withBoolean_(root, file, suffix, true);
}

void CucumberRuntimeIoFileResourceIterator_initWithJavaIoFile_withJavaIoFile_withNSString_withBoolean_(CucumberRuntimeIoFileResourceIterator *self, JavaIoFile *root, JavaIoFile *file, NSString *suffix, jboolean classpathFileResourceIterator) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->flatteningIterator_, new_CucumberRuntimeIoFlatteningIterator_init());
  id<JavaIoFileFilter> filter = create_CucumberRuntimeIoFileResourceIterator_1_initWithNSString_(suffix);
  [self->flatteningIterator_ pushWithJavaUtilIterator:create_CucumberRuntimeIoFileResourceIterator_FileIterator_initWithJavaIoFile_withJavaIoFile_withJavaIoFileFilter_withBoolean_(root, file, filter, classpathFileResourceIterator)];
}

CucumberRuntimeIoFileResourceIterator *new_CucumberRuntimeIoFileResourceIterator_initWithJavaIoFile_withJavaIoFile_withNSString_withBoolean_(JavaIoFile *root, JavaIoFile *file, NSString *suffix, jboolean classpathFileResourceIterator) {
  J2OBJC_NEW_IMPL(CucumberRuntimeIoFileResourceIterator, initWithJavaIoFile_withJavaIoFile_withNSString_withBoolean_, root, file, suffix, classpathFileResourceIterator)
}

CucumberRuntimeIoFileResourceIterator *create_CucumberRuntimeIoFileResourceIterator_initWithJavaIoFile_withJavaIoFile_withNSString_withBoolean_(JavaIoFile *root, JavaIoFile *file, NSString *suffix, jboolean classpathFileResourceIterator) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeIoFileResourceIterator, initWithJavaIoFile_withJavaIoFile_withNSString_withBoolean_, root, file, suffix, classpathFileResourceIterator)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeIoFileResourceIterator)

@implementation CucumberRuntimeIoFileResourceIterator_1

- (instancetype)initWithNSString:(NSString *)capture$0 {
  CucumberRuntimeIoFileResourceIterator_1_initWithNSString_(self, capture$0);
  return self;
}

- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)file {
  return [((JavaIoFile *) nil_chk(file)) isDirectory] || CucumberRuntimeIoHelpers_hasSuffixWithNSString_withNSString_(val$suffix_, [file getPath]);
}

- (void)dealloc {
  RELEASE_(val$suffix_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(acceptWithJavaIoFile:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$suffix_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "accept", "LJavaIoFile;", "LCucumberRuntimeIoFileResourceIterator;", "initWithJavaIoFile:withJavaIoFile:withNSString:withBoolean:" };
  static const J2ObjcClassInfo _CucumberRuntimeIoFileResourceIterator_1 = { "", "cucumber.runtime.io", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, 3, -1, -1 };
  return &_CucumberRuntimeIoFileResourceIterator_1;
}

@end

void CucumberRuntimeIoFileResourceIterator_1_initWithNSString_(CucumberRuntimeIoFileResourceIterator_1 *self, NSString *capture$0) {
  JreStrongAssign(&self->val$suffix_, capture$0);
  NSObject_init(self);
}

CucumberRuntimeIoFileResourceIterator_1 *new_CucumberRuntimeIoFileResourceIterator_1_initWithNSString_(NSString *capture$0) {
  J2OBJC_NEW_IMPL(CucumberRuntimeIoFileResourceIterator_1, initWithNSString_, capture$0)
}

CucumberRuntimeIoFileResourceIterator_1 *create_CucumberRuntimeIoFileResourceIterator_1_initWithNSString_(NSString *capture$0) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeIoFileResourceIterator_1, initWithNSString_, capture$0)
}

@implementation CucumberRuntimeIoFileResourceIterator_FileIterator

- (instancetype)initWithJavaIoFile:(JavaIoFile *)root
                    withJavaIoFile:(JavaIoFile *)file
              withJavaIoFileFilter:(id<JavaIoFileFilter>)filter
                       withBoolean:(jboolean)classpathFileIterator {
  CucumberRuntimeIoFileResourceIterator_FileIterator_initWithJavaIoFile_withJavaIoFile_withJavaIoFileFilter_withBoolean_(self, root, file, filter, classpathFileIterator);
  return self;
}

- (id)next {
  JavaIoFile *next = [((id<JavaUtilIterator>) nil_chk(files_)) next];
  if ([((JavaIoFile *) nil_chk(next)) isDirectory]) {
    return create_CucumberRuntimeIoFileResourceIterator_FileIterator_initWithJavaIoFile_withJavaIoFile_withJavaIoFileFilter_withBoolean_(root_, next, filter_, classpathFileIterator_);
  }
  else {
    return CucumberRuntimeIoFileResourceIterator_FileIterator_createFileResourceWithJavaIoFile_(self, next);
  }
}

- (jboolean)hasNext {
  return [((id<JavaUtilIterator>) nil_chk(files_)) hasNext];
}

- (void)remove {
  [((id<JavaUtilIterator>) nil_chk(files_)) remove];
}

- (CucumberRuntimeIoFileResource *)createFileResourceWithJavaIoFile:(JavaIoFile *)next {
  return CucumberRuntimeIoFileResourceIterator_FileIterator_createFileResourceWithJavaIoFile_(self, next);
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

- (void)dealloc {
  RELEASE_(files_);
  RELEASE_(filter_);
  RELEASE_(root_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LCucumberRuntimeIoFileResource;", 0x2, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoFile:withJavaIoFile:withJavaIoFileFilter:withBoolean:);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(hasNext);
  methods[3].selector = @selector(remove);
  methods[4].selector = @selector(createFileResourceWithJavaIoFile:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "files_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
    { "filter_", "LJavaIoFileFilter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "root_", "LJavaIoFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "classpathFileIterator_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoFile;LJavaIoFile;LJavaIoFileFilter;Z", "createFileResource", "LJavaIoFile;", "Ljava/util/Iterator<Ljava/io/File;>;", "LCucumberRuntimeIoFileResourceIterator;", "Ljava/lang/Object;Ljava/util/Iterator<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeIoFileResourceIterator_FileIterator = { "FileIterator", "cucumber.runtime.io", ptrTable, methods, fields, 7, 0xa, 5, 4, 4, -1, -1, 5, -1 };
  return &_CucumberRuntimeIoFileResourceIterator_FileIterator;
}

@end

void CucumberRuntimeIoFileResourceIterator_FileIterator_initWithJavaIoFile_withJavaIoFile_withJavaIoFileFilter_withBoolean_(CucumberRuntimeIoFileResourceIterator_FileIterator *self, JavaIoFile *root, JavaIoFile *file, id<JavaIoFileFilter> filter, jboolean classpathFileIterator) {
  NSObject_init(self);
  JreStrongAssign(&self->root_, root);
  if ([((JavaIoFile *) nil_chk(file)) isDirectory]) {
    JreStrongAssign(&self->files_, [((id<JavaUtilList>) nil_chk(JavaUtilArrays_asListWithNSObjectArray_([file listFilesWithJavaIoFileFilter:filter]))) iterator]);
  }
  else if ([file isFile]) {
    JreStrongAssign(&self->files_, [((id<JavaUtilList>) nil_chk(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ file } count:1 type:JavaIoFile_class_()]))) iterator]);
  }
  else {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Not a file or directory: ", [file getAbsolutePath]));
  }
  JreStrongAssign(&self->filter_, filter);
  self->classpathFileIterator_ = classpathFileIterator;
}

CucumberRuntimeIoFileResourceIterator_FileIterator *new_CucumberRuntimeIoFileResourceIterator_FileIterator_initWithJavaIoFile_withJavaIoFile_withJavaIoFileFilter_withBoolean_(JavaIoFile *root, JavaIoFile *file, id<JavaIoFileFilter> filter, jboolean classpathFileIterator) {
  J2OBJC_NEW_IMPL(CucumberRuntimeIoFileResourceIterator_FileIterator, initWithJavaIoFile_withJavaIoFile_withJavaIoFileFilter_withBoolean_, root, file, filter, classpathFileIterator)
}

CucumberRuntimeIoFileResourceIterator_FileIterator *create_CucumberRuntimeIoFileResourceIterator_FileIterator_initWithJavaIoFile_withJavaIoFile_withJavaIoFileFilter_withBoolean_(JavaIoFile *root, JavaIoFile *file, id<JavaIoFileFilter> filter, jboolean classpathFileIterator) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeIoFileResourceIterator_FileIterator, initWithJavaIoFile_withJavaIoFile_withJavaIoFileFilter_withBoolean_, root, file, filter, classpathFileIterator)
}

CucumberRuntimeIoFileResource *CucumberRuntimeIoFileResourceIterator_FileIterator_createFileResourceWithJavaIoFile_(CucumberRuntimeIoFileResourceIterator_FileIterator *self, JavaIoFile *next) {
  if (self->classpathFileIterator_) {
    return CucumberRuntimeIoFileResource_createClasspathFileResourceWithJavaIoFile_withJavaIoFile_(self->root_, next);
  }
  else {
    return CucumberRuntimeIoFileResource_createFileResourceWithJavaIoFile_withJavaIoFile_(self->root_, next);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeIoFileResourceIterator_FileIterator)
