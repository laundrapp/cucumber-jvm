//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/io/URLOutputStream.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/gson/Gson.h"
#include "cucumber/runtime/io/URLOutputStream.h"
#include "cucumber/util/FixJava.h"
#include "java/io/File.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/net/HttpURLConnection.h"
#include "java/net/URL.h"
#include "java/net/URLConnection.h"
#include "java/util/Collections.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface CucumberRuntimeIoURLOutputStream () {
 @public
  JavaNetURL *url_;
  NSString *method_;
  jint expectedResponseCode_;
  JavaIoOutputStream *out_;
  JavaNetHttpURLConnection *urlConnection_;
}

- (void)ensureParentDirExistsWithJavaIoFile:(JavaIoFile *)file;

@end

J2OBJC_FIELD_SETTER(CucumberRuntimeIoURLOutputStream, url_, JavaNetURL *)
J2OBJC_FIELD_SETTER(CucumberRuntimeIoURLOutputStream, method_, NSString *)
J2OBJC_FIELD_SETTER(CucumberRuntimeIoURLOutputStream, out_, JavaIoOutputStream *)
J2OBJC_FIELD_SETTER(CucumberRuntimeIoURLOutputStream, urlConnection_, JavaNetHttpURLConnection *)

__attribute__((unused)) static void CucumberRuntimeIoURLOutputStream_ensureParentDirExistsWithJavaIoFile_(CucumberRuntimeIoURLOutputStream *self, JavaIoFile *file);

@interface CucumberRuntimeIoURLOutputStream_ResponseException () {
 @public
  CucumberRuntimeIoURLOutputStream *this$0_;
  ComGoogleGsonGson *gson_;
  jint responseCode_;
  NSString *contentType_;
}

- (NSString *)getMessage0WithNSString:(NSString *)message;

@end

J2OBJC_FIELD_SETTER(CucumberRuntimeIoURLOutputStream_ResponseException, gson_, ComGoogleGsonGson *)
J2OBJC_FIELD_SETTER(CucumberRuntimeIoURLOutputStream_ResponseException, contentType_, NSString *)

__attribute__((unused)) static NSString *CucumberRuntimeIoURLOutputStream_ResponseException_getMessage0WithNSString_(CucumberRuntimeIoURLOutputStream_ResponseException *self, NSString *message);

@implementation CucumberRuntimeIoURLOutputStream

- (instancetype __nonnull)initWithJavaNetURL:(JavaNetURL *)url {
  CucumberRuntimeIoURLOutputStream_initWithJavaNetURL_(self, url);
  return self;
}

- (instancetype __nonnull)initWithJavaNetURL:(JavaNetURL *)url
                                withNSString:(NSString *)method
                             withJavaUtilMap:(id<JavaUtilMap>)headers
                                     withInt:(jint)expectedResponseCode {
  CucumberRuntimeIoURLOutputStream_initWithJavaNetURL_withNSString_withJavaUtilMap_withInt_(self, url, method, headers, expectedResponseCode);
  return self;
}

- (void)ensureParentDirExistsWithJavaIoFile:(JavaIoFile *)file {
  CucumberRuntimeIoURLOutputStream_ensureParentDirExistsWithJavaIoFile_(self, file);
}

- (void)writeWithByteArray:(IOSByteArray *)buffer
                   withInt:(jint)offset
                   withInt:(jint)count {
  [((JavaIoOutputStream *) nil_chk(out_)) writeWithByteArray:buffer withInt:offset withInt:count];
}

- (void)writeWithByteArray:(IOSByteArray *)buffer {
  [((JavaIoOutputStream *) nil_chk(out_)) writeWithByteArray:buffer];
}

- (void)writeWithInt:(jint)b {
  [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:b];
}

- (void)flush {
  [((JavaIoOutputStream *) nil_chk(out_)) flush];
}

- (void)close {
  @try {
    if (urlConnection_ != nil) {
      jint responseCode = [urlConnection_ getResponseCode];
      if (responseCode != expectedResponseCode_) {
        @try {
          [((JavaIoInputStream *) nil_chk([urlConnection_ getInputStream])) close];
          @throw create_JavaIoIOException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Expected response code: %d. Got: %d", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(expectedResponseCode_), JavaLangInteger_valueOfWithInt_(responseCode) } count:2 type:NSObject_class_()]));
        }
        @catch (JavaIoIOException *expected) {
          JavaIoInputStream *errorStream = [urlConnection_ getErrorStream];
          if (errorStream != nil) {
            NSString *responseBody = CucumberUtilFixJava_readReaderWithJavaIoReader_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(errorStream, @"UTF-8"));
            NSString *contentType = [urlConnection_ getHeaderFieldWithNSString:@"Content-Type"];
            if (contentType == nil) {
              contentType = @"text/plain";
            }
            @throw create_CucumberRuntimeIoURLOutputStream_ResponseException_initWithCucumberRuntimeIoURLOutputStream_withNSString_withJavaIoIOException_withInt_withNSString_(self, responseBody, expected, responseCode, contentType);
          }
          else {
            @throw expected;
          }
        }
      }
    }
  }
  @finally {
    [((JavaIoOutputStream *) nil_chk(out_)) close];
  }
}

- (void)dealloc {
  RELEASE_(url_);
  RELEASE_(method_);
  RELEASE_(out_);
  RELEASE_(urlConnection_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 1, 3, -1, -1 },
    { NULL, "V", 0x2, 4, 5, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 8, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 9, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaNetURL:);
  methods[1].selector = @selector(initWithJavaNetURL:withNSString:withJavaUtilMap:withInt:);
  methods[2].selector = @selector(ensureParentDirExistsWithJavaIoFile:);
  methods[3].selector = @selector(writeWithByteArray:withInt:withInt:);
  methods[4].selector = @selector(writeWithByteArray:);
  methods[5].selector = @selector(writeWithInt:);
  methods[6].selector = @selector(flush);
  methods[7].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "url_", "LJavaNetURL;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "method_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "expectedResponseCode_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "out_", "LJavaIoOutputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "urlConnection_", "LJavaNetHttpURLConnection;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaNetURL;", "LJavaIoIOException;", "LJavaNetURL;LNSString;LJavaUtilMap;I", "(Ljava/net/URL;Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;I)V", "ensureParentDirExists", "LJavaIoFile;", "write", "[BII", "[B", "I", "LCucumberRuntimeIoURLOutputStream_ResponseException;" };
  static const J2ObjcClassInfo _CucumberRuntimeIoURLOutputStream = { "URLOutputStream", "cucumber.runtime.io", ptrTable, methods, fields, 7, 0x1, 8, 5, -1, 10, -1, -1, -1 };
  return &_CucumberRuntimeIoURLOutputStream;
}

@end

void CucumberRuntimeIoURLOutputStream_initWithJavaNetURL_(CucumberRuntimeIoURLOutputStream *self, JavaNetURL *url) {
  CucumberRuntimeIoURLOutputStream_initWithJavaNetURL_withNSString_withJavaUtilMap_withInt_(self, url, @"PUT", JavaUtilCollections_emptyMap(), 200);
}

CucumberRuntimeIoURLOutputStream *new_CucumberRuntimeIoURLOutputStream_initWithJavaNetURL_(JavaNetURL *url) {
  J2OBJC_NEW_IMPL(CucumberRuntimeIoURLOutputStream, initWithJavaNetURL_, url)
}

CucumberRuntimeIoURLOutputStream *create_CucumberRuntimeIoURLOutputStream_initWithJavaNetURL_(JavaNetURL *url) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeIoURLOutputStream, initWithJavaNetURL_, url)
}

void CucumberRuntimeIoURLOutputStream_initWithJavaNetURL_withNSString_withJavaUtilMap_withInt_(CucumberRuntimeIoURLOutputStream *self, JavaNetURL *url, NSString *method, id<JavaUtilMap> headers, jint expectedResponseCode) {
  JavaIoOutputStream_init(self);
  JreStrongAssign(&self->url_, url);
  JreStrongAssign(&self->method_, method);
  self->expectedResponseCode_ = expectedResponseCode;
  if ([((NSString *) nil_chk([((JavaNetURL *) nil_chk(url)) getProtocol])) isEqual:@"file"]) {
    JavaIoFile *file = create_JavaIoFile_initWithNSString_([url getFile]);
    CucumberRuntimeIoURLOutputStream_ensureParentDirExistsWithJavaIoFile_(self, file);
    JreStrongAssignAndConsume(&self->out_, new_JavaIoFileOutputStream_initWithJavaIoFile_(file));
    JreStrongAssign(&self->urlConnection_, nil);
  }
  else if ([((NSString *) nil_chk([url getProtocol])) java_hasPrefix:@"http"]) {
    JreStrongAssign(&self->urlConnection_, (JavaNetHttpURLConnection *) cast_chk([url openConnection], [JavaNetHttpURLConnection class]));
    [((JavaNetHttpURLConnection *) nil_chk(self->urlConnection_)) setRequestMethodWithNSString:method];
    [self->urlConnection_ setDoOutputWithBoolean:true];
    for (id<JavaUtilMap_Entry> __strong header in nil_chk([((id<JavaUtilMap>) nil_chk(headers)) entrySet])) {
      [self->urlConnection_ setRequestPropertyWithNSString:[((id<JavaUtilMap_Entry>) nil_chk(header)) getKey] withNSString:[header getValue]];
    }
    JreStrongAssign(&self->out_, [self->urlConnection_ getOutputStream]);
  }
  else {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"URL Scheme must be one of file,http,https. ", [url toExternalForm]));
  }
}

CucumberRuntimeIoURLOutputStream *new_CucumberRuntimeIoURLOutputStream_initWithJavaNetURL_withNSString_withJavaUtilMap_withInt_(JavaNetURL *url, NSString *method, id<JavaUtilMap> headers, jint expectedResponseCode) {
  J2OBJC_NEW_IMPL(CucumberRuntimeIoURLOutputStream, initWithJavaNetURL_withNSString_withJavaUtilMap_withInt_, url, method, headers, expectedResponseCode)
}

CucumberRuntimeIoURLOutputStream *create_CucumberRuntimeIoURLOutputStream_initWithJavaNetURL_withNSString_withJavaUtilMap_withInt_(JavaNetURL *url, NSString *method, id<JavaUtilMap> headers, jint expectedResponseCode) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeIoURLOutputStream, initWithJavaNetURL_withNSString_withJavaUtilMap_withInt_, url, method, headers, expectedResponseCode)
}

void CucumberRuntimeIoURLOutputStream_ensureParentDirExistsWithJavaIoFile_(CucumberRuntimeIoURLOutputStream *self, JavaIoFile *file) {
  if ([((JavaIoFile *) nil_chk(file)) getParentFile] != nil && ![((JavaIoFile *) nil_chk([file getParentFile])) isDirectory]) {
    jboolean ok = [((JavaIoFile *) nil_chk([file getParentFile])) mkdirs] || [((JavaIoFile *) nil_chk([file getParentFile])) isDirectory];
    if (!ok) {
      @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"Failed to create directory ", [((JavaIoFile *) nil_chk([file getParentFile])) getAbsolutePath]));
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeIoURLOutputStream)

@implementation CucumberRuntimeIoURLOutputStream_ResponseException

- (instancetype __nonnull)initWithCucumberRuntimeIoURLOutputStream:(CucumberRuntimeIoURLOutputStream *)outer$
                                                      withNSString:(NSString *)responseBody
                                             withJavaIoIOException:(JavaIoIOException *)cause
                                                           withInt:(jint)responseCode
                                                      withNSString:(NSString *)contentType {
  CucumberRuntimeIoURLOutputStream_ResponseException_initWithCucumberRuntimeIoURLOutputStream_withNSString_withJavaIoIOException_withInt_withNSString_(self, outer$, responseBody, cause, responseCode, contentType);
  return self;
}

- (NSString *)getMessage {
  if ([((NSString *) nil_chk(contentType_)) isEqual:@"application/json"]) {
    id<JavaUtilMap> map = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:[super getMessage] withIOSClass:JavaUtilMap_class_()];
    if ([((id<JavaUtilMap>) nil_chk(map)) containsKeyWithId:@"error"]) {
      return CucumberRuntimeIoURLOutputStream_ResponseException_getMessage0WithNSString_(self, [nil_chk([map getWithId:@"error"]) description]);
    }
    else {
      return CucumberRuntimeIoURLOutputStream_ResponseException_getMessage0WithNSString_(self, [super getMessage]);
    }
  }
  else {
    return CucumberRuntimeIoURLOutputStream_ResponseException_getMessage0WithNSString_(self, [super getMessage]);
  }
}

- (NSString *)getMessage0WithNSString:(NSString *)message {
  return CucumberRuntimeIoURLOutputStream_ResponseException_getMessage0WithNSString_(self, message);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(gson_);
  RELEASE_(contentType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCucumberRuntimeIoURLOutputStream:withNSString:withJavaIoIOException:withInt:withNSString:);
  methods[1].selector = @selector(getMessage);
  methods[2].selector = @selector(getMessage0WithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCucumberRuntimeIoURLOutputStream;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "gson_", "LComGoogleGsonGson;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "responseCode_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "contentType_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaIoIOException;ILNSString;", "getMessage0", "LNSString;", "LCucumberRuntimeIoURLOutputStream;" };
  static const J2ObjcClassInfo _CucumberRuntimeIoURLOutputStream_ResponseException = { "ResponseException", "cucumber.runtime.io", ptrTable, methods, fields, 7, 0x1, 3, 4, 3, -1, -1, -1, -1 };
  return &_CucumberRuntimeIoURLOutputStream_ResponseException;
}

@end

void CucumberRuntimeIoURLOutputStream_ResponseException_initWithCucumberRuntimeIoURLOutputStream_withNSString_withJavaIoIOException_withInt_withNSString_(CucumberRuntimeIoURLOutputStream_ResponseException *self, CucumberRuntimeIoURLOutputStream *outer$, NSString *responseBody, JavaIoIOException *cause, jint responseCode, NSString *contentType) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaIoIOException_initWithNSString_withJavaLangThrowable_(self, responseBody, cause);
  JreStrongAssignAndConsume(&self->gson_, new_ComGoogleGsonGson_init());
  self->responseCode_ = responseCode;
  JreStrongAssign(&self->contentType_, contentType);
}

CucumberRuntimeIoURLOutputStream_ResponseException *new_CucumberRuntimeIoURLOutputStream_ResponseException_initWithCucumberRuntimeIoURLOutputStream_withNSString_withJavaIoIOException_withInt_withNSString_(CucumberRuntimeIoURLOutputStream *outer$, NSString *responseBody, JavaIoIOException *cause, jint responseCode, NSString *contentType) {
  J2OBJC_NEW_IMPL(CucumberRuntimeIoURLOutputStream_ResponseException, initWithCucumberRuntimeIoURLOutputStream_withNSString_withJavaIoIOException_withInt_withNSString_, outer$, responseBody, cause, responseCode, contentType)
}

CucumberRuntimeIoURLOutputStream_ResponseException *create_CucumberRuntimeIoURLOutputStream_ResponseException_initWithCucumberRuntimeIoURLOutputStream_withNSString_withJavaIoIOException_withInt_withNSString_(CucumberRuntimeIoURLOutputStream *outer$, NSString *responseBody, JavaIoIOException *cause, jint responseCode, NSString *contentType) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeIoURLOutputStream_ResponseException, initWithCucumberRuntimeIoURLOutputStream_withNSString_withJavaIoIOException_withInt_withNSString_, outer$, responseBody, cause, responseCode, contentType)
}

NSString *CucumberRuntimeIoURLOutputStream_ResponseException_getMessage0WithNSString_(CucumberRuntimeIoURLOutputStream_ResponseException *self, NSString *message) {
  return NSString_java_formatWithNSString_withNSObjectArray_(@"%s %s\nHTTP %d\n%s", [IOSObjectArray arrayWithObjects:(id[]){ self->this$0_->method_, self->this$0_->url_, JavaLangInteger_valueOfWithInt_(self->responseCode_), message } count:4 type:NSObject_class_()]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeIoURLOutputStream_ResponseException)
