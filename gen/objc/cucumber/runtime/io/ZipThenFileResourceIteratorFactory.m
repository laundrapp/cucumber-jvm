//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/io/ZipThenFileResourceIteratorFactory.java
//

#include "J2ObjC_source.h"
#include "cucumber/runtime/io/FileResourceIteratorFactory.h"
#include "cucumber/runtime/io/ResourceIteratorFactory.h"
#include "cucumber/runtime/io/ZipResourceIteratorFactory.h"
#include "cucumber/runtime/io/ZipThenFileResourceIteratorFactory.h"
#include "java/net/URL.h"
#include "java/util/Iterator.h"

@interface CCBRZipThenFileResourceIteratorFactory () {
 @public
  id<CCBRResourceIteratorFactory> zipResourceIteratorFactory_;
  id<CCBRResourceIteratorFactory> fileResourceIteratorFactory_;
}

@end

J2OBJC_FIELD_SETTER(CCBRZipThenFileResourceIteratorFactory, zipResourceIteratorFactory_, id<CCBRResourceIteratorFactory>)
J2OBJC_FIELD_SETTER(CCBRZipThenFileResourceIteratorFactory, fileResourceIteratorFactory_, id<CCBRResourceIteratorFactory>)

@implementation CCBRZipThenFileResourceIteratorFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CCBRZipThenFileResourceIteratorFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)isFactoryForWithJavaNetURL:(JavaNetURL *)url {
  return [((id<CCBRResourceIteratorFactory>) nil_chk(zipResourceIteratorFactory_)) isFactoryForWithJavaNetURL:url] || [((id<CCBRResourceIteratorFactory>) nil_chk(fileResourceIteratorFactory_)) isFactoryForWithJavaNetURL:url];
}

- (id<JavaUtilIterator>)createIteratorWithJavaNetURL:(JavaNetURL *)url
                                        withNSString:(NSString *)path
                                        withNSString:(NSString *)suffix {
  if ([((id<CCBRResourceIteratorFactory>) nil_chk(zipResourceIteratorFactory_)) isFactoryForWithJavaNetURL:url]) {
    return [zipResourceIteratorFactory_ createIteratorWithJavaNetURL:url withNSString:path withNSString:suffix];
  }
  else {
    return [((id<CCBRResourceIteratorFactory>) nil_chk(fileResourceIteratorFactory_)) createIteratorWithJavaNetURL:url withNSString:path withNSString:suffix];
  }
}

- (void)dealloc {
  RELEASE_(zipResourceIteratorFactory_);
  RELEASE_(fileResourceIteratorFactory_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isFactoryForWithJavaNetURL:);
  methods[2].selector = @selector(createIteratorWithJavaNetURL:withNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "zipResourceIteratorFactory_", "LCCBRResourceIteratorFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fileResourceIteratorFactory_", "LCCBRResourceIteratorFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "isFactoryFor", "LJavaNetURL;", "createIterator", "LJavaNetURL;LNSString;LNSString;", "(Ljava/net/URL;Ljava/lang/String;Ljava/lang/String;)Ljava/util/Iterator<Lcucumber/runtime/io/Resource;>;" };
  static const J2ObjcClassInfo _CCBRZipThenFileResourceIteratorFactory = { "ZipThenFileResourceIteratorFactory", "cucumber.runtime.io", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_CCBRZipThenFileResourceIteratorFactory;
}

@end

void CCBRZipThenFileResourceIteratorFactory_init(CCBRZipThenFileResourceIteratorFactory *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->zipResourceIteratorFactory_, new_CCBRZipResourceIteratorFactory_init());
  JreStrongAssignAndConsume(&self->fileResourceIteratorFactory_, new_CCBRFileResourceIteratorFactory_init());
}

CCBRZipThenFileResourceIteratorFactory *new_CCBRZipThenFileResourceIteratorFactory_init() {
  J2OBJC_NEW_IMPL(CCBRZipThenFileResourceIteratorFactory, init)
}

CCBRZipThenFileResourceIteratorFactory *create_CCBRZipThenFileResourceIteratorFactory_init() {
  J2OBJC_CREATE_IMPL(CCBRZipThenFileResourceIteratorFactory, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRZipThenFileResourceIteratorFactory)
