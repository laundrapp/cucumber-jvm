//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/laundrapp_org/cucumber-jvm/core/src/main/java/cucumber/runtime/io/DelegatingResourceIteratorFactory.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "cucumber/runtime/CucumberException.h"
#include "cucumber/runtime/io/DelegatingResourceIteratorFactory.h"
#include "cucumber/runtime/io/ResourceIteratorFactory.h"
#include "java/lang/Iterable.h"
#include "java/net/URL.h"
#include "java/util/Iterator.h"
#include "java/util/ServiceLoader.h"

@interface CucumberRuntimeIoDelegatingResourceIteratorFactory () {
 @public
  id<JavaLangIterable> delegates_;
  id<CucumberRuntimeIoResourceIteratorFactory> fallbackResourceIteratorFactory_;
}

@end

J2OBJC_FIELD_SETTER(CucumberRuntimeIoDelegatingResourceIteratorFactory, delegates_, id<JavaLangIterable>)
J2OBJC_FIELD_SETTER(CucumberRuntimeIoDelegatingResourceIteratorFactory, fallbackResourceIteratorFactory_, id<CucumberRuntimeIoResourceIteratorFactory>)

@implementation CucumberRuntimeIoDelegatingResourceIteratorFactory

- (instancetype)initWithCucumberRuntimeIoResourceIteratorFactory:(id<CucumberRuntimeIoResourceIteratorFactory>)fallbackResourceIteratorFactory {
  CucumberRuntimeIoDelegatingResourceIteratorFactory_initWithCucumberRuntimeIoResourceIteratorFactory_(self, fallbackResourceIteratorFactory);
  return self;
}

- (jboolean)isFactoryForWithJavaNetURL:(JavaNetURL *)url {
  for (id<CucumberRuntimeIoResourceIteratorFactory> __strong delegate in nil_chk(delegates_)) {
    if ([((id<CucumberRuntimeIoResourceIteratorFactory>) nil_chk(delegate)) isFactoryForWithJavaNetURL:url]) {
      return true;
    }
  }
  return [((id<CucumberRuntimeIoResourceIteratorFactory>) nil_chk(fallbackResourceIteratorFactory_)) isFactoryForWithJavaNetURL:url];
}

- (id<JavaUtilIterator>)createIteratorWithJavaNetURL:(JavaNetURL *)url
                                        withNSString:(NSString *)path
                                        withNSString:(NSString *)suffix {
  for (id<CucumberRuntimeIoResourceIteratorFactory> __strong delegate in nil_chk(delegates_)) {
    if ([((id<CucumberRuntimeIoResourceIteratorFactory>) nil_chk(delegate)) isFactoryForWithJavaNetURL:url]) {
      return [delegate createIteratorWithJavaNetURL:url withNSString:path withNSString:suffix];
    }
  }
  if ([((id<CucumberRuntimeIoResourceIteratorFactory>) nil_chk(fallbackResourceIteratorFactory_)) isFactoryForWithJavaNetURL:url]) {
    return [fallbackResourceIteratorFactory_ createIteratorWithJavaNetURL:url withNSString:path withNSString:suffix];
  }
  else {
    @throw create_CucumberRuntimeCucumberException_initWithNSString_(JreStrcat("$@", @"Fallback factory cannot handle URL: ", url));
  }
}

- (void)dealloc {
  RELEASE_(delegates_);
  RELEASE_(fallbackResourceIteratorFactory_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 3, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithCucumberRuntimeIoResourceIteratorFactory:);
  methods[1].selector = @selector(isFactoryForWithJavaNetURL:);
  methods[2].selector = @selector(createIteratorWithJavaNetURL:withNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delegates_", "LJavaLangIterable;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
    { "fallbackResourceIteratorFactory_", "LCucumberRuntimeIoResourceIteratorFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LCucumberRuntimeIoResourceIteratorFactory;", "isFactoryFor", "LJavaNetURL;", "createIterator", "LJavaNetURL;LNSString;LNSString;", "(Ljava/net/URL;Ljava/lang/String;Ljava/lang/String;)Ljava/util/Iterator<Lcucumber/runtime/io/Resource;>;", "Ljava/lang/Iterable<Lcucumber/runtime/io/ResourceIteratorFactory;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeIoDelegatingResourceIteratorFactory = { "DelegatingResourceIteratorFactory", "cucumber.runtime.io", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_CucumberRuntimeIoDelegatingResourceIteratorFactory;
}

@end

void CucumberRuntimeIoDelegatingResourceIteratorFactory_initWithCucumberRuntimeIoResourceIteratorFactory_(CucumberRuntimeIoDelegatingResourceIteratorFactory *self, id<CucumberRuntimeIoResourceIteratorFactory> fallbackResourceIteratorFactory) {
  NSObject_init(self);
  JreStrongAssign(&self->delegates_, JavaUtilServiceLoader_load__WithIOSClass_(CucumberRuntimeIoResourceIteratorFactory_class_()));
  JreStrongAssign(&self->fallbackResourceIteratorFactory_, fallbackResourceIteratorFactory);
}

CucumberRuntimeIoDelegatingResourceIteratorFactory *new_CucumberRuntimeIoDelegatingResourceIteratorFactory_initWithCucumberRuntimeIoResourceIteratorFactory_(id<CucumberRuntimeIoResourceIteratorFactory> fallbackResourceIteratorFactory) {
  J2OBJC_NEW_IMPL(CucumberRuntimeIoDelegatingResourceIteratorFactory, initWithCucumberRuntimeIoResourceIteratorFactory_, fallbackResourceIteratorFactory)
}

CucumberRuntimeIoDelegatingResourceIteratorFactory *create_CucumberRuntimeIoDelegatingResourceIteratorFactory_initWithCucumberRuntimeIoResourceIteratorFactory_(id<CucumberRuntimeIoResourceIteratorFactory> fallbackResourceIteratorFactory) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeIoDelegatingResourceIteratorFactory, initWithCucumberRuntimeIoResourceIteratorFactory_, fallbackResourceIteratorFactory)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeIoDelegatingResourceIteratorFactory)
