//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/io/URLOutputStream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CucumberRuntimeIoURLOutputStream")
#ifdef RESTRICT_CucumberRuntimeIoURLOutputStream
#define INCLUDE_ALL_CucumberRuntimeIoURLOutputStream 0
#else
#define INCLUDE_ALL_CucumberRuntimeIoURLOutputStream 1
#endif
#undef RESTRICT_CucumberRuntimeIoURLOutputStream

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (CCBRURLOutputStream_) && (INCLUDE_ALL_CucumberRuntimeIoURLOutputStream || defined(INCLUDE_CCBRURLOutputStream))
#define CCBRURLOutputStream_

#define RESTRICT_JavaIoOutputStream 1
#define INCLUDE_JavaIoOutputStream 1
#include "java/io/OutputStream.h"

@class IOSByteArray;
@class JavaNetURL;
@protocol JavaUtilMap;

/*!
 @brief A stream that can write to both file and http URLs.If it's a file URL, writes with a <code>java.io.FileOutputStream</code>,
  if it's a http or https URL, writes with a HTTP PUT (by default) or with the specified method.
 */
@interface CCBRURLOutputStream : JavaIoOutputStream

#pragma mark Public

- (instancetype __nonnull)initWithJavaNetURL:(JavaNetURL *)url;

- (instancetype __nonnull)initWithJavaNetURL:(JavaNetURL *)url
                                withNSString:(NSString *)method
                             withJavaUtilMap:(id<JavaUtilMap>)headers
                                     withInt:(jint)expectedResponseCode;

- (void)close;

- (void)flush;

- (void)writeWithByteArray:(IOSByteArray *)buffer;

- (void)writeWithByteArray:(IOSByteArray *)buffer
                   withInt:(jint)offset
                   withInt:(jint)count;

- (void)writeWithInt:(jint)b;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRURLOutputStream)

FOUNDATION_EXPORT void CCBRURLOutputStream_initWithJavaNetURL_(CCBRURLOutputStream *self, JavaNetURL *url);

FOUNDATION_EXPORT CCBRURLOutputStream *new_CCBRURLOutputStream_initWithJavaNetURL_(JavaNetURL *url) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CCBRURLOutputStream *create_CCBRURLOutputStream_initWithJavaNetURL_(JavaNetURL *url);

FOUNDATION_EXPORT void CCBRURLOutputStream_initWithJavaNetURL_withNSString_withJavaUtilMap_withInt_(CCBRURLOutputStream *self, JavaNetURL *url, NSString *method, id<JavaUtilMap> headers, jint expectedResponseCode);

FOUNDATION_EXPORT CCBRURLOutputStream *new_CCBRURLOutputStream_initWithJavaNetURL_withNSString_withJavaUtilMap_withInt_(JavaNetURL *url, NSString *method, id<JavaUtilMap> headers, jint expectedResponseCode) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CCBRURLOutputStream *create_CCBRURLOutputStream_initWithJavaNetURL_withNSString_withJavaUtilMap_withInt_(JavaNetURL *url, NSString *method, id<JavaUtilMap> headers, jint expectedResponseCode);

J2OBJC_TYPE_LITERAL_HEADER(CCBRURLOutputStream)

@compatibility_alias CucumberRuntimeIoURLOutputStream CCBRURLOutputStream;

#endif

#if !defined (CCBRURLOutputStream_ResponseException_) && (INCLUDE_ALL_CucumberRuntimeIoURLOutputStream || defined(INCLUDE_CCBRURLOutputStream_ResponseException))
#define CCBRURLOutputStream_ResponseException_

#define RESTRICT_JavaIoIOException 1
#define INCLUDE_JavaIoIOException 1
#include "java/io/IOException.h"

@class CCBRURLOutputStream;
@class JavaLangThrowable;

@interface CCBRURLOutputStream_ResponseException : JavaIoIOException

#pragma mark Public

- (instancetype __nonnull)initWithCCBRURLOutputStream:(CCBRURLOutputStream *)outer$
                                         withNSString:(NSString *)responseBody
                                withJavaIoIOException:(JavaIoIOException *)cause
                                              withInt:(jint)responseCode
                                         withNSString:(NSString *)contentType;

- (NSString *)getMessage;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRURLOutputStream_ResponseException)

FOUNDATION_EXPORT void CCBRURLOutputStream_ResponseException_initWithCCBRURLOutputStream_withNSString_withJavaIoIOException_withInt_withNSString_(CCBRURLOutputStream_ResponseException *self, CCBRURLOutputStream *outer$, NSString *responseBody, JavaIoIOException *cause, jint responseCode, NSString *contentType);

FOUNDATION_EXPORT CCBRURLOutputStream_ResponseException *new_CCBRURLOutputStream_ResponseException_initWithCCBRURLOutputStream_withNSString_withJavaIoIOException_withInt_withNSString_(CCBRURLOutputStream *outer$, NSString *responseBody, JavaIoIOException *cause, jint responseCode, NSString *contentType) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CCBRURLOutputStream_ResponseException *create_CCBRURLOutputStream_ResponseException_initWithCCBRURLOutputStream_withNSString_withJavaIoIOException_withInt_withNSString_(CCBRURLOutputStream *outer$, NSString *responseBody, JavaIoIOException *cause, jint responseCode, NSString *contentType);

J2OBJC_TYPE_LITERAL_HEADER(CCBRURLOutputStream_ResponseException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_CucumberRuntimeIoURLOutputStream")
