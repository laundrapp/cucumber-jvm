//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/laundrapp_org/cucumber-jvm/core/src/main/java/cucumber/runtime/RuntimeOptionsFactory.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/api/CucumberOptions.h"
#include "cucumber/api/SnippetType.h"
#include "cucumber/deps/com/thoughtworks/xstream/annotations/XStreamConverter.h"
#include "cucumber/deps/com/thoughtworks/xstream/annotations/XStreamConverters.h"
#include "cucumber/runtime/RuntimeOptions.h"
#include "cucumber/runtime/RuntimeOptionsFactory.h"
#include "cucumber/runtime/formatter/PluginFactory.h"
#include "cucumber/runtime/io/MultiLoader.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/List.h"

@interface CucumberRuntimeRuntimeOptionsFactory () {
 @public
  IOSClass *clazz_;
  jboolean featuresSpecified_;
  jboolean glueSpecified_;
  jboolean pluginSpecified_;
}

- (id<JavaUtilList>)buildArgsFromOptions;

- (void)addNameWithCucumberApiCucumberOptions:(id<CucumberApiCucumberOptions>)options
                             withJavaUtilList:(id<JavaUtilList>)args;

- (void)addSnippetsWithCucumberApiCucumberOptions:(id<CucumberApiCucumberOptions>)options
                                 withJavaUtilList:(id<JavaUtilList>)args;

- (void)addDryRunWithCucumberApiCucumberOptions:(id<CucumberApiCucumberOptions>)options
                               withJavaUtilList:(id<JavaUtilList>)args;

- (void)addMonochromeWithCucumberApiCucumberOptions:(id<CucumberApiCucumberOptions>)options
                                   withJavaUtilList:(id<JavaUtilList>)args;

- (void)addTagsWithCucumberApiCucumberOptions:(id<CucumberApiCucumberOptions>)options
                             withJavaUtilList:(id<JavaUtilList>)args;

- (void)addPluginsWithCucumberApiCucumberOptions:(id<CucumberApiCucumberOptions>)options
                                withJavaUtilList:(id<JavaUtilList>)args;

- (void)addNullFormatIfNoPluginIsSpecifiedWithJavaUtilList:(id<JavaUtilList>)args;

- (void)addFeaturesWithCucumberApiCucumberOptions:(id<CucumberApiCucumberOptions>)options
                                 withJavaUtilList:(id<JavaUtilList>)args;

- (void)addDefaultFeaturePathIfNoFeaturePathIsSpecifiedWithJavaUtilList:(id<JavaUtilList>)args
                                                           withIOSClass:(IOSClass *)clazz;

- (void)addGlueWithCucumberApiCucumberOptions:(id<CucumberApiCucumberOptions>)options
                             withJavaUtilList:(id<JavaUtilList>)args;

- (void)addDefaultGlueIfNoGlueIsSpecifiedWithJavaUtilList:(id<JavaUtilList>)args
                                             withIOSClass:(IOSClass *)clazz;

- (void)addStrictWithCucumberApiCucumberOptions:(id<CucumberApiCucumberOptions>)options
                               withJavaUtilList:(id<JavaUtilList>)args;

- (void)addJunitOptionsWithCucumberApiCucumberOptions:(id<CucumberApiCucumberOptions>)options
                                     withJavaUtilList:(id<JavaUtilList>)args;

- (id<JavaUtilList>)buildConverters;

- (jboolean)runningInEnvironmentWithoutAnsiSupport;

- (jboolean)hasSuperClassWithIOSClass:(IOSClass *)classWithOptions;

- (id<CucumberApiCucumberOptions>)getOptionsWithIOSClass:(IOSClass *)clazz;

@end

J2OBJC_FIELD_SETTER(CucumberRuntimeRuntimeOptionsFactory, clazz_, IOSClass *)

__attribute__((unused)) static id<JavaUtilList> CucumberRuntimeRuntimeOptionsFactory_buildArgsFromOptions(CucumberRuntimeRuntimeOptionsFactory *self);

__attribute__((unused)) static void CucumberRuntimeRuntimeOptionsFactory_addNameWithCucumberApiCucumberOptions_withJavaUtilList_(CucumberRuntimeRuntimeOptionsFactory *self, id<CucumberApiCucumberOptions> options, id<JavaUtilList> args);

__attribute__((unused)) static void CucumberRuntimeRuntimeOptionsFactory_addSnippetsWithCucumberApiCucumberOptions_withJavaUtilList_(CucumberRuntimeRuntimeOptionsFactory *self, id<CucumberApiCucumberOptions> options, id<JavaUtilList> args);

__attribute__((unused)) static void CucumberRuntimeRuntimeOptionsFactory_addDryRunWithCucumberApiCucumberOptions_withJavaUtilList_(CucumberRuntimeRuntimeOptionsFactory *self, id<CucumberApiCucumberOptions> options, id<JavaUtilList> args);

__attribute__((unused)) static void CucumberRuntimeRuntimeOptionsFactory_addMonochromeWithCucumberApiCucumberOptions_withJavaUtilList_(CucumberRuntimeRuntimeOptionsFactory *self, id<CucumberApiCucumberOptions> options, id<JavaUtilList> args);

__attribute__((unused)) static void CucumberRuntimeRuntimeOptionsFactory_addTagsWithCucumberApiCucumberOptions_withJavaUtilList_(CucumberRuntimeRuntimeOptionsFactory *self, id<CucumberApiCucumberOptions> options, id<JavaUtilList> args);

__attribute__((unused)) static void CucumberRuntimeRuntimeOptionsFactory_addPluginsWithCucumberApiCucumberOptions_withJavaUtilList_(CucumberRuntimeRuntimeOptionsFactory *self, id<CucumberApiCucumberOptions> options, id<JavaUtilList> args);

__attribute__((unused)) static void CucumberRuntimeRuntimeOptionsFactory_addNullFormatIfNoPluginIsSpecifiedWithJavaUtilList_(CucumberRuntimeRuntimeOptionsFactory *self, id<JavaUtilList> args);

__attribute__((unused)) static void CucumberRuntimeRuntimeOptionsFactory_addFeaturesWithCucumberApiCucumberOptions_withJavaUtilList_(CucumberRuntimeRuntimeOptionsFactory *self, id<CucumberApiCucumberOptions> options, id<JavaUtilList> args);

__attribute__((unused)) static void CucumberRuntimeRuntimeOptionsFactory_addDefaultFeaturePathIfNoFeaturePathIsSpecifiedWithJavaUtilList_withIOSClass_(CucumberRuntimeRuntimeOptionsFactory *self, id<JavaUtilList> args, IOSClass *clazz);

__attribute__((unused)) static void CucumberRuntimeRuntimeOptionsFactory_addGlueWithCucumberApiCucumberOptions_withJavaUtilList_(CucumberRuntimeRuntimeOptionsFactory *self, id<CucumberApiCucumberOptions> options, id<JavaUtilList> args);

__attribute__((unused)) static void CucumberRuntimeRuntimeOptionsFactory_addDefaultGlueIfNoGlueIsSpecifiedWithJavaUtilList_withIOSClass_(CucumberRuntimeRuntimeOptionsFactory *self, id<JavaUtilList> args, IOSClass *clazz);

__attribute__((unused)) static void CucumberRuntimeRuntimeOptionsFactory_addStrictWithCucumberApiCucumberOptions_withJavaUtilList_(CucumberRuntimeRuntimeOptionsFactory *self, id<CucumberApiCucumberOptions> options, id<JavaUtilList> args);

__attribute__((unused)) static void CucumberRuntimeRuntimeOptionsFactory_addJunitOptionsWithCucumberApiCucumberOptions_withJavaUtilList_(CucumberRuntimeRuntimeOptionsFactory *self, id<CucumberApiCucumberOptions> options, id<JavaUtilList> args);

__attribute__((unused)) static id<JavaUtilList> CucumberRuntimeRuntimeOptionsFactory_buildConverters(CucumberRuntimeRuntimeOptionsFactory *self);

__attribute__((unused)) static jboolean CucumberRuntimeRuntimeOptionsFactory_runningInEnvironmentWithoutAnsiSupport(CucumberRuntimeRuntimeOptionsFactory *self);

__attribute__((unused)) static jboolean CucumberRuntimeRuntimeOptionsFactory_hasSuperClassWithIOSClass_(CucumberRuntimeRuntimeOptionsFactory *self, IOSClass *classWithOptions);

__attribute__((unused)) static id<CucumberApiCucumberOptions> CucumberRuntimeRuntimeOptionsFactory_getOptionsWithIOSClass_(CucumberRuntimeRuntimeOptionsFactory *self, IOSClass *clazz);

@implementation CucumberRuntimeRuntimeOptionsFactory

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)clazz {
  CucumberRuntimeRuntimeOptionsFactory_initWithIOSClass_(self, clazz);
  return self;
}

- (CucumberRuntimeRuntimeOptions *)create {
  id<JavaUtilList> args = CucumberRuntimeRuntimeOptionsFactory_buildArgsFromOptions(self);
  id<JavaUtilList> converters = CucumberRuntimeRuntimeOptionsFactory_buildConverters(self);
  return [create_CucumberRuntimeRuntimeOptions_initWithJavaUtilList_(args) withConvertersWithJavaUtilList:converters];
}

- (id<JavaUtilList>)buildArgsFromOptions {
  return CucumberRuntimeRuntimeOptionsFactory_buildArgsFromOptions(self);
}

- (void)addNameWithCucumberApiCucumberOptions:(id<CucumberApiCucumberOptions>)options
                             withJavaUtilList:(id<JavaUtilList>)args {
  CucumberRuntimeRuntimeOptionsFactory_addNameWithCucumberApiCucumberOptions_withJavaUtilList_(self, options, args);
}

- (void)addSnippetsWithCucumberApiCucumberOptions:(id<CucumberApiCucumberOptions>)options
                                 withJavaUtilList:(id<JavaUtilList>)args {
  CucumberRuntimeRuntimeOptionsFactory_addSnippetsWithCucumberApiCucumberOptions_withJavaUtilList_(self, options, args);
}

- (void)addDryRunWithCucumberApiCucumberOptions:(id<CucumberApiCucumberOptions>)options
                               withJavaUtilList:(id<JavaUtilList>)args {
  CucumberRuntimeRuntimeOptionsFactory_addDryRunWithCucumberApiCucumberOptions_withJavaUtilList_(self, options, args);
}

- (void)addMonochromeWithCucumberApiCucumberOptions:(id<CucumberApiCucumberOptions>)options
                                   withJavaUtilList:(id<JavaUtilList>)args {
  CucumberRuntimeRuntimeOptionsFactory_addMonochromeWithCucumberApiCucumberOptions_withJavaUtilList_(self, options, args);
}

- (void)addTagsWithCucumberApiCucumberOptions:(id<CucumberApiCucumberOptions>)options
                             withJavaUtilList:(id<JavaUtilList>)args {
  CucumberRuntimeRuntimeOptionsFactory_addTagsWithCucumberApiCucumberOptions_withJavaUtilList_(self, options, args);
}

- (void)addPluginsWithCucumberApiCucumberOptions:(id<CucumberApiCucumberOptions>)options
                                withJavaUtilList:(id<JavaUtilList>)args {
  CucumberRuntimeRuntimeOptionsFactory_addPluginsWithCucumberApiCucumberOptions_withJavaUtilList_(self, options, args);
}

- (void)addNullFormatIfNoPluginIsSpecifiedWithJavaUtilList:(id<JavaUtilList>)args {
  CucumberRuntimeRuntimeOptionsFactory_addNullFormatIfNoPluginIsSpecifiedWithJavaUtilList_(self, args);
}

- (void)addFeaturesWithCucumberApiCucumberOptions:(id<CucumberApiCucumberOptions>)options
                                 withJavaUtilList:(id<JavaUtilList>)args {
  CucumberRuntimeRuntimeOptionsFactory_addFeaturesWithCucumberApiCucumberOptions_withJavaUtilList_(self, options, args);
}

- (void)addDefaultFeaturePathIfNoFeaturePathIsSpecifiedWithJavaUtilList:(id<JavaUtilList>)args
                                                           withIOSClass:(IOSClass *)clazz {
  CucumberRuntimeRuntimeOptionsFactory_addDefaultFeaturePathIfNoFeaturePathIsSpecifiedWithJavaUtilList_withIOSClass_(self, args, clazz);
}

- (void)addGlueWithCucumberApiCucumberOptions:(id<CucumberApiCucumberOptions>)options
                             withJavaUtilList:(id<JavaUtilList>)args {
  CucumberRuntimeRuntimeOptionsFactory_addGlueWithCucumberApiCucumberOptions_withJavaUtilList_(self, options, args);
}

- (void)addDefaultGlueIfNoGlueIsSpecifiedWithJavaUtilList:(id<JavaUtilList>)args
                                             withIOSClass:(IOSClass *)clazz {
  CucumberRuntimeRuntimeOptionsFactory_addDefaultGlueIfNoGlueIsSpecifiedWithJavaUtilList_withIOSClass_(self, args, clazz);
}

- (void)addStrictWithCucumberApiCucumberOptions:(id<CucumberApiCucumberOptions>)options
                               withJavaUtilList:(id<JavaUtilList>)args {
  CucumberRuntimeRuntimeOptionsFactory_addStrictWithCucumberApiCucumberOptions_withJavaUtilList_(self, options, args);
}

- (void)addJunitOptionsWithCucumberApiCucumberOptions:(id<CucumberApiCucumberOptions>)options
                                     withJavaUtilList:(id<JavaUtilList>)args {
  CucumberRuntimeRuntimeOptionsFactory_addJunitOptionsWithCucumberApiCucumberOptions_withJavaUtilList_(self, options, args);
}

- (id<JavaUtilList>)buildConverters {
  return CucumberRuntimeRuntimeOptionsFactory_buildConverters(self);
}

+ (NSString *)packagePathWithIOSClass:(IOSClass *)clazz {
  return CucumberRuntimeRuntimeOptionsFactory_packagePathWithIOSClass_(clazz);
}

+ (NSString *)packagePathWithNSString:(NSString *)packageName {
  return CucumberRuntimeRuntimeOptionsFactory_packagePathWithNSString_(packageName);
}

+ (NSString *)packageNameWithNSString:(NSString *)className_ {
  return CucumberRuntimeRuntimeOptionsFactory_packageNameWithNSString_(className_);
}

- (jboolean)runningInEnvironmentWithoutAnsiSupport {
  return CucumberRuntimeRuntimeOptionsFactory_runningInEnvironmentWithoutAnsiSupport(self);
}

- (jboolean)hasSuperClassWithIOSClass:(IOSClass *)classWithOptions {
  return CucumberRuntimeRuntimeOptionsFactory_hasSuperClassWithIOSClass_(self, classWithOptions);
}

- (id<CucumberApiCucumberOptions>)getOptionsWithIOSClass:(IOSClass *)clazz {
  return CucumberRuntimeRuntimeOptionsFactory_getOptionsWithIOSClass_(self, clazz);
}

- (void)dealloc {
  RELEASE_(clazz_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LCucumberRuntimeRuntimeOptions;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x2, 5, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x2, 6, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x2, 7, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x2, 8, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x2, 9, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, 12, -1, -1 },
    { NULL, "V", 0x2, 13, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x2, 14, 15, -1, 16, -1, -1 },
    { NULL, "V", 0x2, 17, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x2, 18, 15, -1, 16, -1, -1 },
    { NULL, "V", 0x2, 19, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x2, 20, 3, -1, 4, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, -1, -1, -1, 21, -1, -1 },
    { NULL, "LNSString;", 0x8, 22, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 22, 23, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 24, 23, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 25, 0, -1, -1, -1, -1 },
    { NULL, "LCucumberApiCucumberOptions;", 0x2, 26, 0, -1, 27, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIOSClass:);
  methods[1].selector = @selector(create);
  methods[2].selector = @selector(buildArgsFromOptions);
  methods[3].selector = @selector(addNameWithCucumberApiCucumberOptions:withJavaUtilList:);
  methods[4].selector = @selector(addSnippetsWithCucumberApiCucumberOptions:withJavaUtilList:);
  methods[5].selector = @selector(addDryRunWithCucumberApiCucumberOptions:withJavaUtilList:);
  methods[6].selector = @selector(addMonochromeWithCucumberApiCucumberOptions:withJavaUtilList:);
  methods[7].selector = @selector(addTagsWithCucumberApiCucumberOptions:withJavaUtilList:);
  methods[8].selector = @selector(addPluginsWithCucumberApiCucumberOptions:withJavaUtilList:);
  methods[9].selector = @selector(addNullFormatIfNoPluginIsSpecifiedWithJavaUtilList:);
  methods[10].selector = @selector(addFeaturesWithCucumberApiCucumberOptions:withJavaUtilList:);
  methods[11].selector = @selector(addDefaultFeaturePathIfNoFeaturePathIsSpecifiedWithJavaUtilList:withIOSClass:);
  methods[12].selector = @selector(addGlueWithCucumberApiCucumberOptions:withJavaUtilList:);
  methods[13].selector = @selector(addDefaultGlueIfNoGlueIsSpecifiedWithJavaUtilList:withIOSClass:);
  methods[14].selector = @selector(addStrictWithCucumberApiCucumberOptions:withJavaUtilList:);
  methods[15].selector = @selector(addJunitOptionsWithCucumberApiCucumberOptions:withJavaUtilList:);
  methods[16].selector = @selector(buildConverters);
  methods[17].selector = @selector(packagePathWithIOSClass:);
  methods[18].selector = @selector(packagePathWithNSString:);
  methods[19].selector = @selector(packageNameWithNSString:);
  methods[20].selector = @selector(runningInEnvironmentWithoutAnsiSupport);
  methods[21].selector = @selector(hasSuperClassWithIOSClass:);
  methods[22].selector = @selector(getOptionsWithIOSClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "clazz_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "featuresSpecified_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "glueSpecified_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pluginSpecified_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;", "()Ljava/util/List<Ljava/lang/String;>;", "addName", "LCucumberApiCucumberOptions;LJavaUtilList;", "(Lcucumber/api/CucumberOptions;Ljava/util/List<Ljava/lang/String;>;)V", "addSnippets", "addDryRun", "addMonochrome", "addTags", "addPlugins", "addNullFormatIfNoPluginIsSpecified", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)V", "addFeatures", "addDefaultFeaturePathIfNoFeaturePathIsSpecified", "LJavaUtilList;LIOSClass;", "(Ljava/util/List<Ljava/lang/String;>;Ljava/lang/Class;)V", "addGlue", "addDefaultGlueIfNoGlueIsSpecified", "addStrict", "addJunitOptions", "()Ljava/util/List<Lcucumber/deps/com/thoughtworks/xstream/annotations/XStreamConverter;>;", "packagePath", "LNSString;", "packageName", "hasSuperClass", "getOptions", "(Ljava/lang/Class<*>;)Lcucumber/api/CucumberOptions;" };
  static const J2ObjcClassInfo _CucumberRuntimeRuntimeOptionsFactory = { "RuntimeOptionsFactory", "cucumber.runtime", ptrTable, methods, fields, 7, 0x1, 23, 4, -1, -1, -1, -1, -1 };
  return &_CucumberRuntimeRuntimeOptionsFactory;
}

@end

void CucumberRuntimeRuntimeOptionsFactory_initWithIOSClass_(CucumberRuntimeRuntimeOptionsFactory *self, IOSClass *clazz) {
  NSObject_init(self);
  self->featuresSpecified_ = false;
  self->glueSpecified_ = false;
  self->pluginSpecified_ = false;
  JreStrongAssign(&self->clazz_, clazz);
}

CucumberRuntimeRuntimeOptionsFactory *new_CucumberRuntimeRuntimeOptionsFactory_initWithIOSClass_(IOSClass *clazz) {
  J2OBJC_NEW_IMPL(CucumberRuntimeRuntimeOptionsFactory, initWithIOSClass_, clazz)
}

CucumberRuntimeRuntimeOptionsFactory *create_CucumberRuntimeRuntimeOptionsFactory_initWithIOSClass_(IOSClass *clazz) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeRuntimeOptionsFactory, initWithIOSClass_, clazz)
}

id<JavaUtilList> CucumberRuntimeRuntimeOptionsFactory_buildArgsFromOptions(CucumberRuntimeRuntimeOptionsFactory *self) {
  id<JavaUtilList> args = create_JavaUtilArrayList_init();
  for (IOSClass *classWithOptions = self->clazz_; CucumberRuntimeRuntimeOptionsFactory_hasSuperClassWithIOSClass_(self, classWithOptions); classWithOptions = [((IOSClass *) nil_chk(classWithOptions)) getSuperclass]) {
    id<CucumberApiCucumberOptions> options = CucumberRuntimeRuntimeOptionsFactory_getOptionsWithIOSClass_(self, classWithOptions);
    if (options != nil) {
      CucumberRuntimeRuntimeOptionsFactory_addDryRunWithCucumberApiCucumberOptions_withJavaUtilList_(self, options, args);
      CucumberRuntimeRuntimeOptionsFactory_addMonochromeWithCucumberApiCucumberOptions_withJavaUtilList_(self, options, args);
      CucumberRuntimeRuntimeOptionsFactory_addTagsWithCucumberApiCucumberOptions_withJavaUtilList_(self, options, args);
      CucumberRuntimeRuntimeOptionsFactory_addPluginsWithCucumberApiCucumberOptions_withJavaUtilList_(self, options, args);
      CucumberRuntimeRuntimeOptionsFactory_addStrictWithCucumberApiCucumberOptions_withJavaUtilList_(self, options, args);
      CucumberRuntimeRuntimeOptionsFactory_addNameWithCucumberApiCucumberOptions_withJavaUtilList_(self, options, args);
      CucumberRuntimeRuntimeOptionsFactory_addSnippetsWithCucumberApiCucumberOptions_withJavaUtilList_(self, options, args);
      CucumberRuntimeRuntimeOptionsFactory_addGlueWithCucumberApiCucumberOptions_withJavaUtilList_(self, options, args);
      CucumberRuntimeRuntimeOptionsFactory_addFeaturesWithCucumberApiCucumberOptions_withJavaUtilList_(self, options, args);
      CucumberRuntimeRuntimeOptionsFactory_addJunitOptionsWithCucumberApiCucumberOptions_withJavaUtilList_(self, options, args);
    }
  }
  CucumberRuntimeRuntimeOptionsFactory_addDefaultFeaturePathIfNoFeaturePathIsSpecifiedWithJavaUtilList_withIOSClass_(self, args, self->clazz_);
  CucumberRuntimeRuntimeOptionsFactory_addDefaultGlueIfNoGlueIsSpecifiedWithJavaUtilList_withIOSClass_(self, args, self->clazz_);
  CucumberRuntimeRuntimeOptionsFactory_addNullFormatIfNoPluginIsSpecifiedWithJavaUtilList_(self, args);
  return args;
}

void CucumberRuntimeRuntimeOptionsFactory_addNameWithCucumberApiCucumberOptions_withJavaUtilList_(CucumberRuntimeRuntimeOptionsFactory *self, id<CucumberApiCucumberOptions> options, id<JavaUtilList> args) {
  {
    IOSObjectArray *a__ = [((id<CucumberApiCucumberOptions>) nil_chk(options)) name];
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *name = *b__++;
      [((id<JavaUtilList>) nil_chk(args)) addWithId:@"--name"];
      [args addWithId:name];
    }
  }
}

void CucumberRuntimeRuntimeOptionsFactory_addSnippetsWithCucumberApiCucumberOptions_withJavaUtilList_(CucumberRuntimeRuntimeOptionsFactory *self, id<CucumberApiCucumberOptions> options, id<JavaUtilList> args) {
  [((id<JavaUtilList>) nil_chk(args)) addWithId:@"--snippets"];
  [args addWithId:[((CucumberApiSnippetType *) nil_chk([((id<CucumberApiCucumberOptions>) nil_chk(options)) snippets])) description]];
}

void CucumberRuntimeRuntimeOptionsFactory_addDryRunWithCucumberApiCucumberOptions_withJavaUtilList_(CucumberRuntimeRuntimeOptionsFactory *self, id<CucumberApiCucumberOptions> options, id<JavaUtilList> args) {
  if ([((id<CucumberApiCucumberOptions>) nil_chk(options)) dryRun]) {
    [((id<JavaUtilList>) nil_chk(args)) addWithId:@"--dry-run"];
  }
}

void CucumberRuntimeRuntimeOptionsFactory_addMonochromeWithCucumberApiCucumberOptions_withJavaUtilList_(CucumberRuntimeRuntimeOptionsFactory *self, id<CucumberApiCucumberOptions> options, id<JavaUtilList> args) {
  if ([((id<CucumberApiCucumberOptions>) nil_chk(options)) monochrome] || CucumberRuntimeRuntimeOptionsFactory_runningInEnvironmentWithoutAnsiSupport(self)) {
    [((id<JavaUtilList>) nil_chk(args)) addWithId:@"--monochrome"];
  }
}

void CucumberRuntimeRuntimeOptionsFactory_addTagsWithCucumberApiCucumberOptions_withJavaUtilList_(CucumberRuntimeRuntimeOptionsFactory *self, id<CucumberApiCucumberOptions> options, id<JavaUtilList> args) {
  {
    IOSObjectArray *a__ = [((id<CucumberApiCucumberOptions>) nil_chk(options)) tags];
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *tags = *b__++;
      [((id<JavaUtilList>) nil_chk(args)) addWithId:@"--tags"];
      [args addWithId:tags];
    }
  }
}

void CucumberRuntimeRuntimeOptionsFactory_addPluginsWithCucumberApiCucumberOptions_withJavaUtilList_(CucumberRuntimeRuntimeOptionsFactory *self, id<CucumberApiCucumberOptions> options, id<JavaUtilList> args) {
  id<JavaUtilList> plugins = create_JavaUtilArrayList_init();
  [plugins addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([((id<CucumberApiCucumberOptions>) nil_chk(options)) plugin])];
  [plugins addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([options format])];
  for (NSString * __strong plugin in plugins) {
    [((id<JavaUtilList>) nil_chk(args)) addWithId:@"--plugin"];
    [args addWithId:plugin];
    if (CucumberRuntimeFormatterPluginFactory_isFormatterNameWithNSString_(plugin)) {
      self->pluginSpecified_ = true;
    }
  }
}

void CucumberRuntimeRuntimeOptionsFactory_addNullFormatIfNoPluginIsSpecifiedWithJavaUtilList_(CucumberRuntimeRuntimeOptionsFactory *self, id<JavaUtilList> args) {
  if (!self->pluginSpecified_) {
    [((id<JavaUtilList>) nil_chk(args)) addWithId:@"--plugin"];
    [args addWithId:@"null"];
  }
}

void CucumberRuntimeRuntimeOptionsFactory_addFeaturesWithCucumberApiCucumberOptions_withJavaUtilList_(CucumberRuntimeRuntimeOptionsFactory *self, id<CucumberApiCucumberOptions> options, id<JavaUtilList> args) {
  if (options != nil && ((IOSObjectArray *) nil_chk([options features]))->size_ != 0) {
    JavaUtilCollections_addAllWithJavaUtilCollection_withNSObjectArray_(args, [options features]);
    self->featuresSpecified_ = true;
  }
}

void CucumberRuntimeRuntimeOptionsFactory_addDefaultFeaturePathIfNoFeaturePathIsSpecifiedWithJavaUtilList_withIOSClass_(CucumberRuntimeRuntimeOptionsFactory *self, id<JavaUtilList> args, IOSClass *clazz) {
  if (!self->featuresSpecified_) {
    [((id<JavaUtilList>) nil_chk(args)) addWithId:JreStrcat("$$", CucumberRuntimeIoMultiLoader_CLASSPATH_SCHEME, CucumberRuntimeRuntimeOptionsFactory_packagePathWithIOSClass_(clazz))];
  }
}

void CucumberRuntimeRuntimeOptionsFactory_addGlueWithCucumberApiCucumberOptions_withJavaUtilList_(CucumberRuntimeRuntimeOptionsFactory *self, id<CucumberApiCucumberOptions> options, id<JavaUtilList> args) {
  {
    IOSObjectArray *a__ = [((id<CucumberApiCucumberOptions>) nil_chk(options)) glue];
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *glue = *b__++;
      [((id<JavaUtilList>) nil_chk(args)) addWithId:@"--glue"];
      [args addWithId:glue];
      self->glueSpecified_ = true;
    }
  }
}

void CucumberRuntimeRuntimeOptionsFactory_addDefaultGlueIfNoGlueIsSpecifiedWithJavaUtilList_withIOSClass_(CucumberRuntimeRuntimeOptionsFactory *self, id<JavaUtilList> args, IOSClass *clazz) {
  if (!self->glueSpecified_) {
    [((id<JavaUtilList>) nil_chk(args)) addWithId:@"--glue"];
    [args addWithId:JreStrcat("$$", CucumberRuntimeIoMultiLoader_CLASSPATH_SCHEME, CucumberRuntimeRuntimeOptionsFactory_packagePathWithIOSClass_(clazz))];
  }
}

void CucumberRuntimeRuntimeOptionsFactory_addStrictWithCucumberApiCucumberOptions_withJavaUtilList_(CucumberRuntimeRuntimeOptionsFactory *self, id<CucumberApiCucumberOptions> options, id<JavaUtilList> args) {
  if ([((id<CucumberApiCucumberOptions>) nil_chk(options)) strict]) {
    [((id<JavaUtilList>) nil_chk(args)) addWithId:@"--strict"];
  }
}

void CucumberRuntimeRuntimeOptionsFactory_addJunitOptionsWithCucumberApiCucumberOptions_withJavaUtilList_(CucumberRuntimeRuntimeOptionsFactory *self, id<CucumberApiCucumberOptions> options, id<JavaUtilList> args) {
  {
    IOSObjectArray *a__ = [((id<CucumberApiCucumberOptions>) nil_chk(options)) junit];
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *junitOption = *b__++;
      [((id<JavaUtilList>) nil_chk(args)) addWithId:JreStrcat("$$", @"--junit,", junitOption)];
    }
  }
}

id<JavaUtilList> CucumberRuntimeRuntimeOptionsFactory_buildConverters(CucumberRuntimeRuntimeOptionsFactory *self) {
  id<JavaUtilList> converters = create_JavaUtilArrayList_init();
  for (IOSClass *classWithConverters = self->clazz_; CucumberRuntimeRuntimeOptionsFactory_hasSuperClassWithIOSClass_(self, classWithConverters); classWithConverters = [classWithConverters getSuperclass]) {
    id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverters> xstreamConverters = ((id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverters>) [((IOSClass *) nil_chk(classWithConverters)) getAnnotationWithIOSClass:CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverters_class_()]);
    if (xstreamConverters != nil) {
      JavaUtilCollections_addAllWithJavaUtilCollection_withNSObjectArray_(converters, [xstreamConverters value]);
    }
    id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter> xstreamConverter = ((id<CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter>) [classWithConverters getAnnotationWithIOSClass:CucumberDepsComThoughtworksXstreamAnnotationsXStreamConverter_class_()]);
    if (xstreamConverter != nil) {
      [converters addWithId:xstreamConverter];
    }
  }
  return converters;
}

NSString *CucumberRuntimeRuntimeOptionsFactory_packagePathWithIOSClass_(IOSClass *clazz) {
  CucumberRuntimeRuntimeOptionsFactory_initialize();
  return CucumberRuntimeRuntimeOptionsFactory_packagePathWithNSString_(CucumberRuntimeRuntimeOptionsFactory_packageNameWithNSString_([((IOSClass *) nil_chk(clazz)) getName]));
}

NSString *CucumberRuntimeRuntimeOptionsFactory_packagePathWithNSString_(NSString *packageName) {
  CucumberRuntimeRuntimeOptionsFactory_initialize();
  return [((NSString *) nil_chk(packageName)) java_replace:'.' withChar:'/'];
}

NSString *CucumberRuntimeRuntimeOptionsFactory_packageNameWithNSString_(NSString *className_) {
  CucumberRuntimeRuntimeOptionsFactory_initialize();
  return [((NSString *) nil_chk(className_)) java_substring:0 endIndex:JavaLangMath_maxWithInt_withInt_(0, [className_ java_lastIndexOfString:@"."])];
}

jboolean CucumberRuntimeRuntimeOptionsFactory_runningInEnvironmentWithoutAnsiSupport(CucumberRuntimeRuntimeOptionsFactory *self) {
  jboolean intelliJidea = JavaLangSystem_getPropertyWithNSString_(@"idea.launcher.bin.path") != nil;
  return intelliJidea;
}

jboolean CucumberRuntimeRuntimeOptionsFactory_hasSuperClassWithIOSClass_(CucumberRuntimeRuntimeOptionsFactory *self, IOSClass *classWithOptions) {
  return classWithOptions != NSObject_class_();
}

id<CucumberApiCucumberOptions> CucumberRuntimeRuntimeOptionsFactory_getOptionsWithIOSClass_(CucumberRuntimeRuntimeOptionsFactory *self, IOSClass *clazz) {
  return ((id<CucumberApiCucumberOptions>) [((IOSClass *) nil_chk(clazz)) getAnnotationWithIOSClass:CucumberApiCucumberOptions_class_()]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeRuntimeOptionsFactory)
