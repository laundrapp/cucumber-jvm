//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/RuntimeOptions.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CucumberRuntimeRuntimeOptions")
#ifdef RESTRICT_CucumberRuntimeRuntimeOptions
#define INCLUDE_ALL_CucumberRuntimeRuntimeOptions 0
#else
#define INCLUDE_ALL_CucumberRuntimeRuntimeOptions 1
#endif
#undef RESTRICT_CucumberRuntimeRuntimeOptions

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (CCBRRuntimeOptions_) && (INCLUDE_ALL_CucumberRuntimeRuntimeOptions || defined(INCLUDE_CCBRRuntimeOptions))
#define CCBRRuntimeOptions_

@class CCBEventBus;
@class CCBREnv;
@class CCBRPluginFactory;
@class CucumberApiSnippetType;
@class JavaLangClassLoader;
@protocol CCBRResourceLoader;
@protocol CucumberApiFormatterFormatter;
@protocol CucumberApiStepDefinitionReporter;
@protocol CucumberApiSummaryPrinter;
@protocol JavaUtilList;
@protocol JavaUtilMap;

@interface CCBRRuntimeOptions : NSObject

#pragma mark Public

- (instancetype __nonnull)initWithCCBREnv:(CCBREnv *)env
                         withJavaUtilList:(id<JavaUtilList>)argv;

- (instancetype __nonnull)initWithCCBREnv:(CCBREnv *)env
                    withCCBRPluginFactory:(CCBRPluginFactory *)pluginFactory
                         withJavaUtilList:(id<JavaUtilList>)argv;

/*!
 @brief Create a new instance from a list of options, for example:
 <p>
  <pre<<code>Arrays.asList("--name", "the fox", "--plugin", "pretty", "--strict");</code>
@endcode
 @param argv the arguments
 */
- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)argv;

- (instancetype __nonnull)initWithCCBRPluginFactory:(CCBRPluginFactory *)pluginFactory
                                   withJavaUtilList:(id<JavaUtilList>)argv;

/*!
 @brief Create a new instance from a string of options, for example:
 <p>
  <pre<<code>"--name 'the fox' --plugin pretty --strict"</code>
@endcode
 @param argv the arguments
 */
- (instancetype __nonnull)initWithNSString:(NSString *)argv;

- (void)addPluginWithCucumberApiFormatterFormatter:(id<CucumberApiFormatterFormatter>)plugin;

- (id<JavaUtilList>)cucumberFeaturesWithCCBRResourceLoader:(id<CCBRResourceLoader>)resourceLoader
                                           withCCBEventBus:(CCBEventBus *)bus;

- (id<CucumberApiFormatterFormatter>)formatterWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader;

- (id<JavaUtilList>)getFeaturePaths;

- (id<JavaUtilList>)getGlue;

- (id<JavaUtilList>)getJunitOptions;

- (id<JavaUtilMap>)getLineFiltersWithCCBRResourceLoader:(id<CCBRResourceLoader>)resourceLoader;

- (id<JavaUtilList>)getNameFilters;

- (id<JavaUtilList>)getPlugins;

- (CucumberApiSnippetType *)getSnippetType;

- (id<JavaUtilList>)getTagFilters;

- (jboolean)isDryRun;

- (jboolean)isMonochrome;

- (jboolean)isStrict;

- (id<CucumberApiStepDefinitionReporter>)stepDefinitionReporterWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader;

- (id<CucumberApiSummaryPrinter>)summaryPrinterWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader;

#pragma mark Package-Private

- (id<JavaUtilList>)getConverters;

+ (void)loadUsageTextIfNeeded;

- (void)setEventBusWithCCBEventBus:(CCBEventBus *)bus;

- (CCBRRuntimeOptions *)withConvertersWithJavaUtilList:(id<JavaUtilList>)converters;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(CCBRRuntimeOptions)

inline NSString *CCBRRuntimeOptions_get_VERSION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *CCBRRuntimeOptions_VERSION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CCBRRuntimeOptions, VERSION, NSString *)

inline NSString *CCBRRuntimeOptions_get_USAGE_RESOURCE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *CCBRRuntimeOptions_USAGE_RESOURCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CCBRRuntimeOptions, USAGE_RESOURCE, NSString *)

inline NSString *CCBRRuntimeOptions_get_usageText(void);
inline NSString *CCBRRuntimeOptions_set_usageText(NSString *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *CCBRRuntimeOptions_usageText;
J2OBJC_STATIC_FIELD_OBJ(CCBRRuntimeOptions, usageText, NSString *)

FOUNDATION_EXPORT void CCBRRuntimeOptions_initWithNSString_(CCBRRuntimeOptions *self, NSString *argv);

FOUNDATION_EXPORT CCBRRuntimeOptions *new_CCBRRuntimeOptions_initWithNSString_(NSString *argv) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CCBRRuntimeOptions *create_CCBRRuntimeOptions_initWithNSString_(NSString *argv);

FOUNDATION_EXPORT void CCBRRuntimeOptions_initWithJavaUtilList_(CCBRRuntimeOptions *self, id<JavaUtilList> argv);

FOUNDATION_EXPORT CCBRRuntimeOptions *new_CCBRRuntimeOptions_initWithJavaUtilList_(id<JavaUtilList> argv) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CCBRRuntimeOptions *create_CCBRRuntimeOptions_initWithJavaUtilList_(id<JavaUtilList> argv);

FOUNDATION_EXPORT void CCBRRuntimeOptions_initWithCCBREnv_withJavaUtilList_(CCBRRuntimeOptions *self, CCBREnv *env, id<JavaUtilList> argv);

FOUNDATION_EXPORT CCBRRuntimeOptions *new_CCBRRuntimeOptions_initWithCCBREnv_withJavaUtilList_(CCBREnv *env, id<JavaUtilList> argv) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CCBRRuntimeOptions *create_CCBRRuntimeOptions_initWithCCBREnv_withJavaUtilList_(CCBREnv *env, id<JavaUtilList> argv);

FOUNDATION_EXPORT void CCBRRuntimeOptions_initWithCCBRPluginFactory_withJavaUtilList_(CCBRRuntimeOptions *self, CCBRPluginFactory *pluginFactory, id<JavaUtilList> argv);

FOUNDATION_EXPORT CCBRRuntimeOptions *new_CCBRRuntimeOptions_initWithCCBRPluginFactory_withJavaUtilList_(CCBRPluginFactory *pluginFactory, id<JavaUtilList> argv) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CCBRRuntimeOptions *create_CCBRRuntimeOptions_initWithCCBRPluginFactory_withJavaUtilList_(CCBRPluginFactory *pluginFactory, id<JavaUtilList> argv);

FOUNDATION_EXPORT void CCBRRuntimeOptions_initWithCCBREnv_withCCBRPluginFactory_withJavaUtilList_(CCBRRuntimeOptions *self, CCBREnv *env, CCBRPluginFactory *pluginFactory, id<JavaUtilList> argv);

FOUNDATION_EXPORT CCBRRuntimeOptions *new_CCBRRuntimeOptions_initWithCCBREnv_withCCBRPluginFactory_withJavaUtilList_(CCBREnv *env, CCBRPluginFactory *pluginFactory, id<JavaUtilList> argv) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CCBRRuntimeOptions *create_CCBRRuntimeOptions_initWithCCBREnv_withCCBRPluginFactory_withJavaUtilList_(CCBREnv *env, CCBRPluginFactory *pluginFactory, id<JavaUtilList> argv);

FOUNDATION_EXPORT void CCBRRuntimeOptions_loadUsageTextIfNeeded(void);

J2OBJC_TYPE_LITERAL_HEADER(CCBRRuntimeOptions)

@compatibility_alias CucumberRuntimeRuntimeOptions CCBRRuntimeOptions;

#endif

#if !defined (CCBRRuntimeOptions_ParsedPluginData_) && (INCLUDE_ALL_CucumberRuntimeRuntimeOptions || defined(INCLUDE_CCBRRuntimeOptions_ParsedPluginData))
#define CCBRRuntimeOptions_ParsedPluginData_

@class CCBRRuntimeOptions;
@class CCBRRuntimeOptions_ParsedOptionNames;
@protocol JavaUtilList;

@interface CCBRRuntimeOptions_ParsedPluginData : NSObject {
 @public
  CCBRRuntimeOptions_ParsedOptionNames *formatterNames_;
  CCBRRuntimeOptions_ParsedOptionNames *stepDefinitionReporterNames_;
  CCBRRuntimeOptions_ParsedOptionNames *summaryPrinterNames_;
}

#pragma mark Public

- (void)addPluginNameWithNSString:(NSString *)name
                      withBoolean:(jboolean)isAddPlugin;

- (void)updatePluginFormatterNamesWithJavaUtilList:(id<JavaUtilList>)pluginFormatterNames;

- (void)updatePluginStepDefinitionReporterNamesWithJavaUtilList:(id<JavaUtilList>)pluginStepDefinitionReporterNames;

- (void)updatePluginSummaryPrinterNamesWithJavaUtilList:(id<JavaUtilList>)pluginSummaryPrinterNames;

#pragma mark Package-Private

- (instancetype __nonnull)initWithCCBRRuntimeOptions:(CCBRRuntimeOptions *)outer$;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRRuntimeOptions_ParsedPluginData)

J2OBJC_FIELD_SETTER(CCBRRuntimeOptions_ParsedPluginData, formatterNames_, CCBRRuntimeOptions_ParsedOptionNames *)
J2OBJC_FIELD_SETTER(CCBRRuntimeOptions_ParsedPluginData, stepDefinitionReporterNames_, CCBRRuntimeOptions_ParsedOptionNames *)
J2OBJC_FIELD_SETTER(CCBRRuntimeOptions_ParsedPluginData, summaryPrinterNames_, CCBRRuntimeOptions_ParsedOptionNames *)

FOUNDATION_EXPORT void CCBRRuntimeOptions_ParsedPluginData_initWithCCBRRuntimeOptions_(CCBRRuntimeOptions_ParsedPluginData *self, CCBRRuntimeOptions *outer$);

FOUNDATION_EXPORT CCBRRuntimeOptions_ParsedPluginData *new_CCBRRuntimeOptions_ParsedPluginData_initWithCCBRRuntimeOptions_(CCBRRuntimeOptions *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CCBRRuntimeOptions_ParsedPluginData *create_CCBRRuntimeOptions_ParsedPluginData_initWithCCBRRuntimeOptions_(CCBRRuntimeOptions *outer$);

J2OBJC_TYPE_LITERAL_HEADER(CCBRRuntimeOptions_ParsedPluginData)

#endif

#if !defined (CCBRRuntimeOptions_ParsedOptionNames_) && (INCLUDE_ALL_CucumberRuntimeRuntimeOptions || defined(INCLUDE_CCBRRuntimeOptions_ParsedOptionNames))
#define CCBRRuntimeOptions_ParsedOptionNames_

@class CCBRRuntimeOptions;
@protocol JavaUtilList;

@interface CCBRRuntimeOptions_ParsedOptionNames : NSObject

#pragma mark Public

- (void)addNameWithNSString:(NSString *)name
                withBoolean:(jboolean)isAddOption;

- (void)updateNameListWithJavaUtilList:(id<JavaUtilList>)nameList;

#pragma mark Package-Private

- (instancetype __nonnull)initWithCCBRRuntimeOptions:(CCBRRuntimeOptions *)outer$;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRRuntimeOptions_ParsedOptionNames)

FOUNDATION_EXPORT void CCBRRuntimeOptions_ParsedOptionNames_initWithCCBRRuntimeOptions_(CCBRRuntimeOptions_ParsedOptionNames *self, CCBRRuntimeOptions *outer$);

FOUNDATION_EXPORT CCBRRuntimeOptions_ParsedOptionNames *new_CCBRRuntimeOptions_ParsedOptionNames_initWithCCBRRuntimeOptions_(CCBRRuntimeOptions *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CCBRRuntimeOptions_ParsedOptionNames *create_CCBRRuntimeOptions_ParsedOptionNames_initWithCCBRRuntimeOptions_(CCBRRuntimeOptions *outer$);

J2OBJC_TYPE_LITERAL_HEADER(CCBRRuntimeOptions_ParsedOptionNames)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_CucumberRuntimeRuntimeOptions")
