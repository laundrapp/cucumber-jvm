//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/laundrapp_org/cucumber-jvm/java8/src/main/java/cucumber/runtime/java8/Java8StepDefinition.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/api/java8/StepdefBody.h"
#include "cucumber/runtime/CucumberException.h"
#include "cucumber/runtime/JdkPatternArgumentMatcher.h"
#include "cucumber/runtime/ParameterInfo.h"
#include "cucumber/runtime/Utils.h"
#include "cucumber/runtime/java8/Java8StepDefinition.h"
#include "gherkin/pickles/PickleStep.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/StackTraceElement.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Type.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/regex/Pattern.h"
#include "net/jodah/typetools/TypeResolver.h"

@interface CucumberRuntimeJava8Java8StepDefinition () {
 @public
  JavaUtilRegexPattern *pattern_;
  jlong timeoutMillis_;
  id<CucumberApiJava8StepdefBody> body_;
  CucumberRuntimeJdkPatternArgumentMatcher *argumentMatcher_;
  JavaLangStackTraceElement *location_;
  id<JavaUtilList> parameterInfos_;
  JavaLangReflectMethod *method_;
}

- (JavaLangReflectMethod *)getAcceptMethodWithIOSClass:(IOSClass *)bodyClass;

- (IOSObjectArray *)verifyNotListOrMapWithJavaLangReflectTypeArray:(IOSObjectArray *)argumentTypes;

- (CucumberRuntimeCucumberException *)withLocationWithCucumberRuntimeCucumberException:(CucumberRuntimeCucumberException *)exception;

@end

J2OBJC_FIELD_SETTER(CucumberRuntimeJava8Java8StepDefinition, pattern_, JavaUtilRegexPattern *)
J2OBJC_FIELD_SETTER(CucumberRuntimeJava8Java8StepDefinition, body_, id<CucumberApiJava8StepdefBody>)
J2OBJC_FIELD_SETTER(CucumberRuntimeJava8Java8StepDefinition, argumentMatcher_, CucumberRuntimeJdkPatternArgumentMatcher *)
J2OBJC_FIELD_SETTER(CucumberRuntimeJava8Java8StepDefinition, location_, JavaLangStackTraceElement *)
J2OBJC_FIELD_SETTER(CucumberRuntimeJava8Java8StepDefinition, parameterInfos_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CucumberRuntimeJava8Java8StepDefinition, method_, JavaLangReflectMethod *)

__attribute__((unused)) static JavaLangReflectMethod *CucumberRuntimeJava8Java8StepDefinition_getAcceptMethodWithIOSClass_(CucumberRuntimeJava8Java8StepDefinition *self, IOSClass *bodyClass);

__attribute__((unused)) static IOSObjectArray *CucumberRuntimeJava8Java8StepDefinition_verifyNotListOrMapWithJavaLangReflectTypeArray_(CucumberRuntimeJava8Java8StepDefinition *self, IOSObjectArray *argumentTypes);

__attribute__((unused)) static CucumberRuntimeCucumberException *CucumberRuntimeJava8Java8StepDefinition_withLocationWithCucumberRuntimeCucumberException_(CucumberRuntimeJava8Java8StepDefinition *self, CucumberRuntimeCucumberException *exception);

@implementation CucumberRuntimeJava8Java8StepDefinition

- (instancetype)initWithNSString:(NSString *)pattern
                        withLong:(jlong)timeoutMillis
                    withIOSClass:(IOSClass *)bodyClass
 withCucumberApiJava8StepdefBody:(id<CucumberApiJava8StepdefBody>)body {
  CucumberRuntimeJava8Java8StepDefinition_initWithNSString_withLong_withIOSClass_withCucumberApiJava8StepdefBody_(self, pattern, timeoutMillis, bodyClass, body);
  return self;
}

- (JavaLangReflectMethod *)getAcceptMethodWithIOSClass:(IOSClass *)bodyClass {
  return CucumberRuntimeJava8Java8StepDefinition_getAcceptMethodWithIOSClass_(self, bodyClass);
}

- (IOSObjectArray *)verifyNotListOrMapWithJavaLangReflectTypeArray:(IOSObjectArray *)argumentTypes {
  return CucumberRuntimeJava8Java8StepDefinition_verifyNotListOrMapWithJavaLangReflectTypeArray_(self, argumentTypes);
}

- (CucumberRuntimeCucumberException *)withLocationWithCucumberRuntimeCucumberException:(CucumberRuntimeCucumberException *)exception {
  return CucumberRuntimeJava8Java8StepDefinition_withLocationWithCucumberRuntimeCucumberException_(self, exception);
}

- (id<JavaUtilList>)matchedArgumentsWithGherkinPicklesPickleStep:(GherkinPicklesPickleStep *)step {
  return [((CucumberRuntimeJdkPatternArgumentMatcher *) nil_chk(argumentMatcher_)) argumentsFromWithNSString:[((GherkinPicklesPickleStep *) nil_chk(step)) getText]];
}

- (NSString *)getLocationWithBoolean:(jboolean)detail {
  return JreStrcat("$CI", [((JavaLangStackTraceElement *) nil_chk(location_)) getFileName], ':', [location_ getLineNumber]);
}

- (JavaLangInteger *)getParameterCount {
  return JavaLangInteger_valueOfWithInt_([((id<JavaUtilList>) nil_chk(parameterInfos_)) size]);
}

- (CucumberRuntimeParameterInfo *)getParameterTypeWithInt:(jint)n
                                  withJavaLangReflectType:(id<JavaLangReflectType>)argumentType {
  return [((id<JavaUtilList>) nil_chk(parameterInfos_)) getWithInt:n];
}

- (void)executeWithNSString:(NSString *)language
          withNSObjectArray:(IOSObjectArray *)args {
  CucumberRuntimeUtils_invokeWithId_withJavaLangReflectMethod_withLong_withNSObjectArray_(body_, method_, timeoutMillis_, args);
}

- (jboolean)isDefinedAtWithJavaLangStackTraceElement:(JavaLangStackTraceElement *)stackTraceElement {
  return [((JavaLangStackTraceElement *) nil_chk(location_)) getFileName] != nil && [((NSString *) nil_chk([location_ getFileName])) isEqual:[((JavaLangStackTraceElement *) nil_chk(stackTraceElement)) getFileName]];
}

- (NSString *)getPattern {
  return [((JavaUtilRegexPattern *) nil_chk(pattern_)) pattern];
}

- (jboolean)isScenarioScoped {
  return true;
}

- (void)dealloc {
  RELEASE_(pattern_);
  RELEASE_(body_);
  RELEASE_(argumentMatcher_);
  RELEASE_(location_);
  RELEASE_(parameterInfos_);
  RELEASE_(method_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaLangReflectMethod;", 0x2, 2, 3, -1, 4, -1, -1 },
    { NULL, "[LJavaLangReflectType;", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "LCucumberRuntimeCucumberException;", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 9, 10, -1, 11, -1, -1 },
    { NULL, "LNSString;", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LCucumberRuntimeParameterInfo;", 0x1, 14, 15, 16, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, 19, -1, -1, -1 },
    { NULL, "Z", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withLong:withIOSClass:withCucumberApiJava8StepdefBody:);
  methods[1].selector = @selector(getAcceptMethodWithIOSClass:);
  methods[2].selector = @selector(verifyNotListOrMapWithJavaLangReflectTypeArray:);
  methods[3].selector = @selector(withLocationWithCucumberRuntimeCucumberException:);
  methods[4].selector = @selector(matchedArgumentsWithGherkinPicklesPickleStep:);
  methods[5].selector = @selector(getLocationWithBoolean:);
  methods[6].selector = @selector(getParameterCount);
  methods[7].selector = @selector(getParameterTypeWithInt:withJavaLangReflectType:);
  methods[8].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[9].selector = @selector(isDefinedAtWithJavaLangStackTraceElement:);
  methods[10].selector = @selector(getPattern);
  methods[11].selector = @selector(isScenarioScoped);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pattern_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "timeoutMillis_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "body_", "LCucumberApiJava8StepdefBody;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "argumentMatcher_", "LCucumberRuntimeJdkPatternArgumentMatcher;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "location_", "LJavaLangStackTraceElement;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "parameterInfos_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 22, -1 },
    { "method_", "LJavaLangReflectMethod;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;JLIOSClass;LCucumberApiJava8StepdefBody;", "<T::Lcucumber/api/java8/StepdefBody;>(Ljava/lang/String;JLjava/lang/Class<TT;>;TT;)V", "getAcceptMethod", "LIOSClass;", "(Ljava/lang/Class<+Lcucumber/api/java8/StepdefBody;>;)Ljava/lang/reflect/Method;", "verifyNotListOrMap", "[LJavaLangReflectType;", "withLocation", "LCucumberRuntimeCucumberException;", "matchedArguments", "LGherkinPicklesPickleStep;", "(Lgherkin/pickles/PickleStep;)Ljava/util/List<Lcucumber/runtime/Argument;>;", "getLocation", "Z", "getParameterType", "ILJavaLangReflectType;", "LJavaLangIndexOutOfBoundsException;", "execute", "LNSString;[LNSObject;", "LJavaLangThrowable;", "isDefinedAt", "LJavaLangStackTraceElement;", "Ljava/util/List<Lcucumber/runtime/ParameterInfo;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeJava8Java8StepDefinition = { "Java8StepDefinition", "cucumber.runtime.java8", ptrTable, methods, fields, 7, 0x1, 12, 7, -1, -1, -1, -1, -1 };
  return &_CucumberRuntimeJava8Java8StepDefinition;
}

@end

void CucumberRuntimeJava8Java8StepDefinition_initWithNSString_withLong_withIOSClass_withCucumberApiJava8StepdefBody_(CucumberRuntimeJava8Java8StepDefinition *self, NSString *pattern, jlong timeoutMillis, IOSClass *bodyClass, id<CucumberApiJava8StepdefBody> body) {
  NSObject_init(self);
  JreStrongAssign(&self->pattern_, JavaUtilRegexPattern_compileWithNSString_(pattern));
  self->timeoutMillis_ = timeoutMillis;
  JreStrongAssign(&self->body_, body);
  JreStrongAssignAndConsume(&self->argumentMatcher_, new_CucumberRuntimeJdkPatternArgumentMatcher_initWithJavaUtilRegexPattern_(self->pattern_));
  JreStrongAssign(&self->location_, IOSObjectArray_Get(nil_chk([create_JavaLangException_init() getStackTrace]), 2));
  JreStrongAssign(&self->method_, CucumberRuntimeJava8Java8StepDefinition_getAcceptMethodWithIOSClass_(self, [((id<CucumberApiJava8StepdefBody>) nil_chk(body)) java_getClass]));
  @try {
    IOSObjectArray *arguments = NetJodahTypetoolsTypeResolver_resolveRawArgumentsWithJavaLangReflectType_withIOSClass_(bodyClass, [body java_getClass]);
    JreStrongAssign(&self->parameterInfos_, CucumberRuntimeParameterInfo_fromTypesWithJavaLangReflectTypeArray_(CucumberRuntimeJava8Java8StepDefinition_verifyNotListOrMapWithJavaLangReflectTypeArray_(self, arguments)));
  }
  @catch (CucumberRuntimeCucumberException *e) {
    @throw e;
  }
  @catch (JavaLangException *e) {
    @throw create_CucumberRuntimeCucumberException_initWithJavaLangThrowable_(e);
  }
}

CucumberRuntimeJava8Java8StepDefinition *new_CucumberRuntimeJava8Java8StepDefinition_initWithNSString_withLong_withIOSClass_withCucumberApiJava8StepdefBody_(NSString *pattern, jlong timeoutMillis, IOSClass *bodyClass, id<CucumberApiJava8StepdefBody> body) {
  J2OBJC_NEW_IMPL(CucumberRuntimeJava8Java8StepDefinition, initWithNSString_withLong_withIOSClass_withCucumberApiJava8StepdefBody_, pattern, timeoutMillis, bodyClass, body)
}

CucumberRuntimeJava8Java8StepDefinition *create_CucumberRuntimeJava8Java8StepDefinition_initWithNSString_withLong_withIOSClass_withCucumberApiJava8StepdefBody_(NSString *pattern, jlong timeoutMillis, IOSClass *bodyClass, id<CucumberApiJava8StepdefBody> body) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeJava8Java8StepDefinition, initWithNSString_withLong_withIOSClass_withCucumberApiJava8StepdefBody_, pattern, timeoutMillis, bodyClass, body)
}

JavaLangReflectMethod *CucumberRuntimeJava8Java8StepDefinition_getAcceptMethodWithIOSClass_(CucumberRuntimeJava8Java8StepDefinition *self, IOSClass *bodyClass) {
  id<JavaUtilList> acceptMethods = create_JavaUtilArrayList_init();
  {
    IOSObjectArray *a__ = [((IOSClass *) nil_chk(bodyClass)) getDeclaredMethods];
    JavaLangReflectMethod * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaLangReflectMethod * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaLangReflectMethod *method = *b__++;
      if (![((JavaLangReflectMethod *) nil_chk(method)) isBridge] && ![method isSynthetic] && [@"accept" isEqual:[method getName]]) {
        [acceptMethods addWithId:method];
      }
    }
  }
  if ([acceptMethods size] != 1) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Expected single 'accept' method on body class, found '%s'", [IOSObjectArray arrayWithObjects:(id[]){ acceptMethods } count:1 type:NSObject_class_()]));
  }
  return [acceptMethods getWithInt:0];
}

IOSObjectArray *CucumberRuntimeJava8Java8StepDefinition_verifyNotListOrMapWithJavaLangReflectTypeArray_(CucumberRuntimeJava8Java8StepDefinition *self, IOSObjectArray *argumentTypes) {
  {
    IOSObjectArray *a__ = argumentTypes;
    id<JavaLangReflectType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<JavaLangReflectType> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaLangReflectType> argumentType = *b__++;
      if ([argumentType isKindOfClass:[IOSClass class]]) {
        IOSClass *argumentClass = (IOSClass *) cast_chk(argumentType, [IOSClass class]);
        if ([JavaUtilList_class_() isAssignableFrom:argumentClass] || [JavaUtilMap_class_() isAssignableFrom:argumentClass]) {
          @throw nil_chk(CucumberRuntimeJava8Java8StepDefinition_withLocationWithCucumberRuntimeCucumberException_(self, create_CucumberRuntimeCucumberException_initWithNSString_(JreStrcat("$$$", @"Can't use ", [((IOSClass *) nil_chk(argumentClass)) getName], @" in lambda step definition. Declare a DataTable argument instead and convert manually with asList/asLists/asMap/asMaps"))));
        }
      }
    }
  }
  return argumentTypes;
}

CucumberRuntimeCucumberException *CucumberRuntimeJava8Java8StepDefinition_withLocationWithCucumberRuntimeCucumberException_(CucumberRuntimeJava8Java8StepDefinition *self, CucumberRuntimeCucumberException *exception) {
  [((CucumberRuntimeCucumberException *) nil_chk(exception)) setStackTraceWithJavaLangStackTraceElementArray:[IOSObjectArray arrayWithObjects:(id[]){ self->location_ } count:1 type:JavaLangStackTraceElement_class_()]];
  return exception;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeJava8Java8StepDefinition)
