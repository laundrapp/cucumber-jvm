//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/java/src/main/java/cucumber/runtime/java/ParameterInfo.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/api/Transpose.h"
#include "cucumber/runtime/java/ParameterInfo.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Type.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface CucumberRuntimeJavaParameterInfo () {
 @public
  id<JavaLangReflectType> type_;
  jboolean transposed_;
}

- (instancetype __nonnull)initWithJavaLangReflectType:(id<JavaLangReflectType>)type
                                          withBoolean:(jboolean)transposed;

@end

J2OBJC_FIELD_SETTER(CucumberRuntimeJavaParameterInfo, type_, id<JavaLangReflectType>)

__attribute__((unused)) static void CucumberRuntimeJavaParameterInfo_initWithJavaLangReflectType_withBoolean_(CucumberRuntimeJavaParameterInfo *self, id<JavaLangReflectType> type, jboolean transposed);

__attribute__((unused)) static CucumberRuntimeJavaParameterInfo *new_CucumberRuntimeJavaParameterInfo_initWithJavaLangReflectType_withBoolean_(id<JavaLangReflectType> type, jboolean transposed) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberRuntimeJavaParameterInfo *create_CucumberRuntimeJavaParameterInfo_initWithJavaLangReflectType_withBoolean_(id<JavaLangReflectType> type, jboolean transposed);

@implementation CucumberRuntimeJavaParameterInfo

+ (id<JavaUtilList>)fromMethodWithJavaLangReflectMethod:(JavaLangReflectMethod *)method {
  return CucumberRuntimeJavaParameterInfo_fromMethodWithJavaLangReflectMethod_(method);
}

- (instancetype __nonnull)initWithJavaLangReflectType:(id<JavaLangReflectType>)type
                                          withBoolean:(jboolean)transposed {
  CucumberRuntimeJavaParameterInfo_initWithJavaLangReflectType_withBoolean_(self, type, transposed);
  return self;
}

- (id<JavaLangReflectType>)getType {
  return type_;
}

- (jboolean)isTransposed {
  return transposed_;
}

- (NSString *)description {
  return [((id<JavaLangReflectType>) nil_chk(type_)) description];
}

- (void)dealloc {
  RELEASE_(type_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilList;", 0x8, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x2, -1, 3, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(fromMethodWithJavaLangReflectMethod:);
  methods[1].selector = @selector(initWithJavaLangReflectType:withBoolean:);
  methods[2].selector = @selector(getType);
  methods[3].selector = @selector(isTransposed);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "type_", "LJavaLangReflectType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "transposed_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "fromMethod", "LJavaLangReflectMethod;", "(Ljava/lang/reflect/Method;)Ljava/util/List<Lcucumber/runtime/java/ParameterInfo;>;", "LJavaLangReflectType;Z", "toString" };
  static const J2ObjcClassInfo _CucumberRuntimeJavaParameterInfo = { "ParameterInfo", "cucumber.runtime.java", ptrTable, methods, fields, 7, 0x0, 5, 2, -1, -1, -1, -1, -1 };
  return &_CucumberRuntimeJavaParameterInfo;
}

@end

id<JavaUtilList> CucumberRuntimeJavaParameterInfo_fromMethodWithJavaLangReflectMethod_(JavaLangReflectMethod *method) {
  CucumberRuntimeJavaParameterInfo_initialize();
  id<JavaUtilList> result = create_JavaUtilArrayList_init();
  IOSObjectArray *genericParameterTypes = [((JavaLangReflectMethod *) nil_chk(method)) getGenericParameterTypes];
  IOSObjectArray *annotations = [method getParameterAnnotations];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(genericParameterTypes))->size_; i++) {
    jboolean transposed = false;
    {
      IOSObjectArray *a__ = IOSObjectArray_Get(nil_chk(annotations), i);
      id<JavaLangAnnotationAnnotation> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id<JavaLangAnnotationAnnotation> const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<JavaLangAnnotationAnnotation> annotation = *b__++;
        if ([CucumberApiTranspose_class_() isInstance:annotation]) {
          transposed = [((id<CucumberApiTranspose>) nil_chk(((id<CucumberApiTranspose>) cast_check(annotation, CucumberApiTranspose_class_())))) value];
        }
      }
    }
    [result addWithId:create_CucumberRuntimeJavaParameterInfo_initWithJavaLangReflectType_withBoolean_(IOSObjectArray_Get(genericParameterTypes, i), transposed)];
  }
  return result;
}

void CucumberRuntimeJavaParameterInfo_initWithJavaLangReflectType_withBoolean_(CucumberRuntimeJavaParameterInfo *self, id<JavaLangReflectType> type, jboolean transposed) {
  NSObject_init(self);
  JreStrongAssign(&self->type_, type);
  self->transposed_ = transposed;
}

CucumberRuntimeJavaParameterInfo *new_CucumberRuntimeJavaParameterInfo_initWithJavaLangReflectType_withBoolean_(id<JavaLangReflectType> type, jboolean transposed) {
  J2OBJC_NEW_IMPL(CucumberRuntimeJavaParameterInfo, initWithJavaLangReflectType_withBoolean_, type, transposed)
}

CucumberRuntimeJavaParameterInfo *create_CucumberRuntimeJavaParameterInfo_initWithJavaLangReflectType_withBoolean_(id<JavaLangReflectType> type, jboolean transposed) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeJavaParameterInfo, initWithJavaLangReflectType_withBoolean_, type, transposed)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeJavaParameterInfo)
