//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/laundrapp_org/cucumber-jvm/java/src/main/java/cucumber/runtime/java/ObjectFactoryLoader.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/api/java/ObjectFactory.h"
#include "cucumber/runtime/ClassFinder.h"
#include "cucumber/runtime/CucumberException.h"
#include "cucumber/runtime/NoInstancesException.h"
#include "cucumber/runtime/Reflections.h"
#include "cucumber/runtime/TooManyInstancesException.h"
#include "cucumber/runtime/java/DefaultJavaObjectFactory.h"
#include "cucumber/runtime/java/ObjectFactoryLoader.h"
#include "java/io/PrintStream.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"

@interface CucumberRuntimeJavaObjectFactoryLoader ()

- (instancetype __nonnull)init;

+ (NSString *)getMultipleObjectFactoryLogMessage;

@end

__attribute__((unused)) static void CucumberRuntimeJavaObjectFactoryLoader_init(CucumberRuntimeJavaObjectFactoryLoader *self);

__attribute__((unused)) static CucumberRuntimeJavaObjectFactoryLoader *new_CucumberRuntimeJavaObjectFactoryLoader_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberRuntimeJavaObjectFactoryLoader *create_CucumberRuntimeJavaObjectFactoryLoader_init(void);

__attribute__((unused)) static NSString *CucumberRuntimeJavaObjectFactoryLoader_getMultipleObjectFactoryLogMessage(void);

@implementation CucumberRuntimeJavaObjectFactoryLoader

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CucumberRuntimeJavaObjectFactoryLoader_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<CucumberApiJavaObjectFactory>)loadObjectFactoryWithCucumberRuntimeClassFinder:(id<CucumberRuntimeClassFinder>)classFinder
                                                                       withNSString:(NSString *)objectFactoryClassName {
  return CucumberRuntimeJavaObjectFactoryLoader_loadObjectFactoryWithCucumberRuntimeClassFinder_withNSString_(classFinder, objectFactoryClassName);
}

+ (NSString *)getMultipleObjectFactoryLogMessage {
  return CucumberRuntimeJavaObjectFactoryLoader_getMultipleObjectFactoryLogMessage();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LCucumberApiJavaObjectFactory;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(loadObjectFactoryWithCucumberRuntimeClassFinder:withNSString:);
  methods[2].selector = @selector(getMultipleObjectFactoryLogMessage);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "loadObjectFactory", "LCucumberRuntimeClassFinder;LNSString;" };
  static const J2ObjcClassInfo _CucumberRuntimeJavaObjectFactoryLoader = { "ObjectFactoryLoader", "cucumber.runtime.java", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_CucumberRuntimeJavaObjectFactoryLoader;
}

@end

void CucumberRuntimeJavaObjectFactoryLoader_init(CucumberRuntimeJavaObjectFactoryLoader *self) {
  NSObject_init(self);
}

CucumberRuntimeJavaObjectFactoryLoader *new_CucumberRuntimeJavaObjectFactoryLoader_init() {
  J2OBJC_NEW_IMPL(CucumberRuntimeJavaObjectFactoryLoader, init)
}

CucumberRuntimeJavaObjectFactoryLoader *create_CucumberRuntimeJavaObjectFactoryLoader_init() {
  J2OBJC_CREATE_IMPL(CucumberRuntimeJavaObjectFactoryLoader, init)
}

id<CucumberApiJavaObjectFactory> CucumberRuntimeJavaObjectFactoryLoader_loadObjectFactoryWithCucumberRuntimeClassFinder_withNSString_(id<CucumberRuntimeClassFinder> classFinder, NSString *objectFactoryClassName) {
  CucumberRuntimeJavaObjectFactoryLoader_initialize();
  id<CucumberApiJavaObjectFactory> objectFactory;
  @try {
    CucumberRuntimeReflections *reflections = create_CucumberRuntimeReflections_initWithCucumberRuntimeClassFinder_(classFinder);
    if (objectFactoryClassName != nil) {
      IOSClass *objectFactoryClass = [((id<CucumberRuntimeClassFinder>) nil_chk(classFinder)) loadClassWithNSString:objectFactoryClassName];
      objectFactory = [reflections newInstanceWithIOSClassArray:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()] withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()] withIOSClass:objectFactoryClass];
    }
    else {
      objectFactory = [reflections instantiateExactlyOneSubclassWithIOSClass:CucumberApiJavaObjectFactory_class_() withNSString:@"cucumber.runtime" withIOSClassArray:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()] withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]];
    }
  }
  @catch (CucumberRuntimeTooManyInstancesException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:[e getMessage]];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:CucumberRuntimeJavaObjectFactoryLoader_getMultipleObjectFactoryLogMessage()];
    objectFactory = create_CucumberRuntimeJavaDefaultJavaObjectFactory_init();
  }
  @catch (CucumberRuntimeNoInstancesException *e) {
    objectFactory = create_CucumberRuntimeJavaDefaultJavaObjectFactory_init();
  }
  @catch (JavaLangClassNotFoundException *e) {
    @throw create_CucumberRuntimeCucumberException_initWithNSString_withJavaLangThrowable_(@"Couldn't instantiate custom ObjectFactory", e);
  }
  return objectFactory;
}

NSString *CucumberRuntimeJavaObjectFactoryLoader_getMultipleObjectFactoryLogMessage() {
  CucumberRuntimeJavaObjectFactoryLoader_initialize();
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  [sb appendWithNSString:@"More than one Cucumber ObjectFactory was found in the classpath\n\n"];
  [sb appendWithNSString:@"You probably may have included, for instance, cucumber-spring AND cucumber-guice as part of\n"];
  [sb appendWithNSString:@"your dependencies. When this happens, Cucumber falls back to instantiating the\n"];
  [sb appendWithNSString:@"DefaultJavaObjectFactory implementation which doesn't provide IoC.\n"];
  [sb appendWithNSString:@"In order to enjoy IoC features, please remove the unnecessary dependencies from your classpath.\n"];
  return [sb description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeJavaObjectFactoryLoader)
