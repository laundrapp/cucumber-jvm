//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/java/src/main/java/cucumber/runtime/java/JavaSnippet.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "cucumber/runtime/java/AbstractJavaSnippet.h"
#include "cucumber/runtime/java/JavaSnippet.h"

@implementation CCBJavaSnippet

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CCBJavaSnippet_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)getArgTypeWithIOSClass:(IOSClass *)argType {
  return [((IOSClass *) nil_chk(argType)) getSimpleName];
}

- (NSString *)template__ {
  return @"@{0}(\"{1}\")\npublic void {2}({3}) '{'\n    // {4}\n{5}    throw new PendingException();\n'}'\n";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getArgTypeWithIOSClass:);
  methods[2].selector = @selector(template__);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getArgType", "LIOSClass;", "(Ljava/lang/Class<*>;)Ljava/lang/String;", "template" };
  static const J2ObjcClassInfo _CCBJavaSnippet = { "JavaSnippet", "cucumber.runtime.java", ptrTable, methods, NULL, 7, 0x0, 3, 0, -1, -1, -1, -1, -1 };
  return &_CCBJavaSnippet;
}

@end

void CCBJavaSnippet_init(CCBJavaSnippet *self) {
  CCBAbstractJavaSnippet_init(self);
}

CCBJavaSnippet *new_CCBJavaSnippet_init() {
  J2OBJC_NEW_IMPL(CCBJavaSnippet, init)
}

CCBJavaSnippet *create_CCBJavaSnippet_init() {
  J2OBJC_CREATE_IMPL(CCBJavaSnippet, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBJavaSnippet)
