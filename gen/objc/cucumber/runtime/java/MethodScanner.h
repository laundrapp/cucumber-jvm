//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/java/src/main/java/cucumber/runtime/java/MethodScanner.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CucumberRuntimeJavaMethodScanner")
#ifdef RESTRICT_CucumberRuntimeJavaMethodScanner
#define INCLUDE_ALL_CucumberRuntimeJavaMethodScanner 0
#else
#define INCLUDE_ALL_CucumberRuntimeJavaMethodScanner 1
#endif
#undef RESTRICT_CucumberRuntimeJavaMethodScanner

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (CCBMethodScanner_) && (INCLUDE_ALL_CucumberRuntimeJavaMethodScanner || defined(INCLUDE_CCBMethodScanner))
#define CCBMethodScanner_

@class CCBJavaBackend;
@class IOSClass;
@class JavaLangReflectMethod;
@protocol CCBRClassFinder;
@protocol JavaUtilList;

@interface CCBMethodScanner : NSObject

#pragma mark Public

- (instancetype __nonnull)initWithCCBRClassFinder:(id<CCBRClassFinder>)classFinder;

/*!
 @brief Registers step definitions and hooks.
 @param javaBackend the backend where stepdefs and hooks will be registered
 @param gluePaths where to look
 */
- (void)scanWithCCBJavaBackend:(CCBJavaBackend *)javaBackend
              withJavaUtilList:(id<JavaUtilList>)gluePaths;

/*!
 @brief Registers step definitions and hooks.
 @param javaBackend the backend where stepdefs and hooks will be registered.
 @param method a candidate for being a stepdef or hook.
 @param glueCodeClass the class where the method is declared.
 */
- (void)scanWithCCBJavaBackend:(CCBJavaBackend *)javaBackend
     withJavaLangReflectMethod:(JavaLangReflectMethod *)method
                  withIOSClass:(IOSClass *)glueCodeClass;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBMethodScanner)

FOUNDATION_EXPORT void CCBMethodScanner_initWithCCBRClassFinder_(CCBMethodScanner *self, id<CCBRClassFinder> classFinder);

FOUNDATION_EXPORT CCBMethodScanner *new_CCBMethodScanner_initWithCCBRClassFinder_(id<CCBRClassFinder> classFinder) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CCBMethodScanner *create_CCBMethodScanner_initWithCCBRClassFinder_(id<CCBRClassFinder> classFinder);

J2OBJC_TYPE_LITERAL_HEADER(CCBMethodScanner)

@compatibility_alias CucumberRuntimeJavaMethodScanner CCBMethodScanner;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_CucumberRuntimeJavaMethodScanner")
