//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/java/src/main/java/cucumber/runtime/java/AbstractJavaSnippet.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "cucumber/runtime/java/AbstractJavaSnippet.h"
#include "java/lang/StringBuilder.h"
#include "java/util/List.h"

#pragma clang diagnostic ignored "-Wprotocol"

@implementation CCBAbstractJavaSnippet

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CCBAbstractJavaSnippet_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)argumentsWithJavaUtilList:(id<JavaUtilList>)argumentTypes {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  jint n = 1;
  for (IOSClass * __strong argType in nil_chk(argumentTypes)) {
    if (n > 1) {
      [sb appendWithNSString:@", "];
    }
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:[self getArgTypeWithIOSClass:argType]])) appendWithNSString:@" "])) appendWithNSString:@"arg"])) appendWithInt:n++];
  }
  return [sb description];
}

- (NSString *)getArgTypeWithIOSClass:(IOSClass *)argType {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)tableHint {
  return @"    // For automatic transformation, change DataTable to one of\n    // List<YourType>, List<List<E>>, List<Map<K,V>> or Map<K,V>.\n    // E,K,V must be a scalar (String, Integer, Date, enum etc).\n    // Field names for YourType must match the column names in \n    // your feature file (except for spaces and capitalization).\n";
}

- (NSString *)namedGroupStart {
  return nil;
}

- (NSString *)namedGroupEnd {
  return nil;
}

- (NSString *)escapePatternWithNSString:(NSString *)pattern {
  return [((NSString *) nil_chk([((NSString *) nil_chk(pattern)) java_replace:@"\\" withSequence:@"\\\\"])) java_replace:@"\"" withSequence:@"\\\""];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSString;", 0x404, 3, 4, -1, 5, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(argumentsWithJavaUtilList:);
  methods[2].selector = @selector(getArgTypeWithIOSClass:);
  methods[3].selector = @selector(tableHint);
  methods[4].selector = @selector(namedGroupStart);
  methods[5].selector = @selector(namedGroupEnd);
  methods[6].selector = @selector(escapePatternWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "arguments", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Class<*>;>;)Ljava/lang/String;", "getArgType", "LIOSClass;", "(Ljava/lang/Class<*>;)Ljava/lang/String;", "escapePattern", "LNSString;" };
  static const J2ObjcClassInfo _CCBAbstractJavaSnippet = { "AbstractJavaSnippet", "cucumber.runtime.java", ptrTable, methods, NULL, 7, 0x401, 7, 0, -1, -1, -1, -1, -1 };
  return &_CCBAbstractJavaSnippet;
}

@end

void CCBAbstractJavaSnippet_init(CCBAbstractJavaSnippet *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBAbstractJavaSnippet)
