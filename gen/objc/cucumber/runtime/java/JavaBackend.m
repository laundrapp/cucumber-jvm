//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/java/src/main/java/cucumber/runtime/java/JavaBackend.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/api/java/After.h"
#include "cucumber/api/java/Before.h"
#include "cucumber/api/java/ObjectFactory.h"
#include "cucumber/api/java8/GlueBase.h"
#include "cucumber/runtime/ClassFinder.h"
#include "cucumber/runtime/CucumberException.h"
#include "cucumber/runtime/DuplicateStepDefinitionException.h"
#include "cucumber/runtime/Env.h"
#include "cucumber/runtime/Glue.h"
#include "cucumber/runtime/HookDefinition.h"
#include "cucumber/runtime/StepDefinition.h"
#include "cucumber/runtime/UnreportedStepExecutor.h"
#include "cucumber/runtime/Utils.h"
#include "cucumber/runtime/io/MultiLoader.h"
#include "cucumber/runtime/io/ResourceLoader.h"
#include "cucumber/runtime/io/ResourceLoaderClassFinder.h"
#include "cucumber/runtime/java/Java8Snippet.h"
#include "cucumber/runtime/java/JavaBackend.h"
#include "cucumber/runtime/java/JavaHookDefinition.h"
#include "cucumber/runtime/java/JavaSnippet.h"
#include "cucumber/runtime/java/JavaStepDefinition.h"
#include "cucumber/runtime/java/LambdaGlueRegistry.h"
#include "cucumber/runtime/java/MethodScanner.h"
#include "cucumber/runtime/java/ObjectFactoryLoader.h"
#include "cucumber/runtime/snippets/FunctionNameGenerator.h"
#include "cucumber/runtime/snippets/Snippet.h"
#include "cucumber/runtime/snippets/SnippetGenerator.h"
#include "gherkin/pickles/PickleStep.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Long.h"
#include "java/lang/Thread.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/Throwable.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Method.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/util/regex/Pattern.h"

@interface CCBJavaBackend () {
 @public
  CCBSnippetGenerator *snippetGenerator_;
  id<CCBObjectFactory> objectFactory_;
  id<CCBRClassFinder> classFinder_;
  CCBMethodScanner *methodScanner_;
  id<CCBRGlue> glue_;
  id<JavaUtilList> glueBaseClasses_;
}

- (id<CCBSnippet>)createSnippet;

- (instancetype __nonnull)initWithCCBRClassFinder:(id<CCBRClassFinder>)classFinder;

- (JavaUtilRegexPattern *)patternWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)annotation;

- (jlong)timeoutMillisWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)annotation;

@end

J2OBJC_FIELD_SETTER(CCBJavaBackend, snippetGenerator_, CCBSnippetGenerator *)
J2OBJC_FIELD_SETTER(CCBJavaBackend, objectFactory_, id<CCBObjectFactory>)
J2OBJC_FIELD_SETTER(CCBJavaBackend, classFinder_, id<CCBRClassFinder>)
J2OBJC_FIELD_SETTER(CCBJavaBackend, methodScanner_, CCBMethodScanner *)
J2OBJC_FIELD_SETTER(CCBJavaBackend, glue_, id<CCBRGlue>)
J2OBJC_FIELD_SETTER(CCBJavaBackend, glueBaseClasses_, id<JavaUtilList>)

__attribute__((unused)) static id<CCBSnippet> CCBJavaBackend_createSnippet(CCBJavaBackend *self);

__attribute__((unused)) static void CCBJavaBackend_initWithCCBRClassFinder_(CCBJavaBackend *self, id<CCBRClassFinder> classFinder);

__attribute__((unused)) static CCBJavaBackend *new_CCBJavaBackend_initWithCCBRClassFinder_(id<CCBRClassFinder> classFinder) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBJavaBackend *create_CCBJavaBackend_initWithCCBRClassFinder_(id<CCBRClassFinder> classFinder);

__attribute__((unused)) static JavaUtilRegexPattern *CCBJavaBackend_patternWithJavaLangAnnotationAnnotation_(CCBJavaBackend *self, id<JavaLangAnnotationAnnotation> annotation);

__attribute__((unused)) static jlong CCBJavaBackend_timeoutMillisWithJavaLangAnnotationAnnotation_(CCBJavaBackend *self, id<JavaLangAnnotationAnnotation> annotation);

@implementation CCBJavaBackend

- (id<CCBSnippet>)createSnippet {
  return CCBJavaBackend_createSnippet(self);
}

- (instancetype __nonnull)initWithCCBResourceLoader:(id<CCBResourceLoader>)resourceLoader {
  CCBJavaBackend_initWithCCBResourceLoader_(self, resourceLoader);
  return self;
}

- (instancetype __nonnull)initWithCCBRClassFinder:(id<CCBRClassFinder>)classFinder {
  CCBJavaBackend_initWithCCBRClassFinder_(self, classFinder);
  return self;
}

- (instancetype __nonnull)initWithCCBObjectFactory:(id<CCBObjectFactory>)objectFactory
                               withCCBRClassFinder:(id<CCBRClassFinder>)classFinder {
  CCBJavaBackend_initWithCCBObjectFactory_withCCBRClassFinder_(self, objectFactory, classFinder);
  return self;
}

- (void)loadGlueWithCCBRGlue:(id<CCBRGlue>)glue
            withJavaUtilList:(id<JavaUtilList>)gluePaths {
  JreStrongAssign(&self->glue_, glue);
  [((CCBMethodScanner *) nil_chk(methodScanner_)) scanWithCCBJavaBackend:self withJavaUtilList:gluePaths];
  for (NSString * __strong gluePath in nil_chk(gluePaths)) {
    id<JavaUtilCollection> glueDefinerClasses = [((id<CCBRClassFinder>) nil_chk(classFinder_)) getDescendantsWithIOSClass:CCBGlueBase_class_() withNSString:CCBMultiLoader_packageNameWithNSString_(gluePath)];
    for (IOSClass * __strong glueClass in nil_chk(glueDefinerClasses)) {
      if ([((IOSClass *) nil_chk(glueClass)) isInterface]) {
        continue;
      }
      if ([((id<CCBObjectFactory>) nil_chk(objectFactory_)) addClassWithIOSClass:glueClass]) {
        [((id<JavaUtilList>) nil_chk(glueBaseClasses_)) addWithId:glueClass];
      }
    }
  }
}

- (void)loadGlueWithCCBRGlue:(id<CCBRGlue>)glue
   withJavaLangReflectMethod:(JavaLangReflectMethod *)method
                withIOSClass:(IOSClass *)glueCodeClass {
  JreStrongAssign(&self->glue_, glue);
  [((CCBMethodScanner *) nil_chk(methodScanner_)) scanWithCCBJavaBackend:self withJavaLangReflectMethod:method withIOSClass:glueCodeClass];
}

- (void)setUnreportedStepExecutorWithCCBRUnreportedStepExecutor:(id<CCBRUnreportedStepExecutor>)executor {
}

- (void)buildWorld {
  [((id<CCBObjectFactory>) nil_chk(objectFactory_)) start];
  @try {
    [((JavaLangThreadLocal *) nil_chk(JreLoadStatic(CCBLambdaGlueRegistry, INSTANCE))) setWithId:self];
    [((id<CCBRGlue>) nil_chk(glue_)) removeScenarioScopedGlue];
    for (IOSClass * __strong glueBaseClass in nil_chk(glueBaseClasses_)) {
      [objectFactory_ getInstanceWithIOSClass:glueBaseClass];
    }
  }
  @finally {
    [JreLoadStatic(CCBLambdaGlueRegistry, INSTANCE) remove];
  }
}

- (void)disposeWorld {
  [((id<CCBObjectFactory>) nil_chk(objectFactory_)) stop];
}

- (NSString *)getSnippetWithGherkinPicklesPickleStep:(GherkinPicklesPickleStep *)step
                                        withNSString:(NSString *)keyword
                        withCCBFunctionNameGenerator:(CCBFunctionNameGenerator *)functionNameGenerator {
  return [((CCBSnippetGenerator *) nil_chk(snippetGenerator_)) getSnippetWithGherkinPicklesPickleStep:step withNSString:keyword withCCBFunctionNameGenerator:functionNameGenerator];
}

- (void)addStepDefinitionWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)annotation
                                withJavaLangReflectMethod:(JavaLangReflectMethod *)method {
  @try {
    if ([((id<CCBObjectFactory>) nil_chk(objectFactory_)) addClassWithIOSClass:[((JavaLangReflectMethod *) nil_chk(method)) getDeclaringClass]]) {
      [((id<CCBRGlue>) nil_chk(glue_)) addStepDefinitionWithCCBRStepDefinition:create_CCBJavaStepDefinition_initWithJavaLangReflectMethod_withJavaUtilRegexPattern_withLong_withCCBObjectFactory_(method, CCBJavaBackend_patternWithJavaLangAnnotationAnnotation_(self, annotation), CCBJavaBackend_timeoutMillisWithJavaLangAnnotationAnnotation_(self, annotation), objectFactory_)];
    }
  }
  @catch (CCBRDuplicateStepDefinitionException *e) {
    @throw e;
  }
  @catch (JavaLangThrowable *e) {
    @throw create_CCBRCucumberException_initWithJavaLangThrowable_(e);
  }
}

- (void)addStepDefinitionWithCCBRStepDefinition:(id<CCBRStepDefinition>)stepDefinition {
  [((id<CCBRGlue>) nil_chk(glue_)) addStepDefinitionWithCCBRStepDefinition:stepDefinition];
}

- (void)addHookWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)annotation
                      withJavaLangReflectMethod:(JavaLangReflectMethod *)method {
  if ([((id<CCBObjectFactory>) nil_chk(objectFactory_)) addClassWithIOSClass:[((JavaLangReflectMethod *) nil_chk(method)) getDeclaringClass]]) {
    if ([((IOSClass *) nil_chk([((id<JavaLangAnnotationAnnotation>) nil_chk(annotation)) annotationType])) isEqual:CCBBefore_class_()]) {
      IOSObjectArray *tagExpressions = [((id<CCBBefore>) cast_check(annotation, CCBBefore_class_())) value];
      jlong timeout = [((id<CCBBefore>) cast_check(annotation, CCBBefore_class_())) timeout];
      [self addBeforeHookDefinitionWithCCBRHookDefinition:create_CCBJavaHookDefinition_initWithJavaLangReflectMethod_withNSStringArray_withInt_withLong_withCCBObjectFactory_(method, tagExpressions, [((id<CCBBefore>) cast_check(annotation, CCBBefore_class_())) order], timeout, objectFactory_)];
    }
    else {
      IOSObjectArray *tagExpressions = [((id<CCBAfter>) cast_check(annotation, CCBAfter_class_())) value];
      jlong timeout = [((id<CCBAfter>) cast_check(annotation, CCBAfter_class_())) timeout];
      [self addAfterHookDefinitionWithCCBRHookDefinition:create_CCBJavaHookDefinition_initWithJavaLangReflectMethod_withNSStringArray_withInt_withLong_withCCBObjectFactory_(method, tagExpressions, [((id<CCBAfter>) cast_check(annotation, CCBAfter_class_())) order], timeout, objectFactory_)];
    }
  }
}

- (void)addBeforeHookDefinitionWithCCBRHookDefinition:(id<CCBRHookDefinition>)beforeHook {
  [((id<CCBRGlue>) nil_chk(glue_)) addBeforeHookWithCCBRHookDefinition:beforeHook];
}

- (void)addAfterHookDefinitionWithCCBRHookDefinition:(id<CCBRHookDefinition>)afterHook {
  [((id<CCBRGlue>) nil_chk(glue_)) addAfterHookWithCCBRHookDefinition:afterHook];
}

- (JavaUtilRegexPattern *)patternWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)annotation {
  return CCBJavaBackend_patternWithJavaLangAnnotationAnnotation_(self, annotation);
}

- (jlong)timeoutMillisWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)annotation {
  return CCBJavaBackend_timeoutMillisWithJavaLangAnnotationAnnotation_(self, annotation);
}

- (void)dealloc {
  RELEASE_(snippetGenerator_);
  RELEASE_(objectFactory_);
  RELEASE_(classFinder_);
  RELEASE_(methodScanner_);
  RELEASE_(glue_);
  RELEASE_(glueBaseClasses_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LCCBSnippet;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 3, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 15, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 17, -1, -1, -1, -1 },
    { NULL, "LJavaUtilRegexPattern;", 0x2, 19, 20, 21, -1, -1, -1 },
    { NULL, "J", 0x2, 22, 20, 21, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(createSnippet);
  methods[1].selector = @selector(initWithCCBResourceLoader:);
  methods[2].selector = @selector(initWithCCBRClassFinder:);
  methods[3].selector = @selector(initWithCCBObjectFactory:withCCBRClassFinder:);
  methods[4].selector = @selector(loadGlueWithCCBRGlue:withJavaUtilList:);
  methods[5].selector = @selector(loadGlueWithCCBRGlue:withJavaLangReflectMethod:withIOSClass:);
  methods[6].selector = @selector(setUnreportedStepExecutorWithCCBRUnreportedStepExecutor:);
  methods[7].selector = @selector(buildWorld);
  methods[8].selector = @selector(disposeWorld);
  methods[9].selector = @selector(getSnippetWithGherkinPicklesPickleStep:withNSString:withCCBFunctionNameGenerator:);
  methods[10].selector = @selector(addStepDefinitionWithJavaLangAnnotationAnnotation:withJavaLangReflectMethod:);
  methods[11].selector = @selector(addStepDefinitionWithCCBRStepDefinition:);
  methods[12].selector = @selector(addHookWithJavaLangAnnotationAnnotation:withJavaLangReflectMethod:);
  methods[13].selector = @selector(addBeforeHookDefinitionWithCCBRHookDefinition:);
  methods[14].selector = @selector(addAfterHookDefinitionWithCCBRHookDefinition:);
  methods[15].selector = @selector(patternWithJavaLangAnnotationAnnotation:);
  methods[16].selector = @selector(timeoutMillisWithJavaLangAnnotationAnnotation:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "snippetGenerator_", "LCCBSnippetGenerator;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "objectFactory_", "LCCBObjectFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "classFinder_", "LCCBRClassFinder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "methodScanner_", "LCCBMethodScanner;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "glue_", "LCCBRGlue;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "glueBaseClasses_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 23, -1 },
  };
  static const void *ptrTable[] = { "LCCBResourceLoader;", "LCCBRClassFinder;", "LCCBObjectFactory;LCCBRClassFinder;", "loadGlue", "LCCBRGlue;LJavaUtilList;", "(Lcucumber/runtime/Glue;Ljava/util/List<Ljava/lang/String;>;)V", "LCCBRGlue;LJavaLangReflectMethod;LIOSClass;", "(Lcucumber/runtime/Glue;Ljava/lang/reflect/Method;Ljava/lang/Class<*>;)V", "setUnreportedStepExecutor", "LCCBRUnreportedStepExecutor;", "getSnippet", "LGherkinPicklesPickleStep;LNSString;LCCBFunctionNameGenerator;", "addStepDefinition", "LJavaLangAnnotationAnnotation;LJavaLangReflectMethod;", "LCCBRStepDefinition;", "addHook", "addBeforeHookDefinition", "LCCBRHookDefinition;", "addAfterHookDefinition", "pattern", "LJavaLangAnnotationAnnotation;", "LJavaLangThrowable;", "timeoutMillis", "Ljava/util/List<Ljava/lang/Class<+Lcucumber/api/java8/GlueBase;>;>;" };
  static const J2ObjcClassInfo _CCBJavaBackend = { "JavaBackend", "cucumber.runtime.java", ptrTable, methods, fields, 7, 0x1, 17, 6, -1, -1, -1, -1, -1 };
  return &_CCBJavaBackend;
}

@end

id<CCBSnippet> CCBJavaBackend_createSnippet(CCBJavaBackend *self) {
  JavaLangClassLoader *classLoader = [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getContextClassLoader];
  @try {
    [((JavaLangClassLoader *) nil_chk(classLoader)) loadClassWithNSString:@"cucumber.runtime.java8.LambdaGlueBase"];
    return create_CCBJava8Snippet_init();
  }
  @catch (JavaLangClassNotFoundException *thatsOk) {
    return create_CCBJavaSnippet_init();
  }
}

void CCBJavaBackend_initWithCCBResourceLoader_(CCBJavaBackend *self, id<CCBResourceLoader> resourceLoader) {
  CCBJavaBackend_initWithCCBRClassFinder_(self, create_CCBResourceLoaderClassFinder_initWithCCBResourceLoader_withJavaLangClassLoader_(resourceLoader, [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getContextClassLoader]));
}

CCBJavaBackend *new_CCBJavaBackend_initWithCCBResourceLoader_(id<CCBResourceLoader> resourceLoader) {
  J2OBJC_NEW_IMPL(CCBJavaBackend, initWithCCBResourceLoader_, resourceLoader)
}

CCBJavaBackend *create_CCBJavaBackend_initWithCCBResourceLoader_(id<CCBResourceLoader> resourceLoader) {
  J2OBJC_CREATE_IMPL(CCBJavaBackend, initWithCCBResourceLoader_, resourceLoader)
}

void CCBJavaBackend_initWithCCBRClassFinder_(CCBJavaBackend *self, id<CCBRClassFinder> classFinder) {
  CCBJavaBackend_initWithCCBObjectFactory_withCCBRClassFinder_(self, CCBObjectFactoryLoader_loadObjectFactoryWithCCBRClassFinder_withNSString_(classFinder, [((CCBREnv *) nil_chk(JreLoadStatic(CCBREnv, INSTANCE))) getWithNSString:[CCBObjectFactory_class_() getName]]), classFinder);
}

CCBJavaBackend *new_CCBJavaBackend_initWithCCBRClassFinder_(id<CCBRClassFinder> classFinder) {
  J2OBJC_NEW_IMPL(CCBJavaBackend, initWithCCBRClassFinder_, classFinder)
}

CCBJavaBackend *create_CCBJavaBackend_initWithCCBRClassFinder_(id<CCBRClassFinder> classFinder) {
  J2OBJC_CREATE_IMPL(CCBJavaBackend, initWithCCBRClassFinder_, classFinder)
}

void CCBJavaBackend_initWithCCBObjectFactory_withCCBRClassFinder_(CCBJavaBackend *self, id<CCBObjectFactory> objectFactory, id<CCBRClassFinder> classFinder) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->snippetGenerator_, new_CCBSnippetGenerator_initWithCCBSnippet_(CCBJavaBackend_createSnippet(self)));
  JreStrongAssignAndConsume(&self->glueBaseClasses_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->classFinder_, classFinder);
  JreStrongAssign(&self->objectFactory_, objectFactory);
  JreStrongAssignAndConsume(&self->methodScanner_, new_CCBMethodScanner_initWithCCBRClassFinder_(classFinder));
}

CCBJavaBackend *new_CCBJavaBackend_initWithCCBObjectFactory_withCCBRClassFinder_(id<CCBObjectFactory> objectFactory, id<CCBRClassFinder> classFinder) {
  J2OBJC_NEW_IMPL(CCBJavaBackend, initWithCCBObjectFactory_withCCBRClassFinder_, objectFactory, classFinder)
}

CCBJavaBackend *create_CCBJavaBackend_initWithCCBObjectFactory_withCCBRClassFinder_(id<CCBObjectFactory> objectFactory, id<CCBRClassFinder> classFinder) {
  J2OBJC_CREATE_IMPL(CCBJavaBackend, initWithCCBObjectFactory_withCCBRClassFinder_, objectFactory, classFinder)
}

JavaUtilRegexPattern *CCBJavaBackend_patternWithJavaLangAnnotationAnnotation_(CCBJavaBackend *self, id<JavaLangAnnotationAnnotation> annotation) {
  JavaLangReflectMethod *regexpMethod = [[((id<JavaLangAnnotationAnnotation>) nil_chk(annotation)) java_getClass] getMethod:@"value" parameterTypes:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]];
  NSString *regexpString = (NSString *) cast_chk(CCBRUtils_invokeWithId_withJavaLangReflectMethod_withLong_withNSObjectArray_(annotation, regexpMethod, 0, [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]), [NSString class]);
  return JavaUtilRegexPattern_compileWithNSString_(regexpString);
}

jlong CCBJavaBackend_timeoutMillisWithJavaLangAnnotationAnnotation_(CCBJavaBackend *self, id<JavaLangAnnotationAnnotation> annotation) {
  JavaLangReflectMethod *regexpMethod = [[((id<JavaLangAnnotationAnnotation>) nil_chk(annotation)) java_getClass] getMethod:@"timeout" parameterTypes:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]];
  return [((JavaLangLong *) nil_chk((JavaLangLong *) cast_chk(CCBRUtils_invokeWithId_withJavaLangReflectMethod_withLong_withNSObjectArray_(annotation, regexpMethod, 0, [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]), [JavaLangLong class]))) longLongValue];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBJavaBackend)
