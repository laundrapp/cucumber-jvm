//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/java/src/main/java/cucumber/runtime/java/JavaBackend.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/api/java/After.h"
#include "cucumber/api/java/Before.h"
#include "cucumber/api/java/ObjectFactory.h"
#include "cucumber/api/java8/GlueBase.h"
#include "cucumber/runtime/ClassFinder.h"
#include "cucumber/runtime/CucumberException.h"
#include "cucumber/runtime/DuplicateStepDefinitionException.h"
#include "cucumber/runtime/Env.h"
#include "cucumber/runtime/Glue.h"
#include "cucumber/runtime/HookDefinition.h"
#include "cucumber/runtime/StepDefinition.h"
#include "cucumber/runtime/UnreportedStepExecutor.h"
#include "cucumber/runtime/Utils.h"
#include "cucumber/runtime/io/MultiLoader.h"
#include "cucumber/runtime/io/ResourceLoader.h"
#include "cucumber/runtime/io/ResourceLoaderClassFinder.h"
#include "cucumber/runtime/java/Java8Snippet.h"
#include "cucumber/runtime/java/JavaBackend.h"
#include "cucumber/runtime/java/JavaHookDefinition.h"
#include "cucumber/runtime/java/JavaSnippet.h"
#include "cucumber/runtime/java/JavaStepDefinition.h"
#include "cucumber/runtime/java/LambdaGlueRegistry.h"
#include "cucumber/runtime/java/MethodScanner.h"
#include "cucumber/runtime/java/ObjectFactoryLoader.h"
#include "cucumber/runtime/snippets/FunctionNameGenerator.h"
#include "cucumber/runtime/snippets/Snippet.h"
#include "cucumber/runtime/snippets/SnippetGenerator.h"
#include "gherkin/pickles/PickleStep.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Long.h"
#include "java/lang/Thread.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/Throwable.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Method.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/util/regex/Pattern.h"

@interface CucumberRuntimeJavaJavaBackend () {
 @public
  CucumberRuntimeSnippetsSnippetGenerator *snippetGenerator_;
  id<CucumberApiJavaObjectFactory> objectFactory_;
  id<CucumberRuntimeClassFinder> classFinder_;
  CucumberRuntimeJavaMethodScanner *methodScanner_;
  id<CucumberRuntimeGlue> glue_;
  id<JavaUtilList> glueBaseClasses_;
}

- (id<CucumberRuntimeSnippetsSnippet>)createSnippet;

- (instancetype __nonnull)initWithCucumberRuntimeClassFinder:(id<CucumberRuntimeClassFinder>)classFinder;

- (JavaUtilRegexPattern *)patternWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)annotation;

- (jlong)timeoutMillisWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)annotation;

@end

J2OBJC_FIELD_SETTER(CucumberRuntimeJavaJavaBackend, snippetGenerator_, CucumberRuntimeSnippetsSnippetGenerator *)
J2OBJC_FIELD_SETTER(CucumberRuntimeJavaJavaBackend, objectFactory_, id<CucumberApiJavaObjectFactory>)
J2OBJC_FIELD_SETTER(CucumberRuntimeJavaJavaBackend, classFinder_, id<CucumberRuntimeClassFinder>)
J2OBJC_FIELD_SETTER(CucumberRuntimeJavaJavaBackend, methodScanner_, CucumberRuntimeJavaMethodScanner *)
J2OBJC_FIELD_SETTER(CucumberRuntimeJavaJavaBackend, glue_, id<CucumberRuntimeGlue>)
J2OBJC_FIELD_SETTER(CucumberRuntimeJavaJavaBackend, glueBaseClasses_, id<JavaUtilList>)

__attribute__((unused)) static id<CucumberRuntimeSnippetsSnippet> CucumberRuntimeJavaJavaBackend_createSnippet(CucumberRuntimeJavaJavaBackend *self);

__attribute__((unused)) static void CucumberRuntimeJavaJavaBackend_initWithCucumberRuntimeClassFinder_(CucumberRuntimeJavaJavaBackend *self, id<CucumberRuntimeClassFinder> classFinder);

__attribute__((unused)) static CucumberRuntimeJavaJavaBackend *new_CucumberRuntimeJavaJavaBackend_initWithCucumberRuntimeClassFinder_(id<CucumberRuntimeClassFinder> classFinder) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberRuntimeJavaJavaBackend *create_CucumberRuntimeJavaJavaBackend_initWithCucumberRuntimeClassFinder_(id<CucumberRuntimeClassFinder> classFinder);

__attribute__((unused)) static JavaUtilRegexPattern *CucumberRuntimeJavaJavaBackend_patternWithJavaLangAnnotationAnnotation_(CucumberRuntimeJavaJavaBackend *self, id<JavaLangAnnotationAnnotation> annotation);

__attribute__((unused)) static jlong CucumberRuntimeJavaJavaBackend_timeoutMillisWithJavaLangAnnotationAnnotation_(CucumberRuntimeJavaJavaBackend *self, id<JavaLangAnnotationAnnotation> annotation);

@implementation CucumberRuntimeJavaJavaBackend

- (id<CucumberRuntimeSnippetsSnippet>)createSnippet {
  return CucumberRuntimeJavaJavaBackend_createSnippet(self);
}

- (instancetype __nonnull)initWithCucumberRuntimeIoResourceLoader:(id<CucumberRuntimeIoResourceLoader>)resourceLoader {
  CucumberRuntimeJavaJavaBackend_initWithCucumberRuntimeIoResourceLoader_(self, resourceLoader);
  return self;
}

- (instancetype __nonnull)initWithCucumberRuntimeClassFinder:(id<CucumberRuntimeClassFinder>)classFinder {
  CucumberRuntimeJavaJavaBackend_initWithCucumberRuntimeClassFinder_(self, classFinder);
  return self;
}

- (instancetype __nonnull)initWithCucumberApiJavaObjectFactory:(id<CucumberApiJavaObjectFactory>)objectFactory
                                withCucumberRuntimeClassFinder:(id<CucumberRuntimeClassFinder>)classFinder {
  CucumberRuntimeJavaJavaBackend_initWithCucumberApiJavaObjectFactory_withCucumberRuntimeClassFinder_(self, objectFactory, classFinder);
  return self;
}

- (void)loadGlueWithCucumberRuntimeGlue:(id<CucumberRuntimeGlue>)glue
                       withJavaUtilList:(id<JavaUtilList>)gluePaths {
  JreStrongAssign(&self->glue_, glue);
  [((CucumberRuntimeJavaMethodScanner *) nil_chk(methodScanner_)) scanWithCucumberRuntimeJavaJavaBackend:self withJavaUtilList:gluePaths];
  for (NSString * __strong gluePath in nil_chk(gluePaths)) {
    id<JavaUtilCollection> glueDefinerClasses = [((id<CucumberRuntimeClassFinder>) nil_chk(classFinder_)) getDescendantsWithIOSClass:CucumberApiJava8GlueBase_class_() withNSString:CucumberRuntimeIoMultiLoader_packageNameWithNSString_(gluePath)];
    for (IOSClass * __strong glueClass in nil_chk(glueDefinerClasses)) {
      if ([((IOSClass *) nil_chk(glueClass)) isInterface]) {
        continue;
      }
      if ([((id<CucumberApiJavaObjectFactory>) nil_chk(objectFactory_)) addClassWithIOSClass:glueClass]) {
        [((id<JavaUtilList>) nil_chk(glueBaseClasses_)) addWithId:glueClass];
      }
    }
  }
}

- (void)loadGlueWithCucumberRuntimeGlue:(id<CucumberRuntimeGlue>)glue
              withJavaLangReflectMethod:(JavaLangReflectMethod *)method
                           withIOSClass:(IOSClass *)glueCodeClass {
  JreStrongAssign(&self->glue_, glue);
  [((CucumberRuntimeJavaMethodScanner *) nil_chk(methodScanner_)) scanWithCucumberRuntimeJavaJavaBackend:self withJavaLangReflectMethod:method withIOSClass:glueCodeClass];
}

- (void)setUnreportedStepExecutorWithCucumberRuntimeUnreportedStepExecutor:(id<CucumberRuntimeUnreportedStepExecutor>)executor {
}

- (void)buildWorld {
  [((id<CucumberApiJavaObjectFactory>) nil_chk(objectFactory_)) start];
  @try {
    [((JavaLangThreadLocal *) nil_chk(JreLoadStatic(CucumberRuntimeJavaLambdaGlueRegistry, INSTANCE))) setWithId:self];
    [((id<CucumberRuntimeGlue>) nil_chk(glue_)) removeScenarioScopedGlue];
    for (IOSClass * __strong glueBaseClass in nil_chk(glueBaseClasses_)) {
      [objectFactory_ getInstanceWithIOSClass:glueBaseClass];
    }
  }
  @finally {
    [JreLoadStatic(CucumberRuntimeJavaLambdaGlueRegistry, INSTANCE) remove];
  }
}

- (void)disposeWorld {
  [((id<CucumberApiJavaObjectFactory>) nil_chk(objectFactory_)) stop];
}

- (NSString *)getSnippetWithGherkinPicklesPickleStep:(GherkinPicklesPickleStep *)step
                                        withNSString:(NSString *)keyword
    withCucumberRuntimeSnippetsFunctionNameGenerator:(CucumberRuntimeSnippetsFunctionNameGenerator *)functionNameGenerator {
  return [((CucumberRuntimeSnippetsSnippetGenerator *) nil_chk(snippetGenerator_)) getSnippetWithGherkinPicklesPickleStep:step withNSString:keyword withCucumberRuntimeSnippetsFunctionNameGenerator:functionNameGenerator];
}

- (void)addStepDefinitionWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)annotation
                                withJavaLangReflectMethod:(JavaLangReflectMethod *)method {
  @try {
    if ([((id<CucumberApiJavaObjectFactory>) nil_chk(objectFactory_)) addClassWithIOSClass:[((JavaLangReflectMethod *) nil_chk(method)) getDeclaringClass]]) {
      [((id<CucumberRuntimeGlue>) nil_chk(glue_)) addStepDefinitionWithCucumberRuntimeStepDefinition:create_CucumberRuntimeJavaJavaStepDefinition_initWithJavaLangReflectMethod_withJavaUtilRegexPattern_withLong_withCucumberApiJavaObjectFactory_(method, CucumberRuntimeJavaJavaBackend_patternWithJavaLangAnnotationAnnotation_(self, annotation), CucumberRuntimeJavaJavaBackend_timeoutMillisWithJavaLangAnnotationAnnotation_(self, annotation), objectFactory_)];
    }
  }
  @catch (CucumberRuntimeDuplicateStepDefinitionException *e) {
    @throw e;
  }
  @catch (JavaLangThrowable *e) {
    @throw create_CucumberRuntimeCucumberException_initWithJavaLangThrowable_(e);
  }
}

- (void)addStepDefinitionWithCucumberRuntimeStepDefinition:(id<CucumberRuntimeStepDefinition>)stepDefinition {
  [((id<CucumberRuntimeGlue>) nil_chk(glue_)) addStepDefinitionWithCucumberRuntimeStepDefinition:stepDefinition];
}

- (void)addHookWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)annotation
                      withJavaLangReflectMethod:(JavaLangReflectMethod *)method {
  if ([((id<CucumberApiJavaObjectFactory>) nil_chk(objectFactory_)) addClassWithIOSClass:[((JavaLangReflectMethod *) nil_chk(method)) getDeclaringClass]]) {
    if ([((IOSClass *) nil_chk([((id<JavaLangAnnotationAnnotation>) nil_chk(annotation)) annotationType])) isEqual:CucumberApiJavaBefore_class_()]) {
      IOSObjectArray *tagExpressions = [((id<CucumberApiJavaBefore>) cast_check(annotation, CucumberApiJavaBefore_class_())) value];
      jlong timeout = [((id<CucumberApiJavaBefore>) cast_check(annotation, CucumberApiJavaBefore_class_())) timeout];
      [self addBeforeHookDefinitionWithCucumberRuntimeHookDefinition:create_CucumberRuntimeJavaJavaHookDefinition_initWithJavaLangReflectMethod_withNSStringArray_withInt_withLong_withCucumberApiJavaObjectFactory_(method, tagExpressions, [((id<CucumberApiJavaBefore>) cast_check(annotation, CucumberApiJavaBefore_class_())) order], timeout, objectFactory_)];
    }
    else {
      IOSObjectArray *tagExpressions = [((id<CucumberApiJavaAfter>) cast_check(annotation, CucumberApiJavaAfter_class_())) value];
      jlong timeout = [((id<CucumberApiJavaAfter>) cast_check(annotation, CucumberApiJavaAfter_class_())) timeout];
      [self addAfterHookDefinitionWithCucumberRuntimeHookDefinition:create_CucumberRuntimeJavaJavaHookDefinition_initWithJavaLangReflectMethod_withNSStringArray_withInt_withLong_withCucumberApiJavaObjectFactory_(method, tagExpressions, [((id<CucumberApiJavaAfter>) cast_check(annotation, CucumberApiJavaAfter_class_())) order], timeout, objectFactory_)];
    }
  }
}

- (void)addBeforeHookDefinitionWithCucumberRuntimeHookDefinition:(id<CucumberRuntimeHookDefinition>)beforeHook {
  [((id<CucumberRuntimeGlue>) nil_chk(glue_)) addBeforeHookWithCucumberRuntimeHookDefinition:beforeHook];
}

- (void)addAfterHookDefinitionWithCucumberRuntimeHookDefinition:(id<CucumberRuntimeHookDefinition>)afterHook {
  [((id<CucumberRuntimeGlue>) nil_chk(glue_)) addAfterHookWithCucumberRuntimeHookDefinition:afterHook];
}

- (JavaUtilRegexPattern *)patternWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)annotation {
  return CucumberRuntimeJavaJavaBackend_patternWithJavaLangAnnotationAnnotation_(self, annotation);
}

- (jlong)timeoutMillisWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)annotation {
  return CucumberRuntimeJavaJavaBackend_timeoutMillisWithJavaLangAnnotationAnnotation_(self, annotation);
}

- (void)dealloc {
  RELEASE_(snippetGenerator_);
  RELEASE_(objectFactory_);
  RELEASE_(classFinder_);
  RELEASE_(methodScanner_);
  RELEASE_(glue_);
  RELEASE_(glueBaseClasses_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LCucumberRuntimeSnippetsSnippet;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 3, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 15, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 17, -1, -1, -1, -1 },
    { NULL, "LJavaUtilRegexPattern;", 0x2, 19, 20, 21, -1, -1, -1 },
    { NULL, "J", 0x2, 22, 20, 21, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(createSnippet);
  methods[1].selector = @selector(initWithCucumberRuntimeIoResourceLoader:);
  methods[2].selector = @selector(initWithCucumberRuntimeClassFinder:);
  methods[3].selector = @selector(initWithCucumberApiJavaObjectFactory:withCucumberRuntimeClassFinder:);
  methods[4].selector = @selector(loadGlueWithCucumberRuntimeGlue:withJavaUtilList:);
  methods[5].selector = @selector(loadGlueWithCucumberRuntimeGlue:withJavaLangReflectMethod:withIOSClass:);
  methods[6].selector = @selector(setUnreportedStepExecutorWithCucumberRuntimeUnreportedStepExecutor:);
  methods[7].selector = @selector(buildWorld);
  methods[8].selector = @selector(disposeWorld);
  methods[9].selector = @selector(getSnippetWithGherkinPicklesPickleStep:withNSString:withCucumberRuntimeSnippetsFunctionNameGenerator:);
  methods[10].selector = @selector(addStepDefinitionWithJavaLangAnnotationAnnotation:withJavaLangReflectMethod:);
  methods[11].selector = @selector(addStepDefinitionWithCucumberRuntimeStepDefinition:);
  methods[12].selector = @selector(addHookWithJavaLangAnnotationAnnotation:withJavaLangReflectMethod:);
  methods[13].selector = @selector(addBeforeHookDefinitionWithCucumberRuntimeHookDefinition:);
  methods[14].selector = @selector(addAfterHookDefinitionWithCucumberRuntimeHookDefinition:);
  methods[15].selector = @selector(patternWithJavaLangAnnotationAnnotation:);
  methods[16].selector = @selector(timeoutMillisWithJavaLangAnnotationAnnotation:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "snippetGenerator_", "LCucumberRuntimeSnippetsSnippetGenerator;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "objectFactory_", "LCucumberApiJavaObjectFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "classFinder_", "LCucumberRuntimeClassFinder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "methodScanner_", "LCucumberRuntimeJavaMethodScanner;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "glue_", "LCucumberRuntimeGlue;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "glueBaseClasses_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 23, -1 },
  };
  static const void *ptrTable[] = { "LCucumberRuntimeIoResourceLoader;", "LCucumberRuntimeClassFinder;", "LCucumberApiJavaObjectFactory;LCucumberRuntimeClassFinder;", "loadGlue", "LCucumberRuntimeGlue;LJavaUtilList;", "(Lcucumber/runtime/Glue;Ljava/util/List<Ljava/lang/String;>;)V", "LCucumberRuntimeGlue;LJavaLangReflectMethod;LIOSClass;", "(Lcucumber/runtime/Glue;Ljava/lang/reflect/Method;Ljava/lang/Class<*>;)V", "setUnreportedStepExecutor", "LCucumberRuntimeUnreportedStepExecutor;", "getSnippet", "LGherkinPicklesPickleStep;LNSString;LCucumberRuntimeSnippetsFunctionNameGenerator;", "addStepDefinition", "LJavaLangAnnotationAnnotation;LJavaLangReflectMethod;", "LCucumberRuntimeStepDefinition;", "addHook", "addBeforeHookDefinition", "LCucumberRuntimeHookDefinition;", "addAfterHookDefinition", "pattern", "LJavaLangAnnotationAnnotation;", "LJavaLangThrowable;", "timeoutMillis", "Ljava/util/List<Ljava/lang/Class<+Lcucumber/api/java8/GlueBase;>;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeJavaJavaBackend = { "JavaBackend", "cucumber.runtime.java", ptrTable, methods, fields, 7, 0x1, 17, 6, -1, -1, -1, -1, -1 };
  return &_CucumberRuntimeJavaJavaBackend;
}

@end

id<CucumberRuntimeSnippetsSnippet> CucumberRuntimeJavaJavaBackend_createSnippet(CucumberRuntimeJavaJavaBackend *self) {
  JavaLangClassLoader *classLoader = [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getContextClassLoader];
  @try {
    [((JavaLangClassLoader *) nil_chk(classLoader)) loadClassWithNSString:@"cucumber.runtime.java8.LambdaGlueBase"];
    return create_CucumberRuntimeJavaJava8Snippet_init();
  }
  @catch (JavaLangClassNotFoundException *thatsOk) {
    return create_CucumberRuntimeJavaJavaSnippet_init();
  }
}

void CucumberRuntimeJavaJavaBackend_initWithCucumberRuntimeIoResourceLoader_(CucumberRuntimeJavaJavaBackend *self, id<CucumberRuntimeIoResourceLoader> resourceLoader) {
  CucumberRuntimeJavaJavaBackend_initWithCucumberRuntimeClassFinder_(self, create_CucumberRuntimeIoResourceLoaderClassFinder_initWithCucumberRuntimeIoResourceLoader_withJavaLangClassLoader_(resourceLoader, [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getContextClassLoader]));
}

CucumberRuntimeJavaJavaBackend *new_CucumberRuntimeJavaJavaBackend_initWithCucumberRuntimeIoResourceLoader_(id<CucumberRuntimeIoResourceLoader> resourceLoader) {
  J2OBJC_NEW_IMPL(CucumberRuntimeJavaJavaBackend, initWithCucumberRuntimeIoResourceLoader_, resourceLoader)
}

CucumberRuntimeJavaJavaBackend *create_CucumberRuntimeJavaJavaBackend_initWithCucumberRuntimeIoResourceLoader_(id<CucumberRuntimeIoResourceLoader> resourceLoader) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeJavaJavaBackend, initWithCucumberRuntimeIoResourceLoader_, resourceLoader)
}

void CucumberRuntimeJavaJavaBackend_initWithCucumberRuntimeClassFinder_(CucumberRuntimeJavaJavaBackend *self, id<CucumberRuntimeClassFinder> classFinder) {
  CucumberRuntimeJavaJavaBackend_initWithCucumberApiJavaObjectFactory_withCucumberRuntimeClassFinder_(self, CucumberRuntimeJavaObjectFactoryLoader_loadObjectFactoryWithCucumberRuntimeClassFinder_withNSString_(classFinder, [((CucumberRuntimeEnv *) nil_chk(JreLoadStatic(CucumberRuntimeEnv, INSTANCE))) getWithNSString:[CucumberApiJavaObjectFactory_class_() getName]]), classFinder);
}

CucumberRuntimeJavaJavaBackend *new_CucumberRuntimeJavaJavaBackend_initWithCucumberRuntimeClassFinder_(id<CucumberRuntimeClassFinder> classFinder) {
  J2OBJC_NEW_IMPL(CucumberRuntimeJavaJavaBackend, initWithCucumberRuntimeClassFinder_, classFinder)
}

CucumberRuntimeJavaJavaBackend *create_CucumberRuntimeJavaJavaBackend_initWithCucumberRuntimeClassFinder_(id<CucumberRuntimeClassFinder> classFinder) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeJavaJavaBackend, initWithCucumberRuntimeClassFinder_, classFinder)
}

void CucumberRuntimeJavaJavaBackend_initWithCucumberApiJavaObjectFactory_withCucumberRuntimeClassFinder_(CucumberRuntimeJavaJavaBackend *self, id<CucumberApiJavaObjectFactory> objectFactory, id<CucumberRuntimeClassFinder> classFinder) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->snippetGenerator_, new_CucumberRuntimeSnippetsSnippetGenerator_initWithCucumberRuntimeSnippetsSnippet_(CucumberRuntimeJavaJavaBackend_createSnippet(self)));
  JreStrongAssignAndConsume(&self->glueBaseClasses_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->classFinder_, classFinder);
  JreStrongAssign(&self->objectFactory_, objectFactory);
  JreStrongAssignAndConsume(&self->methodScanner_, new_CucumberRuntimeJavaMethodScanner_initWithCucumberRuntimeClassFinder_(classFinder));
}

CucumberRuntimeJavaJavaBackend *new_CucumberRuntimeJavaJavaBackend_initWithCucumberApiJavaObjectFactory_withCucumberRuntimeClassFinder_(id<CucumberApiJavaObjectFactory> objectFactory, id<CucumberRuntimeClassFinder> classFinder) {
  J2OBJC_NEW_IMPL(CucumberRuntimeJavaJavaBackend, initWithCucumberApiJavaObjectFactory_withCucumberRuntimeClassFinder_, objectFactory, classFinder)
}

CucumberRuntimeJavaJavaBackend *create_CucumberRuntimeJavaJavaBackend_initWithCucumberApiJavaObjectFactory_withCucumberRuntimeClassFinder_(id<CucumberApiJavaObjectFactory> objectFactory, id<CucumberRuntimeClassFinder> classFinder) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeJavaJavaBackend, initWithCucumberApiJavaObjectFactory_withCucumberRuntimeClassFinder_, objectFactory, classFinder)
}

JavaUtilRegexPattern *CucumberRuntimeJavaJavaBackend_patternWithJavaLangAnnotationAnnotation_(CucumberRuntimeJavaJavaBackend *self, id<JavaLangAnnotationAnnotation> annotation) {
  JavaLangReflectMethod *regexpMethod = [[((id<JavaLangAnnotationAnnotation>) nil_chk(annotation)) java_getClass] getMethod:@"value" parameterTypes:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]];
  NSString *regexpString = (NSString *) cast_chk(CucumberRuntimeUtils_invokeWithId_withJavaLangReflectMethod_withLong_withNSObjectArray_(annotation, regexpMethod, 0, [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]), [NSString class]);
  return JavaUtilRegexPattern_compileWithNSString_(regexpString);
}

jlong CucumberRuntimeJavaJavaBackend_timeoutMillisWithJavaLangAnnotationAnnotation_(CucumberRuntimeJavaJavaBackend *self, id<JavaLangAnnotationAnnotation> annotation) {
  JavaLangReflectMethod *regexpMethod = [[((id<JavaLangAnnotationAnnotation>) nil_chk(annotation)) java_getClass] getMethod:@"timeout" parameterTypes:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]];
  return [((JavaLangLong *) nil_chk((JavaLangLong *) cast_chk(CucumberRuntimeUtils_invokeWithId_withJavaLangReflectMethod_withLong_withNSObjectArray_(annotation, regexpMethod, 0, [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]), [JavaLangLong class]))) longLongValue];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeJavaJavaBackend)
