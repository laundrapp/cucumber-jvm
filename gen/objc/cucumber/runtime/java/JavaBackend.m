//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/java/src/main/java/cucumber/runtime/java/JavaBackend.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/api/java/After.h"
#include "cucumber/api/java/AfterStep.h"
#include "cucumber/api/java/Before.h"
#include "cucumber/api/java/BeforeStep.h"
#include "cucumber/api/java/ObjectFactory.h"
#include "cucumber/api/java8/GlueBase.h"
#include "cucumber/runtime/ClassFinder.h"
#include "cucumber/runtime/CucumberException.h"
#include "cucumber/runtime/Env.h"
#include "cucumber/runtime/Glue.h"
#include "cucumber/runtime/HookDefinition.h"
#include "cucumber/runtime/StepDefinition.h"
#include "cucumber/runtime/Utils.h"
#include "cucumber/runtime/io/MultiLoader.h"
#include "cucumber/runtime/io/ResourceLoader.h"
#include "cucumber/runtime/io/ResourceLoaderClassFinder.h"
#include "cucumber/runtime/java/Function.h"
#include "cucumber/runtime/java/Java8Snippet.h"
#include "cucumber/runtime/java/JavaBackend.h"
#include "cucumber/runtime/java/JavaHookDefinition.h"
#include "cucumber/runtime/java/JavaSnippet.h"
#include "cucumber/runtime/java/JavaStepDefinition.h"
#include "cucumber/runtime/java/LambdaGlueRegistry.h"
#include "cucumber/runtime/java/MethodScanner.h"
#include "cucumber/runtime/java/ObjectFactoryLoader.h"
#include "cucumber/runtime/snippets/FunctionNameGenerator.h"
#include "cucumber/runtime/snippets/Snippet.h"
#include "cucumber/runtime/snippets/SnippetGenerator.h"
#include "gherkin/pickles/PickleStep.h"
#include "io/cucumber/cucumberexpressions/ParameterTypeRegistry.h"
#include "io/cucumber/stepexpression/TypeRegistry.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Long.h"
#include "java/lang/Thread.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/Throwable.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Method.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/List.h"

@interface CucumberRuntimeJavaJavaBackend () {
 @public
  CCBRSnippetGenerator *snippetGenerator_;
  IoCucumberStepexpressionTypeRegistry *typeRegistry_;
  id<CucumberApiJavaObjectFactory> objectFactory_;
  id<CCBRClassFinder> classFinder_;
  CucumberRuntimeJavaMethodScanner *methodScanner_;
  id<CCBRGlue> glue_;
  id<JavaUtilList> glueBaseClasses_;
}

- (id<CCBRSnippet>)createSnippet;

- (instancetype __nonnull)initWithCCBRClassFinder:(id<CCBRClassFinder>)classFinder
         withIoCucumberStepexpressionTypeRegistry:(IoCucumberStepexpressionTypeRegistry *)typeRegistry;

- (NSString *)expressionWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)annotation;

- (jlong)timeoutMillisWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)annotation;

@end

J2OBJC_FIELD_SETTER(CucumberRuntimeJavaJavaBackend, snippetGenerator_, CCBRSnippetGenerator *)
J2OBJC_FIELD_SETTER(CucumberRuntimeJavaJavaBackend, typeRegistry_, IoCucumberStepexpressionTypeRegistry *)
J2OBJC_FIELD_SETTER(CucumberRuntimeJavaJavaBackend, objectFactory_, id<CucumberApiJavaObjectFactory>)
J2OBJC_FIELD_SETTER(CucumberRuntimeJavaJavaBackend, classFinder_, id<CCBRClassFinder>)
J2OBJC_FIELD_SETTER(CucumberRuntimeJavaJavaBackend, methodScanner_, CucumberRuntimeJavaMethodScanner *)
J2OBJC_FIELD_SETTER(CucumberRuntimeJavaJavaBackend, glue_, id<CCBRGlue>)
J2OBJC_FIELD_SETTER(CucumberRuntimeJavaJavaBackend, glueBaseClasses_, id<JavaUtilList>)

__attribute__((unused)) static id<CCBRSnippet> CucumberRuntimeJavaJavaBackend_createSnippet(CucumberRuntimeJavaJavaBackend *self);

__attribute__((unused)) static void CucumberRuntimeJavaJavaBackend_initWithCCBRClassFinder_withIoCucumberStepexpressionTypeRegistry_(CucumberRuntimeJavaJavaBackend *self, id<CCBRClassFinder> classFinder, IoCucumberStepexpressionTypeRegistry *typeRegistry);

__attribute__((unused)) static CucumberRuntimeJavaJavaBackend *new_CucumberRuntimeJavaJavaBackend_initWithCCBRClassFinder_withIoCucumberStepexpressionTypeRegistry_(id<CCBRClassFinder> classFinder, IoCucumberStepexpressionTypeRegistry *typeRegistry) NS_RETURNS_RETAINED;

__attribute__((unused)) static CucumberRuntimeJavaJavaBackend *create_CucumberRuntimeJavaJavaBackend_initWithCCBRClassFinder_withIoCucumberStepexpressionTypeRegistry_(id<CCBRClassFinder> classFinder, IoCucumberStepexpressionTypeRegistry *typeRegistry);

__attribute__((unused)) static NSString *CucumberRuntimeJavaJavaBackend_expressionWithJavaLangAnnotationAnnotation_(CucumberRuntimeJavaJavaBackend *self, id<JavaLangAnnotationAnnotation> annotation);

__attribute__((unused)) static jlong CucumberRuntimeJavaJavaBackend_timeoutMillisWithJavaLangAnnotationAnnotation_(CucumberRuntimeJavaJavaBackend *self, id<JavaLangAnnotationAnnotation> annotation);

@implementation CucumberRuntimeJavaJavaBackend

- (id<CCBRSnippet>)createSnippet {
  return CucumberRuntimeJavaJavaBackend_createSnippet(self);
}

- (instancetype __nonnull)initWithCCBRResourceLoader:(id<CCBRResourceLoader>)resourceLoader
            withIoCucumberStepexpressionTypeRegistry:(IoCucumberStepexpressionTypeRegistry *)typeRegistry {
  CucumberRuntimeJavaJavaBackend_initWithCCBRResourceLoader_withIoCucumberStepexpressionTypeRegistry_(self, resourceLoader, typeRegistry);
  return self;
}

- (instancetype __nonnull)initWithCCBRClassFinder:(id<CCBRClassFinder>)classFinder
         withIoCucumberStepexpressionTypeRegistry:(IoCucumberStepexpressionTypeRegistry *)typeRegistry {
  CucumberRuntimeJavaJavaBackend_initWithCCBRClassFinder_withIoCucumberStepexpressionTypeRegistry_(self, classFinder, typeRegistry);
  return self;
}

- (instancetype __nonnull)initWithCucumberApiJavaObjectFactory:(id<CucumberApiJavaObjectFactory>)objectFactory
                                           withCCBRClassFinder:(id<CCBRClassFinder>)classFinder
                      withIoCucumberStepexpressionTypeRegistry:(IoCucumberStepexpressionTypeRegistry *)typeRegistry {
  CucumberRuntimeJavaJavaBackend_initWithCucumberApiJavaObjectFactory_withCCBRClassFinder_withIoCucumberStepexpressionTypeRegistry_(self, objectFactory, classFinder, typeRegistry);
  return self;
}

- (void)loadGlueWithCCBRGlue:(id<CCBRGlue>)glue
            withJavaUtilList:(id<JavaUtilList>)gluePaths {
  JreStrongAssign(&self->glue_, glue);
  [((CucumberRuntimeJavaMethodScanner *) nil_chk(methodScanner_)) scanWithCucumberRuntimeJavaJavaBackend:self withJavaUtilList:gluePaths];
  for (NSString * __strong gluePath in nil_chk(gluePaths)) {
    id<JavaUtilCollection> glueDefinerClasses = [((id<CCBRClassFinder>) nil_chk(classFinder_)) getDescendantsWithIOSClass:CucumberApiJava8GlueBase_class_() withNSString:CCBRMultiLoader_packageNameWithNSString_(gluePath)];
    for (IOSClass * __strong glueClass in nil_chk(glueDefinerClasses)) {
      if ([((IOSClass *) nil_chk(glueClass)) isInterface]) {
        continue;
      }
      if ([((id<CucumberApiJavaObjectFactory>) nil_chk(objectFactory_)) addClassWithIOSClass:glueClass]) {
        [((id<JavaUtilList>) nil_chk(glueBaseClasses_)) addWithId:glueClass];
      }
    }
  }
}

- (void)loadGlueWithCCBRGlue:(id<CCBRGlue>)glue
   withJavaLangReflectMethod:(JavaLangReflectMethod *)method
                withIOSClass:(IOSClass *)glueCodeClass {
  JreStrongAssign(&self->glue_, glue);
  [((CucumberRuntimeJavaMethodScanner *) nil_chk(methodScanner_)) scanWithCucumberRuntimeJavaJavaBackend:self withJavaLangReflectMethod:method withIOSClass:glueCodeClass];
}

- (void)buildWorld {
  [((id<CucumberApiJavaObjectFactory>) nil_chk(objectFactory_)) start];
  @try {
    [((JavaLangThreadLocal *) nil_chk(JreLoadStatic(CucumberRuntimeJavaLambdaGlueRegistry, INSTANCE))) setWithId:self];
    [((id<CCBRGlue>) nil_chk(glue_)) removeScenarioScopedGlue];
    for (IOSClass * __strong glueBaseClass in nil_chk(glueBaseClasses_)) {
      [objectFactory_ getInstanceWithIOSClass:glueBaseClass];
    }
  }
  @finally {
    [JreLoadStatic(CucumberRuntimeJavaLambdaGlueRegistry, INSTANCE) remove];
  }
}

- (void)disposeWorld {
  [((id<CucumberApiJavaObjectFactory>) nil_chk(objectFactory_)) stop];
}

- (NSString *)getSnippetWithGHKPickleStep:(GHKPickleStep *)step
                             withNSString:(NSString *)keyword
            withCCBRFunctionNameGenerator:(CCBRFunctionNameGenerator *)functionNameGenerator {
  return [((CCBRSnippetGenerator *) nil_chk(snippetGenerator_)) getSnippetWithGHKPickleStep:step withNSString:keyword withCCBRFunctionNameGenerator:functionNameGenerator];
}

- (void)addStepDefinitionWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)annotation
                                withJavaLangReflectMethod:(JavaLangReflectMethod *)method {
  @try {
    if ([((id<CucumberApiJavaObjectFactory>) nil_chk(objectFactory_)) addClassWithIOSClass:[((JavaLangReflectMethod *) nil_chk(method)) getDeclaringClass]]) {
      [((id<CCBRGlue>) nil_chk(glue_)) addStepDefinitionWithCCBRStepDefinition:create_CucumberRuntimeJavaJavaStepDefinition_initWithJavaLangReflectMethod_withNSString_withLong_withCucumberApiJavaObjectFactory_withIoCucumberStepexpressionTypeRegistry_(method, CucumberRuntimeJavaJavaBackend_expressionWithJavaLangAnnotationAnnotation_(self, annotation), CucumberRuntimeJavaJavaBackend_timeoutMillisWithJavaLangAnnotationAnnotation_(self, annotation), objectFactory_, typeRegistry_)];
    }
  }
  @catch (CCBRCucumberException *e) {
    @throw e;
  }
  @catch (JavaLangThrowable *e) {
    @throw create_CCBRCucumberException_initWithJavaLangThrowable_(e);
  }
}

- (void)addStepDefinitionWithCucumberRuntimeJavaFunction:(id<CucumberRuntimeJavaFunction>)stepDefinitionFunction {
  [((id<CCBRGlue>) nil_chk(glue_)) addStepDefinitionWithCCBRStepDefinition:[((id<CucumberRuntimeJavaFunction>) nil_chk(stepDefinitionFunction)) applyWithId:typeRegistry_]];
}

- (void)addHookWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)annotation
                      withJavaLangReflectMethod:(JavaLangReflectMethod *)method {
  if ([((id<CucumberApiJavaObjectFactory>) nil_chk(objectFactory_)) addClassWithIOSClass:[((JavaLangReflectMethod *) nil_chk(method)) getDeclaringClass]]) {
    if ([((IOSClass *) nil_chk([((id<JavaLangAnnotationAnnotation>) nil_chk(annotation)) annotationType])) isEqual:CucumberApiJavaBefore_class_()]) {
      IOSObjectArray *tagExpressions = [((id<CucumberApiJavaBefore>) cast_check(annotation, CucumberApiJavaBefore_class_())) value];
      jlong timeout = [((id<CucumberApiJavaBefore>) cast_check(annotation, CucumberApiJavaBefore_class_())) timeout];
      [self addBeforeHookDefinitionWithCCBRHookDefinition:create_CucumberRuntimeJavaJavaHookDefinition_initWithJavaLangReflectMethod_withNSStringArray_withInt_withLong_withCucumberApiJavaObjectFactory_(method, tagExpressions, [((id<CucumberApiJavaBefore>) cast_check(annotation, CucumberApiJavaBefore_class_())) order], timeout, objectFactory_)];
    }
    else if ([((IOSClass *) nil_chk([annotation annotationType])) isEqual:CucumberApiJavaAfter_class_()]) {
      IOSObjectArray *tagExpressions = [((id<CucumberApiJavaAfter>) cast_check(annotation, CucumberApiJavaAfter_class_())) value];
      jlong timeout = [((id<CucumberApiJavaAfter>) cast_check(annotation, CucumberApiJavaAfter_class_())) timeout];
      [self addAfterHookDefinitionWithCCBRHookDefinition:create_CucumberRuntimeJavaJavaHookDefinition_initWithJavaLangReflectMethod_withNSStringArray_withInt_withLong_withCucumberApiJavaObjectFactory_(method, tagExpressions, [((id<CucumberApiJavaAfter>) cast_check(annotation, CucumberApiJavaAfter_class_())) order], timeout, objectFactory_)];
    }
    else if ([((IOSClass *) nil_chk([annotation annotationType])) isEqual:CucumberApiJavaBeforeStep_class_()]) {
      IOSObjectArray *tagExpressions = [((id<CucumberApiJavaBeforeStep>) cast_check(annotation, CucumberApiJavaBeforeStep_class_())) value];
      jlong timeout = [((id<CucumberApiJavaBeforeStep>) cast_check(annotation, CucumberApiJavaBeforeStep_class_())) timeout];
      [self addBeforeStepHookDefinitionWithCCBRHookDefinition:create_CucumberRuntimeJavaJavaHookDefinition_initWithJavaLangReflectMethod_withNSStringArray_withInt_withLong_withCucumberApiJavaObjectFactory_(method, tagExpressions, [((id<CucumberApiJavaBeforeStep>) cast_check(annotation, CucumberApiJavaBeforeStep_class_())) order], timeout, objectFactory_)];
    }
    else if ([((IOSClass *) nil_chk([annotation annotationType])) isEqual:CucumberApiJavaAfterStep_class_()]) {
      IOSObjectArray *tagExpressions = [((id<CucumberApiJavaAfterStep>) cast_check(annotation, CucumberApiJavaAfterStep_class_())) value];
      jlong timeout = [((id<CucumberApiJavaAfterStep>) cast_check(annotation, CucumberApiJavaAfterStep_class_())) timeout];
      [self addAfterStepHookDefinitionWithCCBRHookDefinition:create_CucumberRuntimeJavaJavaHookDefinition_initWithJavaLangReflectMethod_withNSStringArray_withInt_withLong_withCucumberApiJavaObjectFactory_(method, tagExpressions, [((id<CucumberApiJavaAfterStep>) cast_check(annotation, CucumberApiJavaAfterStep_class_())) order], timeout, objectFactory_)];
    }
  }
}

- (void)addBeforeHookDefinitionWithCCBRHookDefinition:(id<CCBRHookDefinition>)beforeHook {
  [((id<CCBRGlue>) nil_chk(glue_)) addBeforeHookWithCCBRHookDefinition:beforeHook];
}

- (void)addAfterHookDefinitionWithCCBRHookDefinition:(id<CCBRHookDefinition>)afterHook {
  [((id<CCBRGlue>) nil_chk(glue_)) addAfterHookWithCCBRHookDefinition:afterHook];
}

- (void)addAfterStepHookDefinitionWithCCBRHookDefinition:(id<CCBRHookDefinition>)afterStepHook {
  [((id<CCBRGlue>) nil_chk(glue_)) addAfterStepHookWithCCBRHookDefinition:afterStepHook];
}

- (void)addBeforeStepHookDefinitionWithCCBRHookDefinition:(id<CCBRHookDefinition>)beforeStepHook {
  [((id<CCBRGlue>) nil_chk(glue_)) addBeforeStepHookWithCCBRHookDefinition:beforeStepHook];
}

- (NSString *)expressionWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)annotation {
  return CucumberRuntimeJavaJavaBackend_expressionWithJavaLangAnnotationAnnotation_(self, annotation);
}

- (jlong)timeoutMillisWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)annotation {
  return CucumberRuntimeJavaJavaBackend_timeoutMillisWithJavaLangAnnotationAnnotation_(self, annotation);
}

- (void)dealloc {
  RELEASE_(snippetGenerator_);
  RELEASE_(typeRegistry_);
  RELEASE_(objectFactory_);
  RELEASE_(classFinder_);
  RELEASE_(methodScanner_);
  RELEASE_(glue_);
  RELEASE_(glueBaseClasses_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LCCBRSnippet;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 3, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 12, -1, 13, -1, -1 },
    { NULL, "V", 0x0, 14, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 16, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 20, 21, 22, -1, -1, -1 },
    { NULL, "J", 0x2, 23, 21, 22, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(createSnippet);
  methods[1].selector = @selector(initWithCCBRResourceLoader:withIoCucumberStepexpressionTypeRegistry:);
  methods[2].selector = @selector(initWithCCBRClassFinder:withIoCucumberStepexpressionTypeRegistry:);
  methods[3].selector = @selector(initWithCucumberApiJavaObjectFactory:withCCBRClassFinder:withIoCucumberStepexpressionTypeRegistry:);
  methods[4].selector = @selector(loadGlueWithCCBRGlue:withJavaUtilList:);
  methods[5].selector = @selector(loadGlueWithCCBRGlue:withJavaLangReflectMethod:withIOSClass:);
  methods[6].selector = @selector(buildWorld);
  methods[7].selector = @selector(disposeWorld);
  methods[8].selector = @selector(getSnippetWithGHKPickleStep:withNSString:withCCBRFunctionNameGenerator:);
  methods[9].selector = @selector(addStepDefinitionWithJavaLangAnnotationAnnotation:withJavaLangReflectMethod:);
  methods[10].selector = @selector(addStepDefinitionWithCucumberRuntimeJavaFunction:);
  methods[11].selector = @selector(addHookWithJavaLangAnnotationAnnotation:withJavaLangReflectMethod:);
  methods[12].selector = @selector(addBeforeHookDefinitionWithCCBRHookDefinition:);
  methods[13].selector = @selector(addAfterHookDefinitionWithCCBRHookDefinition:);
  methods[14].selector = @selector(addAfterStepHookDefinitionWithCCBRHookDefinition:);
  methods[15].selector = @selector(addBeforeStepHookDefinitionWithCCBRHookDefinition:);
  methods[16].selector = @selector(expressionWithJavaLangAnnotationAnnotation:);
  methods[17].selector = @selector(timeoutMillisWithJavaLangAnnotationAnnotation:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "snippetGenerator_", "LCCBRSnippetGenerator;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "typeRegistry_", "LIoCucumberStepexpressionTypeRegistry;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "objectFactory_", "LCucumberApiJavaObjectFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "classFinder_", "LCCBRClassFinder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "methodScanner_", "LCucumberRuntimeJavaMethodScanner;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "glue_", "LCCBRGlue;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "glueBaseClasses_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 24, -1 },
  };
  static const void *ptrTable[] = { "LCCBRResourceLoader;LIoCucumberStepexpressionTypeRegistry;", "LCCBRClassFinder;LIoCucumberStepexpressionTypeRegistry;", "LCucumberApiJavaObjectFactory;LCCBRClassFinder;LIoCucumberStepexpressionTypeRegistry;", "loadGlue", "LCCBRGlue;LJavaUtilList;", "(Lcucumber/runtime/Glue;Ljava/util/List<Ljava/lang/String;>;)V", "LCCBRGlue;LJavaLangReflectMethod;LIOSClass;", "(Lcucumber/runtime/Glue;Ljava/lang/reflect/Method;Ljava/lang/Class<*>;)V", "getSnippet", "LGHKPickleStep;LNSString;LCCBRFunctionNameGenerator;", "addStepDefinition", "LJavaLangAnnotationAnnotation;LJavaLangReflectMethod;", "LCucumberRuntimeJavaFunction;", "(Lcucumber/runtime/java/Function<Lio/cucumber/stepexpression/TypeRegistry;Lcucumber/runtime/StepDefinition;>;)V", "addHook", "addBeforeHookDefinition", "LCCBRHookDefinition;", "addAfterHookDefinition", "addAfterStepHookDefinition", "addBeforeStepHookDefinition", "expression", "LJavaLangAnnotationAnnotation;", "LJavaLangThrowable;", "timeoutMillis", "Ljava/util/List<Ljava/lang/Class<+Lcucumber/api/java8/GlueBase;>;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeJavaJavaBackend = { "JavaBackend", "cucumber.runtime.java", ptrTable, methods, fields, 7, 0x1, 18, 7, -1, -1, -1, -1, -1 };
  return &_CucumberRuntimeJavaJavaBackend;
}

@end

id<CCBRSnippet> CucumberRuntimeJavaJavaBackend_createSnippet(CucumberRuntimeJavaJavaBackend *self) {
  JavaLangClassLoader *classLoader = [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getContextClassLoader];
  @try {
    [((JavaLangClassLoader *) nil_chk(classLoader)) loadClassWithNSString:@"cucumber.runtime.java8.LambdaGlueBase"];
    return create_CucumberRuntimeJavaJava8Snippet_init();
  }
  @catch (JavaLangClassNotFoundException *thatsOk) {
    return create_CucumberRuntimeJavaJavaSnippet_init();
  }
}

void CucumberRuntimeJavaJavaBackend_initWithCCBRResourceLoader_withIoCucumberStepexpressionTypeRegistry_(CucumberRuntimeJavaJavaBackend *self, id<CCBRResourceLoader> resourceLoader, IoCucumberStepexpressionTypeRegistry *typeRegistry) {
  CucumberRuntimeJavaJavaBackend_initWithCCBRClassFinder_withIoCucumberStepexpressionTypeRegistry_(self, create_CCBRResourceLoaderClassFinder_initWithCCBRResourceLoader_withJavaLangClassLoader_(resourceLoader, [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getContextClassLoader]), typeRegistry);
}

CucumberRuntimeJavaJavaBackend *new_CucumberRuntimeJavaJavaBackend_initWithCCBRResourceLoader_withIoCucumberStepexpressionTypeRegistry_(id<CCBRResourceLoader> resourceLoader, IoCucumberStepexpressionTypeRegistry *typeRegistry) {
  J2OBJC_NEW_IMPL(CucumberRuntimeJavaJavaBackend, initWithCCBRResourceLoader_withIoCucumberStepexpressionTypeRegistry_, resourceLoader, typeRegistry)
}

CucumberRuntimeJavaJavaBackend *create_CucumberRuntimeJavaJavaBackend_initWithCCBRResourceLoader_withIoCucumberStepexpressionTypeRegistry_(id<CCBRResourceLoader> resourceLoader, IoCucumberStepexpressionTypeRegistry *typeRegistry) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeJavaJavaBackend, initWithCCBRResourceLoader_withIoCucumberStepexpressionTypeRegistry_, resourceLoader, typeRegistry)
}

void CucumberRuntimeJavaJavaBackend_initWithCCBRClassFinder_withIoCucumberStepexpressionTypeRegistry_(CucumberRuntimeJavaJavaBackend *self, id<CCBRClassFinder> classFinder, IoCucumberStepexpressionTypeRegistry *typeRegistry) {
  CucumberRuntimeJavaJavaBackend_initWithCucumberApiJavaObjectFactory_withCCBRClassFinder_withIoCucumberStepexpressionTypeRegistry_(self, CucumberRuntimeJavaObjectFactoryLoader_loadObjectFactoryWithCCBRClassFinder_withNSString_(classFinder, [((CCBREnv *) nil_chk(JreLoadStatic(CCBREnv, INSTANCE))) getWithNSString:[CucumberApiJavaObjectFactory_class_() getName]]), classFinder, typeRegistry);
}

CucumberRuntimeJavaJavaBackend *new_CucumberRuntimeJavaJavaBackend_initWithCCBRClassFinder_withIoCucumberStepexpressionTypeRegistry_(id<CCBRClassFinder> classFinder, IoCucumberStepexpressionTypeRegistry *typeRegistry) {
  J2OBJC_NEW_IMPL(CucumberRuntimeJavaJavaBackend, initWithCCBRClassFinder_withIoCucumberStepexpressionTypeRegistry_, classFinder, typeRegistry)
}

CucumberRuntimeJavaJavaBackend *create_CucumberRuntimeJavaJavaBackend_initWithCCBRClassFinder_withIoCucumberStepexpressionTypeRegistry_(id<CCBRClassFinder> classFinder, IoCucumberStepexpressionTypeRegistry *typeRegistry) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeJavaJavaBackend, initWithCCBRClassFinder_withIoCucumberStepexpressionTypeRegistry_, classFinder, typeRegistry)
}

void CucumberRuntimeJavaJavaBackend_initWithCucumberApiJavaObjectFactory_withCCBRClassFinder_withIoCucumberStepexpressionTypeRegistry_(CucumberRuntimeJavaJavaBackend *self, id<CucumberApiJavaObjectFactory> objectFactory, id<CCBRClassFinder> classFinder, IoCucumberStepexpressionTypeRegistry *typeRegistry) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->glueBaseClasses_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->classFinder_, classFinder);
  JreStrongAssign(&self->objectFactory_, objectFactory);
  JreStrongAssignAndConsume(&self->methodScanner_, new_CucumberRuntimeJavaMethodScanner_initWithCCBRClassFinder_(classFinder));
  JreStrongAssignAndConsume(&self->snippetGenerator_, new_CCBRSnippetGenerator_initWithCCBRSnippet_withIoCucumberCucumberexpressionsParameterTypeRegistry_(CucumberRuntimeJavaJavaBackend_createSnippet(self), [((IoCucumberStepexpressionTypeRegistry *) nil_chk(typeRegistry)) parameterTypeRegistry]));
  JreStrongAssign(&self->typeRegistry_, typeRegistry);
}

CucumberRuntimeJavaJavaBackend *new_CucumberRuntimeJavaJavaBackend_initWithCucumberApiJavaObjectFactory_withCCBRClassFinder_withIoCucumberStepexpressionTypeRegistry_(id<CucumberApiJavaObjectFactory> objectFactory, id<CCBRClassFinder> classFinder, IoCucumberStepexpressionTypeRegistry *typeRegistry) {
  J2OBJC_NEW_IMPL(CucumberRuntimeJavaJavaBackend, initWithCucumberApiJavaObjectFactory_withCCBRClassFinder_withIoCucumberStepexpressionTypeRegistry_, objectFactory, classFinder, typeRegistry)
}

CucumberRuntimeJavaJavaBackend *create_CucumberRuntimeJavaJavaBackend_initWithCucumberApiJavaObjectFactory_withCCBRClassFinder_withIoCucumberStepexpressionTypeRegistry_(id<CucumberApiJavaObjectFactory> objectFactory, id<CCBRClassFinder> classFinder, IoCucumberStepexpressionTypeRegistry *typeRegistry) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeJavaJavaBackend, initWithCucumberApiJavaObjectFactory_withCCBRClassFinder_withIoCucumberStepexpressionTypeRegistry_, objectFactory, classFinder, typeRegistry)
}

NSString *CucumberRuntimeJavaJavaBackend_expressionWithJavaLangAnnotationAnnotation_(CucumberRuntimeJavaJavaBackend *self, id<JavaLangAnnotationAnnotation> annotation) {
  JavaLangReflectMethod *expressionMethod = [[((id<JavaLangAnnotationAnnotation>) nil_chk(annotation)) java_getClass] getMethod:@"value" parameterTypes:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]];
  return (NSString *) cast_chk(CCBRUtils_invokeWithId_withJavaLangReflectMethod_withLong_withNSObjectArray_(annotation, expressionMethod, 0, [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]), [NSString class]);
}

jlong CucumberRuntimeJavaJavaBackend_timeoutMillisWithJavaLangAnnotationAnnotation_(CucumberRuntimeJavaJavaBackend *self, id<JavaLangAnnotationAnnotation> annotation) {
  JavaLangReflectMethod *regexpMethod = [[((id<JavaLangAnnotationAnnotation>) nil_chk(annotation)) java_getClass] getMethod:@"timeout" parameterTypes:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]];
  return [((JavaLangLong *) nil_chk((JavaLangLong *) cast_chk(CCBRUtils_invokeWithId_withJavaLangReflectMethod_withLong_withNSObjectArray_(annotation, regexpMethod, 0, [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]), [JavaLangLong class]))) longLongValue];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeJavaJavaBackend)
