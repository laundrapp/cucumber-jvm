//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/java/src/main/java/cucumber/runtime/java/Java8Snippet.java
//

#include "J2ObjC_source.h"
#include "cucumber/runtime/java/AbstractJavaSnippet.h"
#include "cucumber/runtime/java/Java8Snippet.h"

@implementation CucumberRuntimeJavaJava8Snippet

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CucumberRuntimeJavaJava8Snippet_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)template__ {
  return @"{0}(\"{1}\", ({3}) -> '{'\n    // {4}\n{5}    throw new PendingException();\n'}');\n";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(template__);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "template" };
  static const J2ObjcClassInfo _CucumberRuntimeJavaJava8Snippet = { "Java8Snippet", "cucumber.runtime.java", ptrTable, methods, NULL, 7, 0x10, 2, 0, -1, -1, -1, -1, -1 };
  return &_CucumberRuntimeJavaJava8Snippet;
}

@end

void CucumberRuntimeJavaJava8Snippet_init(CucumberRuntimeJavaJava8Snippet *self) {
  CucumberRuntimeJavaAbstractJavaSnippet_init(self);
}

CucumberRuntimeJavaJava8Snippet *new_CucumberRuntimeJavaJava8Snippet_init() {
  J2OBJC_NEW_IMPL(CucumberRuntimeJavaJava8Snippet, init)
}

CucumberRuntimeJavaJava8Snippet *create_CucumberRuntimeJavaJava8Snippet_init() {
  J2OBJC_CREATE_IMPL(CucumberRuntimeJavaJava8Snippet, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeJavaJava8Snippet)
