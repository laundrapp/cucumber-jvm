//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/java/src/main/java/cucumber/runtime/java/JavaBackend.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CucumberRuntimeJavaJavaBackend")
#ifdef RESTRICT_CucumberRuntimeJavaJavaBackend
#define INCLUDE_ALL_CucumberRuntimeJavaJavaBackend 0
#else
#define INCLUDE_ALL_CucumberRuntimeJavaJavaBackend 1
#endif
#undef RESTRICT_CucumberRuntimeJavaJavaBackend

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (CCBJavaBackend_) && (INCLUDE_ALL_CucumberRuntimeJavaJavaBackend || defined(INCLUDE_CCBJavaBackend))
#define CCBJavaBackend_

#define RESTRICT_CucumberRuntimeBackend 1
#define INCLUDE_CCBRBackend 1
#include "cucumber/runtime/Backend.h"

#define RESTRICT_CucumberRuntimeJavaLambdaGlueRegistry 1
#define INCLUDE_CCBLambdaGlueRegistry 1
#include "cucumber/runtime/java/LambdaGlueRegistry.h"

@class CCBFunctionNameGenerator;
@class GherkinPicklesPickleStep;
@class IOSClass;
@class JavaLangReflectMethod;
@protocol CCBObjectFactory;
@protocol CCBRClassFinder;
@protocol CCBRGlue;
@protocol CCBRHookDefinition;
@protocol CCBRStepDefinition;
@protocol CCBRUnreportedStepExecutor;
@protocol CCBResourceLoader;
@protocol JavaLangAnnotationAnnotation;
@protocol JavaUtilList;

@interface CCBJavaBackend : NSObject < CCBRBackend, CCBLambdaGlueRegistry >

#pragma mark Public

- (instancetype __nonnull)initWithCCBObjectFactory:(id<CCBObjectFactory>)objectFactory
                               withCCBRClassFinder:(id<CCBRClassFinder>)classFinder;

/*!
 @brief The constructor called by reflection by default.
 @param resourceLoader
 */
- (instancetype __nonnull)initWithCCBResourceLoader:(id<CCBResourceLoader>)resourceLoader;

- (void)addAfterHookDefinitionWithCCBRHookDefinition:(id<CCBRHookDefinition>)afterHook;

- (void)addBeforeHookDefinitionWithCCBRHookDefinition:(id<CCBRHookDefinition>)beforeHook;

- (void)addStepDefinitionWithCCBRStepDefinition:(id<CCBRStepDefinition>)stepDefinition;

- (void)buildWorld;

- (void)disposeWorld;

- (NSString *)getSnippetWithGherkinPicklesPickleStep:(GherkinPicklesPickleStep *)step
                                        withNSString:(NSString *)keyword
                        withCCBFunctionNameGenerator:(CCBFunctionNameGenerator *)functionNameGenerator;

- (void)loadGlueWithCCBRGlue:(id<CCBRGlue>)glue
            withJavaUtilList:(id<JavaUtilList>)gluePaths;

/*!
 @brief Convenience method for frameworks that wish to load glue from methods explicitly (possibly
  found with a different mechanism than Cucumber's built-in classpath scanning).
 @param glue where stepdefs and hooks will be added.
 @param method a candidate method.
 @param glueCodeClass the class implementing the method. Must not be a subclass of the class implementing the method.
 */
- (void)loadGlueWithCCBRGlue:(id<CCBRGlue>)glue
   withJavaLangReflectMethod:(JavaLangReflectMethod *)method
                withIOSClass:(IOSClass *)glueCodeClass;

- (void)setUnreportedStepExecutorWithCCBRUnreportedStepExecutor:(id<CCBRUnreportedStepExecutor>)executor;

#pragma mark Package-Private

- (void)addHookWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)annotation
                      withJavaLangReflectMethod:(JavaLangReflectMethod *)method;

- (void)addStepDefinitionWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation>)annotation
                                withJavaLangReflectMethod:(JavaLangReflectMethod *)method;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBJavaBackend)

FOUNDATION_EXPORT void CCBJavaBackend_initWithCCBResourceLoader_(CCBJavaBackend *self, id<CCBResourceLoader> resourceLoader);

FOUNDATION_EXPORT CCBJavaBackend *new_CCBJavaBackend_initWithCCBResourceLoader_(id<CCBResourceLoader> resourceLoader) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CCBJavaBackend *create_CCBJavaBackend_initWithCCBResourceLoader_(id<CCBResourceLoader> resourceLoader);

FOUNDATION_EXPORT void CCBJavaBackend_initWithCCBObjectFactory_withCCBRClassFinder_(CCBJavaBackend *self, id<CCBObjectFactory> objectFactory, id<CCBRClassFinder> classFinder);

FOUNDATION_EXPORT CCBJavaBackend *new_CCBJavaBackend_initWithCCBObjectFactory_withCCBRClassFinder_(id<CCBObjectFactory> objectFactory, id<CCBRClassFinder> classFinder) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CCBJavaBackend *create_CCBJavaBackend_initWithCCBObjectFactory_withCCBRClassFinder_(id<CCBObjectFactory> objectFactory, id<CCBRClassFinder> classFinder);

J2OBJC_TYPE_LITERAL_HEADER(CCBJavaBackend)

@compatibility_alias CucumberRuntimeJavaJavaBackend CCBJavaBackend;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_CucumberRuntimeJavaJavaBackend")
