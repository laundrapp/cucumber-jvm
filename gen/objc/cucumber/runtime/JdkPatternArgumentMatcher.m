//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/JdkPatternArgumentMatcher.java
//

#include "J2ObjC_source.h"
#include "cucumber/runtime/Argument.h"
#include "cucumber/runtime/JdkPatternArgumentMatcher.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface CucumberRuntimeJdkPatternArgumentMatcher () {
 @public
  JavaUtilRegexPattern *pattern_;
}

@end

J2OBJC_FIELD_SETTER(CucumberRuntimeJdkPatternArgumentMatcher, pattern_, JavaUtilRegexPattern *)

@implementation CucumberRuntimeJdkPatternArgumentMatcher

- (instancetype __nonnull)initWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern {
  CucumberRuntimeJdkPatternArgumentMatcher_initWithJavaUtilRegexPattern_(self, pattern);
  return self;
}

- (id<JavaUtilList>)argumentsFromWithNSString:(NSString *)stepName {
  JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(pattern_)) matcherWithJavaLangCharSequence:stepName];
  if ([((JavaUtilRegexMatcher *) nil_chk(matcher)) lookingAt]) {
    id<JavaUtilList> arguments = create_JavaUtilArrayList_initWithInt_([matcher groupCount]);
    for (jint i = 1; i <= [matcher groupCount]; i++) {
      jint startIndex = [matcher startWithInt:i];
      [arguments addWithId:create_CucumberRuntimeArgument_initWithJavaLangInteger_withNSString_(startIndex == -1 ? nil : JavaLangInteger_valueOfWithInt_(startIndex), [matcher groupWithInt:i])];
    }
    return arguments;
  }
  else {
    return nil;
  }
}

- (void)dealloc {
  RELEASE_(pattern_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilRegexPattern:);
  methods[1].selector = @selector(argumentsFromWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pattern_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilRegexPattern;", "argumentsFrom", "LNSString;", "(Ljava/lang/String;)Ljava/util/List<Lcucumber/runtime/Argument;>;" };
  static const J2ObjcClassInfo _CucumberRuntimeJdkPatternArgumentMatcher = { "JdkPatternArgumentMatcher", "cucumber.runtime", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_CucumberRuntimeJdkPatternArgumentMatcher;
}

@end

void CucumberRuntimeJdkPatternArgumentMatcher_initWithJavaUtilRegexPattern_(CucumberRuntimeJdkPatternArgumentMatcher *self, JavaUtilRegexPattern *pattern) {
  NSObject_init(self);
  JreStrongAssign(&self->pattern_, pattern);
}

CucumberRuntimeJdkPatternArgumentMatcher *new_CucumberRuntimeJdkPatternArgumentMatcher_initWithJavaUtilRegexPattern_(JavaUtilRegexPattern *pattern) {
  J2OBJC_NEW_IMPL(CucumberRuntimeJdkPatternArgumentMatcher, initWithJavaUtilRegexPattern_, pattern)
}

CucumberRuntimeJdkPatternArgumentMatcher *create_CucumberRuntimeJdkPatternArgumentMatcher_initWithJavaUtilRegexPattern_(JavaUtilRegexPattern *pattern) {
  J2OBJC_CREATE_IMPL(CucumberRuntimeJdkPatternArgumentMatcher, initWithJavaUtilRegexPattern_, pattern)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CucumberRuntimeJdkPatternArgumentMatcher)
