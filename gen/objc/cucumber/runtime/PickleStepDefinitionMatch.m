//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/PickleStepDefinitionMatch.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/api/Scenario.h"
#include "cucumber/runtime/CucumberException.h"
#include "cucumber/runtime/Match.h"
#include "cucumber/runtime/PickleStepDefinitionMatch.h"
#include "cucumber/runtime/StepDefinition.h"
#include "gherkin/pickles/PickleLocation.h"
#include "gherkin/pickles/PickleStep.h"
#include "io/cucumber/cucumberexpressions/CucumberExpressionException.h"
#include "io/cucumber/datatable/CucumberDataTableException.h"
#include "io/cucumber/datatable/UndefinedDataTableTypeException.h"
#include "io/cucumber/stepexpression/Argument.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/StackTraceElement.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Locale.h"

@interface CCBRPickleStepDefinitionMatch () {
 @public
  id<CCBRStepDefinition> stepDefinition_;
  NSString *featurePath_;
  GHKPickleStep *step_;
}

- (CCBRCucumberException *)registerTypeInConfigurationWithJavaLangException:(JavaLangException *)e;

- (CCBRCucumberException *)couldNotConvertArgumentsWithJavaLangException:(JavaLangException *)e;

- (CCBRCucumberException *)arityMismatchWithInt:(jint)parameterCount;

- (NSString *)formatArgumentsWithJavaUtilList:(id<JavaUtilList>)arguments;

- (id<JavaUtilList>)createArgumentsForErrorMessage;

- (JavaUtilLocale *)localeForWithNSString:(NSString *)language;

@end

J2OBJC_FIELD_SETTER(CCBRPickleStepDefinitionMatch, stepDefinition_, id<CCBRStepDefinition>)
J2OBJC_FIELD_SETTER(CCBRPickleStepDefinitionMatch, featurePath_, NSString *)
J2OBJC_FIELD_SETTER(CCBRPickleStepDefinitionMatch, step_, GHKPickleStep *)

__attribute__((unused)) static CCBRCucumberException *CCBRPickleStepDefinitionMatch_registerTypeInConfigurationWithJavaLangException_(CCBRPickleStepDefinitionMatch *self, JavaLangException *e);

__attribute__((unused)) static CCBRCucumberException *CCBRPickleStepDefinitionMatch_couldNotConvertArgumentsWithJavaLangException_(CCBRPickleStepDefinitionMatch *self, JavaLangException *e);

__attribute__((unused)) static CCBRCucumberException *CCBRPickleStepDefinitionMatch_arityMismatchWithInt_(CCBRPickleStepDefinitionMatch *self, jint parameterCount);

__attribute__((unused)) static NSString *CCBRPickleStepDefinitionMatch_formatArgumentsWithJavaUtilList_(CCBRPickleStepDefinitionMatch *self, id<JavaUtilList> arguments);

__attribute__((unused)) static id<JavaUtilList> CCBRPickleStepDefinitionMatch_createArgumentsForErrorMessage(CCBRPickleStepDefinitionMatch *self);

__attribute__((unused)) static JavaUtilLocale *CCBRPickleStepDefinitionMatch_localeForWithNSString_(CCBRPickleStepDefinitionMatch *self, NSString *language);

@implementation CCBRPickleStepDefinitionMatch

- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)arguments
                        withCCBRStepDefinition:(id<CCBRStepDefinition>)stepDefinition
                                  withNSString:(NSString *)featurePath
                             withGHKPickleStep:(GHKPickleStep *)step {
  CCBRPickleStepDefinitionMatch_initWithJavaUtilList_withCCBRStepDefinition_withNSString_withGHKPickleStep_(self, arguments, stepDefinition, featurePath, step);
  return self;
}

- (void)runStepWithNSString:(NSString *)language
    withCucumberApiScenario:(id<CucumberApiScenario>)scenario {
  jint argumentCount = [((id<JavaUtilList>) nil_chk([self getArguments])) size];
  JavaLangInteger *parameterCount = [((id<CCBRStepDefinition>) nil_chk(stepDefinition_)) getParameterCount];
  if (parameterCount != nil && argumentCount != [parameterCount intValue]) {
    @throw nil_chk(CCBRPickleStepDefinitionMatch_arityMismatchWithInt_(self, [parameterCount intValue]));
  }
  id<JavaUtilList> result = create_JavaUtilArrayList_init();
  @try {
    for (id<IoCucumberStepexpressionArgument> __strong argument in nil_chk([self getArguments])) {
      [result addWithId:[((id<IoCucumberStepexpressionArgument>) nil_chk(argument)) getValue]];
    }
  }
  @catch (IoCucumberDatatableUndefinedDataTableTypeException *e) {
    @throw nil_chk(CCBRPickleStepDefinitionMatch_registerTypeInConfigurationWithJavaLangException_(self, e));
  }
  @catch (IoCucumberCucumberexpressionsCucumberExpressionException *e) {
    @throw nil_chk(CCBRPickleStepDefinitionMatch_couldNotConvertArgumentsWithJavaLangException_(self, e));
  }
  @catch (IoCucumberDatatableCucumberDataTableException *e) {
    @throw nil_chk(CCBRPickleStepDefinitionMatch_couldNotConvertArgumentsWithJavaLangException_(self, e));
  }
  @try {
    [stepDefinition_ executeWithNSString:language withNSObjectArray:[result toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[result size] type:NSObject_class_()]]];
  }
  @catch (CCBRCucumberException *e) {
    @throw e;
  }
  @catch (JavaLangThrowable *t) {
    @throw nil_chk([self removeFrameworkFramesAndAppendStepLocationWithJavaLangThrowable:t withJavaLangStackTraceElement:[self getStepLocation]]);
  }
}

- (CCBRCucumberException *)registerTypeInConfigurationWithJavaLangException:(JavaLangException *)e {
  return CCBRPickleStepDefinitionMatch_registerTypeInConfigurationWithJavaLangException_(self, e);
}

- (CCBRCucumberException *)couldNotConvertArgumentsWithJavaLangException:(JavaLangException *)e {
  return CCBRPickleStepDefinitionMatch_couldNotConvertArgumentsWithJavaLangException_(self, e);
}

- (void)dryRunStepWithNSString:(NSString *)language
       withCucumberApiScenario:(id<CucumberApiScenario>)scenario {
}

- (CCBRCucumberException *)arityMismatchWithInt:(jint)parameterCount {
  return CCBRPickleStepDefinitionMatch_arityMismatchWithInt_(self, parameterCount);
}

- (NSString *)formatArgumentsWithJavaUtilList:(id<JavaUtilList>)arguments {
  return CCBRPickleStepDefinitionMatch_formatArgumentsWithJavaUtilList_(self, arguments);
}

- (id<JavaUtilList>)createArgumentsForErrorMessage {
  return CCBRPickleStepDefinitionMatch_createArgumentsForErrorMessage(self);
}

- (JavaLangThrowable *)removeFrameworkFramesAndAppendStepLocationWithJavaLangThrowable:(JavaLangThrowable *)error
                                                         withJavaLangStackTraceElement:(JavaLangStackTraceElement *)stepLocation {
  IOSObjectArray *stackTraceElements = [((JavaLangThrowable *) nil_chk(error)) getStackTrace];
  if (((IOSObjectArray *) nil_chk(stackTraceElements))->size_ == 0 || stepLocation == nil) {
    return error;
  }
  jint newStackTraceLength;
  for (newStackTraceLength = 1; newStackTraceLength < stackTraceElements->size_; ++newStackTraceLength) {
    if ([((id<CCBRStepDefinition>) nil_chk(stepDefinition_)) isDefinedAtWithJavaLangStackTraceElement:IOSObjectArray_Get(stackTraceElements, newStackTraceLength - 1)]) {
      break;
    }
  }
  IOSObjectArray *newStackTrace = [IOSObjectArray arrayWithLength:newStackTraceLength + 1 type:JavaLangStackTraceElement_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(stackTraceElements, 0, newStackTrace, 0, newStackTraceLength);
  IOSObjectArray_Set(newStackTrace, newStackTraceLength, stepLocation);
  [error setStackTraceWithJavaLangStackTraceElementArray:newStackTrace];
  return error;
}

- (JavaUtilLocale *)localeForWithNSString:(NSString *)language {
  return CCBRPickleStepDefinitionMatch_localeForWithNSString_(self, language);
}

- (NSString *)getPattern {
  return [((id<CCBRStepDefinition>) nil_chk(stepDefinition_)) getPattern];
}

- (JavaLangStackTraceElement *)getStepLocation {
  return create_JavaLangStackTraceElement_initWithNSString_withNSString_withNSString_withInt_(@"\u273d", [((GHKPickleStep *) nil_chk(step_)) getText], featurePath_, CCBRPickleStepDefinitionMatch_getStepLineWithGHKPickleStep_(step_));
}

- (CCBRMatch *)getMatch {
  return self;
}

- (id<CCBRStepDefinition>)getStepDefinition {
  return stepDefinition_;
}

- (NSString *)getCodeLocation {
  return [((id<CCBRStepDefinition>) nil_chk(stepDefinition_)) getLocationWithBoolean:false];
}

+ (jint)getStepLineWithGHKPickleStep:(GHKPickleStep *)step {
  return CCBRPickleStepDefinitionMatch_getStepLineWithGHKPickleStep_(step);
}

- (void)dealloc {
  RELEASE_(stepDefinition_);
  RELEASE_(featurePath_);
  RELEASE_(step_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "LCCBRCucumberException;", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "LCCBRCucumberException;", 0x2, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 3, 4, -1, -1, -1 },
    { NULL, "LCCBRCucumberException;", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 11, 12, -1, 13, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, -1, -1, -1, 14, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x4, 15, 16, -1, -1, -1, -1 },
    { NULL, "LJavaUtilLocale;", 0x2, 17, 18, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangStackTraceElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LCCBRMatch;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LCCBRStepDefinition;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 19, 20, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilList:withCCBRStepDefinition:withNSString:withGHKPickleStep:);
  methods[1].selector = @selector(runStepWithNSString:withCucumberApiScenario:);
  methods[2].selector = @selector(registerTypeInConfigurationWithJavaLangException:);
  methods[3].selector = @selector(couldNotConvertArgumentsWithJavaLangException:);
  methods[4].selector = @selector(dryRunStepWithNSString:withCucumberApiScenario:);
  methods[5].selector = @selector(arityMismatchWithInt:);
  methods[6].selector = @selector(formatArgumentsWithJavaUtilList:);
  methods[7].selector = @selector(createArgumentsForErrorMessage);
  methods[8].selector = @selector(removeFrameworkFramesAndAppendStepLocationWithJavaLangThrowable:withJavaLangStackTraceElement:);
  methods[9].selector = @selector(localeForWithNSString:);
  methods[10].selector = @selector(getPattern);
  methods[11].selector = @selector(getStepLocation);
  methods[12].selector = @selector(getMatch);
  methods[13].selector = @selector(getStepDefinition);
  methods[14].selector = @selector(getCodeLocation);
  methods[15].selector = @selector(getStepLineWithGHKPickleStep:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "stepDefinition_", "LCCBRStepDefinition;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "featurePath_", "LNSString;", .constantValue.asLong = 0, 0x92, -1, -1, -1, -1 },
    { "step_", "LGHKPickleStep;", .constantValue.asLong = 0, 0x92, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;LCCBRStepDefinition;LNSString;LGHKPickleStep;", "(Ljava/util/List<Lio/cucumber/stepexpression/Argument;>;Lcucumber/runtime/StepDefinition;Ljava/lang/String;Lgherkin/pickles/PickleStep;)V", "runStep", "LNSString;LCucumberApiScenario;", "LJavaLangThrowable;", "registerTypeInConfiguration", "LJavaLangException;", "couldNotConvertArguments", "dryRunStep", "arityMismatch", "I", "formatArguments", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)Ljava/lang/String;", "()Ljava/util/List<Ljava/lang/String;>;", "removeFrameworkFramesAndAppendStepLocation", "LJavaLangThrowable;LJavaLangStackTraceElement;", "localeFor", "LNSString;", "getStepLine", "LGHKPickleStep;" };
  static const J2ObjcClassInfo _CCBRPickleStepDefinitionMatch = { "PickleStepDefinitionMatch", "cucumber.runtime", ptrTable, methods, fields, 7, 0x1, 16, 3, -1, -1, -1, -1, -1 };
  return &_CCBRPickleStepDefinitionMatch;
}

@end

void CCBRPickleStepDefinitionMatch_initWithJavaUtilList_withCCBRStepDefinition_withNSString_withGHKPickleStep_(CCBRPickleStepDefinitionMatch *self, id<JavaUtilList> arguments, id<CCBRStepDefinition> stepDefinition, NSString *featurePath, GHKPickleStep *step) {
  CCBRMatch_initWithJavaUtilList_withNSString_(self, arguments, [((id<CCBRStepDefinition>) nil_chk(stepDefinition)) getLocationWithBoolean:false]);
  JreStrongAssign(&self->stepDefinition_, stepDefinition);
  JreStrongAssign(&self->featurePath_, featurePath);
  JreStrongAssign(&self->step_, step);
}

CCBRPickleStepDefinitionMatch *new_CCBRPickleStepDefinitionMatch_initWithJavaUtilList_withCCBRStepDefinition_withNSString_withGHKPickleStep_(id<JavaUtilList> arguments, id<CCBRStepDefinition> stepDefinition, NSString *featurePath, GHKPickleStep *step) {
  J2OBJC_NEW_IMPL(CCBRPickleStepDefinitionMatch, initWithJavaUtilList_withCCBRStepDefinition_withNSString_withGHKPickleStep_, arguments, stepDefinition, featurePath, step)
}

CCBRPickleStepDefinitionMatch *create_CCBRPickleStepDefinitionMatch_initWithJavaUtilList_withCCBRStepDefinition_withNSString_withGHKPickleStep_(id<JavaUtilList> arguments, id<CCBRStepDefinition> stepDefinition, NSString *featurePath, GHKPickleStep *step) {
  J2OBJC_CREATE_IMPL(CCBRPickleStepDefinitionMatch, initWithJavaUtilList_withCCBRStepDefinition_withNSString_withGHKPickleStep_, arguments, stepDefinition, featurePath, step)
}

CCBRCucumberException *CCBRPickleStepDefinitionMatch_registerTypeInConfigurationWithJavaLangException_(CCBRPickleStepDefinitionMatch *self, JavaLangException *e) {
  return create_CCBRCucumberException_initWithNSString_withJavaLangThrowable_(NSString_java_formatWithNSString_withNSObjectArray_(@"Could not convert arguments for step [%s] defined at '%s'.\nIt appears you did not register a data table type. The details are in the stacktrace below.", [IOSObjectArray arrayWithObjects:(id[]){ [((id<CCBRStepDefinition>) nil_chk(self->stepDefinition_)) getPattern], [self->stepDefinition_ getLocationWithBoolean:true] } count:2 type:NSObject_class_()]), e);
}

CCBRCucumberException *CCBRPickleStepDefinitionMatch_couldNotConvertArgumentsWithJavaLangException_(CCBRPickleStepDefinitionMatch *self, JavaLangException *e) {
  return create_CCBRCucumberException_initWithNSString_withJavaLangThrowable_(NSString_java_formatWithNSString_withNSObjectArray_(@"Could not convert arguments for step [%s] defined at '%s'.\nThe details are in the stacktrace below.", [IOSObjectArray arrayWithObjects:(id[]){ [((id<CCBRStepDefinition>) nil_chk(self->stepDefinition_)) getPattern], [self->stepDefinition_ getLocationWithBoolean:true] } count:2 type:NSObject_class_()]), e);
}

CCBRCucumberException *CCBRPickleStepDefinitionMatch_arityMismatchWithInt_(CCBRPickleStepDefinitionMatch *self, jint parameterCount) {
  id<JavaUtilList> arguments = CCBRPickleStepDefinitionMatch_createArgumentsForErrorMessage(self);
  return create_CCBRCucumberException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Step [%s] is defined with %s parameters at '%s'.\nHowever, the gherkin step has %s arguments%sStep text: %s", [IOSObjectArray arrayWithObjects:(id[]){ [((id<CCBRStepDefinition>) nil_chk(self->stepDefinition_)) getPattern], JavaLangInteger_valueOfWithInt_(parameterCount), [self->stepDefinition_ getLocationWithBoolean:true], JavaLangInteger_valueOfWithInt_([((id<JavaUtilList>) nil_chk(arguments)) size]), CCBRPickleStepDefinitionMatch_formatArgumentsWithJavaUtilList_(self, arguments), [((GHKPickleStep *) nil_chk(self->step_)) getText] } count:6 type:NSObject_class_()]));
}

NSString *CCBRPickleStepDefinitionMatch_formatArgumentsWithJavaUtilList_(CCBRPickleStepDefinitionMatch *self, id<JavaUtilList> arguments) {
  if ([((id<JavaUtilList>) nil_chk(arguments)) isEmpty]) {
    return @".\n";
  }
  JavaLangStringBuilder *formatted = create_JavaLangStringBuilder_initWithNSString_(@":\n");
  for (NSString * __strong argument in arguments) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([formatted appendWithNSString:@" * "])) appendWithNSString:argument])) appendWithNSString:@"\n"];
  }
  return [formatted description];
}

id<JavaUtilList> CCBRPickleStepDefinitionMatch_createArgumentsForErrorMessage(CCBRPickleStepDefinitionMatch *self) {
  id<JavaUtilList> arguments = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk([self getArguments])) size]);
  for (id<IoCucumberStepexpressionArgument> __strong argument in nil_chk([self getArguments])) {
    [arguments addWithId:[((id<IoCucumberStepexpressionArgument>) nil_chk(argument)) description]];
  }
  return arguments;
}

JavaUtilLocale *CCBRPickleStepDefinitionMatch_localeForWithNSString_(CCBRPickleStepDefinitionMatch *self, NSString *language) {
  IOSObjectArray *languageAndCountry = [((NSString *) nil_chk(language)) java_split:@"-"];
  if (((IOSObjectArray *) nil_chk(languageAndCountry))->size_ == 1) {
    return create_JavaUtilLocale_initWithNSString_(language);
  }
  else {
    return create_JavaUtilLocale_initWithNSString_withNSString_(IOSObjectArray_Get(languageAndCountry, 0), IOSObjectArray_Get(languageAndCountry, 1));
  }
}

jint CCBRPickleStepDefinitionMatch_getStepLineWithGHKPickleStep_(GHKPickleStep *step) {
  CCBRPickleStepDefinitionMatch_initialize();
  return [((GHKPickleLocation *) nil_chk([((id<JavaUtilList>) nil_chk([((GHKPickleStep *) nil_chk(step)) getLocations])) getWithInt:[((id<JavaUtilList>) nil_chk([step getLocations])) size] - 1])) getLine];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRPickleStepDefinitionMatch)
