//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/ExitStatus.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "cucumber/api/Result.h"
#include "cucumber/api/event/EventHandler.h"
#include "cucumber/api/event/EventPublisher.h"
#include "cucumber/api/event/TestCaseFinished.h"
#include "cucumber/runtime/ExitStatus.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/List.h"

@interface CCBRExitStatus () {
 @public
  id<JavaUtilList> results_;
  id<CucumberApiEventEventHandler> testCaseFinishedHandler_;
}

@end

J2OBJC_FIELD_SETTER(CCBRExitStatus, results_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CCBRExitStatus, testCaseFinishedHandler_, id<CucumberApiEventEventHandler>)

inline jbyte CCBRExitStatus_get_ERRORS(void);
#define CCBRExitStatus_ERRORS 1
J2OBJC_STATIC_FIELD_CONSTANT(CCBRExitStatus, ERRORS, jbyte)

@interface CCBRExitStatus_1 : NSObject < CucumberApiEventEventHandler > {
 @public
  CCBRExitStatus *this$0_;
}

- (instancetype __nonnull)initWithCCBRExitStatus:(CCBRExitStatus *)outer$;

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestCaseFinished *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRExitStatus_1)

__attribute__((unused)) static void CCBRExitStatus_1_initWithCCBRExitStatus_(CCBRExitStatus_1 *self, CCBRExitStatus *outer$);

__attribute__((unused)) static CCBRExitStatus_1 *new_CCBRExitStatus_1_initWithCCBRExitStatus_(CCBRExitStatus *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CCBRExitStatus_1 *create_CCBRExitStatus_1_initWithCCBRExitStatus_(CCBRExitStatus *outer$);

@implementation CCBRExitStatus

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CCBRExitStatus_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setEventPublisherWithCucumberApiEventEventPublisher:(id<CucumberApiEventEventPublisher>)publisher {
  [((id<CucumberApiEventEventPublisher>) nil_chk(publisher)) registerHandlerForWithIOSClass:CucumberApiEventTestCaseFinished_class_() withCucumberApiEventEventHandler:testCaseFinishedHandler_];
}

- (jbyte)exitStatusWithBoolean:(jboolean)isStrict {
  return [((id<JavaUtilList>) nil_chk(results_)) isEmpty] || [((CucumberApiResult *) nil_chk(JavaUtilCollections_maxWithJavaUtilCollection_withJavaUtilComparator_(results_, JreLoadStatic(CucumberApiResult, SEVERITY)))) isOkWithBoolean:isStrict] ? (jint) 0x0 : CCBRExitStatus_ERRORS;
}

- (void)dealloc {
  RELEASE_(results_);
  RELEASE_(testCaseFinishedHandler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setEventPublisherWithCucumberApiEventEventPublisher:);
  methods[2].selector = @selector(exitStatusWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ERRORS", "B", .constantValue.asChar = CCBRExitStatus_ERRORS, 0x1a, -1, -1, -1, -1 },
    { "results_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 4, -1 },
    { "testCaseFinishedHandler_", "LCucumberApiEventEventHandler;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "setEventPublisher", "LCucumberApiEventEventPublisher;", "exitStatus", "Z", "Ljava/util/List<Lcucumber/api/Result;>;", "Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestCaseFinished;>;" };
  static const J2ObjcClassInfo _CCBRExitStatus = { "ExitStatus", "cucumber.runtime", ptrTable, methods, fields, 7, 0x0, 3, 3, -1, -1, -1, -1, -1 };
  return &_CCBRExitStatus;
}

@end

void CCBRExitStatus_init(CCBRExitStatus *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->results_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->testCaseFinishedHandler_, new_CCBRExitStatus_1_initWithCCBRExitStatus_(self));
}

CCBRExitStatus *new_CCBRExitStatus_init() {
  J2OBJC_NEW_IMPL(CCBRExitStatus, init)
}

CCBRExitStatus *create_CCBRExitStatus_init() {
  J2OBJC_CREATE_IMPL(CCBRExitStatus, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRExitStatus)

@implementation CCBRExitStatus_1

- (instancetype __nonnull)initWithCCBRExitStatus:(CCBRExitStatus *)outer$ {
  CCBRExitStatus_1_initWithCCBRExitStatus_(self, outer$);
  return self;
}

- (void)receiveWithCucumberApiEventEvent:(CucumberApiEventTestCaseFinished *)event {
  [((id<JavaUtilList>) nil_chk(this$0_->results_)) addWithId:((CucumberApiEventTestCaseFinished *) nil_chk(event))->result_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRExitStatus:);
  methods[1].selector = @selector(receiveWithCucumberApiEventEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCCBRExitStatus;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receive", "LCucumberApiEventTestCaseFinished;", "LCCBRExitStatus;", "Ljava/lang/Object;Lcucumber/api/event/EventHandler<Lcucumber/api/event/TestCaseFinished;>;" };
  static const J2ObjcClassInfo _CCBRExitStatus_1 = { "", "cucumber.runtime", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, -1, 3, -1 };
  return &_CCBRExitStatus_1;
}

@end

void CCBRExitStatus_1_initWithCCBRExitStatus_(CCBRExitStatus_1 *self, CCBRExitStatus *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

CCBRExitStatus_1 *new_CCBRExitStatus_1_initWithCCBRExitStatus_(CCBRExitStatus *outer$) {
  J2OBJC_NEW_IMPL(CCBRExitStatus_1, initWithCCBRExitStatus_, outer$)
}

CCBRExitStatus_1 *create_CCBRExitStatus_1_initWithCCBRExitStatus_(CCBRExitStatus *outer$) {
  J2OBJC_CREATE_IMPL(CCBRExitStatus_1, initWithCCBRExitStatus_, outer$)
}
