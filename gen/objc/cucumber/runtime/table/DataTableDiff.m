//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/table/DataTableDiff.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/api/DataTable.h"
#include "cucumber/api/TableConverter.h"
#include "cucumber/runtime/table/DataTableDiff.h"
#include "cucumber/runtime/table/DiffTablePrinter.h"
#include "cucumber/runtime/table/TablePrinter.h"
#include "gherkin/pickles/PickleRow.h"
#include "gherkin/pickles/PickleTable.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/AbstractMap.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface CCBRDataTableDiff () {
 @public
  id<JavaUtilList> diffTypes_;
}

@end

J2OBJC_FIELD_SETTER(CCBRDataTableDiff, diffTypes_, id<JavaUtilList>)

__attribute__((unused)) static void CCBRDataTableDiff_DiffType_initWithNSString_withInt_(CCBRDataTableDiff_DiffType *self, NSString *__name, jint __ordinal);

@implementation CCBRDataTableDiff

+ (CCBRDataTableDiff *)createWithJavaUtilList:(id<JavaUtilList>)diffTableRows
                        withCCBTableConverter:(id<CCBTableConverter>)tableConverter {
  return CCBRDataTableDiff_createWithJavaUtilList_withCCBTableConverter_(diffTableRows, tableConverter);
}

- (instancetype __nonnull)initWithGherkinPicklesPickleTable:(GherkinPicklesPickleTable *)pickleTable
                                           withJavaUtilList:(id<JavaUtilList>)diffTypes
                                      withCCBTableConverter:(id<CCBTableConverter>)tableConverter {
  CCBRDataTableDiff_initWithGherkinPicklesPickleTable_withJavaUtilList_withCCBTableConverter_(self, pickleTable, diffTypes, tableConverter);
  return self;
}

- (CCBRTablePrinter *)createTablePrinter {
  return create_CCBRDiffTablePrinter_initWithJavaUtilList_(diffTypes_);
}

- (void)dealloc {
  RELEASE_(diffTypes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LCCBRDataTableDiff;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, 4, -1, -1 },
    { NULL, "LCCBRTablePrinter;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(createWithJavaUtilList:withCCBTableConverter:);
  methods[1].selector = @selector(initWithGherkinPicklesPickleTable:withJavaUtilList:withCCBTableConverter:);
  methods[2].selector = @selector(createTablePrinter);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "diffTypes_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "create", "LJavaUtilList;LCCBTableConverter;", "(Ljava/util/List<Ljava/util/AbstractMap$SimpleEntry<Lgherkin/pickles/PickleRow;Lcucumber/runtime/table/DataTableDiff$DiffType;>;>;Lcucumber/api/TableConverter;)Lcucumber/runtime/table/DataTableDiff;", "LGherkinPicklesPickleTable;LJavaUtilList;LCCBTableConverter;", "(Lgherkin/pickles/PickleTable;Ljava/util/List<Lcucumber/runtime/table/DataTableDiff$DiffType;>;Lcucumber/api/TableConverter;)V", "Ljava/util/List<Lcucumber/runtime/table/DataTableDiff$DiffType;>;", "LCCBRDataTableDiff_DiffType;" };
  static const J2ObjcClassInfo _CCBRDataTableDiff = { "DataTableDiff", "cucumber.runtime.table", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, 6, -1, -1, -1 };
  return &_CCBRDataTableDiff;
}

@end

CCBRDataTableDiff *CCBRDataTableDiff_createWithJavaUtilList_withCCBTableConverter_(id<JavaUtilList> diffTableRows, id<CCBTableConverter> tableConverter) {
  CCBRDataTableDiff_initialize();
  id<JavaUtilList> rows = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(diffTableRows)) size]);
  id<JavaUtilList> diffTypes = create_JavaUtilArrayList_initWithInt_([diffTableRows size]);
  for (JavaUtilAbstractMap_SimpleEntry * __strong row in diffTableRows) {
    [rows addWithId:[((JavaUtilAbstractMap_SimpleEntry *) nil_chk(row)) getKey]];
    [diffTypes addWithId:[row getValue]];
  }
  return create_CCBRDataTableDiff_initWithGherkinPicklesPickleTable_withJavaUtilList_withCCBTableConverter_(create_GherkinPicklesPickleTable_initWithJavaUtilList_(rows), diffTypes, tableConverter);
}

void CCBRDataTableDiff_initWithGherkinPicklesPickleTable_withJavaUtilList_withCCBTableConverter_(CCBRDataTableDiff *self, GherkinPicklesPickleTable *pickleTable, id<JavaUtilList> diffTypes, id<CCBTableConverter> tableConverter) {
  CCBDataTable_initWithGherkinPicklesPickleTable_withCCBTableConverter_(self, pickleTable, tableConverter);
  JreStrongAssign(&self->diffTypes_, diffTypes);
}

CCBRDataTableDiff *new_CCBRDataTableDiff_initWithGherkinPicklesPickleTable_withJavaUtilList_withCCBTableConverter_(GherkinPicklesPickleTable *pickleTable, id<JavaUtilList> diffTypes, id<CCBTableConverter> tableConverter) {
  J2OBJC_NEW_IMPL(CCBRDataTableDiff, initWithGherkinPicklesPickleTable_withJavaUtilList_withCCBTableConverter_, pickleTable, diffTypes, tableConverter)
}

CCBRDataTableDiff *create_CCBRDataTableDiff_initWithGherkinPicklesPickleTable_withJavaUtilList_withCCBTableConverter_(GherkinPicklesPickleTable *pickleTable, id<JavaUtilList> diffTypes, id<CCBTableConverter> tableConverter) {
  J2OBJC_CREATE_IMPL(CCBRDataTableDiff, initWithGherkinPicklesPickleTable_withJavaUtilList_withCCBTableConverter_, pickleTable, diffTypes, tableConverter)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRDataTableDiff)

J2OBJC_INITIALIZED_DEFN(CCBRDataTableDiff_DiffType)

CCBRDataTableDiff_DiffType *CCBRDataTableDiff_DiffType_values_[3];

@implementation CCBRDataTableDiff_DiffType

+ (IOSObjectArray *)values {
  return CCBRDataTableDiff_DiffType_values();
}

+ (CCBRDataTableDiff_DiffType *)valueOfWithNSString:(NSString *)name {
  return CCBRDataTableDiff_DiffType_valueOfWithNSString_(name);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LCCBRDataTableDiff_DiffType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LCCBRDataTableDiff_DiffType;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NONE", "LCCBRDataTableDiff_DiffType;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "DELETE", "LCCBRDataTableDiff_DiffType;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "INSERT", "LCCBRDataTableDiff_DiffType;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(CCBRDataTableDiff_DiffType, NONE), &JreEnum(CCBRDataTableDiff_DiffType, DELETE), &JreEnum(CCBRDataTableDiff_DiffType, INSERT), "LCCBRDataTableDiff;", "Ljava/lang/Enum<Lcucumber/runtime/table/DataTableDiff$DiffType;>;" };
  static const J2ObjcClassInfo _CCBRDataTableDiff_DiffType = { "DiffType", "cucumber.runtime.table", ptrTable, methods, fields, 7, 0x4019, 2, 3, 5, -1, -1, 6, -1 };
  return &_CCBRDataTableDiff_DiffType;
}

+ (void)initialize {
  if (self == [CCBRDataTableDiff_DiffType class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 3 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 3; i++) {
      ((void)(CCBRDataTableDiff_DiffType_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      CCBRDataTableDiff_DiffType_initWithNSString_withInt_(e, JreEnumConstantName(CCBRDataTableDiff_DiffType_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(CCBRDataTableDiff_DiffType)
  }
}

@end

void CCBRDataTableDiff_DiffType_initWithNSString_withInt_(CCBRDataTableDiff_DiffType *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *CCBRDataTableDiff_DiffType_values() {
  CCBRDataTableDiff_DiffType_initialize();
  return [IOSObjectArray arrayWithObjects:CCBRDataTableDiff_DiffType_values_ count:3 type:CCBRDataTableDiff_DiffType_class_()];
}

CCBRDataTableDiff_DiffType *CCBRDataTableDiff_DiffType_valueOfWithNSString_(NSString *name) {
  CCBRDataTableDiff_DiffType_initialize();
  for (int i = 0; i < 3; i++) {
    CCBRDataTableDiff_DiffType *e = CCBRDataTableDiff_DiffType_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

CCBRDataTableDiff_DiffType *CCBRDataTableDiff_DiffType_fromOrdinal(NSUInteger ordinal) {
  CCBRDataTableDiff_DiffType_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return CCBRDataTableDiff_DiffType_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRDataTableDiff_DiffType)
