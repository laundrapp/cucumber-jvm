//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runtime/table/DiffableRow.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CucumberRuntimeTableDiffableRow")
#ifdef RESTRICT_CucumberRuntimeTableDiffableRow
#define INCLUDE_ALL_CucumberRuntimeTableDiffableRow 0
#else
#define INCLUDE_ALL_CucumberRuntimeTableDiffableRow 1
#endif
#undef RESTRICT_CucumberRuntimeTableDiffableRow

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (CCBRDiffableRow_) && (INCLUDE_ALL_CucumberRuntimeTableDiffableRow || defined(INCLUDE_CCBRDiffableRow))
#define CCBRDiffableRow_

@class GHKPickleRow;
@protocol JavaUtilList;

@interface CCBRDiffableRow : NSObject {
 @public
  GHKPickleRow *row_;
  id<JavaUtilList> convertedRow_;
}

#pragma mark Public

- (instancetype __nonnull)initWithGHKPickleRow:(GHKPickleRow *)row
                              withJavaUtilList:(id<JavaUtilList>)convertedRow;

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(CCBRDiffableRow)

J2OBJC_FIELD_SETTER(CCBRDiffableRow, row_, GHKPickleRow *)
J2OBJC_FIELD_SETTER(CCBRDiffableRow, convertedRow_, id<JavaUtilList>)

FOUNDATION_EXPORT void CCBRDiffableRow_initWithGHKPickleRow_withJavaUtilList_(CCBRDiffableRow *self, GHKPickleRow *row, id<JavaUtilList> convertedRow);

FOUNDATION_EXPORT CCBRDiffableRow *new_CCBRDiffableRow_initWithGHKPickleRow_withJavaUtilList_(GHKPickleRow *row, id<JavaUtilList> convertedRow) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CCBRDiffableRow *create_CCBRDiffableRow_initWithGHKPickleRow_withJavaUtilList_(GHKPickleRow *row, id<JavaUtilList> convertedRow);

J2OBJC_TYPE_LITERAL_HEADER(CCBRDiffableRow)

@compatibility_alias CucumberRuntimeTableDiffableRow CCBRDiffableRow;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_CucumberRuntimeTableDiffableRow")
