//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/laundrapp_org/cucumber-jvm/core/src/main/java/cucumber/runtime/table/TableConverter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CucumberRuntimeTableTableConverter")
#ifdef RESTRICT_CucumberRuntimeTableTableConverter
#define INCLUDE_ALL_CucumberRuntimeTableTableConverter 0
#else
#define INCLUDE_ALL_CucumberRuntimeTableTableConverter 1
#endif
#undef RESTRICT_CucumberRuntimeTableTableConverter

#if !defined (CucumberRuntimeTableTableConverter_) && (INCLUDE_ALL_CucumberRuntimeTableTableConverter || defined(INCLUDE_CucumberRuntimeTableTableConverter))
#define CucumberRuntimeTableTableConverter_

#define RESTRICT_CucumberApiTableConverter 1
#define INCLUDE_CucumberApiTableConverter 1
#include "cucumber/api/TableConverter.h"

@class CucumberApiDataTable;
@class CucumberRuntimeParameterInfo;
@class CucumberRuntimeXstreamLocalizedXStreams_LocalizedXStream;
@class IOSObjectArray;
@protocol JavaLangReflectType;
@protocol JavaUtilList;
@protocol JavaUtilMap;

/*!
 @brief This class converts a <code>cucumber.api.DataTable</code> to various other types.
 */
@interface CucumberRuntimeTableTableConverter : NSObject < CucumberApiTableConverter >

#pragma mark Public

- (instancetype)initWithCucumberRuntimeXstreamLocalizedXStreams_LocalizedXStream:(CucumberRuntimeXstreamLocalizedXStreams_LocalizedXStream *)xStream
                                                withCucumberRuntimeParameterInfo:(CucumberRuntimeParameterInfo *)parameterInfo;

/*!
 @brief This method converts a <code>cucumber.api.DataTable</code> to another type.
 When a Step Definition is passed a Gherkin Data Table, the runtime will use this method to convert the 
 <code>cucumber.api.DataTable</code> to the declared type before invoking the Step Definition. 
 <p>
  This method uses reflection to inspect the type and delegates to the appropriate <code>toXxx</code> method.
 @param dataTable the table to convert
 @param type the type to convert to
 @param transposed whether the table should be transposed first.
 @return the transformed object.
 */
- (id)convertWithCucumberApiDataTable:(CucumberApiDataTable *)dataTable
              withJavaLangReflectType:(id<JavaLangReflectType>)type
                          withBoolean:(jboolean)transposed;

- (id<JavaUtilList>)toListWithCucumberApiDataTable:(CucumberApiDataTable *)dataTable
                           withJavaLangReflectType:(id<JavaLangReflectType>)itemType;

- (id<JavaUtilList>)toListsWithCucumberApiDataTable:(CucumberApiDataTable *)dataTable
                            withJavaLangReflectType:(id<JavaLangReflectType>)itemType;

- (id<JavaUtilMap>)toMapWithCucumberApiDataTable:(CucumberApiDataTable *)dataTable
                         withJavaLangReflectType:(id<JavaLangReflectType>)keyType
                         withJavaLangReflectType:(id<JavaLangReflectType>)valueType;

- (id<JavaUtilList>)toMapsWithCucumberApiDataTable:(CucumberApiDataTable *)dataTable
                           withJavaLangReflectType:(id<JavaLangReflectType>)keyType
                           withJavaLangReflectType:(id<JavaLangReflectType>)valueType;

/*!
 @brief Converts a List of objects to a DataTable.
 @param objects the objects to convert
 @param columnNames an explicit list of column names
 @return a DataTable
 */
- (CucumberApiDataTable *)toTableWithJavaUtilList:(id<JavaUtilList>)objects
                                withNSStringArray:(IOSObjectArray *)columnNames;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(CucumberRuntimeTableTableConverter)

FOUNDATION_EXPORT void CucumberRuntimeTableTableConverter_initWithCucumberRuntimeXstreamLocalizedXStreams_LocalizedXStream_withCucumberRuntimeParameterInfo_(CucumberRuntimeTableTableConverter *self, CucumberRuntimeXstreamLocalizedXStreams_LocalizedXStream *xStream, CucumberRuntimeParameterInfo *parameterInfo);

FOUNDATION_EXPORT CucumberRuntimeTableTableConverter *new_CucumberRuntimeTableTableConverter_initWithCucumberRuntimeXstreamLocalizedXStreams_LocalizedXStream_withCucumberRuntimeParameterInfo_(CucumberRuntimeXstreamLocalizedXStreams_LocalizedXStream *xStream, CucumberRuntimeParameterInfo *parameterInfo) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CucumberRuntimeTableTableConverter *create_CucumberRuntimeTableTableConverter_initWithCucumberRuntimeXstreamLocalizedXStreams_LocalizedXStream_withCucumberRuntimeParameterInfo_(CucumberRuntimeXstreamLocalizedXStreams_LocalizedXStream *xStream, CucumberRuntimeParameterInfo *parameterInfo);

J2OBJC_TYPE_LITERAL_HEADER(CucumberRuntimeTableTableConverter)

#endif

#pragma pop_macro("INCLUDE_ALL_CucumberRuntimeTableTableConverter")
