//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runner/TestStep.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/api/Pending.h"
#include "cucumber/api/Result.h"
#include "cucumber/api/Scenario.h"
#include "cucumber/api/event/TestStepFinished.h"
#include "cucumber/api/event/TestStepStarted.h"
#include "cucumber/runner/EventBus.h"
#include "cucumber/runner/TestStep.h"
#include "cucumber/runtime/AmbiguousStepDefinitionsException.h"
#include "cucumber/runtime/StepDefinitionMatch.h"
#include "cucumber/runtime/UndefinedStepDefinitionException.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/Arrays.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface CCBTestStep () {
 @public
  id<CCBRStepDefinitionMatch> stepDefinitionMatch_;
}

- (CucumberApiResult_Type *)executeStepWithNSString:(NSString *)language
                            withCucumberApiScenario:(id<CucumberApiScenario>)scenario
                                        withBoolean:(jboolean)skipSteps;

- (CucumberApiResult_Type *)mapThrowableToStatusWithJavaLangThrowable:(JavaLangThrowable *)t;

- (CucumberApiResult *)mapStatusToResultWithCucumberApiResult_Type:(CucumberApiResult_Type *)status
                                             withJavaLangThrowable:(JavaLangThrowable *)error
                                                          withLong:(jlong)duration;

@end

J2OBJC_FIELD_SETTER(CCBTestStep, stepDefinitionMatch_, id<CCBRStepDefinitionMatch>)

inline IOSObjectArray *CCBTestStep_get_ASSUMPTION_VIOLATED_EXCEPTIONS(void);
static IOSObjectArray *CCBTestStep_ASSUMPTION_VIOLATED_EXCEPTIONS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CCBTestStep, ASSUMPTION_VIOLATED_EXCEPTIONS, IOSObjectArray *)

__attribute__((unused)) static CucumberApiResult_Type *CCBTestStep_executeStepWithNSString_withCucumberApiScenario_withBoolean_(CCBTestStep *self, NSString *language, id<CucumberApiScenario> scenario, jboolean skipSteps);

__attribute__((unused)) static CucumberApiResult_Type *CCBTestStep_mapThrowableToStatusWithJavaLangThrowable_(CCBTestStep *self, JavaLangThrowable *t);

__attribute__((unused)) static CucumberApiResult *CCBTestStep_mapStatusToResultWithCucumberApiResult_Type_withJavaLangThrowable_withLong_(CCBTestStep *self, CucumberApiResult_Type *status, JavaLangThrowable *error, jlong duration);

J2OBJC_INITIALIZED_DEFN(CCBTestStep)

@implementation CCBTestStep

- (instancetype __nonnull)initWithCCBRStepDefinitionMatch:(id<CCBRStepDefinitionMatch>)stepDefinitionMatch {
  CCBTestStep_initWithCCBRStepDefinitionMatch_(self, stepDefinitionMatch);
  return self;
}

- (NSString *)getCodeLocation {
  return [((id<CCBRStepDefinitionMatch>) nil_chk(stepDefinitionMatch_)) getCodeLocation];
}

- (CucumberApiResult *)runWithCCBEventBus:(CCBEventBus *)bus
                             withNSString:(NSString *)language
                  withCucumberApiScenario:(id<CucumberApiScenario>)scenario
                              withBoolean:(jboolean)skipSteps {
  JavaLangLong *startTime = [((CCBEventBus *) nil_chk(bus)) getTime];
  [bus sendWithCucumberApiEventEvent:create_CucumberApiEventTestStepStarted_initWithJavaLangLong_withCucumberApiTestStep_(startTime, self)];
  CucumberApiResult_Type *status;
  JavaLangThrowable *error = nil;
  @try {
    status = CCBTestStep_executeStepWithNSString_withCucumberApiScenario_withBoolean_(self, language, scenario, skipSteps);
  }
  @catch (JavaLangThrowable *t) {
    error = t;
    status = CCBTestStep_mapThrowableToStatusWithJavaLangThrowable_(self, t);
  }
  JavaLangLong *stopTime = [bus getTime];
  CucumberApiResult *result = CCBTestStep_mapStatusToResultWithCucumberApiResult_Type_withJavaLangThrowable_withLong_(self, status, error, [((JavaLangLong *) nil_chk(stopTime)) longLongValue] - [((JavaLangLong *) nil_chk(startTime)) longLongValue]);
  [bus sendWithCucumberApiEventEvent:create_CucumberApiEventTestStepFinished_initWithJavaLangLong_withCucumberApiTestStep_withCucumberApiResult_(stopTime, self, result)];
  return result;
}

- (CucumberApiResult_Type *)executeStepWithNSString:(NSString *)language
                            withCucumberApiScenario:(id<CucumberApiScenario>)scenario
                                        withBoolean:(jboolean)skipSteps {
  return CCBTestStep_executeStepWithNSString_withCucumberApiScenario_withBoolean_(self, language, scenario, skipSteps);
}

- (CucumberApiResult_Type *)mapThrowableToStatusWithJavaLangThrowable:(JavaLangThrowable *)t {
  return CCBTestStep_mapThrowableToStatusWithJavaLangThrowable_(self, t);
}

- (CucumberApiResult *)mapStatusToResultWithCucumberApiResult_Type:(CucumberApiResult_Type *)status
                                             withJavaLangThrowable:(JavaLangThrowable *)error
                                                          withLong:(jlong)duration {
  return CCBTestStep_mapStatusToResultWithCucumberApiResult_Type_withJavaLangThrowable_withLong_(self, status, error, duration);
}

- (void)dealloc {
  RELEASE_(stepDefinitionMatch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LCucumberApiResult;", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "LCucumberApiResult_Type;", 0x2, 3, 4, 5, -1, -1, -1 },
    { NULL, "LCucumberApiResult_Type;", 0x2, 6, 5, -1, -1, -1, -1 },
    { NULL, "LCucumberApiResult;", 0x2, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRStepDefinitionMatch:);
  methods[1].selector = @selector(getCodeLocation);
  methods[2].selector = @selector(runWithCCBEventBus:withNSString:withCucumberApiScenario:withBoolean:);
  methods[3].selector = @selector(executeStepWithNSString:withCucumberApiScenario:withBoolean:);
  methods[4].selector = @selector(mapThrowableToStatusWithJavaLangThrowable:);
  methods[5].selector = @selector(mapStatusToResultWithCucumberApiResult_Type:withJavaLangThrowable:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ASSUMPTION_VIOLATED_EXCEPTIONS", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "stepDefinitionMatch_", "LCCBRStepDefinitionMatch;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LCCBRStepDefinitionMatch;", "run", "LCCBEventBus;LNSString;LCucumberApiScenario;Z", "executeStep", "LNSString;LCucumberApiScenario;Z", "LJavaLangThrowable;", "mapThrowableToStatus", "mapStatusToResult", "LCucumberApiResult_Type;LJavaLangThrowable;J", &CCBTestStep_ASSUMPTION_VIOLATED_EXCEPTIONS };
  static const J2ObjcClassInfo _CCBTestStep = { "TestStep", "cucumber.runner", ptrTable, methods, fields, 7, 0x400, 6, 2, -1, -1, -1, -1, -1 };
  return &_CCBTestStep;
}

+ (void)initialize {
  if (self == [CCBTestStep class]) {
    JreStrongAssignAndConsume(&CCBTestStep_ASSUMPTION_VIOLATED_EXCEPTIONS, [IOSObjectArray newArrayWithObjects:(id[]){ @"org.junit.AssumptionViolatedException", @"org.junit.internal.AssumptionViolatedException", @"org.testng.SkipException" } count:3 type:NSString_class_()]);
    {
      JavaUtilArrays_sortWithNSObjectArray_(CCBTestStep_ASSUMPTION_VIOLATED_EXCEPTIONS);
    }
    J2OBJC_SET_INITIALIZED(CCBTestStep)
  }
}

@end

void CCBTestStep_initWithCCBRStepDefinitionMatch_(CCBTestStep *self, id<CCBRStepDefinitionMatch> stepDefinitionMatch) {
  NSObject_init(self);
  JreStrongAssign(&self->stepDefinitionMatch_, stepDefinitionMatch);
}

CucumberApiResult_Type *CCBTestStep_executeStepWithNSString_withCucumberApiScenario_withBoolean_(CCBTestStep *self, NSString *language, id<CucumberApiScenario> scenario, jboolean skipSteps) {
  if (!skipSteps) {
    [((id<CCBRStepDefinitionMatch>) nil_chk(self->stepDefinitionMatch_)) runStepWithNSString:language withCucumberApiScenario:scenario];
    return JreLoadEnum(CucumberApiResult_Type, PASSED);
  }
  else {
    [((id<CCBRStepDefinitionMatch>) nil_chk(self->stepDefinitionMatch_)) dryRunStepWithNSString:language withCucumberApiScenario:scenario];
    return JreLoadEnum(CucumberApiResult_Type, SKIPPED);
  }
}

CucumberApiResult_Type *CCBTestStep_mapThrowableToStatusWithJavaLangThrowable_(CCBTestStep *self, JavaLangThrowable *t) {
  if ([[((JavaLangThrowable *) nil_chk(t)) java_getClass] isAnnotationPresentWithIOSClass:CucumberApiPending_class_()]) {
    return JreLoadEnum(CucumberApiResult_Type, PENDING);
  }
  if (JavaUtilArrays_binarySearchWithNSObjectArray_withId_(CCBTestStep_ASSUMPTION_VIOLATED_EXCEPTIONS, [[t java_getClass] getName]) >= 0) {
    return JreLoadEnum(CucumberApiResult_Type, SKIPPED);
  }
  if ([t java_getClass] == CCBRUndefinedStepDefinitionException_class_()) {
    return JreLoadEnum(CucumberApiResult_Type, UNDEFINED);
  }
  if ([t java_getClass] == CCBRAmbiguousStepDefinitionsException_class_()) {
    return JreLoadEnum(CucumberApiResult_Type, AMBIGUOUS);
  }
  return JreLoadEnum(CucumberApiResult_Type, FAILED);
}

CucumberApiResult *CCBTestStep_mapStatusToResultWithCucumberApiResult_Type_withJavaLangThrowable_withLong_(CCBTestStep *self, CucumberApiResult_Type *status, JavaLangThrowable *error, jlong duration) {
  JavaLangLong *resultDuration = JavaLangLong_valueOfWithLong_(duration);
  if (status == JreLoadEnum(CucumberApiResult_Type, SKIPPED) && error == nil) {
    return JreLoadStatic(CucumberApiResult, SKIPPED);
  }
  if (status == JreLoadEnum(CucumberApiResult_Type, UNDEFINED)) {
    return JreLoadStatic(CucumberApiResult, UNDEFINED);
  }
  return create_CucumberApiResult_initWithCucumberApiResult_Type_withJavaLangLong_withJavaLangThrowable_(status, resultDuration, error);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBTestStep)
