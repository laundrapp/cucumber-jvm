//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runner/EventBus.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "cucumber/api/event/Event.h"
#include "cucumber/api/event/EventHandler.h"
#include "cucumber/runner/EventBus.h"
#include "cucumber/runner/TimeService.h"
#include "java/lang/Long.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@interface CCBEventBus () {
 @public
  id<CCBTimeService> stopWatch_;
  id<JavaUtilMap> handlers_;
}

@end

J2OBJC_FIELD_SETTER(CCBEventBus, stopWatch_, id<CCBTimeService>)
J2OBJC_FIELD_SETTER(CCBEventBus, handlers_, id<JavaUtilMap>)

@implementation CCBEventBus

- (instancetype __nonnull)initWithCCBTimeService:(id<CCBTimeService>)stopWatch {
  CCBEventBus_initWithCCBTimeService_(self, stopWatch);
  return self;
}

- (JavaLangLong *)getTime {
  return JavaLangLong_valueOfWithLong_([((id<CCBTimeService>) nil_chk(stopWatch_)) time]);
}

- (void)sendWithCucumberApiEventEvent:(id<CucumberApiEventEvent>)event {
  if ([((id<JavaUtilMap>) nil_chk(handlers_)) containsKeyWithId:[((id<CucumberApiEventEvent>) nil_chk(event)) java_getClass]]) {
    for (id<CucumberApiEventEventHandler> __strong handler in nil_chk([((id<JavaUtilMap>) nil_chk(handlers_)) getWithId:[event java_getClass]])) {
      [((id<CucumberApiEventEventHandler>) nil_chk(handler)) receiveWithCucumberApiEventEvent:event];
    }
  }
}

- (void)registerHandlerForWithIOSClass:(IOSClass *)eventType
      withCucumberApiEventEventHandler:(id<CucumberApiEventEventHandler>)handler {
  if ([((id<JavaUtilMap>) nil_chk(handlers_)) containsKeyWithId:eventType]) {
    [((id<JavaUtilList>) nil_chk([((id<JavaUtilMap>) nil_chk(handlers_)) getWithId:eventType])) addWithId:handler];
  }
  else {
    id<JavaUtilList> list = create_JavaUtilArrayList_init();
    [list addWithId:handler];
    [((id<JavaUtilMap>) nil_chk(handlers_)) putWithId:eventType withId:list];
  }
}

- (void)dealloc {
  RELEASE_(stopWatch_);
  RELEASE_(handlers_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBTimeService:);
  methods[1].selector = @selector(getTime);
  methods[2].selector = @selector(sendWithCucumberApiEventEvent:);
  methods[3].selector = @selector(registerHandlerForWithIOSClass:withCucumberApiEventEventHandler:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "stopWatch_", "LCCBTimeService;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "handlers_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LCCBTimeService;", "send", "LCucumberApiEventEvent;", "registerHandlerFor", "LIOSClass;LCucumberApiEventEventHandler;", "<T::Lcucumber/api/event/Event;>(Ljava/lang/Class<TT;>;Lcucumber/api/event/EventHandler<TT;>;)V", "Ljava/util/Map<Ljava/lang/Class<+Lcucumber/api/event/Event;>;Ljava/util/List<Lcucumber/api/event/EventHandler;>;>;" };
  static const J2ObjcClassInfo _CCBEventBus = { "EventBus", "cucumber.runner", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_CCBEventBus;
}

@end

void CCBEventBus_initWithCCBTimeService_(CCBEventBus *self, id<CCBTimeService> stopWatch) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->handlers_, new_JavaUtilHashMap_init());
  JreStrongAssign(&self->stopWatch_, stopWatch);
}

CCBEventBus *new_CCBEventBus_initWithCCBTimeService_(id<CCBTimeService> stopWatch) {
  J2OBJC_NEW_IMPL(CCBEventBus, initWithCCBTimeService_, stopWatch)
}

CCBEventBus *create_CCBEventBus_initWithCCBTimeService_(id<CCBTimeService> stopWatch) {
  J2OBJC_CREATE_IMPL(CCBEventBus, initWithCCBTimeService_, stopWatch)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBEventBus)
