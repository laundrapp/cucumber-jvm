//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runner/PickleStepTestStep.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/api/HookType.h"
#include "cucumber/api/Result.h"
#include "cucumber/api/Scenario.h"
#include "cucumber/runner/EventBus.h"
#include "cucumber/runner/HookTestStep.h"
#include "cucumber/runner/PickleStepTestStep.h"
#include "cucumber/runner/TestStep.h"
#include "cucumber/runtime/DefinitionArgument.h"
#include "cucumber/runtime/PickleStepDefinitionMatch.h"
#include "gherkin/pickles/PickleLocation.h"
#include "gherkin/pickles/PickleStep.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/List.h"

@interface CCBPickleStepTestStep () {
 @public
  NSString *uri_;
  GHKPickleStep *step_;
  id<JavaUtilList> afterStepHookSteps_;
  id<JavaUtilList> beforeStepHookSteps_;
  CCBRPickleStepDefinitionMatch *definitionMatch_;
}

@end

J2OBJC_FIELD_SETTER(CCBPickleStepTestStep, uri_, NSString *)
J2OBJC_FIELD_SETTER(CCBPickleStepTestStep, step_, GHKPickleStep *)
J2OBJC_FIELD_SETTER(CCBPickleStepTestStep, afterStepHookSteps_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CCBPickleStepTestStep, beforeStepHookSteps_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CCBPickleStepTestStep, definitionMatch_, CCBRPickleStepDefinitionMatch *)

__attribute__((unused)) static IOSObjectArray *CCBPickleStepTestStep__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *CCBPickleStepTestStep__Annotations$1(void);

@implementation CCBPickleStepTestStep

- (instancetype __nonnull)initWithNSString:(NSString *)uri
                         withGHKPickleStep:(GHKPickleStep *)step
         withCCBRPickleStepDefinitionMatch:(CCBRPickleStepDefinitionMatch *)definitionMatch {
  CCBPickleStepTestStep_initWithNSString_withGHKPickleStep_withCCBRPickleStepDefinitionMatch_(self, uri, step, definitionMatch);
  return self;
}

- (instancetype __nonnull)initWithNSString:(NSString *)uri
                         withGHKPickleStep:(GHKPickleStep *)step
                          withJavaUtilList:(id<JavaUtilList>)beforeStepHookSteps
                          withJavaUtilList:(id<JavaUtilList>)afterStepHookSteps
         withCCBRPickleStepDefinitionMatch:(CCBRPickleStepDefinitionMatch *)definitionMatch {
  CCBPickleStepTestStep_initWithNSString_withGHKPickleStep_withJavaUtilList_withJavaUtilList_withCCBRPickleStepDefinitionMatch_(self, uri, step, beforeStepHookSteps, afterStepHookSteps, definitionMatch);
  return self;
}

- (CucumberApiResult *)runWithCCBEventBus:(CCBEventBus *)bus
                             withNSString:(NSString *)language
                  withCucumberApiScenario:(id<CucumberApiScenario>)scenario
                              withBoolean:(jboolean)skipSteps {
  jboolean skipNextStep = skipSteps;
  id<JavaUtilList> results = create_JavaUtilArrayList_init();
  for (CCBHookTestStep * __strong before in nil_chk(beforeStepHookSteps_)) {
    CucumberApiResult *result = [((CCBHookTestStep *) nil_chk(before)) runWithCCBEventBus:bus withNSString:language withCucumberApiScenario:scenario withBoolean:skipSteps];
    skipNextStep |= ![((CucumberApiResult *) nil_chk(result)) isWithCucumberApiResult_Type:JreLoadEnum(CucumberApiResult_Type, PASSED)];
    [results addWithId:result];
  }
  [results addWithId:[super runWithCCBEventBus:bus withNSString:language withCucumberApiScenario:scenario withBoolean:skipNextStep]];
  for (CCBHookTestStep * __strong after in nil_chk(afterStepHookSteps_)) {
    [results addWithId:[((CCBHookTestStep *) nil_chk(after)) runWithCCBEventBus:bus withNSString:language withCucumberApiScenario:scenario withBoolean:skipSteps]];
  }
  return JavaUtilCollections_maxWithJavaUtilCollection_withJavaUtilComparator_(results, JreLoadStatic(CucumberApiResult, SEVERITY));
}

- (id<JavaUtilList>)getBeforeStepHookSteps {
  return beforeStepHookSteps_;
}

- (id<JavaUtilList>)getAfterStepHookSteps {
  return afterStepHookSteps_;
}

- (GHKPickleStep *)getPickleStep {
  return step_;
}

- (NSString *)getStepLocation {
  return JreStrcat("$C$", uri_, ':', JavaLangInteger_toStringWithInt_([self getStepLine]));
}

- (jint)getStepLine {
  return [((GHKPickleLocation *) nil_chk([((id<JavaUtilList>) nil_chk([((GHKPickleStep *) nil_chk(step_)) getLocations])) getWithInt:[((id<JavaUtilList>) nil_chk([step_ getLocations])) size] - 1])) getLine];
}

- (NSString *)getStepText {
  return [((GHKPickleStep *) nil_chk(step_)) getText];
}

- (id<JavaUtilList>)getDefinitionArgument {
  return CCBRDefinitionArgument_createArgumentsWithJavaUtilList_([((CCBRPickleStepDefinitionMatch *) nil_chk(definitionMatch_)) getArguments]);
}

- (id<JavaUtilList>)getStepArgument {
  return [((GHKPickleStep *) nil_chk(step_)) getArgument];
}

- (CucumberApiHookType *)getHookType {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)isHook {
  return false;
}

- (NSString *)getPattern {
  return [((CCBRPickleStepDefinitionMatch *) nil_chk(definitionMatch_)) getPattern];
}

- (void)dealloc {
  RELEASE_(uri_);
  RELEASE_(step_);
  RELEASE_(afterStepHookSteps_);
  RELEASE_(beforeStepHookSteps_);
  RELEASE_(definitionMatch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
    { NULL, "LCucumberApiResult;", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, -1, -1, -1, 5, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, -1, -1, -1, 5, -1, -1 },
    { NULL, "LGHKPickleStep;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 7, -1, -1 },
    { NULL, "LCucumberApiHookType;", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withGHKPickleStep:withCCBRPickleStepDefinitionMatch:);
  methods[1].selector = @selector(initWithNSString:withGHKPickleStep:withJavaUtilList:withJavaUtilList:withCCBRPickleStepDefinitionMatch:);
  methods[2].selector = @selector(runWithCCBEventBus:withNSString:withCucumberApiScenario:withBoolean:);
  methods[3].selector = @selector(getBeforeStepHookSteps);
  methods[4].selector = @selector(getAfterStepHookSteps);
  methods[5].selector = @selector(getPickleStep);
  methods[6].selector = @selector(getStepLocation);
  methods[7].selector = @selector(getStepLine);
  methods[8].selector = @selector(getStepText);
  methods[9].selector = @selector(getDefinitionArgument);
  methods[10].selector = @selector(getStepArgument);
  methods[11].selector = @selector(getHookType);
  methods[12].selector = @selector(isHook);
  methods[13].selector = @selector(getPattern);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "uri_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "step_", "LGHKPickleStep;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "afterStepHookSteps_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "beforeStepHookSteps_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "definitionMatch_", "LCCBRPickleStepDefinitionMatch;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LGHKPickleStep;LCCBRPickleStepDefinitionMatch;", "LNSString;LGHKPickleStep;LJavaUtilList;LJavaUtilList;LCCBRPickleStepDefinitionMatch;", "(Ljava/lang/String;Lgherkin/pickles/PickleStep;Ljava/util/List<Lcucumber/runner/HookTestStep;>;Ljava/util/List<Lcucumber/runner/HookTestStep;>;Lcucumber/runtime/PickleStepDefinitionMatch;)V", "run", "LCCBEventBus;LNSString;LCucumberApiScenario;Z", "()Ljava/util/List<Lcucumber/runner/HookTestStep;>;", "()Ljava/util/List<Lcucumber/api/Argument;>;", "()Ljava/util/List<Lgherkin/pickles/Argument;>;", (void *)&CCBPickleStepTestStep__Annotations$0, (void *)&CCBPickleStepTestStep__Annotations$1, "Ljava/util/List<Lcucumber/runner/HookTestStep;>;" };
  static const J2ObjcClassInfo _CCBPickleStepTestStep = { "PickleStepTestStep", "cucumber.runner", ptrTable, methods, fields, 7, 0x0, 14, 5, -1, -1, -1, -1, -1 };
  return &_CCBPickleStepTestStep;
}

@end

void CCBPickleStepTestStep_initWithNSString_withGHKPickleStep_withCCBRPickleStepDefinitionMatch_(CCBPickleStepTestStep *self, NSString *uri, GHKPickleStep *step, CCBRPickleStepDefinitionMatch *definitionMatch) {
  CCBPickleStepTestStep_initWithNSString_withGHKPickleStep_withJavaUtilList_withJavaUtilList_withCCBRPickleStepDefinitionMatch_(self, uri, step, JavaUtilCollections_emptyList(), JavaUtilCollections_emptyList(), definitionMatch);
}

CCBPickleStepTestStep *new_CCBPickleStepTestStep_initWithNSString_withGHKPickleStep_withCCBRPickleStepDefinitionMatch_(NSString *uri, GHKPickleStep *step, CCBRPickleStepDefinitionMatch *definitionMatch) {
  J2OBJC_NEW_IMPL(CCBPickleStepTestStep, initWithNSString_withGHKPickleStep_withCCBRPickleStepDefinitionMatch_, uri, step, definitionMatch)
}

CCBPickleStepTestStep *create_CCBPickleStepTestStep_initWithNSString_withGHKPickleStep_withCCBRPickleStepDefinitionMatch_(NSString *uri, GHKPickleStep *step, CCBRPickleStepDefinitionMatch *definitionMatch) {
  J2OBJC_CREATE_IMPL(CCBPickleStepTestStep, initWithNSString_withGHKPickleStep_withCCBRPickleStepDefinitionMatch_, uri, step, definitionMatch)
}

void CCBPickleStepTestStep_initWithNSString_withGHKPickleStep_withJavaUtilList_withJavaUtilList_withCCBRPickleStepDefinitionMatch_(CCBPickleStepTestStep *self, NSString *uri, GHKPickleStep *step, id<JavaUtilList> beforeStepHookSteps, id<JavaUtilList> afterStepHookSteps, CCBRPickleStepDefinitionMatch *definitionMatch) {
  CCBTestStep_initWithCCBRStepDefinitionMatch_(self, definitionMatch);
  JreStrongAssign(&self->uri_, uri);
  JreStrongAssign(&self->step_, step);
  JreStrongAssign(&self->afterStepHookSteps_, afterStepHookSteps);
  JreStrongAssign(&self->beforeStepHookSteps_, beforeStepHookSteps);
  JreStrongAssign(&self->definitionMatch_, definitionMatch);
}

CCBPickleStepTestStep *new_CCBPickleStepTestStep_initWithNSString_withGHKPickleStep_withJavaUtilList_withJavaUtilList_withCCBRPickleStepDefinitionMatch_(NSString *uri, GHKPickleStep *step, id<JavaUtilList> beforeStepHookSteps, id<JavaUtilList> afterStepHookSteps, CCBRPickleStepDefinitionMatch *definitionMatch) {
  J2OBJC_NEW_IMPL(CCBPickleStepTestStep, initWithNSString_withGHKPickleStep_withJavaUtilList_withJavaUtilList_withCCBRPickleStepDefinitionMatch_, uri, step, beforeStepHookSteps, afterStepHookSteps, definitionMatch)
}

CCBPickleStepTestStep *create_CCBPickleStepTestStep_initWithNSString_withGHKPickleStep_withJavaUtilList_withJavaUtilList_withCCBRPickleStepDefinitionMatch_(NSString *uri, GHKPickleStep *step, id<JavaUtilList> beforeStepHookSteps, id<JavaUtilList> afterStepHookSteps, CCBRPickleStepDefinitionMatch *definitionMatch) {
  J2OBJC_CREATE_IMPL(CCBPickleStepTestStep, initWithNSString_withGHKPickleStep_withJavaUtilList_withJavaUtilList_withCCBRPickleStepDefinitionMatch_, uri, step, beforeStepHookSteps, afterStepHookSteps, definitionMatch)
}

IOSObjectArray *CCBPickleStepTestStep__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CCBPickleStepTestStep__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBPickleStepTestStep)
