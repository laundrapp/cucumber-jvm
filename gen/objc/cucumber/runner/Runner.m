//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runner/Runner.java
//

#include "J2ObjC_source.h"
#include "cucumber/api/HookType.h"
#include "cucumber/api/SnippetType.h"
#include "cucumber/api/StepDefinitionReporter.h"
#include "cucumber/api/event/SnippetsSuggestedEvent.h"
#include "cucumber/runner/EventBus.h"
#include "cucumber/runner/HookTestStep.h"
#include "cucumber/runner/PickleStepTestStep.h"
#include "cucumber/runner/Runner.h"
#include "cucumber/runner/TestCase.h"
#include "cucumber/runtime/AmbiguousPickleStepDefinitionsMatch.h"
#include "cucumber/runtime/AmbiguousStepDefinitionsException.h"
#include "cucumber/runtime/Backend.h"
#include "cucumber/runtime/FailedPickleStepInstantiationMatch.h"
#include "cucumber/runtime/Glue.h"
#include "cucumber/runtime/HookDefinition.h"
#include "cucumber/runtime/HookDefinitionMatch.h"
#include "cucumber/runtime/PickleStepDefinitionMatch.h"
#include "cucumber/runtime/RuntimeOptions.h"
#include "cucumber/runtime/UndefinedPickleStepDefinitionMatch.h"
#include "cucumber/runtime/snippets/FunctionNameGenerator.h"
#include "gherkin/events/PickleEvent.h"
#include "gherkin/pickles/Pickle.h"
#include "gherkin/pickles/PickleStep.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/List.h"

@interface CCBRunner () {
 @public
  id<CCBRGlue> glue_;
  CCBEventBus *bus_;
  id<JavaUtilCollection> backends_;
  CCBRRuntimeOptions *runtimeOptions_;
}

- (CCBTestCase *)createTestCaseForPickleWithGHKPickleEvent:(GHKPickleEvent *)pickleEvent;

- (void)addTestStepsForPickleStepsWithJavaUtilList:(id<JavaUtilList>)testSteps
                                withGHKPickleEvent:(GHKPickleEvent *)pickleEvent;

- (void)addTestStepsForBeforeHooksWithJavaUtilList:(id<JavaUtilList>)testSteps
                                  withJavaUtilList:(id<JavaUtilList>)tags;

- (void)addTestStepsForAfterHooksWithJavaUtilList:(id<JavaUtilList>)testSteps
                                 withJavaUtilList:(id<JavaUtilList>)tags;

- (void)addTestStepsForHooksWithJavaUtilList:(id<JavaUtilList>)testSteps
                            withJavaUtilList:(id<JavaUtilList>)tags
                            withJavaUtilList:(id<JavaUtilList>)hooks
                     withCucumberApiHookType:(CucumberApiHookType *)hookType;

- (id<JavaUtilList>)getAfterStepHooksWithJavaUtilList:(id<JavaUtilList>)tags;

- (id<JavaUtilList>)getBeforeStepHooksWithJavaUtilList:(id<JavaUtilList>)tags;

- (void)buildBackendWorlds;

- (void)disposeBackendWorlds;

@end

J2OBJC_FIELD_SETTER(CCBRunner, glue_, id<CCBRGlue>)
J2OBJC_FIELD_SETTER(CCBRunner, bus_, CCBEventBus *)
J2OBJC_FIELD_SETTER(CCBRunner, backends_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(CCBRunner, runtimeOptions_, CCBRRuntimeOptions *)

__attribute__((unused)) static CCBTestCase *CCBRunner_createTestCaseForPickleWithGHKPickleEvent_(CCBRunner *self, GHKPickleEvent *pickleEvent);

__attribute__((unused)) static void CCBRunner_addTestStepsForPickleStepsWithJavaUtilList_withGHKPickleEvent_(CCBRunner *self, id<JavaUtilList> testSteps, GHKPickleEvent *pickleEvent);

__attribute__((unused)) static void CCBRunner_addTestStepsForBeforeHooksWithJavaUtilList_withJavaUtilList_(CCBRunner *self, id<JavaUtilList> testSteps, id<JavaUtilList> tags);

__attribute__((unused)) static void CCBRunner_addTestStepsForAfterHooksWithJavaUtilList_withJavaUtilList_(CCBRunner *self, id<JavaUtilList> testSteps, id<JavaUtilList> tags);

__attribute__((unused)) static void CCBRunner_addTestStepsForHooksWithJavaUtilList_withJavaUtilList_withJavaUtilList_withCucumberApiHookType_(CCBRunner *self, id<JavaUtilList> testSteps, id<JavaUtilList> tags, id<JavaUtilList> hooks, CucumberApiHookType *hookType);

__attribute__((unused)) static id<JavaUtilList> CCBRunner_getAfterStepHooksWithJavaUtilList_(CCBRunner *self, id<JavaUtilList> tags);

__attribute__((unused)) static id<JavaUtilList> CCBRunner_getBeforeStepHooksWithJavaUtilList_(CCBRunner *self, id<JavaUtilList> tags);

__attribute__((unused)) static void CCBRunner_buildBackendWorlds(CCBRunner *self);

__attribute__((unused)) static void CCBRunner_disposeBackendWorlds(CCBRunner *self);

@implementation CCBRunner

- (instancetype __nonnull)initWithCCBRGlue:(id<CCBRGlue>)glue
                           withCCBEventBus:(CCBEventBus *)bus
                    withJavaUtilCollection:(id<JavaUtilCollection>)backends
                    withCCBRRuntimeOptions:(CCBRRuntimeOptions *)runtimeOptions {
  CCBRunner_initWithCCBRGlue_withCCBEventBus_withJavaUtilCollection_withCCBRRuntimeOptions_(self, glue, bus, backends, runtimeOptions);
  return self;
}

- (void)runPickleWithGHKPickleEvent:(GHKPickleEvent *)pickle {
  CCBRunner_buildBackendWorlds(self);
  CCBTestCase *testCase = CCBRunner_createTestCaseForPickleWithGHKPickleEvent_(self, pickle);
  [((CCBTestCase *) nil_chk(testCase)) runWithCCBEventBus:bus_];
  CCBRunner_disposeBackendWorlds(self);
}

- (id<CCBRGlue>)getGlue {
  return glue_;
}

- (void)reportStepDefinitionsWithCucumberApiStepDefinitionReporter:(id<CucumberApiStepDefinitionReporter>)stepDefinitionReporter {
  [((id<CCBRGlue>) nil_chk(glue_)) reportStepDefinitionsWithCucumberApiStepDefinitionReporter:stepDefinitionReporter];
}

- (CCBTestCase *)createTestCaseForPickleWithGHKPickleEvent:(GHKPickleEvent *)pickleEvent {
  return CCBRunner_createTestCaseForPickleWithGHKPickleEvent_(self, pickleEvent);
}

- (void)addTestStepsForPickleStepsWithJavaUtilList:(id<JavaUtilList>)testSteps
                                withGHKPickleEvent:(GHKPickleEvent *)pickleEvent {
  CCBRunner_addTestStepsForPickleStepsWithJavaUtilList_withGHKPickleEvent_(self, testSteps, pickleEvent);
}

- (void)addTestStepsForBeforeHooksWithJavaUtilList:(id<JavaUtilList>)testSteps
                                  withJavaUtilList:(id<JavaUtilList>)tags {
  CCBRunner_addTestStepsForBeforeHooksWithJavaUtilList_withJavaUtilList_(self, testSteps, tags);
}

- (void)addTestStepsForAfterHooksWithJavaUtilList:(id<JavaUtilList>)testSteps
                                 withJavaUtilList:(id<JavaUtilList>)tags {
  CCBRunner_addTestStepsForAfterHooksWithJavaUtilList_withJavaUtilList_(self, testSteps, tags);
}

- (void)addTestStepsForHooksWithJavaUtilList:(id<JavaUtilList>)testSteps
                            withJavaUtilList:(id<JavaUtilList>)tags
                            withJavaUtilList:(id<JavaUtilList>)hooks
                     withCucumberApiHookType:(CucumberApiHookType *)hookType {
  CCBRunner_addTestStepsForHooksWithJavaUtilList_withJavaUtilList_withJavaUtilList_withCucumberApiHookType_(self, testSteps, tags, hooks, hookType);
}

- (id<JavaUtilList>)getAfterStepHooksWithJavaUtilList:(id<JavaUtilList>)tags {
  return CCBRunner_getAfterStepHooksWithJavaUtilList_(self, tags);
}

- (id<JavaUtilList>)getBeforeStepHooksWithJavaUtilList:(id<JavaUtilList>)tags {
  return CCBRunner_getBeforeStepHooksWithJavaUtilList_(self, tags);
}

- (void)buildBackendWorlds {
  CCBRunner_buildBackendWorlds(self);
}

- (void)disposeBackendWorlds {
  CCBRunner_disposeBackendWorlds(self);
}

- (void)dealloc {
  RELEASE_(glue_);
  RELEASE_(bus_);
  RELEASE_(backends_);
  RELEASE_(runtimeOptions_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LCCBRGlue;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LCCBTestCase;", 0x2, 6, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, 12, -1, -1 },
    { NULL, "V", 0x2, 13, 11, -1, 12, -1, -1 },
    { NULL, "V", 0x2, 14, 15, -1, 16, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 17, 18, -1, 19, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 20, 18, -1, 19, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCCBRGlue:withCCBEventBus:withJavaUtilCollection:withCCBRRuntimeOptions:);
  methods[1].selector = @selector(runPickleWithGHKPickleEvent:);
  methods[2].selector = @selector(getGlue);
  methods[3].selector = @selector(reportStepDefinitionsWithCucumberApiStepDefinitionReporter:);
  methods[4].selector = @selector(createTestCaseForPickleWithGHKPickleEvent:);
  methods[5].selector = @selector(addTestStepsForPickleStepsWithJavaUtilList:withGHKPickleEvent:);
  methods[6].selector = @selector(addTestStepsForBeforeHooksWithJavaUtilList:withJavaUtilList:);
  methods[7].selector = @selector(addTestStepsForAfterHooksWithJavaUtilList:withJavaUtilList:);
  methods[8].selector = @selector(addTestStepsForHooksWithJavaUtilList:withJavaUtilList:withJavaUtilList:withCucumberApiHookType:);
  methods[9].selector = @selector(getAfterStepHooksWithJavaUtilList:);
  methods[10].selector = @selector(getBeforeStepHooksWithJavaUtilList:);
  methods[11].selector = @selector(buildBackendWorlds);
  methods[12].selector = @selector(disposeBackendWorlds);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "glue_", "LCCBRGlue;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bus_", "LCCBEventBus;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "backends_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x12, -1, -1, 21, -1 },
    { "runtimeOptions_", "LCCBRRuntimeOptions;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LCCBRGlue;LCCBEventBus;LJavaUtilCollection;LCCBRRuntimeOptions;", "(Lcucumber/runtime/Glue;Lcucumber/runner/EventBus;Ljava/util/Collection<+Lcucumber/runtime/Backend;>;Lcucumber/runtime/RuntimeOptions;)V", "runPickle", "LGHKPickleEvent;", "reportStepDefinitions", "LCucumberApiStepDefinitionReporter;", "createTestCaseForPickle", "addTestStepsForPickleSteps", "LJavaUtilList;LGHKPickleEvent;", "(Ljava/util/List<Lcucumber/runner/PickleStepTestStep;>;Lgherkin/events/PickleEvent;)V", "addTestStepsForBeforeHooks", "LJavaUtilList;LJavaUtilList;", "(Ljava/util/List<Lcucumber/runner/HookTestStep;>;Ljava/util/List<Lgherkin/pickles/PickleTag;>;)V", "addTestStepsForAfterHooks", "addTestStepsForHooks", "LJavaUtilList;LJavaUtilList;LJavaUtilList;LCucumberApiHookType;", "(Ljava/util/List<Lcucumber/runner/HookTestStep;>;Ljava/util/List<Lgherkin/pickles/PickleTag;>;Ljava/util/List<Lcucumber/runtime/HookDefinition;>;Lcucumber/api/HookType;)V", "getAfterStepHooks", "LJavaUtilList;", "(Ljava/util/List<Lgherkin/pickles/PickleTag;>;)Ljava/util/List<Lcucumber/runner/HookTestStep;>;", "getBeforeStepHooks", "Ljava/util/Collection<+Lcucumber/runtime/Backend;>;" };
  static const J2ObjcClassInfo _CCBRunner = { "Runner", "cucumber.runner", ptrTable, methods, fields, 7, 0x1, 13, 4, -1, -1, -1, -1, -1 };
  return &_CCBRunner;
}

@end

void CCBRunner_initWithCCBRGlue_withCCBEventBus_withJavaUtilCollection_withCCBRRuntimeOptions_(CCBRunner *self, id<CCBRGlue> glue, CCBEventBus *bus, id<JavaUtilCollection> backends, CCBRRuntimeOptions *runtimeOptions) {
  NSObject_init(self);
  JreStrongAssign(&self->glue_, glue);
  JreStrongAssign(&self->bus_, bus);
  JreStrongAssign(&self->runtimeOptions_, runtimeOptions);
  JreStrongAssign(&self->backends_, backends);
  for (id<CCBRBackend> __strong backend in nil_chk(backends)) {
    [((id<CCBRBackend>) nil_chk(backend)) loadGlueWithCCBRGlue:glue withJavaUtilList:[((CCBRRuntimeOptions *) nil_chk(runtimeOptions)) getGlue]];
  }
}

CCBRunner *new_CCBRunner_initWithCCBRGlue_withCCBEventBus_withJavaUtilCollection_withCCBRRuntimeOptions_(id<CCBRGlue> glue, CCBEventBus *bus, id<JavaUtilCollection> backends, CCBRRuntimeOptions *runtimeOptions) {
  J2OBJC_NEW_IMPL(CCBRunner, initWithCCBRGlue_withCCBEventBus_withJavaUtilCollection_withCCBRRuntimeOptions_, glue, bus, backends, runtimeOptions)
}

CCBRunner *create_CCBRunner_initWithCCBRGlue_withCCBEventBus_withJavaUtilCollection_withCCBRRuntimeOptions_(id<CCBRGlue> glue, CCBEventBus *bus, id<JavaUtilCollection> backends, CCBRRuntimeOptions *runtimeOptions) {
  J2OBJC_CREATE_IMPL(CCBRunner, initWithCCBRGlue_withCCBEventBus_withJavaUtilCollection_withCCBRRuntimeOptions_, glue, bus, backends, runtimeOptions)
}

CCBTestCase *CCBRunner_createTestCaseForPickleWithGHKPickleEvent_(CCBRunner *self, GHKPickleEvent *pickleEvent) {
  id<JavaUtilList> testSteps = create_JavaUtilArrayList_init();
  id<JavaUtilList> beforeHooks = create_JavaUtilArrayList_init();
  id<JavaUtilList> afterHooks = create_JavaUtilArrayList_init();
  if (![((id<JavaUtilList>) nil_chk([((GHKPickle *) nil_chk(((GHKPickleEvent *) nil_chk(pickleEvent))->pickle_)) getSteps])) isEmpty]) {
    CCBRunner_addTestStepsForBeforeHooksWithJavaUtilList_withJavaUtilList_(self, beforeHooks, [pickleEvent->pickle_ getTags]);
    CCBRunner_addTestStepsForPickleStepsWithJavaUtilList_withGHKPickleEvent_(self, testSteps, pickleEvent);
    CCBRunner_addTestStepsForAfterHooksWithJavaUtilList_withJavaUtilList_(self, afterHooks, [pickleEvent->pickle_ getTags]);
  }
  return create_CCBTestCase_initWithJavaUtilList_withJavaUtilList_withJavaUtilList_withGHKPickleEvent_withBoolean_(testSteps, beforeHooks, afterHooks, pickleEvent, [((CCBRRuntimeOptions *) nil_chk(self->runtimeOptions_)) isDryRun]);
}

void CCBRunner_addTestStepsForPickleStepsWithJavaUtilList_withGHKPickleEvent_(CCBRunner *self, id<JavaUtilList> testSteps, GHKPickleEvent *pickleEvent) {
  for (GHKPickleStep * __strong step in nil_chk([((GHKPickle *) nil_chk(((GHKPickleEvent *) nil_chk(pickleEvent))->pickle_)) getSteps])) {
    CCBRPickleStepDefinitionMatch *match;
    @try {
      match = [((id<CCBRGlue>) nil_chk(self->glue_)) stepDefinitionMatchWithNSString:pickleEvent->uri_ withGHKPickleStep:step];
      if (match == nil) {
        id<JavaUtilList> snippets = create_JavaUtilArrayList_init();
        for (id<CCBRBackend> __strong backend in nil_chk(self->backends_)) {
          NSString *snippet = [((id<CCBRBackend>) nil_chk(backend)) getSnippetWithGHKPickleStep:step withNSString:@"**KEYWORD**" withCCBRFunctionNameGenerator:[((CucumberApiSnippetType *) nil_chk([((CCBRRuntimeOptions *) nil_chk(self->runtimeOptions_)) getSnippetType])) getFunctionNameGenerator]];
          if (snippet != nil) {
            [snippets addWithId:snippet];
          }
        }
        if (![snippets isEmpty]) {
          [((CCBEventBus *) nil_chk(self->bus_)) sendWithCucumberApiEventEvent:create_CucumberApiEventSnippetsSuggestedEvent_initWithJavaLangLong_withNSString_withJavaUtilList_withJavaUtilList_([self->bus_ getTime], pickleEvent->uri_, [((GHKPickleStep *) nil_chk(step)) getLocations], snippets)];
        }
        match = create_CCBRUndefinedPickleStepDefinitionMatch_initWithGHKPickleStep_(step);
      }
    }
    @catch (CCBRAmbiguousStepDefinitionsException *e) {
      match = create_CCBRAmbiguousPickleStepDefinitionsMatch_initWithNSString_withGHKPickleStep_withCCBRAmbiguousStepDefinitionsException_(pickleEvent->uri_, step, e);
    }
    @catch (JavaLangThrowable *t) {
      match = create_CCBRFailedPickleStepInstantiationMatch_initWithNSString_withGHKPickleStep_withJavaLangThrowable_(pickleEvent->uri_, step, t);
    }
    id<JavaUtilList> afterStepHookSteps = CCBRunner_getAfterStepHooksWithJavaUtilList_(self, [pickleEvent->pickle_ getTags]);
    id<JavaUtilList> beforeStepHookSteps = CCBRunner_getBeforeStepHooksWithJavaUtilList_(self, [pickleEvent->pickle_ getTags]);
    [((id<JavaUtilList>) nil_chk(testSteps)) addWithId:create_CCBPickleStepTestStep_initWithNSString_withGHKPickleStep_withJavaUtilList_withJavaUtilList_withCCBRPickleStepDefinitionMatch_(pickleEvent->uri_, step, beforeStepHookSteps, afterStepHookSteps, match)];
  }
}

void CCBRunner_addTestStepsForBeforeHooksWithJavaUtilList_withJavaUtilList_(CCBRunner *self, id<JavaUtilList> testSteps, id<JavaUtilList> tags) {
  CCBRunner_addTestStepsForHooksWithJavaUtilList_withJavaUtilList_withJavaUtilList_withCucumberApiHookType_(self, testSteps, tags, [((id<CCBRGlue>) nil_chk(self->glue_)) getBeforeHooks], JreLoadEnum(CucumberApiHookType, Before));
}

void CCBRunner_addTestStepsForAfterHooksWithJavaUtilList_withJavaUtilList_(CCBRunner *self, id<JavaUtilList> testSteps, id<JavaUtilList> tags) {
  CCBRunner_addTestStepsForHooksWithJavaUtilList_withJavaUtilList_withJavaUtilList_withCucumberApiHookType_(self, testSteps, tags, [((id<CCBRGlue>) nil_chk(self->glue_)) getAfterHooks], JreLoadEnum(CucumberApiHookType, After));
}

void CCBRunner_addTestStepsForHooksWithJavaUtilList_withJavaUtilList_withJavaUtilList_withCucumberApiHookType_(CCBRunner *self, id<JavaUtilList> testSteps, id<JavaUtilList> tags, id<JavaUtilList> hooks, CucumberApiHookType *hookType) {
  for (id<CCBRHookDefinition> __strong hook in nil_chk(hooks)) {
    if ([((id<CCBRHookDefinition>) nil_chk(hook)) matchesWithJavaUtilCollection:tags]) {
      CCBHookTestStep *testStep = create_CCBHookTestStep_initWithCucumberApiHookType_withCCBRHookDefinitionMatch_(hookType, create_CCBRHookDefinitionMatch_initWithCCBRHookDefinition_(hook));
      [((id<JavaUtilList>) nil_chk(testSteps)) addWithId:testStep];
    }
  }
}

id<JavaUtilList> CCBRunner_getAfterStepHooksWithJavaUtilList_(CCBRunner *self, id<JavaUtilList> tags) {
  id<JavaUtilList> hookSteps = create_JavaUtilArrayList_init();
  CCBRunner_addTestStepsForHooksWithJavaUtilList_withJavaUtilList_withJavaUtilList_withCucumberApiHookType_(self, hookSteps, tags, [((id<CCBRGlue>) nil_chk(self->glue_)) getAfterStepHooks], JreLoadEnum(CucumberApiHookType, AfterStep));
  return hookSteps;
}

id<JavaUtilList> CCBRunner_getBeforeStepHooksWithJavaUtilList_(CCBRunner *self, id<JavaUtilList> tags) {
  id<JavaUtilList> hookSteps = create_JavaUtilArrayList_init();
  CCBRunner_addTestStepsForHooksWithJavaUtilList_withJavaUtilList_withJavaUtilList_withCucumberApiHookType_(self, hookSteps, tags, [((id<CCBRGlue>) nil_chk(self->glue_)) getBeforeStepHooks], JreLoadEnum(CucumberApiHookType, BeforeStep));
  return hookSteps;
}

void CCBRunner_buildBackendWorlds(CCBRunner *self) {
  [((CCBRRuntimeOptions *) nil_chk(self->runtimeOptions_)) getPlugins];
  for (id<CCBRBackend> __strong backend in nil_chk(self->backends_)) {
    [((id<CCBRBackend>) nil_chk(backend)) buildWorld];
  }
}

void CCBRunner_disposeBackendWorlds(CCBRunner *self) {
  for (id<CCBRBackend> __strong backend in nil_chk(self->backends_)) {
    [((id<CCBRBackend>) nil_chk(backend)) disposeWorld];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBRunner)
