//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runner/TestCase.java
//

#include "J2ObjC_source.h"
#include "cucumber/api/Result.h"
#include "cucumber/api/event/TestCaseFinished.h"
#include "cucumber/api/event/TestCaseStarted.h"
#include "cucumber/runner/EventBus.h"
#include "cucumber/runner/HookTestStep.h"
#include "cucumber/runner/PickleStepTestStep.h"
#include "cucumber/runner/TestCase.h"
#include "cucumber/runtime/ScenarioImpl.h"
#include "gherkin/events/PickleEvent.h"
#include "gherkin/pickles/Pickle.h"
#include "gherkin/pickles/PickleLocation.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface CCBTestCase () {
 @public
  GHKPickleEvent *pickleEvent_;
  id<JavaUtilList> testSteps_;
  jboolean dryRun_;
  id<JavaUtilList> beforeHooks_;
  id<JavaUtilList> afterHooks_;
}

- (NSString *)fileColonLineWithGHKPickleLocation:(GHKPickleLocation *)location;

@end

J2OBJC_FIELD_SETTER(CCBTestCase, pickleEvent_, GHKPickleEvent *)
J2OBJC_FIELD_SETTER(CCBTestCase, testSteps_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CCBTestCase, beforeHooks_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CCBTestCase, afterHooks_, id<JavaUtilList>)

__attribute__((unused)) static NSString *CCBTestCase_fileColonLineWithGHKPickleLocation_(CCBTestCase *self, GHKPickleLocation *location);

@implementation CCBTestCase

- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)testSteps
                              withJavaUtilList:(id<JavaUtilList>)beforeHooks
                              withJavaUtilList:(id<JavaUtilList>)afterHooks
                            withGHKPickleEvent:(GHKPickleEvent *)pickleEvent
                                   withBoolean:(jboolean)dryRun {
  CCBTestCase_initWithJavaUtilList_withJavaUtilList_withJavaUtilList_withGHKPickleEvent_withBoolean_(self, testSteps, beforeHooks, afterHooks, pickleEvent, dryRun);
  return self;
}

- (void)runWithCCBEventBus:(CCBEventBus *)bus {
  jboolean skipNextStep = self->dryRun_;
  JavaLangLong *startTime = [((CCBEventBus *) nil_chk(bus)) getTime];
  [bus sendWithCucumberApiEventEvent:create_CucumberApiEventTestCaseStarted_initWithJavaLangLong_withCucumberApiTestCase_(startTime, self)];
  CCBRScenarioImpl *scenarioResult = create_CCBRScenarioImpl_initWithCCBEventBus_withGHKPickleEvent_(bus, pickleEvent_);
  for (CCBHookTestStep * __strong before in nil_chk(beforeHooks_)) {
    CucumberApiResult *stepResult = [((CCBHookTestStep *) nil_chk(before)) runWithCCBEventBus:bus withNSString:[((GHKPickle *) nil_chk(((GHKPickleEvent *) nil_chk(pickleEvent_))->pickle_)) getLanguage] withCucumberApiScenario:scenarioResult withBoolean:dryRun_];
    skipNextStep |= ![((CucumberApiResult *) nil_chk(stepResult)) isWithCucumberApiResult_Type:JreLoadEnum(CucumberApiResult_Type, PASSED)];
    [scenarioResult addWithCucumberApiResult:stepResult];
  }
  for (CCBPickleStepTestStep * __strong step in nil_chk(testSteps_)) {
    CucumberApiResult *stepResult = [((CCBPickleStepTestStep *) nil_chk(step)) runWithCCBEventBus:bus withNSString:[((GHKPickle *) nil_chk(((GHKPickleEvent *) nil_chk(pickleEvent_))->pickle_)) getLanguage] withCucumberApiScenario:scenarioResult withBoolean:skipNextStep];
    skipNextStep |= ![((CucumberApiResult *) nil_chk(stepResult)) isWithCucumberApiResult_Type:JreLoadEnum(CucumberApiResult_Type, PASSED)];
    [scenarioResult addWithCucumberApiResult:stepResult];
  }
  for (CCBHookTestStep * __strong after in nil_chk(afterHooks_)) {
    CucumberApiResult *stepResult = [((CCBHookTestStep *) nil_chk(after)) runWithCCBEventBus:bus withNSString:[((GHKPickle *) nil_chk(((GHKPickleEvent *) nil_chk(pickleEvent_))->pickle_)) getLanguage] withCucumberApiScenario:scenarioResult withBoolean:dryRun_];
    [scenarioResult addWithCucumberApiResult:stepResult];
  }
  JavaLangLong *stopTime = [bus getTime];
  [bus sendWithCucumberApiEventEvent:create_CucumberApiEventTestCaseFinished_initWithJavaLangLong_withCucumberApiTestCase_withCucumberApiResult_(stopTime, self, create_CucumberApiResult_initWithCucumberApiResult_Type_withJavaLangLong_withJavaLangThrowable_([scenarioResult getStatus], JavaLangLong_valueOfWithLong_([((JavaLangLong *) nil_chk(stopTime)) longLongValue] - [((JavaLangLong *) nil_chk(startTime)) longLongValue]), [scenarioResult getError]))];
}

- (id<JavaUtilList>)getTestSteps {
  id<JavaUtilList> testSteps = create_JavaUtilArrayList_init();
  [testSteps addAllWithJavaUtilCollection:beforeHooks_];
  for (CCBPickleStepTestStep * __strong step in nil_chk(self->testSteps_)) {
    [testSteps addAllWithJavaUtilCollection:[((CCBPickleStepTestStep *) nil_chk(step)) getBeforeStepHookSteps]];
    [testSteps addWithId:step];
    [testSteps addAllWithJavaUtilCollection:[step getAfterStepHookSteps]];
  }
  [testSteps addAllWithJavaUtilCollection:afterHooks_];
  return testSteps;
}

- (NSString *)getName {
  return [((GHKPickle *) nil_chk(((GHKPickleEvent *) nil_chk(pickleEvent_))->pickle_)) getName];
}

- (NSString *)getScenarioDesignation {
  return JreStrcat("$$$", CCBTestCase_fileColonLineWithGHKPickleLocation_(self, [((id<JavaUtilList>) nil_chk([((GHKPickle *) nil_chk(((GHKPickleEvent *) nil_chk(pickleEvent_))->pickle_)) getLocations])) getWithInt:0]), @" # ", [self getName]);
}

- (NSString *)getUri {
  return ((GHKPickleEvent *) nil_chk(pickleEvent_))->uri_;
}

- (jint)getLine {
  return [((GHKPickleLocation *) nil_chk([((id<JavaUtilList>) nil_chk([((GHKPickle *) nil_chk(((GHKPickleEvent *) nil_chk(pickleEvent_))->pickle_)) getLocations])) getWithInt:0])) getLine];
}

- (NSString *)fileColonLineWithGHKPickleLocation:(GHKPickleLocation *)location {
  return CCBTestCase_fileColonLineWithGHKPickleLocation_(self, location);
}

- (id<JavaUtilList>)getTags {
  return [((GHKPickle *) nil_chk(((GHKPickleEvent *) nil_chk(pickleEvent_))->pickle_)) getTags];
}

- (void)dealloc {
  RELEASE_(pickleEvent_);
  RELEASE_(testSteps_);
  RELEASE_(beforeHooks_);
  RELEASE_(afterHooks_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilList:withJavaUtilList:withJavaUtilList:withGHKPickleEvent:withBoolean:);
  methods[1].selector = @selector(runWithCCBEventBus:);
  methods[2].selector = @selector(getTestSteps);
  methods[3].selector = @selector(getName);
  methods[4].selector = @selector(getScenarioDesignation);
  methods[5].selector = @selector(getUri);
  methods[6].selector = @selector(getLine);
  methods[7].selector = @selector(fileColonLineWithGHKPickleLocation:);
  methods[8].selector = @selector(getTags);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pickleEvent_", "LGHKPickleEvent;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "testSteps_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
    { "dryRun_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "beforeHooks_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
    { "afterHooks_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;LJavaUtilList;LJavaUtilList;LGHKPickleEvent;Z", "(Ljava/util/List<Lcucumber/runner/PickleStepTestStep;>;Ljava/util/List<Lcucumber/runner/HookTestStep;>;Ljava/util/List<Lcucumber/runner/HookTestStep;>;Lgherkin/events/PickleEvent;Z)V", "run", "LCCBEventBus;", "()Ljava/util/List<Lcucumber/api/TestStep;>;", "fileColonLine", "LGHKPickleLocation;", "()Ljava/util/List<Lgherkin/pickles/PickleTag;>;", "Ljava/util/List<Lcucumber/runner/PickleStepTestStep;>;", "Ljava/util/List<Lcucumber/runner/HookTestStep;>;" };
  static const J2ObjcClassInfo _CCBTestCase = { "TestCase", "cucumber.runner", ptrTable, methods, fields, 7, 0x0, 9, 5, -1, -1, -1, -1, -1 };
  return &_CCBTestCase;
}

@end

void CCBTestCase_initWithJavaUtilList_withJavaUtilList_withJavaUtilList_withGHKPickleEvent_withBoolean_(CCBTestCase *self, id<JavaUtilList> testSteps, id<JavaUtilList> beforeHooks, id<JavaUtilList> afterHooks, GHKPickleEvent *pickleEvent, jboolean dryRun) {
  NSObject_init(self);
  JreStrongAssign(&self->testSteps_, testSteps);
  JreStrongAssign(&self->beforeHooks_, beforeHooks);
  JreStrongAssign(&self->afterHooks_, afterHooks);
  JreStrongAssign(&self->pickleEvent_, pickleEvent);
  self->dryRun_ = dryRun;
}

CCBTestCase *new_CCBTestCase_initWithJavaUtilList_withJavaUtilList_withJavaUtilList_withGHKPickleEvent_withBoolean_(id<JavaUtilList> testSteps, id<JavaUtilList> beforeHooks, id<JavaUtilList> afterHooks, GHKPickleEvent *pickleEvent, jboolean dryRun) {
  J2OBJC_NEW_IMPL(CCBTestCase, initWithJavaUtilList_withJavaUtilList_withJavaUtilList_withGHKPickleEvent_withBoolean_, testSteps, beforeHooks, afterHooks, pickleEvent, dryRun)
}

CCBTestCase *create_CCBTestCase_initWithJavaUtilList_withJavaUtilList_withJavaUtilList_withGHKPickleEvent_withBoolean_(id<JavaUtilList> testSteps, id<JavaUtilList> beforeHooks, id<JavaUtilList> afterHooks, GHKPickleEvent *pickleEvent, jboolean dryRun) {
  J2OBJC_CREATE_IMPL(CCBTestCase, initWithJavaUtilList_withJavaUtilList_withJavaUtilList_withGHKPickleEvent_withBoolean_, testSteps, beforeHooks, afterHooks, pickleEvent, dryRun)
}

NSString *CCBTestCase_fileColonLineWithGHKPickleLocation_(CCBTestCase *self, GHKPickleLocation *location) {
  return JreStrcat("$CI", ((GHKPickleEvent *) nil_chk(self->pickleEvent_))->uri_, ':', [((GHKPickleLocation *) nil_chk(location)) getLine]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBTestCase)
