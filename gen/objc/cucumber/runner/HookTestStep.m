//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/cucumber/runner/HookTestStep.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "cucumber/api/HookType.h"
#include "cucumber/runner/HookTestStep.h"
#include "cucumber/runner/TestStep.h"
#include "cucumber/runtime/HookDefinitionMatch.h"
#include "gherkin/pickles/PickleStep.h"
#include "java/lang/Deprecated.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/List.h"

@interface CCBHookTestStep () {
 @public
  CucumberApiHookType *hookType_;
}

@end

J2OBJC_FIELD_SETTER(CCBHookTestStep, hookType_, CucumberApiHookType *)

__attribute__((unused)) static IOSObjectArray *CCBHookTestStep__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *CCBHookTestStep__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *CCBHookTestStep__Annotations$2(void);

__attribute__((unused)) static IOSObjectArray *CCBHookTestStep__Annotations$3(void);

__attribute__((unused)) static IOSObjectArray *CCBHookTestStep__Annotations$4(void);

__attribute__((unused)) static IOSObjectArray *CCBHookTestStep__Annotations$5(void);

__attribute__((unused)) static IOSObjectArray *CCBHookTestStep__Annotations$6(void);

__attribute__((unused)) static IOSObjectArray *CCBHookTestStep__Annotations$7(void);

@implementation CCBHookTestStep

- (instancetype __nonnull)initWithCucumberApiHookType:(CucumberApiHookType *)hookType
                          withCCBRHookDefinitionMatch:(CCBRHookDefinitionMatch *)definitionMatch {
  CCBHookTestStep_initWithCucumberApiHookType_withCCBRHookDefinitionMatch_(self, hookType, definitionMatch);
  return self;
}

- (CucumberApiHookType *)getHookType {
  return hookType_;
}

- (jboolean)isHook {
  return true;
}

- (NSString *)getPattern {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (GHKPickleStep *)getPickleStep {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getDefinitionArgument {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getStepArgument {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jint)getStepLine {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (NSString *)getStepLocation {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (NSString *)getStepText {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)dealloc {
  RELEASE_(hookType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LCucumberApiHookType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "LGHKPickleStep;", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 4, 5, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 6, 7, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, 10, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCucumberApiHookType:withCCBRHookDefinitionMatch:);
  methods[1].selector = @selector(getHookType);
  methods[2].selector = @selector(isHook);
  methods[3].selector = @selector(getPattern);
  methods[4].selector = @selector(getPickleStep);
  methods[5].selector = @selector(getDefinitionArgument);
  methods[6].selector = @selector(getStepArgument);
  methods[7].selector = @selector(getStepLine);
  methods[8].selector = @selector(getStepLocation);
  methods[9].selector = @selector(getStepText);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hookType_", "LCucumberApiHookType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LCucumberApiHookType;LCCBRHookDefinitionMatch;", (void *)&CCBHookTestStep__Annotations$0, (void *)&CCBHookTestStep__Annotations$1, (void *)&CCBHookTestStep__Annotations$2, "()Ljava/util/List<Lcucumber/api/Argument;>;", (void *)&CCBHookTestStep__Annotations$3, "()Ljava/util/List<Lgherkin/pickles/Argument;>;", (void *)&CCBHookTestStep__Annotations$4, (void *)&CCBHookTestStep__Annotations$5, (void *)&CCBHookTestStep__Annotations$6, (void *)&CCBHookTestStep__Annotations$7 };
  static const J2ObjcClassInfo _CCBHookTestStep = { "HookTestStep", "cucumber.runner", ptrTable, methods, fields, 7, 0x0, 10, 1, -1, -1, -1, -1, -1 };
  return &_CCBHookTestStep;
}

@end

void CCBHookTestStep_initWithCucumberApiHookType_withCCBRHookDefinitionMatch_(CCBHookTestStep *self, CucumberApiHookType *hookType, CCBRHookDefinitionMatch *definitionMatch) {
  CCBTestStep_initWithCCBRStepDefinitionMatch_(self, definitionMatch);
  JreStrongAssign(&self->hookType_, hookType);
}

CCBHookTestStep *new_CCBHookTestStep_initWithCucumberApiHookType_withCCBRHookDefinitionMatch_(CucumberApiHookType *hookType, CCBRHookDefinitionMatch *definitionMatch) {
  J2OBJC_NEW_IMPL(CCBHookTestStep, initWithCucumberApiHookType_withCCBRHookDefinitionMatch_, hookType, definitionMatch)
}

CCBHookTestStep *create_CCBHookTestStep_initWithCucumberApiHookType_withCCBRHookDefinitionMatch_(CucumberApiHookType *hookType, CCBRHookDefinitionMatch *definitionMatch) {
  J2OBJC_CREATE_IMPL(CCBHookTestStep, initWithCucumberApiHookType_withCCBRHookDefinitionMatch_, hookType, definitionMatch)
}

IOSObjectArray *CCBHookTestStep__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CCBHookTestStep__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CCBHookTestStep__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CCBHookTestStep__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CCBHookTestStep__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CCBHookTestStep__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CCBHookTestStep__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CCBHookTestStep__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CCBHookTestStep)
