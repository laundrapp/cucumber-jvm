//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/io/cucumber/stepexpression/DataTableArgument.java
//

#include "J2ObjC_source.h"
#include "io/cucumber/datatable/DataTable.h"
#include "io/cucumber/stepexpression/DataTableArgument.h"
#include "io/cucumber/stepexpression/RawTableTransformer.h"
#include "java/util/List.h"

@interface IoCucumberStepexpressionDataTableArgument () {
 @public
  id<IoCucumberStepexpressionRawTableTransformer> tableType_;
  id<JavaUtilList> argument_;
}

@end

J2OBJC_FIELD_SETTER(IoCucumberStepexpressionDataTableArgument, tableType_, id<IoCucumberStepexpressionRawTableTransformer>)
J2OBJC_FIELD_SETTER(IoCucumberStepexpressionDataTableArgument, argument_, id<JavaUtilList>)

@implementation IoCucumberStepexpressionDataTableArgument

- (instancetype __nonnull)initWithIoCucumberStepexpressionRawTableTransformer:(id<IoCucumberStepexpressionRawTableTransformer>)tableType
                                                             withJavaUtilList:(id<JavaUtilList>)argument {
  IoCucumberStepexpressionDataTableArgument_initWithIoCucumberStepexpressionRawTableTransformer_withJavaUtilList_(self, tableType, argument);
  return self;
}

- (id)getValue {
  return [((id<IoCucumberStepexpressionRawTableTransformer>) nil_chk(tableType_)) transformWithJavaUtilList:argument_];
}

- (NSString *)getText {
  return [((IoCucumberDatatableDataTable *) nil_chk(IoCucumberDatatableDataTable_createWithJavaUtilList_(argument_))) description];
}

- (NSString *)description {
  return JreStrcat("$$", @"Table:\n", [self getText]);
}

- (void)dealloc {
  RELEASE_(tableType_);
  RELEASE_(argument_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIoCucumberStepexpressionRawTableTransformer:withJavaUtilList:);
  methods[1].selector = @selector(getValue);
  methods[2].selector = @selector(getText);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "tableType_", "LIoCucumberStepexpressionRawTableTransformer;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
    { "argument_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LIoCucumberStepexpressionRawTableTransformer;LJavaUtilList;", "(Lio/cucumber/stepexpression/RawTableTransformer<*>;Ljava/util/List<Ljava/util/List<Ljava/lang/String;>;>;)V", "toString", "Lio/cucumber/stepexpression/RawTableTransformer<*>;", "Ljava/util/List<Ljava/util/List<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _IoCucumberStepexpressionDataTableArgument = { "DataTableArgument", "io.cucumber.stepexpression", ptrTable, methods, fields, 7, 0x11, 4, 2, -1, -1, -1, -1, -1 };
  return &_IoCucumberStepexpressionDataTableArgument;
}

@end

void IoCucumberStepexpressionDataTableArgument_initWithIoCucumberStepexpressionRawTableTransformer_withJavaUtilList_(IoCucumberStepexpressionDataTableArgument *self, id<IoCucumberStepexpressionRawTableTransformer> tableType, id<JavaUtilList> argument) {
  NSObject_init(self);
  JreStrongAssign(&self->tableType_, tableType);
  JreStrongAssign(&self->argument_, argument);
}

IoCucumberStepexpressionDataTableArgument *new_IoCucumberStepexpressionDataTableArgument_initWithIoCucumberStepexpressionRawTableTransformer_withJavaUtilList_(id<IoCucumberStepexpressionRawTableTransformer> tableType, id<JavaUtilList> argument) {
  J2OBJC_NEW_IMPL(IoCucumberStepexpressionDataTableArgument, initWithIoCucumberStepexpressionRawTableTransformer_withJavaUtilList_, tableType, argument)
}

IoCucumberStepexpressionDataTableArgument *create_IoCucumberStepexpressionDataTableArgument_initWithIoCucumberStepexpressionRawTableTransformer_withJavaUtilList_(id<IoCucumberStepexpressionRawTableTransformer> tableType, id<JavaUtilList> argument) {
  J2OBJC_CREATE_IMPL(IoCucumberStepexpressionDataTableArgument, initWithIoCucumberStepexpressionRawTableTransformer_withJavaUtilList_, tableType, argument)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberStepexpressionDataTableArgument)
