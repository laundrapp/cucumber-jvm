//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/io/cucumber/stepexpression/StepExpression.java
//

#include "J2ObjC_source.h"
#include "io/cucumber/cucumberexpressions/Argument.h"
#include "io/cucumber/cucumberexpressions/Expression.h"
#include "io/cucumber/stepexpression/DataTableArgument.h"
#include "io/cucumber/stepexpression/DocStringArgument.h"
#include "io/cucumber/stepexpression/DocStringTransformer.h"
#include "io/cucumber/stepexpression/ExpressionArgument.h"
#include "io/cucumber/stepexpression/RawTableTransformer.h"
#include "io/cucumber/stepexpression/StepExpression.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface IoCucumberStepexpressionStepExpression () {
 @public
  id<IoCucumberCucumberexpressionsExpression> expression_;
  id<IoCucumberStepexpressionDocStringTransformer> docStringType_;
  id<IoCucumberStepexpressionRawTableTransformer> tableType_;
}

+ (id<JavaUtilList>)wrapPlusOneWithJavaUtilList:(id<JavaUtilList>)match;

@end

J2OBJC_FIELD_SETTER(IoCucumberStepexpressionStepExpression, expression_, id<IoCucumberCucumberexpressionsExpression>)
J2OBJC_FIELD_SETTER(IoCucumberStepexpressionStepExpression, docStringType_, id<IoCucumberStepexpressionDocStringTransformer>)
J2OBJC_FIELD_SETTER(IoCucumberStepexpressionStepExpression, tableType_, id<IoCucumberStepexpressionRawTableTransformer>)

__attribute__((unused)) static id<JavaUtilList> IoCucumberStepexpressionStepExpression_wrapPlusOneWithJavaUtilList_(id<JavaUtilList> match);

@implementation IoCucumberStepexpressionStepExpression

- (instancetype __nonnull)initWithIoCucumberCucumberexpressionsExpression:(id<IoCucumberCucumberexpressionsExpression>)expression
                         withIoCucumberStepexpressionDocStringTransformer:(id<IoCucumberStepexpressionDocStringTransformer>)docStringType
                          withIoCucumberStepexpressionRawTableTransformer:(id<IoCucumberStepexpressionRawTableTransformer>)tableType {
  IoCucumberStepexpressionStepExpression_initWithIoCucumberCucumberexpressionsExpression_withIoCucumberStepexpressionDocStringTransformer_withIoCucumberStepexpressionRawTableTransformer_(self, expression, docStringType, tableType);
  return self;
}

- (id<JavaUtilList>)matchWithNSString:(NSString *)text {
  id<JavaUtilList> match = [((id<IoCucumberCucumberexpressionsExpression>) nil_chk(expression_)) matchWithNSString:text];
  if (match == nil) {
    return nil;
  }
  return IoCucumberStepexpressionStepExpression_wrapPlusOneWithJavaUtilList_(match);
}

- (NSString *)getSource {
  return [((id<IoCucumberCucumberexpressionsExpression>) nil_chk(expression_)) getSource];
}

- (id<JavaUtilList>)matchWithNSString:(NSString *)text
                     withJavaUtilList:(id<JavaUtilList>)tableArgument {
  id<JavaUtilList> list = [self matchWithNSString:text];
  if (list == nil) {
    return nil;
  }
  [list addWithId:create_IoCucumberStepexpressionDataTableArgument_initWithIoCucumberStepexpressionRawTableTransformer_withJavaUtilList_(tableType_, tableArgument)];
  return list;
}

- (id<JavaUtilList>)matchWithNSString:(NSString *)text
                         withNSString:(NSString *)docStringArgument {
  id<JavaUtilList> list = [self matchWithNSString:text];
  if (list == nil) {
    return nil;
  }
  [list addWithId:create_IoCucumberStepexpressionDocStringArgument_initWithIoCucumberStepexpressionDocStringTransformer_withNSString_(docStringType_, docStringArgument)];
  return list;
}

+ (id<JavaUtilList>)wrapPlusOneWithJavaUtilList:(id<JavaUtilList>)match {
  return IoCucumberStepexpressionStepExpression_wrapPlusOneWithJavaUtilList_(match);
}

- (void)dealloc {
  RELEASE_(expression_);
  RELEASE_(docStringType_);
  RELEASE_(tableType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 2, 5, -1, 6, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 2, 7, -1, 8, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 9, 10, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIoCucumberCucumberexpressionsExpression:withIoCucumberStepexpressionDocStringTransformer:withIoCucumberStepexpressionRawTableTransformer:);
  methods[1].selector = @selector(matchWithNSString:);
  methods[2].selector = @selector(getSource);
  methods[3].selector = @selector(matchWithNSString:withJavaUtilList:);
  methods[4].selector = @selector(matchWithNSString:withNSString:);
  methods[5].selector = @selector(wrapPlusOneWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "expression_", "LIoCucumberCucumberexpressionsExpression;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "docStringType_", "LIoCucumberStepexpressionDocStringTransformer;", .constantValue.asLong = 0, 0x12, -1, -1, 12, -1 },
    { "tableType_", "LIoCucumberStepexpressionRawTableTransformer;", .constantValue.asLong = 0, 0x12, -1, -1, 13, -1 },
  };
  static const void *ptrTable[] = { "LIoCucumberCucumberexpressionsExpression;LIoCucumberStepexpressionDocStringTransformer;LIoCucumberStepexpressionRawTableTransformer;", "(Lio/cucumber/cucumberexpressions/Expression;Lio/cucumber/stepexpression/DocStringTransformer<*>;Lio/cucumber/stepexpression/RawTableTransformer<*>;)V", "match", "LNSString;", "(Ljava/lang/String;)Ljava/util/List<Lio/cucumber/stepexpression/Argument;>;", "LNSString;LJavaUtilList;", "(Ljava/lang/String;Ljava/util/List<Ljava/util/List<Ljava/lang/String;>;>;)Ljava/util/List<Lio/cucumber/stepexpression/Argument;>;", "LNSString;LNSString;", "(Ljava/lang/String;Ljava/lang/String;)Ljava/util/List<Lio/cucumber/stepexpression/Argument;>;", "wrapPlusOne", "LJavaUtilList;", "(Ljava/util/List<Lio/cucumber/cucumberexpressions/Argument<*>;>;)Ljava/util/List<Lio/cucumber/stepexpression/Argument;>;", "Lio/cucumber/stepexpression/DocStringTransformer<*>;", "Lio/cucumber/stepexpression/RawTableTransformer<*>;" };
  static const J2ObjcClassInfo _IoCucumberStepexpressionStepExpression = { "StepExpression", "io.cucumber.stepexpression", ptrTable, methods, fields, 7, 0x11, 6, 3, -1, -1, -1, -1, -1 };
  return &_IoCucumberStepexpressionStepExpression;
}

@end

void IoCucumberStepexpressionStepExpression_initWithIoCucumberCucumberexpressionsExpression_withIoCucumberStepexpressionDocStringTransformer_withIoCucumberStepexpressionRawTableTransformer_(IoCucumberStepexpressionStepExpression *self, id<IoCucumberCucumberexpressionsExpression> expression, id<IoCucumberStepexpressionDocStringTransformer> docStringType, id<IoCucumberStepexpressionRawTableTransformer> tableType) {
  NSObject_init(self);
  JreStrongAssign(&self->expression_, expression);
  JreStrongAssign(&self->docStringType_, docStringType);
  JreStrongAssign(&self->tableType_, tableType);
}

IoCucumberStepexpressionStepExpression *new_IoCucumberStepexpressionStepExpression_initWithIoCucumberCucumberexpressionsExpression_withIoCucumberStepexpressionDocStringTransformer_withIoCucumberStepexpressionRawTableTransformer_(id<IoCucumberCucumberexpressionsExpression> expression, id<IoCucumberStepexpressionDocStringTransformer> docStringType, id<IoCucumberStepexpressionRawTableTransformer> tableType) {
  J2OBJC_NEW_IMPL(IoCucumberStepexpressionStepExpression, initWithIoCucumberCucumberexpressionsExpression_withIoCucumberStepexpressionDocStringTransformer_withIoCucumberStepexpressionRawTableTransformer_, expression, docStringType, tableType)
}

IoCucumberStepexpressionStepExpression *create_IoCucumberStepexpressionStepExpression_initWithIoCucumberCucumberexpressionsExpression_withIoCucumberStepexpressionDocStringTransformer_withIoCucumberStepexpressionRawTableTransformer_(id<IoCucumberCucumberexpressionsExpression> expression, id<IoCucumberStepexpressionDocStringTransformer> docStringType, id<IoCucumberStepexpressionRawTableTransformer> tableType) {
  J2OBJC_CREATE_IMPL(IoCucumberStepexpressionStepExpression, initWithIoCucumberCucumberexpressionsExpression_withIoCucumberStepexpressionDocStringTransformer_withIoCucumberStepexpressionRawTableTransformer_, expression, docStringType, tableType)
}

id<JavaUtilList> IoCucumberStepexpressionStepExpression_wrapPlusOneWithJavaUtilList_(id<JavaUtilList> match) {
  IoCucumberStepexpressionStepExpression_initialize();
  id<JavaUtilList> copy_ = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(match)) size] + 1);
  for (IoCucumberCucumberexpressionsArgument * __strong argument in match) {
    [copy_ addWithId:create_IoCucumberStepexpressionExpressionArgument_initWithIoCucumberCucumberexpressionsArgument_(argument)];
  }
  return copy_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberStepexpressionStepExpression)
