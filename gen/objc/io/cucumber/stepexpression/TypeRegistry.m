//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/io/cucumber/stepexpression/TypeRegistry.java
//

#include "J2ObjC_source.h"
#include "io/cucumber/cucumberexpressions/ParameterType.h"
#include "io/cucumber/cucumberexpressions/ParameterTypeRegistry.h"
#include "io/cucumber/datatable/DataTableType.h"
#include "io/cucumber/datatable/DataTableTypeRegistry.h"
#include "io/cucumber/stepexpression/TypeRegistry.h"
#include "java/util/Locale.h"

@interface IoCucumberStepexpressionTypeRegistry () {
 @public
  IoCucumberCucumberexpressionsParameterTypeRegistry *parameterTypeRegistry_;
  IoCucumberDatatableDataTableTypeRegistry *dataTableTypeRegistry_;
}

@end

J2OBJC_FIELD_SETTER(IoCucumberStepexpressionTypeRegistry, parameterTypeRegistry_, IoCucumberCucumberexpressionsParameterTypeRegistry *)
J2OBJC_FIELD_SETTER(IoCucumberStepexpressionTypeRegistry, dataTableTypeRegistry_, IoCucumberDatatableDataTableTypeRegistry *)

@implementation IoCucumberStepexpressionTypeRegistry

- (instancetype __nonnull)initWithJavaUtilLocale:(JavaUtilLocale *)locale {
  IoCucumberStepexpressionTypeRegistry_initWithJavaUtilLocale_(self, locale);
  return self;
}

- (IoCucumberCucumberexpressionsParameterTypeRegistry *)parameterTypeRegistry {
  return parameterTypeRegistry_;
}

- (IoCucumberDatatableDataTableTypeRegistry *)dataTableTypeRegistry {
  return dataTableTypeRegistry_;
}

- (void)defineParameterTypeWithIoCucumberCucumberexpressionsParameterType:(IoCucumberCucumberexpressionsParameterType *)parameterType {
  [((IoCucumberCucumberexpressionsParameterTypeRegistry *) nil_chk(parameterTypeRegistry_)) defineParameterTypeWithIoCucumberCucumberexpressionsParameterType:parameterType];
}

- (void)defineDataTableTypeWithIoCucumberDatatableDataTableType:(IoCucumberDatatableDataTableType *)tableType {
  [((IoCucumberDatatableDataTableTypeRegistry *) nil_chk(dataTableTypeRegistry_)) defineDataTableTypeWithIoCucumberDatatableDataTableType:tableType];
}

- (void)dealloc {
  RELEASE_(parameterTypeRegistry_);
  RELEASE_(dataTableTypeRegistry_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LIoCucumberCucumberexpressionsParameterTypeRegistry;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIoCucumberDatatableDataTableTypeRegistry;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilLocale:);
  methods[1].selector = @selector(parameterTypeRegistry);
  methods[2].selector = @selector(dataTableTypeRegistry);
  methods[3].selector = @selector(defineParameterTypeWithIoCucumberCucumberexpressionsParameterType:);
  methods[4].selector = @selector(defineDataTableTypeWithIoCucumberDatatableDataTableType:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parameterTypeRegistry_", "LIoCucumberCucumberexpressionsParameterTypeRegistry;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "dataTableTypeRegistry_", "LIoCucumberDatatableDataTableTypeRegistry;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilLocale;", "defineParameterType", "LIoCucumberCucumberexpressionsParameterType;", "(Lio/cucumber/cucumberexpressions/ParameterType<*>;)V", "defineDataTableType", "LIoCucumberDatatableDataTableType;" };
  static const J2ObjcClassInfo _IoCucumberStepexpressionTypeRegistry = { "TypeRegistry", "io.cucumber.stepexpression", ptrTable, methods, fields, 7, 0x11, 5, 2, -1, -1, -1, -1, -1 };
  return &_IoCucumberStepexpressionTypeRegistry;
}

@end

void IoCucumberStepexpressionTypeRegistry_initWithJavaUtilLocale_(IoCucumberStepexpressionTypeRegistry *self, JavaUtilLocale *locale) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->parameterTypeRegistry_, new_IoCucumberCucumberexpressionsParameterTypeRegistry_initWithJavaUtilLocale_(locale));
  JreStrongAssignAndConsume(&self->dataTableTypeRegistry_, new_IoCucumberDatatableDataTableTypeRegistry_initWithJavaUtilLocale_(locale));
}

IoCucumberStepexpressionTypeRegistry *new_IoCucumberStepexpressionTypeRegistry_initWithJavaUtilLocale_(JavaUtilLocale *locale) {
  J2OBJC_NEW_IMPL(IoCucumberStepexpressionTypeRegistry, initWithJavaUtilLocale_, locale)
}

IoCucumberStepexpressionTypeRegistry *create_IoCucumberStepexpressionTypeRegistry_initWithJavaUtilLocale_(JavaUtilLocale *locale) {
  J2OBJC_CREATE_IMPL(IoCucumberStepexpressionTypeRegistry, initWithJavaUtilLocale_, locale)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberStepexpressionTypeRegistry)
