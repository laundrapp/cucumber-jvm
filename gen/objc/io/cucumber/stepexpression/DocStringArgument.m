//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/io/cucumber/stepexpression/DocStringArgument.java
//

#include "J2ObjC_source.h"
#include "io/cucumber/stepexpression/DocStringArgument.h"
#include "io/cucumber/stepexpression/DocStringTransformer.h"

@interface IoCucumberStepexpressionDocStringArgument () {
 @public
  id<IoCucumberStepexpressionDocStringTransformer> docStringType_;
  NSString *argument_;
}

@end

J2OBJC_FIELD_SETTER(IoCucumberStepexpressionDocStringArgument, docStringType_, id<IoCucumberStepexpressionDocStringTransformer>)
J2OBJC_FIELD_SETTER(IoCucumberStepexpressionDocStringArgument, argument_, NSString *)

@implementation IoCucumberStepexpressionDocStringArgument

- (instancetype __nonnull)initWithIoCucumberStepexpressionDocStringTransformer:(id<IoCucumberStepexpressionDocStringTransformer>)docStringType
                                                                  withNSString:(NSString *)argument {
  IoCucumberStepexpressionDocStringArgument_initWithIoCucumberStepexpressionDocStringTransformer_withNSString_(self, docStringType, argument);
  return self;
}

- (id)getValue {
  return [((id<IoCucumberStepexpressionDocStringTransformer>) nil_chk(docStringType_)) transformWithNSString:argument_];
}

- (NSString *)description {
  return JreStrcat("$$", @"DocString: ", argument_);
}

- (void)dealloc {
  RELEASE_(docStringType_);
  RELEASE_(argument_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIoCucumberStepexpressionDocStringTransformer:withNSString:);
  methods[1].selector = @selector(getValue);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "docStringType_", "LIoCucumberStepexpressionDocStringTransformer;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
    { "argument_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoCucumberStepexpressionDocStringTransformer;LNSString;", "(Lio/cucumber/stepexpression/DocStringTransformer<*>;Ljava/lang/String;)V", "toString", "Lio/cucumber/stepexpression/DocStringTransformer<*>;" };
  static const J2ObjcClassInfo _IoCucumberStepexpressionDocStringArgument = { "DocStringArgument", "io.cucumber.stepexpression", ptrTable, methods, fields, 7, 0x11, 3, 2, -1, -1, -1, -1, -1 };
  return &_IoCucumberStepexpressionDocStringArgument;
}

@end

void IoCucumberStepexpressionDocStringArgument_initWithIoCucumberStepexpressionDocStringTransformer_withNSString_(IoCucumberStepexpressionDocStringArgument *self, id<IoCucumberStepexpressionDocStringTransformer> docStringType, NSString *argument) {
  NSObject_init(self);
  JreStrongAssign(&self->docStringType_, docStringType);
  JreStrongAssign(&self->argument_, argument);
}

IoCucumberStepexpressionDocStringArgument *new_IoCucumberStepexpressionDocStringArgument_initWithIoCucumberStepexpressionDocStringTransformer_withNSString_(id<IoCucumberStepexpressionDocStringTransformer> docStringType, NSString *argument) {
  J2OBJC_NEW_IMPL(IoCucumberStepexpressionDocStringArgument, initWithIoCucumberStepexpressionDocStringTransformer_withNSString_, docStringType, argument)
}

IoCucumberStepexpressionDocStringArgument *create_IoCucumberStepexpressionDocStringArgument_initWithIoCucumberStepexpressionDocStringTransformer_withNSString_(id<IoCucumberStepexpressionDocStringTransformer> docStringType, NSString *argument) {
  J2OBJC_CREATE_IMPL(IoCucumberStepexpressionDocStringArgument, initWithIoCucumberStepexpressionDocStringTransformer_withNSString_, docStringType, argument)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberStepexpressionDocStringArgument)
