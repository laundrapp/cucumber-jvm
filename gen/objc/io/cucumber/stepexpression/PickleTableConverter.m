//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/io/cucumber/stepexpression/PickleTableConverter.java
//

#include "J2ObjC_source.h"
#include "gherkin/pickles/PickleCell.h"
#include "gherkin/pickles/PickleRow.h"
#include "gherkin/pickles/PickleTable.h"
#include "io/cucumber/stepexpression/PickleTableConverter.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@implementation IoCucumberStepexpressionPickleTableConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  IoCucumberStepexpressionPickleTableConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<JavaUtilList>)toTableWithGHKPickleTable:(GHKPickleTable *)pickleTable {
  return IoCucumberStepexpressionPickleTableConverter_toTableWithGHKPickleTable_(pickleTable);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x8, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(toTableWithGHKPickleTable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "toTable", "LGHKPickleTable;", "(Lgherkin/pickles/PickleTable;)Ljava/util/List<Ljava/util/List<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _IoCucumberStepexpressionPickleTableConverter = { "PickleTableConverter", "io.cucumber.stepexpression", ptrTable, methods, NULL, 7, 0x0, 2, 0, -1, -1, -1, -1, -1 };
  return &_IoCucumberStepexpressionPickleTableConverter;
}

@end

void IoCucumberStepexpressionPickleTableConverter_init(IoCucumberStepexpressionPickleTableConverter *self) {
  NSObject_init(self);
}

IoCucumberStepexpressionPickleTableConverter *new_IoCucumberStepexpressionPickleTableConverter_init() {
  J2OBJC_NEW_IMPL(IoCucumberStepexpressionPickleTableConverter, init)
}

IoCucumberStepexpressionPickleTableConverter *create_IoCucumberStepexpressionPickleTableConverter_init() {
  J2OBJC_CREATE_IMPL(IoCucumberStepexpressionPickleTableConverter, init)
}

id<JavaUtilList> IoCucumberStepexpressionPickleTableConverter_toTableWithGHKPickleTable_(GHKPickleTable *pickleTable) {
  IoCucumberStepexpressionPickleTableConverter_initialize();
  id<JavaUtilList> table = create_JavaUtilArrayList_init();
  for (GHKPickleRow * __strong pickleRow in nil_chk([((GHKPickleTable *) nil_chk(pickleTable)) getRows])) {
    id<JavaUtilList> row = create_JavaUtilArrayList_init();
    for (GHKPickleCell * __strong pickleCell in nil_chk([((GHKPickleRow *) nil_chk(pickleRow)) getCells])) {
      [row addWithId:[((GHKPickleCell *) nil_chk(pickleCell)) getValue]];
    }
    [table addWithId:row];
  }
  return table;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberStepexpressionPickleTableConverter)
