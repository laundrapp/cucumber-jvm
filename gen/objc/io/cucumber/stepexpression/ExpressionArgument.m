//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/io/cucumber/stepexpression/ExpressionArgument.java
//

#include "J2ObjC_source.h"
#include "io/cucumber/cucumberexpressions/Argument.h"
#include "io/cucumber/cucumberexpressions/Group.h"
#include "io/cucumber/stepexpression/ExpressionArgument.h"

@interface IoCucumberStepexpressionExpressionArgument () {
 @public
  IoCucumberCucumberexpressionsArgument *argument_;
}

@end

J2OBJC_FIELD_SETTER(IoCucumberStepexpressionExpressionArgument, argument_, IoCucumberCucumberexpressionsArgument *)

@implementation IoCucumberStepexpressionExpressionArgument

- (instancetype __nonnull)initWithIoCucumberCucumberexpressionsArgument:(IoCucumberCucumberexpressionsArgument *)argument {
  IoCucumberStepexpressionExpressionArgument_initWithIoCucumberCucumberexpressionsArgument_(self, argument);
  return self;
}

- (id)getValue {
  return [((IoCucumberCucumberexpressionsArgument *) nil_chk(argument_)) getValue];
}

- (IoCucumberCucumberexpressionsGroup *)getGroup {
  return [((IoCucumberCucumberexpressionsArgument *) nil_chk(argument_)) getGroup];
}

- (NSString *)description {
  return [((IoCucumberCucumberexpressionsArgument *) nil_chk(argument_)) getGroup] == nil ? nil : [((IoCucumberCucumberexpressionsGroup *) nil_chk([argument_ getGroup])) getValue];
}

- (void)dealloc {
  RELEASE_(argument_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIoCucumberCucumberexpressionsGroup;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIoCucumberCucumberexpressionsArgument:);
  methods[1].selector = @selector(getValue);
  methods[2].selector = @selector(getGroup);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "argument_", "LIoCucumberCucumberexpressionsArgument;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LIoCucumberCucumberexpressionsArgument;", "(Lio/cucumber/cucumberexpressions/Argument<*>;)V", "toString", "Lio/cucumber/cucumberexpressions/Argument<*>;" };
  static const J2ObjcClassInfo _IoCucumberStepexpressionExpressionArgument = { "ExpressionArgument", "io.cucumber.stepexpression", ptrTable, methods, fields, 7, 0x11, 4, 1, -1, -1, -1, -1, -1 };
  return &_IoCucumberStepexpressionExpressionArgument;
}

@end

void IoCucumberStepexpressionExpressionArgument_initWithIoCucumberCucumberexpressionsArgument_(IoCucumberStepexpressionExpressionArgument *self, IoCucumberCucumberexpressionsArgument *argument) {
  NSObject_init(self);
  JreStrongAssign(&self->argument_, argument);
}

IoCucumberStepexpressionExpressionArgument *new_IoCucumberStepexpressionExpressionArgument_initWithIoCucumberCucumberexpressionsArgument_(IoCucumberCucumberexpressionsArgument *argument) {
  J2OBJC_NEW_IMPL(IoCucumberStepexpressionExpressionArgument, initWithIoCucumberCucumberexpressionsArgument_, argument)
}

IoCucumberStepexpressionExpressionArgument *create_IoCucumberStepexpressionExpressionArgument_initWithIoCucumberCucumberexpressionsArgument_(IoCucumberCucumberexpressionsArgument *argument) {
  J2OBJC_CREATE_IMPL(IoCucumberStepexpressionExpressionArgument, initWithIoCucumberCucumberexpressionsArgument_, argument)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberStepexpressionExpressionArgument)
