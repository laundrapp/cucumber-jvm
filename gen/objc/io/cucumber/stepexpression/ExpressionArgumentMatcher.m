//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber-jvm/core/src/main/java/io/cucumber/stepexpression/ExpressionArgumentMatcher.java
//

#include "J2ObjC_source.h"
#include "gherkin/pickles/Argument.h"
#include "gherkin/pickles/PickleStep.h"
#include "gherkin/pickles/PickleString.h"
#include "gherkin/pickles/PickleTable.h"
#include "io/cucumber/stepexpression/ExpressionArgumentMatcher.h"
#include "io/cucumber/stepexpression/PickleTableConverter.h"
#include "io/cucumber/stepexpression/StepExpression.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/List.h"

@interface IoCucumberStepexpressionExpressionArgumentMatcher () {
 @public
  IoCucumberStepexpressionStepExpression *expression_;
}

@end

J2OBJC_FIELD_SETTER(IoCucumberStepexpressionExpressionArgumentMatcher, expression_, IoCucumberStepexpressionStepExpression *)

@implementation IoCucumberStepexpressionExpressionArgumentMatcher

- (instancetype __nonnull)initWithIoCucumberStepexpressionStepExpression:(IoCucumberStepexpressionStepExpression *)expression {
  IoCucumberStepexpressionExpressionArgumentMatcher_initWithIoCucumberStepexpressionStepExpression_(self, expression);
  return self;
}

- (id<JavaUtilList>)argumentsFromWithGHKPickleStep:(GHKPickleStep *)step {
  if ([((id<JavaUtilList>) nil_chk([((GHKPickleStep *) nil_chk(step)) getArgument])) isEmpty]) {
    return [((IoCucumberStepexpressionStepExpression *) nil_chk(expression_)) matchWithNSString:[step getText]];
  }
  id<GHKArgument> argument = [((id<JavaUtilList>) nil_chk([step getArgument])) getWithInt:0];
  if ([argument isKindOfClass:[GHKPickleString class]]) {
    return [((IoCucumberStepexpressionStepExpression *) nil_chk(expression_)) matchWithNSString:[step getText] withNSString:[((GHKPickleString *) nil_chk(((GHKPickleString *) cast_chk(argument, [GHKPickleString class])))) getContent]];
  }
  if ([argument isKindOfClass:[GHKPickleTable class]]) {
    return [((IoCucumberStepexpressionStepExpression *) nil_chk(expression_)) matchWithNSString:[step getText] withJavaUtilList:IoCucumberStepexpressionPickleTableConverter_toTableWithGHKPickleTable_((GHKPickleTable *) cast_chk(argument, [GHKPickleTable class]))];
  }
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"Argument was neither PickleString nor PickleTable");
}

- (void)dealloc {
  RELEASE_(expression_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIoCucumberStepexpressionStepExpression:);
  methods[1].selector = @selector(argumentsFromWithGHKPickleStep:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "expression_", "LIoCucumberStepexpressionStepExpression;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoCucumberStepexpressionStepExpression;", "argumentsFrom", "LGHKPickleStep;", "(Lgherkin/pickles/PickleStep;)Ljava/util/List<Lio/cucumber/stepexpression/Argument;>;" };
  static const J2ObjcClassInfo _IoCucumberStepexpressionExpressionArgumentMatcher = { "ExpressionArgumentMatcher", "io.cucumber.stepexpression", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_IoCucumberStepexpressionExpressionArgumentMatcher;
}

@end

void IoCucumberStepexpressionExpressionArgumentMatcher_initWithIoCucumberStepexpressionStepExpression_(IoCucumberStepexpressionExpressionArgumentMatcher *self, IoCucumberStepexpressionStepExpression *expression) {
  NSObject_init(self);
  JreStrongAssign(&self->expression_, expression);
}

IoCucumberStepexpressionExpressionArgumentMatcher *new_IoCucumberStepexpressionExpressionArgumentMatcher_initWithIoCucumberStepexpressionStepExpression_(IoCucumberStepexpressionStepExpression *expression) {
  J2OBJC_NEW_IMPL(IoCucumberStepexpressionExpressionArgumentMatcher, initWithIoCucumberStepexpressionStepExpression_, expression)
}

IoCucumberStepexpressionExpressionArgumentMatcher *create_IoCucumberStepexpressionExpressionArgumentMatcher_initWithIoCucumberStepexpressionStepExpression_(IoCucumberStepexpressionStepExpression *expression) {
  J2OBJC_CREATE_IMPL(IoCucumberStepexpressionExpressionArgumentMatcher, initWithIoCucumberStepexpressionStepExpression_, expression)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberStepexpressionExpressionArgumentMatcher)
